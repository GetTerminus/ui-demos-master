{"version":3,"sources":["webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/cohort-date-range/fesm2015/terminus-ui-cohort-date-range.js","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/cohort-date-range/terminus-ui-cohort-date-range.d.ts.TsCohortDateRangeComponent.html","webpack:///src/app/components/cohort-date-range/cohort-date-range-routing.module.ts","webpack:///src/app/components/cohort-date-range/cohort-date-range.component.html","webpack:///src/app/components/cohort-date-range/cohort-date-range.component.ts","webpack:///src/app/components/cohort-date-range/cohort-date-range.module.ts"],"names":["TsCohortDateRangeChanged","start","end","source","nextUniqueId","TsCohortDateRangeComponent","formBuilder","customDateCohort","display","range","formGroup","group","dateRange","startDate","endDate","cohort","uid","_allowCustomDates","_id","isDisabled","cohortDateRangeChanged","updateSelectOnRangeChange","event","emit","setDateRangeValues","value","index","newValues","dateRangeFormGroup","setValue","cohortDateRangeChange","_a","get","valueChanges","pipe","subscribe","results","cohorts","length","resultsStartTime","getTime","resultsEndTime","matchedCohorts","filter","cohortStartTime","cohortEndTime","cohortStartMatches","cohortEndMatches","cohortControl","originalCohorts","_cohorts","slice","allowCustomDates","push","activeCohort","c","active","ctorParameters","type","prototype","Boolean","Array","String","Date","Object","selector","template","host","changeDetection","OnPush","encapsulation","None","exportAs","styles","TsCohortDateRangeModule","imports","exports","declarations","routes","path","component","CohortDateRangeRoutingModule","currentDate","CohortDateRangeComponent","myForm","required","constraintForm","startDateRange","endDateRange","lastRange","CohortDateRangeModule"],"mappings":"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","file":"cohort-date-range-cohort-date-range-module-ngfactory-es5.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, ViewChild, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormControl, FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { TsDateRangeModule } from '@terminus/ui-date-range';\nimport { TsOptionModule } from '@terminus/ui-option';\nimport { TsSelectionListComponent, TsSelectionListModule } from '@terminus/ui-selection-list';\nimport { coerceDateProperty } from '@terminus/ngx-tools/coercion';\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\n\n/**\n * Event object emitted by {@link TsCohortDateRangeComponent} when there is date range change\n */\nclass TsCohortDateRangeChanged {\n    constructor(start, end, source) {\n        this.start = start;\n        this.end = end;\n        this.source = source;\n    }\n}\n// Unique ID for each instance\nlet nextUniqueId = 0;\n/**\n * This is the cohort-date-range UI Component\n *\n *\n * @example\n * <ts-cohort-date-range\n *              [allowCustomDates]=\"true\"\n *              [cohorts]=\"myCohorts\"\n *              endMaxDate=\"{{ new Date(2017, 4, 30) }}\"\n *              endMinDate=\"{{ new Date(2017, 4, 1) }}\"\n *              id=\"myID\"\n *              startMaxDate=\"{{ new Date(2017, 4, 30) }}\"\n *              startMinDate=\"{{ new Date(2017, 4, 1) }}\"\n *              (cohortDateRangeChange)=\"myFunc($event)\"\n * ></ts-cohort-date-range>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/cohort-date-range</example-url>\n */\nlet TsCohortDateRangeComponent = class TsCohortDateRangeComponent {\n    constructor(formBuilder) {\n        this.formBuilder = formBuilder;\n        /**\n         * Define the custom date cohort\n         *\n         * @internal\n         */\n        this.customDateCohort = {\n            display: 'Custom Dates',\n            range: {\n                start: '',\n                end: '',\n            },\n        };\n        /**\n         * Initialize the date range with empty start and end date\n         *\n         * @internal\n         */\n        this.formGroup = this.formBuilder.group({\n            dateRange: this.formBuilder.group({\n                startDate: [''],\n                endDate: [''],\n            }),\n            cohort: new FormControl([]),\n        });\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-cohort-date-range-${nextUniqueId++}`;\n        this._allowCustomDates = true;\n        this._id = this.uid;\n        /**\n         * Disable the component\n         */\n        this.isDisabled = false;\n        /**\n         * Cohort change event emitter\n         */\n        this.cohortDateRangeChanged = new EventEmitter();\n    }\n    /**\n     * Get reference to the date range form group\n     *\n     * @internal\n     */\n    get dateRangeFormGroup() {\n        return this.formGroup.get('dateRange');\n    }\n    /**\n     * Get a reference to the cohort form control\n     *\n     * @internal\n     */\n    get cohortControl() {\n        return this.formGroup.get('cohort');\n    }\n    /**\n     * Define whether custom dates are allowed\n     *\n     * @param value\n     */\n    set allowCustomDates(value) {\n        this._allowCustomDates = value;\n        // If this flag is being toggled, set the original cohorts again which will add or remove the custom cohort option as needed.\n        this.cohorts = this.originalCohorts;\n    }\n    get allowCustomDates() {\n        return this._allowCustomDates;\n    }\n    /**\n     * Define the array of date cohorts\n     *\n     * @param value\n     */\n    set cohorts(value) {\n        if (!value) {\n            return;\n        }\n        this.originalCohorts = value;\n        this._cohorts = value.slice();\n        if (this.allowCustomDates) {\n            this._cohorts.push(this.customDateCohort);\n        }\n        const activeCohort = value.filter(c => c.active);\n        if (activeCohort.length) {\n            this.cohortControl.setValue(activeCohort);\n            this.setDateRangeValues(activeCohort[0].range);\n        }\n    }\n    get cohorts() {\n        return this._cohorts;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    ngOnInit() {\n        this.updateSelectOnRangeChange();\n    }\n    /**\n     * Needed for untilComponentDestroyed\n     */\n    ngOnDestroy() { }\n    /**\n     * Emit the change event\n     *\n     * @internal\n     * @param event - triggered by date range change\n     */\n    cohortDateRangeChange(event) {\n        this.cohortDateRangeChanged.emit(new TsCohortDateRangeChanged(event.start, event.end, this));\n    }\n    /**\n     * Called when selection changed\n     *\n     * @internal\n     * @param event - TsSelectChangeEvent\n     */\n    selectionChange(event) {\n        this.setDateRangeValues(event.value[0].range);\n    }\n    /**\n     * Function for tracking for-loops changes\n     *\n     * @internal\n     * @param index - The item index\n     * @returns The index\n     */\n    trackByFn(index) {\n        return index;\n    }\n    /**\n     * The display formatter for {@link TsSelectionListComponent}\n     *\n     * @param cohort - The cohort\n     * @returns The display value for the cohort\n     */\n    formatter(cohort) {\n        return cohort.display;\n    }\n    /**\n     * Update the date range form values\n     *\n     * @param range - The new range\n     */\n    setDateRangeValues(range) {\n        const newValues = {\n            startDate: range.start,\n            endDate: range.end,\n        };\n        // istanbul ignore else\n        if (newValues.startDate && newValues.endDate) {\n            this.dateRangeFormGroup.setValue(newValues);\n            this.cohortDateRangeChange(range);\n        }\n    }\n    /**\n     * Update the select when the date is manually changed to not match a cohort\n     */\n    updateSelectOnRangeChange() {\n        var _a;\n        // eslint-disable-next-line deprecation/deprecation\n        (_a = this.formGroup.get('dateRange')) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(untilComponentDestroyed(this)).subscribe(results => {\n            if (!this.cohorts || !this.cohorts.length) {\n                return;\n            }\n            const resultsStartTime = coerceDateProperty(results.startDate).getTime();\n            const resultsEndTime = coerceDateProperty(results.endDate).getTime();\n            const matchedCohorts = this.cohorts.filter(cohort => {\n                const cohortStartTime = coerceDateProperty(cohort.range.start).getTime();\n                const cohortEndTime = coerceDateProperty(cohort.range.end).getTime();\n                const cohortStartMatches = resultsStartTime === cohortStartTime;\n                const cohortEndMatches = resultsEndTime === cohortEndTime;\n                // istanbul ignore else\n                if (cohortStartMatches && cohortEndMatches) {\n                    return cohort;\n                }\n            });\n            // istanbul ignore else\n            if (matchedCohorts.length === 0) {\n                this.cohortControl.setValue([this.customDateCohort]);\n            }\n        });\n    }\n};\nTsCohortDateRangeComponent.ctorParameters = () => [\n    { type: FormBuilder }\n];\n__decorate([\n    ViewChild(TsSelectionListComponent, { static: true }),\n    __metadata(\"design:type\", TsSelectionListComponent)\n], TsCohortDateRangeComponent.prototype, \"selectionListComponent\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsCohortDateRangeComponent.prototype, \"allowCustomDates\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array),\n    __metadata(\"design:paramtypes\", [Array])\n], TsCohortDateRangeComponent.prototype, \"cohorts\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsCohortDateRangeComponent.prototype, \"dateLocale\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Date)\n], TsCohortDateRangeComponent.prototype, \"endMaxDate\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Date)\n], TsCohortDateRangeComponent.prototype, \"endMinDate\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsCohortDateRangeComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsCohortDateRangeComponent.prototype, \"isDisabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Date)\n], TsCohortDateRangeComponent.prototype, \"startMaxDate\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Date)\n], TsCohortDateRangeComponent.prototype, \"startMinDate\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsCohortDateRangeComponent.prototype, \"cohortDateRangeChanged\", void 0);\nTsCohortDateRangeComponent = __decorate([\n    Component({\n        selector: 'ts-cohort-date-range',\n        template: \"<ts-date-range\\n  class=\\\"ts-cohort-date-range__date-range\\\"\\n  [dateFormGroup]=\\\"dateRangeFormGroup\\\"\\n  [dateLocale]=\\\"dateLocale\\\"\\n  [isDisabled]=\\\"!allowCustomDates || isDisabled\\\"\\n  (dateRangeChange)=\\\"cohortDateRangeChange($event)\\\"\\n  [startMinDate]=\\\"startMinDate\\\"\\n  [startMaxDate]=\\\"startMaxDate\\\"\\n  [endMinDate]=\\\"endMinDate\\\"\\n  [endMaxDate]=\\\"endMaxDate\\\"\\n></ts-date-range>\\n\\n<ts-selection-list\\n  label=\\\"Select a date range\\\"\\n  class=\\\"ts-cohort-date-range__select\\\"\\n  [isDisabled]=\\\"isDisabled\\\"\\n  [allowUserInput]=\\\"false\\\"\\n  [formControl]=\\\"cohortControl\\\"\\n  [displayFormatter]=\\\"formatter\\\"\\n  (selectionChange)=\\\"selectionChange($event)\\\"\\n>\\n  <ts-option\\n    [value]=\\\"option\\\"\\n    [option]=\\\"option\\\"\\n    *ngFor=\\\"let option of cohorts; trackBy: trackByFn\\\"\\n  >\\n    {{ option.display }}\\n  </ts-option>\\n</ts-selection-list>\\n\",\n        host: {\n            'class': 'ts-cohort-date-range',\n            '[class.ts-cohort-date-range--disabled]': 'isDisabled',\n            '[attr.disabled]': 'isDisabled',\n            '[attr.aria-disabled]': 'isDisabled',\n            '[id]': 'id',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsCohortDateRange',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-cohort-date-range{--cohort-selection-list-minWidth:200px;display:block}.ts-cohort-date-range .ts-selection-list.ts-cohort-date-range__select{display:inline-block;min-width:var(--cohort-selection-list-minWidth)}.ts-date-range.ts-cohort-date-range__date-range{display:inline-block;margin-right:24px}\"]\n    }),\n    __metadata(\"design:paramtypes\", [FormBuilder])\n], TsCohortDateRangeComponent);\n\nlet TsCohortDateRangeModule = class TsCohortDateRangeModule {\n};\nTsCohortDateRangeModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            ReactiveFormsModule,\n            TsDateRangeModule,\n            TsOptionModule,\n            TsSelectionListModule,\n        ],\n        exports: [TsCohortDateRangeComponent],\n        declarations: [TsCohortDateRangeComponent],\n    })\n], TsCohortDateRangeModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsCohortDateRangeChanged, TsCohortDateRangeComponent, TsCohortDateRangeModule };\n//# sourceMappingURL=terminus-ui-cohort-date-range.js.map\n","<ts-date-range\n  class=\"ts-cohort-date-range__date-range\"\n  [dateFormGroup]=\"dateRangeFormGroup\"\n  [dateLocale]=\"dateLocale\"\n  [isDisabled]=\"!allowCustomDates || isDisabled\"\n  (dateRangeChange)=\"cohortDateRangeChange($event)\"\n  [startMinDate]=\"startMinDate\"\n  [startMaxDate]=\"startMaxDate\"\n  [endMinDate]=\"endMinDate\"\n  [endMaxDate]=\"endMaxDate\"\n></ts-date-range>\n\n<ts-selection-list\n  label=\"Select a date range\"\n  class=\"ts-cohort-date-range__select\"\n  [isDisabled]=\"isDisabled\"\n  [allowUserInput]=\"false\"\n  [formControl]=\"cohortControl\"\n  [displayFormatter]=\"formatter\"\n  (selectionChange)=\"selectionChange($event)\"\n>\n  <ts-option\n    [value]=\"option\"\n    [option]=\"option\"\n    *ngFor=\"let option of cohorts; trackBy: trackByFn\"\n  >\n    {{ option.display }}\n  </ts-option>\n</ts-selection-list>\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { CohortDateRangeComponent } from './cohort-date-range.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CohortDateRangeComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CohortDateRangeRoutingModule { }\n","<ts-card tsVerticalSpacing>\n  <h3 tsCardTitle tsVerticalSpacing>Demo Controls</h3>\n\n  <div>\n    <div tsVerticalSpacing>Start date minimum and maximum</div>\n    <form [formGroup]=\"constraintForm\" novalidate>\n      <ts-date-range\n        [dateFormGroup]=\"constraintForm.get('startDateRange')\"\n      ></ts-date-range>\n\n      <div tsVerticalSpacing>End date minimum and maximum</div>\n      <ts-date-range\n        [dateFormGroup]=\"constraintForm.get('endDateRange')\"\n      ></ts-date-range>\n    </form>\n  </div>\n</ts-card>\n\n<ts-card>\n  <form [formGroup]=\"myForm\" novalidate>\n    <ts-cohort-date-range\n      [cohorts]=\"cohorts\"\n      [allowCustomDates]=\"true\"\n      (cohortDateRangeChanged)=\"printRange($event)\"\n      [isDisabled]=\"false\"\n      [startMinDate]=\"constraintForm.get('startDateRange')?.get('startDate')?.value\"\n      [startMaxDate]=\"constraintForm.get('startDateRange')?.get('endDate')?.value\"\n      [endMinDate]=\"constraintForm.get('endDateRange')?.get('startDate')?.value\"\n      [endMaxDate]=\"constraintForm.get('endDateRange')?.get('endDate')?.value\"\n    ></ts-cohort-date-range>\n  </form>\n\n  <pre *ngIf=\"lastRange\">\n    Start: {{ lastRange.start }}\n    End: {{ lastRange.end }}\n  </pre>\n</ts-card>\n","import { Component } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  endOfDay,\n  startOfDay,\n  startOfMonth,\n  subDays,\n  subMonths,\n} from 'date-fns';\n\nimport {\n  TsCohortDateRangeChanged,\n  TsDateCohort,\n} from '@terminus/ui-cohort-date-range';\n\nconst currentDate: Date = new Date();\n\n\n@Component({\n  selector: 'demo-cohort-date-range',\n  templateUrl: './cohort-date-range.component.html',\n})\nexport class CohortDateRangeComponent {\n  public myForm: FormGroup = this.formBuilder.group({\n    dateRange: this.formBuilder.group({\n      startDate: [\n        null,\n        [\n          Validators.required,\n        ],\n      ],\n      endDate: [\n        null,\n        [Validators.required],\n      ],\n    }),\n  });\n  public constraintForm: FormGroup = this.formBuilder.group({\n    startDateRange: this.formBuilder.group({\n      startDate: [\n        startOfDay(subDays(new Date(), 120)),\n        [Validators.required],\n      ],\n      endDate: [\n        startOfDay(subDays(new Date(), 1)),\n        [Validators.required],\n      ],\n    }),\n    endDateRange: this.formBuilder.group({\n      startDate: [\n        startOfDay(subDays(new Date(), 119)),\n        [Validators.required],\n      ],\n      endDate: [\n        endOfDay(new Date()),\n        [Validators.required],\n      ],\n    }),\n  });\n  public cohorts: TsDateCohort[] = [\n    {\n      display: 'Last 90 days',\n      range: {\n        start: startOfDay(subDays(new Date(), 90)),\n        end: currentDate,\n      },\n    },\n    {\n      display: 'Last full month',\n      range: {\n        start: startOfDay(subMonths(startOfMonth(currentDate), 1)),\n        end: endOfDay(subDays(startOfMonth(currentDate), 1)),\n      },\n      active: true,\n    },\n  ];\n  public lastRange: TsCohortDateRangeChanged | undefined;\n\n\n  constructor(\n    private formBuilder: FormBuilder,\n  ) {}\n\n\n  public printRange(value: TsCohortDateRangeChanged): void {\n    // console.log('DEMO: formValue: ', value);\n    this.lastRange = value;\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsCohortDateRangeModule } from '@terminus/ui-cohort-date-range';\nimport { TsDateRangeModule } from '@terminus/ui-date-range';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\n\nimport { CohortDateRangeRoutingModule } from './cohort-date-range-routing.module';\nimport { CohortDateRangeComponent } from './cohort-date-range.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CohortDateRangeRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TsCardModule,\n    TsCohortDateRangeModule,\n    TsDateRangeModule,\n    TsSpacingModule,\n  ],\n  declarations: [\n    CohortDateRangeComponent,\n  ],\n})\nexport class CohortDateRangeModule {}\n"]}