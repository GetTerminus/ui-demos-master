{"version":3,"sources":["webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/toggle/fesm2015/terminus-ui-toggle.js","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/toggle/terminus-ui-toggle.d.ts.TsToggleComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/material/fesm2015/slide-toggle.js","webpack:///home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/material/slide-toggle/index.d.ts.MatSlideToggle.html"],"names":["TsToggleComponent_1","TsSlideToggleChange","TsToggleComponent","arguments","_isChecked","isDisabled","isRequired","labelPosition","name","theme","selectionChange","value","String","prototype","Boolean","Object","selector","template","host","providers","changeDetection","OnPush","encapsulation","None","exportAs","styles","TsToggleModule","imports","exports","declarations","MatSlideToggleDefaultOptions","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","_ngZone","defaults","_animationMode","_dir","_onChange","_","_onTouched","_uniqueId","_required","_checked","id","ariaLabel","ariaLabelledby","change","toggleChange","dragChange","parseInt","monitor","subscribe","focusOrigin","_inputElement","nativeElement","focus","Promise","resolve","then","stopMonitoring","event","stopPropagation","emit","_emitChangeEvent","fn","disabled","markForCheck","options","focusVia","detectChanges","decorators","type","args","inputs","ctorParameters","undefined","propDecorators","_thumbEl","_thumbBarEl","required","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","_MatSlideToggleRequiredValidatorModule","MatSlideToggleModule"],"mappings":"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","file":"default~file-upload-file-upload-module-ngfactory~form-controls-form-controls-module-ngfactory~select~b21879fb-es5.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { TsReactiveFormBaseComponent, ControlValueAccessorProviderFactory } from '@terminus/ui-utilities';\n\nvar TsToggleComponent_1;\n/**\n * Expose the MatSlideToggleChange event as TsSlideToggleChange. Used by {@link TsToggleComponent}\n */\nclass TsSlideToggleChange extends MatSlideToggleChange {\n}\n/**\n * The is a toggle component\n *\n * @example\n * <ts-toggle\n *              arialLabel=\"Disable my thing\"\n *              [formControl]=\"yourHelperToGetFormControl('thingIsDisabled')\"\n *              [isDisabled]=\"true\"\n *              [isRequired]=\"true\"\n *              labelPosition=\"before\"\n *              name=\"My toggle\"\n *              theme=\"accent\"\n *              (selectionChange)=\"myMethod($event)\"\n * >My Toggle!</ts-toggle>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/toggle</example-url>\n */\nlet TsToggleComponent = TsToggleComponent_1 = class TsToggleComponent extends TsReactiveFormBaseComponent {\n    constructor() {\n        super(...arguments);\n        this._isChecked = false;\n        /**\n         * Define if the toggle should be disabled\n         */\n        this.isDisabled = false;\n        /**\n         * Define if the toggle is required\n         */\n        this.isRequired = false;\n        /**\n         * Define the position of the label\n         */\n        this.labelPosition = 'after';\n        /**\n         * Define the input name for the toggle\n         */\n        this.name = 'toggle';\n        /**\n         * Define the theme\n         */\n        this.theme = 'primary';\n        /**\n         * Emit an event each time the toggle value changes\n         */\n        this.selectionChange = new EventEmitter();\n    }\n    /**\n     * Allow the checked state to be set\n     *\n     * @param value\n     */\n    set isChecked(value) {\n        this._isChecked = value;\n        this.value = this._isChecked;\n    }\n    get isChecked() {\n        return this._isChecked;\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsToggleComponent.prototype, \"ariaLabel\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsToggleComponent.prototype, \"isChecked\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsToggleComponent.prototype, \"isDisabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsToggleComponent.prototype, \"isRequired\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsToggleComponent.prototype, \"labelPosition\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsToggleComponent.prototype, \"name\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsToggleComponent.prototype, \"theme\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsToggleComponent.prototype, \"selectionChange\", void 0);\nTsToggleComponent = TsToggleComponent_1 = __decorate([\n    Component({\n        selector: 'ts-toggle',\n        template: \"<mat-slide-toggle\\n  class=\\\"c-toggle qa-toggle\\\"\\n  [(ngModel)]=\\\"value\\\"\\n  [required]=\\\"isRequired\\\"\\n  [labelPosition]=\\\"labelPosition\\\"\\n  [color]=\\\"theme\\\"\\n  [aria-label]=\\\"ariaLabel\\\"\\n  [disabled]=\\\"isDisabled\\\"\\n  [name]=\\\"name\\\"\\n  (change)=\\\"selectionChange.emit($event)\\\"\\n>\\n  <ng-content></ng-content>\\n</mat-slide-toggle>\\n\",\n        host: { class: 'ts-toggle' },\n        providers: [ControlValueAccessorProviderFactory(TsToggleComponent_1)],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsToggle',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-toggle{display:inline-block}.ts-toggle :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-toggle h1,.ts-toggle h2,.ts-toggle h3,.ts-toggle h4,.ts-toggle h5,.ts-toggle p{margin:unset}\"]\n    })\n], TsToggleComponent);\n\nlet TsToggleModule = class TsToggleModule {\n};\nTsToggleModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FormsModule,\n            MatSlideToggleModule,\n        ],\n        exports: [TsToggleComponent],\n        declarations: [TsToggleComponent],\n    })\n], TsToggleModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsSlideToggleChange, TsToggleComponent, TsToggleModule };\n//# sourceMappingURL=terminus-ui-toggle.js.map\n","<mat-slide-toggle\n  class=\"c-toggle qa-toggle\"\n  [(ngModel)]=\"value\"\n  [required]=\"isRequired\"\n  [labelPosition]=\"labelPosition\"\n  [color]=\"theme\"\n  [aria-label]=\"ariaLabel\"\n  [disabled]=\"isDisabled\"\n  [name]=\"name\"\n  (change)=\"selectionChange.emit($event)\"\n>\n  <ng-content></ng-content>\n</mat-slide-toggle>\n","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, NgZone, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default `mat-slide-toggle` options that can be overridden.\n * @record\n */\nfunction MatSlideToggleDefaultOptions() { }\nif (false) {\n    /**\n     * Whether toggle action triggers value changes in slide toggle.\n     * @type {?|undefined}\n     */\n    MatSlideToggleDefaultOptions.prototype.disableToggleValue;\n    /**\n     * Whether drag action triggers value changes in slide toggle.\n     * @deprecated No longer being used.\n     * \\@breaking-change 10.0.0\n     * @type {?|undefined}\n     */\n    MatSlideToggleDefaultOptions.prototype.disableDragValue;\n}\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => ({ disableToggleValue: false }))\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggle)),\n    multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} checked\n     */\n    constructor(source, checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\nif (false) {\n    /**\n     * The source MatSlideToggle of the event.\n     * @type {?}\n     */\n    MatSlideToggleChange.prototype.source;\n    /**\n     * The new `checked` value of the MatSlideToggle.\n     * @type {?}\n     */\n    MatSlideToggleChange.prototype.checked;\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatSlideToggleBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} tabIndex\n     * @param {?} _ngZone\n     * @param {?} defaults\n     * @param {?=} _animationMode\n     * @param {?=} _dir\n     */\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, \n    /**\n     * @deprecated `_ngZone` and `_dir` parameters to be removed.\n     * @breaking-change 10.0.0\n     */\n    _ngZone, defaults, _animationMode, _dir) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /**\n         * Name value will be applied to the input element if present.\n         */\n        this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n         */\n        this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         * @deprecated No longer being used. To be removed.\n         * \\@breaking-change 10.0.0\n         */\n        this.dragChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Whether the slide-toggle is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Whether the slide-toggle element is checked or not.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._onTouched()));\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    dragChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_required;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_checked;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._onChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._uniqueId;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._required;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._checked;\n    /**\n     * Reference to the thumb HTMLElement.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._thumbEl;\n    /**\n     * Reference to the thumb bar HTMLElement.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._thumbBarEl;\n    /**\n     * Name value will be applied to the input element if present.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.name;\n    /**\n     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.id;\n    /**\n     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.labelPosition;\n    /**\n     * Used to set the aria-label attribute on the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.ariaLabel;\n    /**\n     * Used to set the aria-labelledby attribute on the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.ariaLabelledby;\n    /**\n     * An event will be dispatched each time the slide-toggle changes its value.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.change;\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.toggleChange;\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatSlideToggle.prototype.dragChange;\n    /**\n     * Reference to the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._inputElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._changeDetectorRef;\n    /** @type {?} */\n    MatSlideToggle.prototype.defaults;\n    /** @type {?} */\n    MatSlideToggle.prototype._animationMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-required-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggleRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based slide-toggle implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator],\n            },] }\n];\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n//# sourceMappingURL=slide-toggle.js.map\n","<label [attr.for]=\"inputId\" class=\"mat-slide-toggle-label\" #label>\n  <div #toggleBar class=\"mat-slide-toggle-bar\"\n       [class.mat-slide-toggle-bar-no-side-margin]=\"!labelContent.textContent || !labelContent.textContent.trim()\">\n\n    <input #input class=\"mat-slide-toggle-input cdk-visually-hidden\" type=\"checkbox\"\n           role=\"switch\"\n           [id]=\"inputId\"\n           [required]=\"required\"\n           [tabIndex]=\"tabIndex\"\n           [checked]=\"checked\"\n           [disabled]=\"disabled\"\n           [attr.name]=\"name\"\n           [attr.aria-checked]=\"checked.toString()\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           (change)=\"_onChangeEvent($event)\"\n           (click)=\"_onInputClick($event)\">\n\n    <div class=\"mat-slide-toggle-thumb-container\" #thumbContainer>\n      <div class=\"mat-slide-toggle-thumb\"></div>\n      <div class=\"mat-slide-toggle-ripple mat-focus-indicator\" mat-ripple\n           [matRippleTrigger]=\"label\"\n           [matRippleDisabled]=\"disableRipple || disabled\"\n           [matRippleCentered]=\"true\"\n           [matRippleRadius]=\"20\"\n           [matRippleAnimation]=\"{enterDuration: 150}\">\n\n        <div class=\"mat-ripple-element mat-slide-toggle-persistent-ripple\"></div>\n      </div>\n    </div>\n\n  </div>\n\n  <span class=\"mat-slide-toggle-content\" #labelContent (cdkObserveContent)=\"_onLabelTextChange()\">\n    <!-- Add an invisible span so JAWS can read the label -->\n    <span style=\"display:none\">&nbsp;</span>\n    <ng-content></ng-content>\n  </span>\n</label>\n"]}