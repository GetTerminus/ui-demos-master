{"version":3,"sources":["webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/radio-group/fesm2015/terminus-ui-radio-group.js","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/radio-group/terminus-ui-radio-group.d.ts.TsRadioGroupComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/material/fesm2015/radio.js","webpack:///home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/material/radio/index.d.ts.MatRadioButton.html"],"names":["TsRadioGroupComponent_1","TsRadioChange","source","value","nextUniqueId","TsRadioGroupComponent","changeDetectorRef","domSanitizer","_uid","rippleColor","centeredContent","_id","isDisabled","isVisual","_name","noValidationOrHint","small","theme","selectionChange","formControl","valueChanges","pipe","subscribe","v","writeValue","markForCheck","option","formatter","change","emit","retrieveValue","formatModelValueFn","index","_formatUILabelFn","Error","_formatUISubLabelFn","_formatModelValueFn","_options","ctorParameters","type","String","prototype","Object","Function","Array","selector","template","host","providers","changeDetection","OnPush","encapsulation","None","exportAs","styles","TsRadioGroupModule","imports","exports","declarations","MatRadioDefaultOptions","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","color","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MatRadioChange","_changeDetector","_value","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","checked","_radios","forEach","radio","name","_markForCheck","isAlreadySelected","fn","disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","selected","decorators","args","propDecorators","MatRadioButton","descendants","labelPosition","required","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","_uniqueId","id","_checked","_removeUniqueSelectionListener","listen","options","focusVia","_inputElement","monitor","focusOrigin","_touch","stopMonitoring","disableRipple","event","stopPropagation","groupValueChanged","_emitChangeEvent","newCheckedState","notify","_setDisabled","_color","undefined","ariaLabel","ariaLabelledby","ariaDescribedby","inputs","MatRadioModule"],"mappings":"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","file":"default~drawer-drawer-module-ngfactory~form-controls-form-controls-module-ngfactory~radio-radio-modu~40a6f917-es5.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, isDevMode, ChangeDetectorRef, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { TsValidationMessagesModule } from '@terminus/ui-validation-messages';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { isFunction } from '@terminus/ngx-tools/type-guards';\nimport { hasRequiredControl, untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\nimport { TsReactiveFormBaseComponent, ControlValueAccessorProviderFactory } from '@terminus/ui-utilities';\n\nvar TsRadioGroupComponent_1;\n/**\n * The change event as TsRadioChange. Used by {@link TsRadioGroupComponent}\n */\nclass TsRadioChange {\n    constructor(\n    // The group that emit the change event\n    source, \n    // The value of the TsRadioButton\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Unique ID for each instance\n */\nlet nextUniqueId = 0;\n/**\n * The radio UI Component\n *\n * @example\n * <ts-radio-group\n *              [ariaDescribedby]=\"Aria Describedby\"\n *              [ariaLabel]=\"Aria Label\"\n *              [ariaLabelledby]=\"Aria Labelledby\"\n *              [centeredContent]=\"false\"\n *              [formatUILabelFn]=\"myUIFormatter\"\n *              [formatUISubLabelFn]=\"myUISubFormatter\"\n *              [formatModelValueFn]=\"myModelFormatter\"\n *              [formControl]=\"myForm.get('myRadioGroup')\"\n *              [id]=\"uid\"\n *              [isDisabled]=\"true\"\n *              [isVisual]=\"false\"\n *              [name]=\"myName\"\n *              [options]=\"myItemsArray | $async\"\n *              [small]=false\n *              [theme]=\"primary\"\n *              (selectionChange)=\"doSomething($event)\"\n * ></ts-radio-group>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/radio-group</example-url>\n */\nlet TsRadioGroupComponent = TsRadioGroupComponent_1 = class TsRadioGroupComponent extends TsReactiveFormBaseComponent {\n    constructor(changeDetectorRef, domSanitizer) {\n        super();\n        this.changeDetectorRef = changeDetectorRef;\n        this.domSanitizer = domSanitizer;\n        /**\n         * Define the default component ID\n         */\n        this._uid = `ts-radio-group-${nextUniqueId++}`;\n        /**\n         * Define the ripple color.\n         * TODO: abstract out to a service or utility function or set as a global default for ripples\n         */\n        this.rippleColor = 'rgba(0, 83, 138, .1)';\n        // eslint:enable: @angular-eslint/no-input-rename\n        /**\n         * Define if the radio contents should be centered (used with the visual radio group layout)\n         */\n        this.centeredContent = true;\n        this._id = this._uid;\n        /**\n         * Define if the radio group is disabled\n         */\n        this.isDisabled = false;\n        /**\n         * Define if the radio group is visual (boxes) or standard (text)\n         */\n        this.isVisual = false;\n        this._name = this._uid;\n        /**\n         * Define whether a validation or a hint needed.\n         */\n        this.noValidationOrHint = false;\n        /**\n         * Define if the visual style should be large or small\n         */\n        this.small = false;\n        /**\n         * Define the theme. {@link TsStyleThemeTypes}\n         */\n        this.theme = 'primary';\n        /**\n         * Emit event when a selection occurs. {@link TsRadioChange}\n         */\n        this.selectionChange = new EventEmitter();\n    }\n    /**\n     * Getter to determine if the group is required\n     */\n    get isRequired() {\n        return hasRequiredControl(this.formControl);\n    }\n    /**\n     * Define a function to retrieve the UI value for an option\n     *\n     * @param value\n     */\n    set formatUILabelFn(value) {\n        if (!value) {\n            return;\n        }\n        if (isFunction(value)) {\n            this._formatUILabelFn = value;\n        }\n        else if (isDevMode()) {\n            throw Error(`TsRadioGroupComponent: 'formatUILabelFn' must be passed a 'TsRadioFormatFn'.`);\n        }\n    }\n    get formatUILabelFn() {\n        return this._formatUILabelFn;\n    }\n    /**\n     * Define a function to retrieve the UI value for an option\n     *\n     * @param value\n     */\n    set formatUISubLabelFn(value) {\n        if (!value) {\n            return;\n        }\n        if (isFunction(value)) {\n            this._formatUISubLabelFn = value;\n        }\n        else if (isDevMode()) {\n            throw Error(`TsRadioGroupComponent: 'formatUISubLabelFn' must be passed a 'TsRadioFormatFn'.`);\n        }\n    }\n    get formatUISubLabelFn() {\n        return this._formatUISubLabelFn;\n    }\n    /**\n     * Define a function to retrieve the UI value for an option\n     *\n     * @param value\n     */\n    set formatModelValueFn(value) {\n        if (!value) {\n            return;\n        }\n        if (isFunction(value)) {\n            this._formatModelValueFn = value;\n        }\n        else if (isDevMode()) {\n            throw Error(`TsRadioGroupComponent: 'formatModelValueFn' must be passed a 'TsRadioFormatFn'.`);\n        }\n    }\n    get formatModelValueFn() {\n        return this._formatModelValueFn;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * The HTML name attribute applied to radio buttons in this group.\n     *\n     * @param value\n     */\n    set name(value) {\n        this._name = value ? value : this._uid;\n    }\n    get name() {\n        return this._name;\n    }\n    /**\n     * Accept an array of radio options in the {@link TsRadioOption} format\n     *\n     * @param value\n     */\n    set options(value) {\n        if (!value) {\n            return;\n        }\n        this._options = value;\n    }\n    get options() {\n        return this._options;\n    }\n    /**\n     * Update the change detector if the control value changes\n     */\n    ngOnInit() {\n        // istanbul ignore else\n        if (this.formControl) {\n            this.formControl.valueChanges\n                .pipe(untilComponentDestroyed(this))\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                .subscribe((v) => {\n                this.writeValue(v);\n                this.changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /**\n     * Needed for untilComponentDestroyed\n     */\n    ngOnDestroy() { }\n    /**\n     * Retrieve a value determined by the passed in formatter\n     *\n     * @param option - The radio option\n     * @param formatter - The formatter function used to retrieve the value\n     * @returns The retrieved value\n     */\n    retrieveValue(option, formatter) {\n        return (formatter && formatter(option)) ? formatter(option) : option;\n    }\n    /**\n     * Handle changes\n     *\n     * @param option - The selected option\n     */\n    radioGroupChange(option) {\n        const change = new TsRadioChange(this, option.value);\n        this.selectionChange.emit(change);\n        this.changeDetectorRef.markForCheck();\n    }\n    /**\n     * Handles changes for visual radio groups\n     *\n     * @param option - The selected option\n     */\n    visualRadioGroupChange(option) {\n        const value = this.retrieveValue(option, this.formatModelValueFn);\n        const change = new TsRadioChange(this, value);\n        this.selectionChange.emit(change);\n        this.changeDetectorRef.markForCheck();\n    }\n    /**\n     * Function for tracking for-loops changes\n     *\n     * @param index - The item index\n     * @returns The unique ID\n     */\n    trackByFn(index) {\n        return index;\n    }\n};\nTsRadioGroupComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: DomSanitizer }\n];\n__decorate([\n    Input('aria-label'),\n    __metadata(\"design:type\", String)\n], TsRadioGroupComponent.prototype, \"ariaLabel\", void 0);\n__decorate([\n    Input('aria-labelledby'),\n    __metadata(\"design:type\", String)\n], TsRadioGroupComponent.prototype, \"ariaLabelledby\", void 0);\n__decorate([\n    Input('aria-describedby'),\n    __metadata(\"design:type\", String)\n], TsRadioGroupComponent.prototype, \"ariaDescribedby\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsRadioGroupComponent.prototype, \"centeredContent\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Function])\n], TsRadioGroupComponent.prototype, \"formatUILabelFn\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Function])\n], TsRadioGroupComponent.prototype, \"formatUISubLabelFn\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Function])\n], TsRadioGroupComponent.prototype, \"formatModelValueFn\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsRadioGroupComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsRadioGroupComponent.prototype, \"isDisabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsRadioGroupComponent.prototype, \"isVisual\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsRadioGroupComponent.prototype, \"label\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsRadioGroupComponent.prototype, \"name\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsRadioGroupComponent.prototype, \"noValidationOrHint\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array),\n    __metadata(\"design:paramtypes\", [Array])\n], TsRadioGroupComponent.prototype, \"options\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsRadioGroupComponent.prototype, \"small\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsRadioGroupComponent.prototype, \"theme\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsRadioGroupComponent.prototype, \"selectionChange\", void 0);\nTsRadioGroupComponent = TsRadioGroupComponent_1 = __decorate([\n    Component({\n        selector: 'ts-radio-group',\n        template: \"<!-- STANDARD MODE -->\\n<ng-container *ngIf=\\\"!isVisual\\\">\\n\\n  <mat-radio-group\\n    class=\\\"c-radio qa-radio-group\\\"\\n    [disabled]=\\\"isDisabled\\\"\\n    [required]=\\\"isRequired\\\"\\n    [class.c-radio--sublabel]=\\\"formatUISubLabelFn\\\"\\n    [ngClass]=\\\"{'c-radio-sublabel--with-validation': !noValidationOrHint}\\\"\\n    [(ngModel)]=\\\"value\\\"\\n  >\\n    <ng-container *ngFor=\\\"let option of options; trackBy: trackByFn\\\">\\n\\n      <mat-radio-button\\n        class=\\\"c-radio__control qa-radio-control\\\"\\n        [value]=\\\"retrieveValue(option, formatModelValueFn)\\\"\\n        [disabled]=\\\"option.disabled\\\"\\n        [name]=\\\"id\\\"\\n        (change)=\\\"radioGroupChange($event)\\\"\\n        #radio=\\\"matRadioButton\\\"\\n      >\\n        {{ retrieveValue(option, formatUILabelFn) }}\\n\\n        <small\\n          class=\\\"c-radio__control-sublabel\\\"\\n          *ngIf=\\\"formatUISubLabelFn\\\"\\n        >\\n          {{ retrieveValue(option, formatUISubLabelFn) }}\\n        </small>\\n      </mat-radio-button>\\n\\n    </ng-container>\\n\\n    <ts-validation-messages\\n      class=\\\"qa-radio-validation-messages\\\"\\n      *ngIf=\\\"formControl && !noValidationOrHint\\\"\\n      [control]=\\\"formControl\\\"\\n      [validateImmediately]=\\\"true\\\"\\n    ></ts-validation-messages>\\n  </mat-radio-group>\\n\\n</ng-container>\\n\\n\\n<!-- VISUAL MODE -->\\n<ng-container *ngIf=\\\"isVisual\\\">\\n\\n  <fieldset\\n    class=\\\"c-radio c-radio--visual qa-radio-group\\\"\\n    [class.c-radio--small]=\\\"small\\\"\\n  >\\n    <legend class=\\\"c-radio__legend\\\">\\n      {{ label }}\\n    </legend>\\n\\n    <div class=\\\"c-radio__options\\\">\\n      <ng-container *ngFor=\\\"let option of options; trackBy: trackByFn\\\">\\n        <label\\n          class=\\\"c-radio__control qa-radio-control\\\"\\n          [class.c-radio__control--disabled]=\\\"isDisabled || option.disabled\\\"\\n          (click)=\\\"visualRadioGroupChange(option)\\\"\\n        >\\n          <input\\n            type=\\\"radio\\\"\\n            class=\\\"c-radio__input\\\"\\n            [name]=\\\"id\\\"\\n            [value]=\\\"retrieveValue(option, formatModelValueFn)\\\"\\n            [disabled]=\\\"(isDisabled || option.disabled)\\\"\\n            [checked]=\\\"retrieveValue(option, formatModelValueFn) === value\\\"\\n            [attr.aria-label]=\\\"ariaLabel\\\"\\n            [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n            [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n            [(ngModel)]=\\\"value\\\"\\n          >\\n          <div\\n            class=\\\"c-radio__content\\\"\\n            [class.c-radio__content--disabled]=\\\"isDisabled || option.disabled\\\"\\n            [class.c-radio__content--centered]=\\\"centeredContent\\\"\\n            mat-ripple\\n            [matRippleDisabled]=\\\"(isDisabled || option.disabled) ? 'disabled' : null\\\"\\n            [matRippleColor]=\\\"rippleColor\\\"\\n          >\\n            <ts-icon class=\\\"c-radio__content-checkmark\\\" [inline]=\\\"true\\\">\\n              done\\n            </ts-icon>\\n\\n            <ng-container *ngIf=\\\"!option.template\\\">\\n              <span class=\\\"c-radio__content-label\\\">\\n                {{ retrieveValue(option, formatUILabelFn) }}\\n              </span>\\n\\n              <small\\n                class=\\\"c-radio__control-sublabel\\\"\\n                *ngIf=\\\"formatUISubLabelFn\\\"\\n              >\\n                {{ retrieveValue(option, formatUISubLabelFn) }}\\n              </small>\\n            </ng-container>\\n\\n            <span *ngIf=\\\"option.template\\\" [innerHTML]=\\\"domSanitizer.bypassSecurityTrustHtml(option.template)\\\"></span>\\n          </div>\\n        </label>\\n      </ng-container>\\n    </div>\\n\\n    <ts-validation-messages\\n      class=\\\"qa-radio-validation-messages\\\"\\n      *ngIf=\\\"formControl  && !noValidationOrHint\\\"\\n      [control]=\\\"formControl\\\"\\n      [validateImmediately]=\\\"true\\\"\\n    ></ts-validation-messages>\\n  </fieldset>\\n\\n</ng-container>\\n\",\n        host: { class: 'ts-radio-group' },\n        providers: [ControlValueAccessorProviderFactory(TsRadioGroupComponent_1)],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsRadioGroup',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-radio-group{display:block}.ts-radio-group :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-radio-group h1,.ts-radio-group h2,.ts-radio-group h3,.ts-radio-group h4,.ts-radio-group h5,.ts-radio-group p{margin:unset}.ts-radio-group .c-radio{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:400;border:0;display:block;position:relative}.ts-radio-group .c-radio:not(.c-button):not(.c-input):not(.c-select):not(.ts-checkbox){line-height:20px}.c-radio .c-radio__control{display:block;margin-bottom:4px}.c-radio .c-radio__control-sublabel{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;color:#999;display:block;line-height:1.2em}.c-radio--sublabel.c-radio-sublabel--with-validation{padding-bottom:1.25em}.c-radio--sublabel .c-radio__control .mat-radio-label{align-items:start}.c-radio--visual.c-radio--small .c-radio__control{float:left;height:7rem;margin-bottom:12px;width:13.75rem}.c-radio--visual.c-radio--small .c-radio__control:not(:last-child){margin-right:12px}.c-radio--visual .c-radio__legend{all:unset}.c-radio--visual:not(.c-radio--small) .c-radio__options{display:-ms-grid;display:grid;grid-gap:12px;grid-template-columns:repeat(auto-fill,minmax(12em,1fr))}.c-radio--visual .c-radio__control{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transition:box-shadow 250ms cubic-bezier(.4,0,.2,1);background-position:center;background-repeat:no-repeat;background-size:cover;border-radius:3px;overflow:hidden;padding:16px;position:relative}.c-radio--visual .c-radio__control:active{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.c-radio--visual .c-radio__control::before{content:\\\"\\\";display:block;position:relative;padding-top:100%;width:100%}.c-radio--visual .c-radio__content{bottom:0;left:0;position:absolute;right:0;top:0;align-items:center;border:1px solid #cecdd1;border-radius:3px;padding:16px;transition:border-color .2s ease-in}.c-radio--visual .c-radio__content:focus:not(.c-radio__content--disabled),.c-radio--visual .c-radio__content:hover:not(.c-radio__content--disabled){border-color:#00538a;cursor:pointer}.c-radio--visual .c-radio__content::after{border-color:#00538a #00538a transparent transparent;border-style:solid;border-width:1em;content:'';opacity:0;position:absolute;right:-1px;top:-1px;z-index:1}.c-radio--visual .c-radio__content--centered{display:flex;flex-direction:column;justify-content:center}.c-radio--visual .c-radio__content--disabled{color:#999;cursor:not-allowed}.c-radio--visual .c-radio__content-checkmark{color:#fafafa;opacity:0;position:absolute;right:.1em;top:-.2em;transition:opacity .2s;will-change:opacity;z-index:2}.c-radio--visual .c-radio__input{display:none}.c-radio--visual .c-radio__input:checked~.c-radio__content:not(.c-radio__content--disabled){border:1px solid #00538a}.c-radio--visual .c-radio__input:checked~.c-radio__content.c-radio__content--disabled{border:1px solid #757575;color:#757575}.c-radio--visual .c-radio__input:checked~.c-radio__content.c-radio__content--disabled::after{border-right-color:#757575;border-top-color:#757575}.c-radio--visual .c-radio__input:checked~.c-radio__content .c-radio__content-checkmark,.c-radio--visual .c-radio__input:checked~.c-radio__content::after{opacity:1}\"]\n    }),\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef,\n        DomSanitizer])\n], TsRadioGroupComponent);\n\nlet TsRadioGroupModule = class TsRadioGroupModule {\n};\nTsRadioGroupModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            FormsModule,\n            MatRadioModule,\n            MatRippleModule,\n            ReactiveFormsModule,\n            TsIconModule,\n            TsValidationMessagesModule,\n        ],\n        exports: [TsRadioGroupComponent],\n        declarations: [TsRadioGroupComponent],\n    })\n], TsRadioGroupModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsRadioChange, TsRadioGroupComponent, TsRadioGroupModule };\n//# sourceMappingURL=terminus-ui-radio-group.js.map\n","<!-- STANDARD MODE -->\n<ng-container *ngIf=\"!isVisual\">\n\n  <mat-radio-group\n    class=\"c-radio qa-radio-group\"\n    [disabled]=\"isDisabled\"\n    [required]=\"isRequired\"\n    [class.c-radio--sublabel]=\"formatUISubLabelFn\"\n    [ngClass]=\"{'c-radio-sublabel--with-validation': !noValidationOrHint}\"\n    [(ngModel)]=\"value\"\n  >\n    <ng-container *ngFor=\"let option of options; trackBy: trackByFn\">\n\n      <mat-radio-button\n        class=\"c-radio__control qa-radio-control\"\n        [value]=\"retrieveValue(option, formatModelValueFn)\"\n        [disabled]=\"option.disabled\"\n        [name]=\"id\"\n        (change)=\"radioGroupChange($event)\"\n        #radio=\"matRadioButton\"\n      >\n        {{ retrieveValue(option, formatUILabelFn) }}\n\n        <small\n          class=\"c-radio__control-sublabel\"\n          *ngIf=\"formatUISubLabelFn\"\n        >\n          {{ retrieveValue(option, formatUISubLabelFn) }}\n        </small>\n      </mat-radio-button>\n\n    </ng-container>\n\n    <ts-validation-messages\n      class=\"qa-radio-validation-messages\"\n      *ngIf=\"formControl && !noValidationOrHint\"\n      [control]=\"formControl\"\n      [validateImmediately]=\"true\"\n    ></ts-validation-messages>\n  </mat-radio-group>\n\n</ng-container>\n\n\n<!-- VISUAL MODE -->\n<ng-container *ngIf=\"isVisual\">\n\n  <fieldset\n    class=\"c-radio c-radio--visual qa-radio-group\"\n    [class.c-radio--small]=\"small\"\n  >\n    <legend class=\"c-radio__legend\">\n      {{ label }}\n    </legend>\n\n    <div class=\"c-radio__options\">\n      <ng-container *ngFor=\"let option of options; trackBy: trackByFn\">\n        <label\n          class=\"c-radio__control qa-radio-control\"\n          [class.c-radio__control--disabled]=\"isDisabled || option.disabled\"\n          (click)=\"visualRadioGroupChange(option)\"\n        >\n          <input\n            type=\"radio\"\n            class=\"c-radio__input\"\n            [name]=\"id\"\n            [value]=\"retrieveValue(option, formatModelValueFn)\"\n            [disabled]=\"(isDisabled || option.disabled)\"\n            [checked]=\"retrieveValue(option, formatModelValueFn) === value\"\n            [attr.aria-label]=\"ariaLabel\"\n            [attr.aria-labelledby]=\"ariaLabelledby\"\n            [attr.aria-describedby]=\"ariaDescribedby\"\n            [(ngModel)]=\"value\"\n          >\n          <div\n            class=\"c-radio__content\"\n            [class.c-radio__content--disabled]=\"isDisabled || option.disabled\"\n            [class.c-radio__content--centered]=\"centeredContent\"\n            mat-ripple\n            [matRippleDisabled]=\"(isDisabled || option.disabled) ? 'disabled' : null\"\n            [matRippleColor]=\"rippleColor\"\n          >\n            <ts-icon class=\"c-radio__content-checkmark\" [inline]=\"true\">\n              done\n            </ts-icon>\n\n            <ng-container *ngIf=\"!option.template\">\n              <span class=\"c-radio__content-label\">\n                {{ retrieveValue(option, formatUILabelFn) }}\n              </span>\n\n              <small\n                class=\"c-radio__control-sublabel\"\n                *ngIf=\"formatUISubLabelFn\"\n              >\n                {{ retrieveValue(option, formatUISubLabelFn) }}\n              </small>\n            </ng-container>\n\n            <span *ngIf=\"option.template\" [innerHTML]=\"domSanitizer.bypassSecurityTrustHtml(option.template)\"></span>\n          </div>\n        </label>\n      </ng-container>\n    </div>\n\n    <ts-validation-messages\n      class=\"qa-radio-validation-messages\"\n      *ngIf=\"formControl  && !noValidationOrHint\"\n      [control]=\"formControl\"\n      [validateImmediately]=\"true\"\n    ></ts-validation-messages>\n  </fieldset>\n\n</ng-container>\n","import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, ContentChildren, Input, Optional, ElementRef, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/radio/radio.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction MatRadioDefaultOptions() { }\nif (false) {\n    /** @type {?} */\n    MatRadioDefaultOptions.prototype.color;\n}\n/** @type {?} */\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * @return {?}\n */\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatRadioGroup)),\n    multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\nclass MatRadioChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nif (false) {\n    /**\n     * The MatRadioButton that emits the change event.\n     * @type {?}\n     */\n    MatRadioChange.prototype.source;\n    /**\n     * The value of the MatRadioButton.\n     * @type {?}\n     */\n    MatRadioChange.prototype.value;\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup {\n    /**\n     * @param {?} _changeDetector\n     */\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /**\n         * Selected value for the radio group.\n         */\n        this._value = null;\n        /**\n         * The HTML name attribute applied to radio buttons in this group.\n         */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /**\n         * The currently selected radio button. Should match value.\n         */\n        this._selected = null;\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        this._isInitialized = false;\n        /**\n         * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n         */\n        this._labelPosition = 'after';\n        /**\n         * Whether the radio group is disabled.\n         */\n        this._disabled = false;\n        /**\n         * Whether the radio group is required.\n         */\n        this._required = false;\n        /**\n         * The method to be called in order to update ngModel\n         */\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * \\@docs-private\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /**\n     * Name of the radio button group. All radio buttons inside this group will use this name.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /**\n     * Whether the radio group is disabled\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Whether the radio group is required\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            }));\n        }\n    }\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @private\n     * @return {?}\n     */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        /** @type {?} */\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            }));\n        }\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange((/** @type {?} */ (this._selected)), this._value));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => radio._markForCheck()));\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\nMatRadioGroup.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group',\n                },\n            },] }\n];\n/** @nocollapse */\nMatRadioGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nMatRadioGroup.propDecorators = {\n    change: [{ type: Output }],\n    _radios: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatRadioButton)), { descendants: true },] }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatRadioGroup.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatRadioGroup.ngAcceptInputType_required;\n    /**\n     * Selected value for the radio group.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._value;\n    /**\n     * The HTML name attribute applied to radio buttons in this group.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._name;\n    /**\n     * The currently selected radio button. Should match value.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._selected;\n    /**\n     * Whether the `value` has been set to its initial value.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._isInitialized;\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._labelPosition;\n    /**\n     * Whether the radio group is disabled.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._disabled;\n    /**\n     * Whether the radio group is required.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._required;\n    /**\n     * The method to be called in order to update ngModel\n     * @type {?}\n     */\n    MatRadioGroup.prototype._controlValueAccessorChangeFn;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * \\@docs-private\n     * @type {?}\n     */\n    MatRadioGroup.prototype.onTouched;\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     * @type {?}\n     */\n    MatRadioGroup.prototype.change;\n    /**\n     * Child radio buttons.\n     * @type {?}\n     */\n    MatRadioGroup.prototype._radios;\n    /**\n     * Theme color for all of the radio buttons in the group.\n     * @type {?}\n     */\n    MatRadioGroup.prototype.color;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._changeDetector;\n}\n// Boilerplate for applying mixins to MatRadioButton.\n/**\n * \\@docs-private\n */\nclass MatRadioButtonBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatRadioButtonBase.prototype.disabled;\n    /** @type {?} */\n    MatRadioButtonBase.prototype._elementRef;\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n/** @type {?} */\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * \\@docs-private\n * @abstract\n */\n// tslint:disable-next-line:class-name\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    /**\n     * @param {?} radioGroup\n     * @param {?} elementRef\n     * @param {?} _changeDetector\n     * @param {?} _focusMonitor\n     * @param {?} _radioDispatcher\n     * @param {?=} _animationMode\n     * @param {?=} _providerOverride\n     */\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /**\n         * The unique ID for the radio button.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /**\n         * Whether this radio is checked.\n         */\n        this._checked = false;\n        /**\n         * Value assigned to this radio.\n         */\n        this._value = null;\n        /**\n         * Unregister function for _radioDispatcher\n         */\n        this._removeUniqueSelectionListener = (/**\n         * @return {?}\n         */\n        () => { });\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((/**\n             * @param {?} id\n             * @param {?} name\n             * @return {?}\n             */\n            (id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            }));\n    }\n    /**\n     * Whether this radio button is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /**\n     * The value of this radio button.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /**\n     * Whether the label should appear after or before the radio button. Defaults to 'after'\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /**\n     * Whether the radio button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /**\n     * Whether the radio button is required.\n     * @return {?}\n     */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * Theme color of the radio button.\n     * @return {?}\n     */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set color(newValue) { this._color = newValue; }\n    /**\n     * ID of the native input element inside `<mat-radio-button>`\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Focuses the radio button.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /**\n     * Dispatch change event with current value.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        /** @type {?} */\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /**\n     * Sets the disabled state and marks for check if a change occurred.\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.decorators = [\n    { type: Directive }\n];\n/** @nocollapse */\n_MatRadioButtonBase.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] }\n];\n_MatRadioButtonBase.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\nif (false) {\n    /** @type {?} */\n    _MatRadioButtonBase.ngAcceptInputType_checked;\n    /** @type {?} */\n    _MatRadioButtonBase.ngAcceptInputType_disabled;\n    /** @type {?} */\n    _MatRadioButtonBase.ngAcceptInputType_required;\n    /** @type {?} */\n    _MatRadioButtonBase.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._uniqueId;\n    /**\n     * The unique ID for the radio button.\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.id;\n    /**\n     * Analog to HTML 'name' attribute used to group radios for unique selection.\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.name;\n    /**\n     * Used to set the 'aria-label' attribute on the underlying input element.\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.ariaLabel;\n    /**\n     * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.ariaLabelledby;\n    /**\n     * The 'aria-describedby' attribute is read after the element's label and field type.\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.ariaDescribedby;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._labelPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._color;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.change;\n    /**\n     * The parent radio group. May or may not be present.\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.radioGroup;\n    /**\n     * Whether this radio is checked.\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._checked;\n    /**\n     * Whether this radio is disabled.\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._disabled;\n    /**\n     * Whether this radio is required.\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._required;\n    /**\n     * Value assigned to this radio.\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._value;\n    /**\n     * Unregister function for _radioDispatcher\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._removeUniqueSelectionListener;\n    /**\n     * The native `<input type=radio>` element\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype._inputElement;\n    /**\n     * @type {?}\n     * @protected\n     */\n    _MatRadioButtonBase.prototype._changeDetector;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._radioDispatcher;\n    /** @type {?} */\n    _MatRadioButtonBase.prototype._animationMode;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._providerOverride;\n}\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n}\nMatRadioButton.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <div class=\\\"mat-radio-container\\\">\\n    <div class=\\\"mat-radio-outer-circle\\\"></div>\\n    <div class=\\\"mat-radio-inner-circle\\\"></div>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n\\n  <!-- The label content for radio control. -->\\n  <div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </div>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be -1 so the `focus` event still fires.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/radio/radio-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatRadioModule {\n}\nMatRadioModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/radio/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase };\n//# sourceMappingURL=radio.js.map\n","<!-- TODO(jelbourn): render the radio on either side of the content -->\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\n<label [attr.for]=\"inputId\" class=\"mat-radio-label\" #label>\n  <!-- The actual 'radio' part of the control. -->\n  <div class=\"mat-radio-container\">\n    <div class=\"mat-radio-outer-circle\"></div>\n    <div class=\"mat-radio-inner-circle\"></div>\n    <input #input class=\"mat-radio-input cdk-visually-hidden\" type=\"radio\"\n        [id]=\"inputId\"\n        [checked]=\"checked\"\n        [disabled]=\"disabled\"\n        [tabIndex]=\"tabIndex\"\n        [attr.name]=\"name\"\n        [attr.value]=\"value\"\n        [required]=\"required\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.aria-labelledby]=\"ariaLabelledby\"\n        [attr.aria-describedby]=\"ariaDescribedby\"\n        (change)=\"_onInputChange($event)\"\n        (click)=\"_onInputClick($event)\">\n\n    <!-- The ripple comes after the input so that we can target it with a CSS\n         sibling selector when the input is focused. -->\n    <div mat-ripple class=\"mat-radio-ripple mat-focus-indicator\"\n         [matRippleTrigger]=\"label\"\n         [matRippleDisabled]=\"_isRippleDisabled()\"\n         [matRippleCentered]=\"true\"\n         [matRippleRadius]=\"20\"\n         [matRippleAnimation]=\"{enterDuration: 150}\">\n\n      <div class=\"mat-ripple-element mat-radio-persistent-ripple\"></div>\n    </div>\n  </div>\n\n  <!-- The label content for radio control. -->\n  <div class=\"mat-radio-label-content\" [class.mat-radio-label-before]=\"labelPosition == 'before'\">\n    <!-- Add an invisible span so JAWS can read the label -->\n    <span style=\"display:none\">&nbsp;</span>\n    <ng-content></ng-content>\n  </div>\n</label>\n"]}