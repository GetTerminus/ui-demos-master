{"version":3,"sources":["webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/sort/fesm2015/terminus-ui-sort.js","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/sort/terminus-ui-sort.d.ts.TsSortHeaderComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/table/fesm2015/terminus-ui-table.js","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/table/terminus-ui-table.d.ts.TsHeaderRowComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/table/terminus-ui-table.d.ts.TsRowComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/table/terminus-ui-table.d.ts.TsFooterRowComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/table/terminus-ui-table.d.ts.TsTableComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/cdk/fesm2015/drag-drop.js","webpack:///home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/cdk/fesm2015/table.js","webpack:///src/app/components/table/table-routing.module.ts","webpack:///src/app/components/table/table.component.html","webpack:///src/app/components/table/table.component.ts","webpack:///src/app/components/table/table.module.ts"],"names":["TsSortHeaderIntl","changes","sortButtonLabel","id","sortDescriptionLabel","direction","TS_SORT_HEADER_INTL_PROVIDER_FACTORY","parentIntl","TS_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","getSortDuplicateSortableIdError","Error","getSortHeaderNotContainedWithinSortError","getSortHeaderMissingIdError","getSortInvalidDirectionError","TsSortDirective","disabled","sortables","Map","_stateChanges","start","_direction","disableClear","sortChange","next","complete","sortable","has","set","active","getNextSortDirection","disableClearDoesntExist","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","length","String","prototype","Object","selector","exportAs","inputs","sortOrder","reverse","push","SORT_ANIMATION_TRANSITION","ENTERING","STANDARD_CURVE","tsSortAnimations","indicator","transform","leftPointer","rightPointer","indicatorToggle","opacity","TsSortHeaderComponent","_intl","changeDetectorRef","_sort","_cdkColumnDef","arrowPosition","pipe","subscribe","markForCheck","name","register","deregister","_isDisabled","sort","value","console","warn","_disableClear","ctorParameters","type","decorators","Boolean","template","host","preserveWhitespaces","animations","changeDetection","OnPush","encapsulation","None","styles","TsSortModule","imports","providers","declarations","exports","TsColumnDefDirective_1","tsTableColumnAlignmentTypesArray","TsColumnDefDirective","elementRef","sticky","stickyEnd","useExisting","TsCellDefDirective_1","TsHeaderCellDefDirective_1","TsHeaderCellDirective_1","TsFooterCellDefDirective_1","TS_TABLE_MIN_COLUMN_WIDTH","cellNextUniqueId","headerNextUniqueId","setColumnAlignment","column","renderer","alignment","addClass","nativeElement","TsCellDefDirective","TsHeaderCellDefDirective","TsHeaderCellResizeEvent","instance","width","TsHeaderCellDirective","columnDef","documentService","ngZone","killStream$","resizerClass","startOffsetX","startWidth","uid","resized","classList","add","cssClassFriendlyName","_stickyEnd","resizeElement","removeChild","createElement","title","appendChild","runOutsideAngular","e","onResizeColumn","stopPropagation","syncHoverClass","event","clientX","cellWidth","document","diff","newWidth","determineWidth","setColumnWidth","emit","offsetWidth","setStyle","isHovered","removeClass","parseInt","querySelector","difference","total","TsCellDirective","role","TsFooterCellDefDirective","TsFooterCellDirective","TsHeaderRowDefDirective_1","TsFooterRowDefDirective_1","TsFooterRowComponent_1","TsRowDefDirective_1","TsHeaderRowComponent","TsRowComponent","TsHeaderRowDefDirective","TsFooterRowDefDirective","TsFooterRowComponent","Default","TsRowDefDirective","TsTableComponent_1","COLUMN_DEBOUNCE_DELAY","VIEWPORT_DEBOUNCE","TsTableColumnsChangeEvent","table","columns","nextUniqueId","TsTableComponent","platform","differs","dir","windowService","viewportRuler","columnResizeChanges$","headerCells","map","cell","onStable","asObservable","debouncedStickyColumnUpdate","updateStickyColumnStyles","columnsInternal","stickyCssClass","_columns","density","_id","columnsChange","viewportChange$","change","nativeWindow","requestAnimationFrame","updateInternalColumns","getFreshColumnsCopy","columnsToSendToConsumer","subscribeToHeaderCellChanges","v","updateLastColumnWidth","found","find","headerCellSubscription","unsubscribe","remainingWidth","lastColumn","slice","c","assign","setColumnWidthStyle","updateStickyCellsIfNeeded","columnName","updateStickCells","columnDirective","_name","setAllColumnsToDefinedWidths","forEach","headerCellDirective","i","injectResizeElement","hasOverflowX","addRemainingSpaceToLastColumn","remainingTableSpace","lastIndex","stickyCells","toArray","filter","internalColumns","userColumns","parentElement","scrollWidth","tableWidth","parentNode","borderOffset","containerWidth","totalWidthOfColumns","currentWidths","hc","userWidths","columnsToReduce","reduce","a","b","args","undefined","descendants","Array","TsTableDataSource","initialData","_renderData","_data","_updateChangeSubscription","_renderChangesSubscription","data","TsTableModule","DragCSSStyleDeclaration","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","getPropertyValue","split","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","top","right","bottom","left","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ScrollPosition","ParentPositionTracker","_document","_viewportRuler","positions","clear","elements","scrollPosition","getViewportScrollPosition","scrollTop","scrollLeft","target","cachedPosition","get","scrolledParentNode","documentElement","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","node","contains","DragRefConfig","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","DragRefInternal","DragHelperTemplate","DragPreviewTemplate","Point","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","handle","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","_dropContainer","isDragging","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","_parentPositions","registerDragItem","_placeholder","getPlaceholderElement","getRootElement","handles","_toggleNativeDragInteractions","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","boundaryElement","_containInsideBoundaryOnResize","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","container","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","dropContainer","parent","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","body","replaceChild","getPreviewInsertionPoint","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","pointerMove","pointerUp","scroll","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","context","detectChanges","getRootNode","matchElementSize","deepCloneNode","pointerEvents","margin","zIndex","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","newValue","round","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","rootNodes","nodeType","ELEMENT_NODE","wrapper","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","CachedItemPosition","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRefInternal","DropListRef","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","index","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","unshift","_cacheItemPositions","_cacheParentPositions","_reset","items","previousItems","_withDropContainer","draggedItems","every","connectedTo","orientation","_scrollableElements","findIndex","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","elementToMeasure","getVisibleElement","_stopReceiving","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","_getShadowRoot","activeSiblings","_sortFromLastPointerPosition","isReceiving","shadowRoot","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","startsWith","moveEvent","upEvent","options","config","_clearGlobalListeners","providedIn","ɵprov","factory","DragDropRegistry_Factory","token","DEFAULT_CONFIG","DragDrop","DragDrop_Factory","CdkDragStart","CdkDragRelease","CdkDragEnd","CdkDragEnter","CdkDragExit","CdkDragDrop","CdkDragMove","CdkDragSortEvent","CDK_DRAG_PARENT","CdkDragHandle","parentDrag","_parentDrag","propDecorators","CdkDragPlaceholder","templateRef","CdkDragPreview","_matchSize","CDK_DRAG_CONFIG","DragDropConfig","CDK_DRAG_CONFIG_FACTORY","CDK_DROP_LIST","CdkDrag","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_destroyed","observer","subscription","_dragRef","movedEvent","createDrag","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","reset","getFreeDragPosition","_updateRootElement","childHandleElements","withHandles","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","dispose","rootElementSelector","getClosestMatchingAncestor","nodeName","boundary","ref","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withDirection","draggingDisabled","currentElement","matches","msMatchesSelector","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropListInternal","ɵ0","CdkDropList","_group","_scrollDispatcher","_unsortedItems","createDropList","_setupInputSyncSubscription","_dropLists","_syncItemsWithRef","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","useValue","DragDropModule","CanStick","mixinHasStickyInput","base","_sticky","_hasStickyChanged","hasStickyChanged","prevValue","CDK_TABLE","TextColumnOptions","TEXT_COLUMN_OPTIONS","CellDef","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","_table","replace","headerCell","footerCell","BaseCdkCell","columnClassName","CdkHeaderCell","CdkFooterCell","CdkCell","CDK_ROW_TEMPLATE","BaseRowDef","_differs","_columnsDiffer","currentValue","create","CdkHeaderRowDef","CdkFooterRowDef","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkRowDef","CdkCellOutletRowContext","CdkCellOutletMultiRowContext","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","CdkHeaderRow","CdkFooterRow","CdkRow","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","_isBrowser","rows","stickyDirections","row","_removeStickyStyle","children","stickyStartStates","stickyEndStates","hasStickyColumns","some","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","isRtl","_addStickyStyle","rowsToStick","stickyStates","stickyHeight","rowIndex","j","tableElement","tfoot","_getCalculatedZIndex","hasDirection","remove","dirValue","cssText","zIndexIncrements","firstRowCells","widths","nextPosition","getTableUnknownColumnError","getTableDuplicateColumnNameError","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","RowOutlet","DataRowOutlet","HeaderRowOutlet","FooterRowOutlet","CDK_TABLE_TEMPLATE","RowContext","RowViewRef","RenderRow","CdkTable","_elementRef","_platform","_onDestroy","_columnDefsByName","_customColumnDefs","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","_multiTemplateDataRows","viewChange","Number","MAX_VALUE","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","trackBy","dataIndex","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","dataSource","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","_rowOutlet","_headerRowOutlet","_footerRowOutlet","disconnect","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","_insertRow","view","move","_updateRowIndexContext","forEachIdentityChange","rowView","$implicit","headerRowDef","footerRowDef","rowDef","headerRows","_getRenderedRows","thead","def","_stickyStyler","clearStickyPositioning","stickRows","resetStickyChanged","footerRows","updateStickyFooterContainer","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","renderRows","prevCachedRenderRows","renderRowsForData","_getRenderRowsForData","WeakMap","renderRow","rowDefs","_getRowDefs","cachedRenderRows","shift","columnDefs","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","when","multiTemplateDataRows","_defaultRowDef","columnsDiffReducer","acc","getColumnsDiff","_forceRenderDataRows","_dataSource","dataStream","connect","_renderRow","updateStickyHeaderRowStyles","updateStickyFooterRowStyles","updateStickyColumns","rowOutlet","renderedRows","renderIndex","outlet","_getCellTemplates","cellTemplate","count","first","last","even","odd","columnId","extractCellTemplate","documentFragment","createDocumentFragment","sections","tag","section","stickyCheckReducer","d","isBrowser","_trackByFn","fn","_switchDataSource","concat","CdkTextColumn","_options","justify","_syncColumnDefName","headerText","_createDefaultHeaderText","dataAccessor","defaultDataAccessor","addColumnDef","removeColumnDef","defaultHeaderTextTransform","toUpperCase","EXPORTED_DECLARATIONS","CdkTableModule","routes","path","component","TableRoutingModule","ExampleHttpDao","http","order","page","perPage","log","href","requestUrl","requestParams","TableComponent","domSanitizer","formBuilder","columnsSource","control","savedResponse","useCachedData","allPossibleColumns","columnsForm","group","resultsLength","visibleColumns","allFormControlChanges$","valueChanges","latestCreationDate","setVisibleColumns","setUpTable","exampleDatabase","paginator","currentPageIndex","pageSelect","recordsPerPageChange","getRepoIssues","recordsPerPage","total_count","content","bypassSecurityTrustHtml","number","myTable","TableModule"],"mappings":"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AGF,2H,GAAA,8K,EAAA;AAAA;AAAA;AAAA,c,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA,sN,GACE,yG,GAAA,6N,EAAA,+N,GACA,yG,GAAA,uN,EAAA,mN,GACA,yG,GAAA,6N,EAAA,+N,GAGF,2H,GAAA,8K,EAAA;AAAA;AAAA;AAAA,c,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA,sN,GACE,0G,GAAA,8N,EAAA,+N,GACA,0G,GAAA,wN,EAAA,mN,GACA,0G,IAGF,4H,GAAA,8K,EAAA;AAAA;AAAA,c,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA,sN,GACE,0G,GAAA,8N,EAAA,+N,GACA,0G,GAAA,wN,EAAA,mN,GACA,0G,GAAA,8N,EAAA,+N,GAGF,4H,GAAA,8K,EAAA;AAAA;AAAA;AAAA,c,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA,sN,GACE,0G,GAAA,8N,EAAA,+N,GACA,0G,GAAA,wN,EAAA,mN,GACA,0G,GAAA,8N,EAAA,+N,GAGF,4H,GAAA,8K,EAAA;AAAA;AAAA,c,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA,sN,GACE,0G,GAAA,8N,EAAA,+N,GACA,0G,GAAA,wN,EAAA,mN,GAGA,0G,GAAA,8N,EAAA,+N,GAGF,4H,GAAA,8K,EAAA;AAAA;AAAA,c,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA,sN,GACE,0G,GAAA,8N,EAAA,+N,GACA,0G,GAAA,wN,EAAA,mN,GACA,0G,GAAA,8N,EAAA,+N,GAGF,4H,GAAA,8K,EAAA;AAAA;AAAA,c,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA;AAAA;AAAA,Q,EAAA,sN,GACE,0G,GAAA,8N,EAAA,+N,GAGA,0G,GAAA,wN,EAAA,mN,GAGA,0G,GAAA,8N,EAAA,+N,GAGF,4H,GAAA,8K,EAAA;AAAA;AAAA,c,EAAA;AAAA;AAAA,Q,EAAA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","file":"table-table-module-ngfactory-es5.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { Injectable, Optional, SkipSelf, EventEmitter, isDevMode, Input, Output, Directive, ChangeDetectorRef, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { Subject, merge } from 'rxjs';\nimport { CdkColumnDef } from '@angular/cdk/table';\nimport { coerceBooleanProperty } from '@terminus/ngx-tools/coercion';\nimport { isNull, isUndefined, isBoolean } from '@terminus/ngx-tools/type-guards';\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\nimport { AnimationDurations, AnimationCurves } from '@angular/material/core';\n\n/**\n * To modify the labels and text displayed, create a new instance of TsSortHeaderIntl and\n * include it in a custom provider.\n */\nlet TsSortHeaderIntl = class TsSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * ARIA label for the sorting button\n         *\n         * @param id\n         */\n        this.sortButtonLabel = (id) => `Change sorting for ${id}`;\n        /**\n         * A label to describe the current sort (visible only to screenreaders)\n         *\n         * @param id\n         * @param direction\n         */\n        this.sortDescriptionLabel = (id, direction) => `Sorted by ${id} ${direction === 'asc' ? 'ascending' : 'descending'}`;\n    }\n};\nTsSortHeaderIntl = __decorate([\n    Injectable()\n], TsSortHeaderIntl);\n/**\n * Factory to return an instance of TsSortHeaderIntl\n *\n * @param parentIntl\n */\nconst TS_SORT_HEADER_INTL_PROVIDER_FACTORY = (parentIntl) => parentIntl || new TsSortHeaderIntl();\n/**\n * TsSortHeaderIntl provider declaration\n */\nconst TS_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an TsSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: TsSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), TsSortHeaderIntl]],\n    useFactory: TS_SORT_HEADER_INTL_PROVIDER_FACTORY,\n};\n\nconst getSortDuplicateSortableIdError = (id) => Error(`Cannot have two TsSortables with the same id (${id}).`);\nconst getSortHeaderNotContainedWithinSortError = () => Error(`TsSortHeader must be placed within a parent element with the TsSort directive.`);\nconst getSortHeaderMissingIdError = () => Error(`TsSortHeader must be provided with a unique id.`);\nconst getSortInvalidDirectionError = (direction) => Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n\n/**\n * Container for TsSortables to manage the sort state and provide default sort parameters\n *\n * @example\n *\n * <ts-table [dataSource]=\"dataSource\" tsSort>\n *   ...\n * </ts-table>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/table</example-url>\n */\nlet TsSortDirective = class TsSortDirective {\n    constructor() {\n        /**\n         * Store the disabled flag\n         */\n        this.disabled = false;\n        /**\n         * Collection of all registered sortables that this directive manages\n         */\n        this.sortables = new Map();\n        /**\n         * Used to notify any child components listening to state changes\n         */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an TsSortable is initially sorted.\n         *\n         * May be overridden by the TsSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /**\n         * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n         *\n         * May be overridden by the TsSortable's disable clear input.\n         */\n        this.disableClear = false;\n        /**\n         * Event emitted when the user changes either the active sort or sort direction\n         */\n        // eslint-disable-next-line @angular-eslint/no-output-rename\n        this.sortChange = new EventEmitter();\n    }\n    /**\n     * The sort direction of the currently active TsSortable\n     *\n     * @param direction\n     */\n    set direction(direction) {\n        if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    get direction() {\n        return this._direction;\n    }\n    /**\n     * Trigger next on all changes\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    /**\n     * Complete the observable on destroy\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /**\n     * Register function to be used by the contained TsSortables. Adds the TsSortable to the\n     * collection of TsSortables.\n     *\n     * @param sortable\n     */\n    register(sortable) {\n        if (!sortable.id && isDevMode()) {\n            throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id) && isDevMode()) {\n            throw getSortDuplicateSortableIdError(sortable.id);\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained TsSortables. Removes the TsSortable from the\n     * collection of contained TsSortables.\n     *\n     * @param sortable\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction\n     *\n     * @param sortable\n     */\n    sort(sortable) {\n        if (this.active === sortable.id) {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        else {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        this.sortChange.next({\n            active: this.active,\n            direction: this.direction,\n        });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides\n     *\n     * @param sortable\n     */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        const disableClearDoesntExist = isNull(sortable.disableClear) || isUndefined(sortable.disableClear);\n        const disableClear = disableClearDoesntExist ? this.disableClear : sortable.disableClear;\n        const sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n};\n__decorate([\n    Input('tsSortActive'),\n    __metadata(\"design:type\", String)\n], TsSortDirective.prototype, \"active\", void 0);\n__decorate([\n    Input('tsSortStart'),\n    __metadata(\"design:type\", String)\n], TsSortDirective.prototype, \"start\", void 0);\n__decorate([\n    Input('tsSortDirection'),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsSortDirective.prototype, \"direction\", null);\n__decorate([\n    Input('tsSortDisableClear'),\n    __metadata(\"design:type\", Object)\n], TsSortDirective.prototype, \"disableClear\", void 0);\n__decorate([\n    Output('tsSortChange'),\n    __metadata(\"design:type\", Object)\n], TsSortDirective.prototype, \"sortChange\", void 0);\nTsSortDirective = __decorate([\n    Directive({\n        selector: '[tsSort]',\n        exportAs: 'tsSort',\n        // NOTE: @Inputs are defined here rather than using decorators since we are extending the @Inputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n        inputs: ['disabled: tsSortDisabled'],\n    })\n], TsSortDirective);\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear\n *\n * @param start\n * @param disableClear\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    const sortOrder = ['asc', 'desc'];\n    if (start === 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\nconst SORT_ANIMATION_TRANSITION = `${AnimationDurations.ENTERING} ${AnimationCurves.STANDARD_CURVE}`;\n/** Animations used by TsSort. */\nconst tsSortAnimations = {\n    /**\n     * Animation that moves the sort indicator\n     */\n    indicator: trigger('indicator', [\n        state('asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('desc', style({ transform: 'translateY(10px)' })),\n        transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation that rotates the left pointer of the indicator based on the sorting direction\n     */\n    leftPointer: trigger('leftPointer', [\n        state('asc', style({ transform: 'rotate(-45deg)' })),\n        state('desc', style({ transform: 'rotate(45deg)' })),\n        transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation that rotates the right pointer of the indicator based on the sorting direction\n     */\n    rightPointer: trigger('rightPointer', [\n        state('asc', style({ transform: 'rotate(45deg)' })),\n        state('desc', style({ transform: 'rotate(-45deg)' })),\n        transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation that moves the indicator in and out of view when sorting is enabled/disabled\n     */\n    indicatorToggle: trigger('indicatorToggle', [\n        transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({\n                transform: 'translateY(25%)',\n                opacity: 0,\n            }),\n            style({\n                transform: 'none',\n                opacity: 1,\n            }),\n        ]))),\n        transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({\n                transform: 'none',\n                opacity: 1,\n            }),\n            style({\n                transform: 'translateY(-25%)',\n                opacity: 0,\n            }),\n        ]))),\n        transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({\n                transform: 'translateY(-25%)',\n                opacity: 0,\n            }),\n            style({\n                transform: 'none',\n                opacity: 1,\n            }),\n        ]))),\n        transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({\n                transform: 'none',\n                opacity: 1,\n            }),\n            style({\n                transform: 'translateY(25%)',\n                opacity: 0,\n            }),\n        ]))),\n    ]),\n};\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent TsSortDirective.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n *\n * @example\n * <ts-header-cell *tsHeaderCellDef ts-sort-header>\n *              Created\n * </ts-header-cell>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/table</example-url>\n */\nlet TsSortHeaderComponent = class TsSortHeaderComponent {\n    constructor(_intl, changeDetectorRef, _sort, _cdkColumnDef) {\n        this._intl = _intl;\n        this.changeDetectorRef = changeDetectorRef;\n        this._sort = _sort;\n        this._cdkColumnDef = _cdkColumnDef;\n        this.disabled = false;\n        /**\n         * Sets the position of the arrow that displays when sorted\n         */\n        this.arrowPosition = 'after';\n        if (!_sort && isDevMode()) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n    }\n    /**\n     * Overrides the disable clear value of the containing TsSort for this TsSortable\n     *\n     * @param value\n     */\n    set disableClear(value) {\n        /* istanbul ignore if */\n        if (!isBoolean(value) && value && isDevMode()) {\n            // eslint-disable-next-line no-console\n            console.warn(`TsSortHeaderComponent: \"disableClear\" value is not a boolean. `\n                + `String values of 'true' and 'false' will no longer be coerced to a true boolean with the next release.`);\n        }\n        this._disableClear = coerceBooleanProperty(value);\n    }\n    get disableClear() {\n        return this._disableClear;\n    }\n    /**\n     * Default to cdk column name\n     */\n    ngOnInit() {\n        // Mark directive for change detection after any of these changes\n        // eslint-disable-next-line deprecation/deprecation\n        merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes)\n            .pipe(untilComponentDestroyed(this))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n        if (!this.id && this._cdkColumnDef) {\n            this.id = this._cdkColumnDef.name;\n        }\n        this._sort.register(this);\n    }\n    /**\n     * Deregister sort and unsubscribe from observables\n     */\n    ngOnDestroy() {\n        this._sort.deregister(this);\n    }\n    /**\n     * Handles click events on the header\n     */\n    _handleClick() {\n        if (!this._isDisabled()) {\n            this._sort.sort(this);\n        }\n    }\n    /**\n     * Whether this TsSortHeader is currently sorted in either ascending or descending order\n     */\n    _isSorted() {\n        return this._sort.active === this.id\n            && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * Whether this TsSortHeader is disabled\n     */\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n};\nTsSortHeaderComponent.ctorParameters = () => [\n    { type: TsSortHeaderIntl },\n    { type: ChangeDetectorRef },\n    { type: TsSortDirective, decorators: [{ type: Optional }] },\n    { type: CdkColumnDef, decorators: [{ type: Optional }] }\n];\n__decorate([\n    Input('ts-sort-header'),\n    __metadata(\"design:type\", String)\n], TsSortHeaderComponent.prototype, \"id\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsSortHeaderComponent.prototype, \"arrowPosition\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsSortHeaderComponent.prototype, \"start\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsSortHeaderComponent.prototype, \"disableClear\", null);\nTsSortHeaderComponent = __decorate([\n    Component({\n        // NOTE: This component needs to be added to another component so we need a non-element selector\n        // eslint-disable-next-line @angular-eslint/component-selector\n        selector: '[ts-sort-header]',\n        // tslint:enable: component-selector\n        template: \"<div\\n  class=\\\"ts-sort-header-container\\\"\\n  [class.ts-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n>\\n  <button\\n    class=\\\"ts-sort-header-button\\\"\\n    type=\\\"button\\\"\\n    [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\"\\n    [attr.disabled]=\\\"_isDisabled() || null\\\"\\n    (click)=\\\"_handleClick()\\\"\\n  >\\n    <ng-content></ng-content>\\n\\n    <ts-icon\\n      class=\\\"ts-sort-header-container__icon\\\"\\n      [class.ts-sort-header-container__icon--hidden]=\\\"_isSorted()\\\"\\n    >swap_vert</ts-icon>\\n\\n    <div\\n      class=\\\"ts-sort-header-arrow\\\"\\n      *ngIf=\\\"_isSorted()\\\"\\n      [@indicatorToggle]=\\\"_sort.direction\\\"\\n    >\\n      <div class=\\\"ts-sort-header-stem\\\"></div>\\n\\n      <div class=\\\"ts-sort-header-indicator\\\" [@indicator]=\\\"_sort.direction\\\" >\\n        <div class=\\\"ts-sort-header-pointer-left\\\" [@leftPointer]=\\\"_sort.direction\\\"></div>\\n        <div class=\\\"ts-sort-header-pointer-right\\\" [@rightPointer]=\\\"_sort.direction\\\"></div>\\n        <div class=\\\"ts-sort-header-pointer-middle\\\"></div>\\n      </div>\\n    </div>\\n  </button>\\n</div>\\n\\n<span class=\\\"cdk-visually-hidden\\\" *ngIf=\\\"_isSorted()\\\">\\n  &nbsp;{{ _intl.sortDescriptionLabel(id, _sort.direction) }}\\n</span>\\n\",\n        host: {\n            'class': 'ts-sortable',\n            '[class.ts-sort-header-sorted]': '_isSorted()',\n            '[class.ts-sort-header-disabled]': '_isDisabled()',\n        },\n        preserveWhitespaces: false,\n        // NOTE: @Inputs are defined here rather than using decorators since we are extending the @Inputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n        inputs: ['disabled'],\n        animations: [\n            tsSortAnimations.indicator,\n            tsSortAnimations.leftPointer,\n            tsSortAnimations.rightPointer,\n            tsSortAnimations.indicatorToggle,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsSortHeader',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-sort-header-container{align-items:center;display:flex;position:relative}.ts-sort-header-disabled .ts-sort-header-container{cursor:default}.ts-sort-header-container__icon{opacity:0;position:absolute;right:0;top:50%;transform:translate(22%,-42%);transition:opacity .2s ease-out .2s}.ts-sort-header-container__icon--hidden{opacity:0;transition:opacity .1s ease-out .1s}.ts-sort-header-position-before{flex-direction:row-reverse}.ts-sort-header-button{align-items:center;background:0 0;border:none;color:currentColor;cursor:pointer;display:block;font:inherit;outline:0;overflow:hidden;padding:0 1.4em 0 0;position:relative;text-overflow:ellipsis}.ts-sort-header-button:focus .ts-sort-header-container__icon:not(.ts-sort-header-container__icon--hidden),.ts-sort-header-button:hover .ts-sort-header-container__icon:not(.ts-sort-header-container__icon--hidden){opacity:1}.ts-sort-header-arrow{display:flex;height:12px;margin:-2px 0 0 6px;min-width:12px;position:absolute;right:0;top:50%;transform:translateY(-50%);width:12px}.ts-sort-header-position-before .ts-sort-header-arrow{margin:0 6px 0 0}.ts-sort-header-stem{align-items:center;background:currentColor;display:flex;height:10px;margin:auto;width:2px}.ts-sort-header-indicator{align-items:center;display:flex;height:2px;left:0;position:absolute;top:0;transition:225ms cubic-bezier(.4,0,.2,1);width:100%}.ts-sort-header-pointer-middle{background:currentColor;height:2px;margin:auto;transform:rotate(45deg);width:2px}.ts-sort-header-pointer-left,.ts-sort-header-pointer-right{background:currentColor;height:2px;position:absolute;top:0;transition:225ms cubic-bezier(.4,0,.2,1);width:6px}.ts-sort-header-pointer-left{left:0;transform-origin:right}.ts-sort-header-pointer-right{right:0;transform-origin:left}\"]\n    }),\n    __param(2, Optional()),\n    __param(3, Optional()),\n    __metadata(\"design:paramtypes\", [TsSortHeaderIntl,\n        ChangeDetectorRef,\n        TsSortDirective,\n        CdkColumnDef])\n], TsSortHeaderComponent);\n\n/**\n * Much of this was lifted directly from Angular Material. I highly recommend checking out their\n * source code: https://github.com/angular/material2/tree/master/src/lib/sort\n */\nlet TsSortModule = class TsSortModule {\n};\nTsSortModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            TsIconModule,\n        ],\n        providers: [TS_SORT_HEADER_INTL_PROVIDER],\n        declarations: [\n            TsSortDirective,\n            TsSortHeaderComponent,\n        ],\n        exports: [\n            TsSortDirective,\n            TsSortHeaderComponent,\n        ],\n    })\n], TsSortModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TS_SORT_HEADER_INTL_PROVIDER, TS_SORT_HEADER_INTL_PROVIDER_FACTORY, TsSortDirective, TsSortHeaderComponent, TsSortHeaderIntl, TsSortModule, tsSortAnimations };\n//# sourceMappingURL=terminus-ui-sort.js.map\n","<div\n  class=\"ts-sort-header-container\"\n  [class.ts-sort-header-position-before]=\"arrowPosition == 'before'\"\n>\n  <button\n    class=\"ts-sort-header-button\"\n    type=\"button\"\n    [attr.aria-label]=\"_intl.sortButtonLabel(id)\"\n    [attr.disabled]=\"_isDisabled() || null\"\n    (click)=\"_handleClick()\"\n  >\n    <ng-content></ng-content>\n\n    <ts-icon\n      class=\"ts-sort-header-container__icon\"\n      [class.ts-sort-header-container__icon--hidden]=\"_isSorted()\"\n    >swap_vert</ts-icon>\n\n    <div\n      class=\"ts-sort-header-arrow\"\n      *ngIf=\"_isSorted()\"\n      [@indicatorToggle]=\"_sort.direction\"\n    >\n      <div class=\"ts-sort-header-stem\"></div>\n\n      <div class=\"ts-sort-header-indicator\" [@indicator]=\"_sort.direction\" >\n        <div class=\"ts-sort-header-pointer-left\" [@leftPointer]=\"_sort.direction\"></div>\n        <div class=\"ts-sort-header-pointer-right\" [@rightPointer]=\"_sort.direction\"></div>\n        <div class=\"ts-sort-header-pointer-middle\"></div>\n      </div>\n    </div>\n  </button>\n</div>\n\n<span class=\"cdk-visually-hidden\" *ngIf=\"_isSorted()\">\n  &nbsp;{{ _intl.sortDescriptionLabel(id, _sort.direction) }}\n</span>\n","import { __decorate, __metadata, __param } from 'tslib';\nimport { CdkColumnDef, CdkCellDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkFooterCellDef, CdkFooterCell, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkRow, CdkHeaderRowDef, CdkFooterRowDef, CdkFooterRow, CdkRowDef, CdkTable, CDK_TABLE_TEMPLATE, CdkTableModule } from '@angular/cdk/table';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ElementRef, Input, Directive, isDevMode, EventEmitter, Renderer2, NgZone, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, IterableDiffers, ChangeDetectorRef, Attribute, Inject, Optional, ContentChildren, QueryList, NgModule } from '@angular/core';\nimport { TsPaginatorModule } from '@terminus/ui-paginator';\nimport { TsSortModule } from '@terminus/ui-sort';\nimport { Subject, fromEvent, defer, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, take, pluck, switchMap } from 'rxjs/operators';\nimport { TsDocumentService, TsWindowService } from '@terminus/ngx-tools/browser';\nimport { untilComponentDestroyed, debounce } from '@terminus/ngx-tools/utilities';\nimport { TsUILibraryError } from '@terminus/ui-utilities';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nvar TsColumnDefDirective_1;\n/**\n * An array of the allowed {@link TsTableColumnAlignment} for checking values\n */\nconst tsTableColumnAlignmentTypesArray = [\n    'left',\n    'center',\n    'right',\n];\n/**\n * Column definition for the {@link TsTableComponent}.\n *\n * Defines a set of cells available for a table column.\n */\nlet TsColumnDefDirective = TsColumnDefDirective_1 = class TsColumnDefDirective extends CdkColumnDef {\n    constructor(elementRef) {\n        super();\n        this.elementRef = elementRef;\n        /**\n         * Define if the column should stick to the start\n         */\n        this.sticky = false;\n        /**\n         * Define if a column should stick to the end\n         */\n        this.stickyEnd = false;\n    }\n};\nTsColumnDefDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\n__decorate([\n    Input('tsColumnDef'),\n    __metadata(\"design:type\", String)\n], TsColumnDefDirective.prototype, \"name\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsColumnDefDirective.prototype, \"alignment\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsColumnDefDirective.prototype, \"sticky\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsColumnDefDirective.prototype, \"stickyEnd\", void 0);\nTsColumnDefDirective = TsColumnDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsColumnDef]',\n        providers: [\n            {\n                provide: CdkColumnDef,\n                useExisting: TsColumnDefDirective_1,\n            },\n            {\n                provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n                useExisting: TsColumnDefDirective_1,\n            },\n        ],\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef])\n], TsColumnDefDirective);\n\nvar TsCellDefDirective_1, TsHeaderCellDefDirective_1, TsHeaderCellDirective_1, TsFooterCellDefDirective_1;\n/**\n * The minimum width for columns\n */\nconst TS_TABLE_MIN_COLUMN_WIDTH = 70;\n// Unique ID for each instance\nlet cellNextUniqueId = 0;\nlet headerNextUniqueId = 0;\n/**\n * Set the column alignment styles\n *\n * @param column - The column definition\n * @param renderer - The Renderer2\n * @param elementRef - The element ref to add the class to\n */\nfunction setColumnAlignment(column, renderer, elementRef) {\n    if (column.alignment) {\n        // Verify the alignment value is allowed\n        if (tsTableColumnAlignmentTypesArray.indexOf(column.alignment) < 0 && isDevMode()) {\n            throw new TsUILibraryError(`TsCellDirective: \"${column.alignment}\" is not an allowed alignment.`\n                + `See \"TsTableColumnAlignment\" type for available options.`);\n        }\n        renderer.addClass(elementRef.nativeElement, `ts-cell--align-${column.alignment}`);\n    }\n}\n/**\n * Cell definition for the {@link TsTableComponent}.\n *\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nlet TsCellDefDirective = TsCellDefDirective_1 = class TsCellDefDirective extends CdkCellDef {\n};\nTsCellDefDirective = TsCellDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsCellDef]',\n        providers: [{\n                provide: CdkCellDef,\n                useExisting: TsCellDefDirective_1,\n            }],\n    })\n], TsCellDefDirective);\n/**\n * Header cell definition for the {@link TsTableComponent}.\n *\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nlet TsHeaderCellDefDirective = TsHeaderCellDefDirective_1 = class TsHeaderCellDefDirective extends CdkHeaderCellDef {\n};\nTsHeaderCellDefDirective = TsHeaderCellDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsHeaderCellDef]',\n        providers: [{\n                provide: CdkHeaderCellDef,\n                useExisting: TsHeaderCellDefDirective_1,\n            }],\n    })\n], TsHeaderCellDefDirective);\n/**\n * Define the event object for header cell resize events\n */\nclass TsHeaderCellResizeEvent {\n    constructor(\n    // The header cell instance that originated the event\n    instance, \n    // The new width\n    width) {\n        this.instance = instance;\n        this.width = width;\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nlet TsHeaderCellDirective = TsHeaderCellDirective_1 = class TsHeaderCellDirective extends CdkHeaderCell {\n    constructor(columnDef, elementRef, renderer, documentService, ngZone) {\n        super(columnDef, elementRef);\n        this.columnDef = columnDef;\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.documentService = documentService;\n        this.ngZone = ngZone;\n        /**\n         * Stream used inside takeUntil pipes\n         */\n        this.killStream$ = new Subject();\n        /**\n         * Define the class for the resizable element\n         */\n        this.resizerClass = 'ts-header-cell__resizer';\n        /**\n         * Store the starting offset when a resize event begins\n         */\n        this.startOffsetX = 0;\n        /**\n         * Store the starting width of a cell before resizing\n         */\n        this.startWidth = 0;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-table-header-cell-${headerNextUniqueId++}`;\n        /**\n         * Store the current cell width\n         */\n        this.width = 'auto';\n        /**\n         * Event emitted when the cell is resized\n         */\n        this.resized = new EventEmitter();\n    }\n    /**\n     * Return the current set width\n     */\n    get cellWidth() {\n        return parseInt(this.width, 0);\n    }\n    /**\n     * Return a reference to the resize element\n     */\n    get resizeElement() {\n        return this.elementRef.nativeElement.querySelector(`.${this.resizerClass}`);\n    }\n    /**\n     * Initial setup\n     */\n    ngOnInit() {\n        this.column = this.columnDef;\n        this.elementRef.nativeElement.classList.add(`ts-column-${this.column.cssClassFriendlyName}`);\n        // eslint-disable-next-line no-underscore-dangle\n        if (this.column._stickyEnd) {\n            this.elementRef.nativeElement.classList.add(`ts-table__column--sticky-end`);\n        }\n        if (this.column.sticky) {\n            this.elementRef.nativeElement.classList.add(`ts-table__column--sticky`);\n        }\n        setColumnAlignment(this.column, this.renderer, this.elementRef);\n    }\n    /**\n     * Remove all event listeners when destroyed\n     */\n    ngOnDestroy() {\n        this.killStream$.complete();\n    }\n    /**\n     * Inject the resize 'grabber' element.\n     *\n     * Called by {@link TsTableComponent}\n     */\n    injectResizeElement() {\n        // If the element has been injected before, remove it\n        if (this.resizeElement) {\n            this.renderer.removeChild(this.elementRef.nativeElement, this.resizeElement);\n        }\n        const resizeElement = this.renderer.createElement('span');\n        resizeElement.classList.add(this.resizerClass);\n        resizeElement.classList.add(`${this.resizerClass}--${this.columnDef.cssClassFriendlyName}`);\n        resizeElement.title = 'Drag to resize column.';\n        this.renderer.appendChild(this.elementRef.nativeElement, resizeElement);\n        this.ngZone.runOutsideAngular(() => {\n            // TODO: Refactor deprecation\n            // eslint-disable-next-line deprecation/deprecation\n            fromEvent(resizeElement, 'mousedown')\n                .pipe(untilComponentDestroyed(this))\n                .subscribe(e => this.onResizeColumn(e));\n            // TODO: Refactor deprecation\n            // eslint-disable-next-line deprecation/deprecation\n            fromEvent(resizeElement, 'click')\n                .pipe(untilComponentDestroyed(this))\n                .subscribe(e => e.stopPropagation());\n            // TODO: Refactor deprecation\n            // eslint-disable-next-line deprecation/deprecation\n            fromEvent(resizeElement, 'mouseenter')\n                .pipe(untilComponentDestroyed(this))\n                .subscribe(() => this.syncHoverClass(true));\n            // TODO: Refactor deprecation\n            // eslint-disable-next-line deprecation/deprecation\n            fromEvent(resizeElement, 'mouseleave')\n                .pipe(untilComponentDestroyed(this))\n                .subscribe(() => this.syncHoverClass(false));\n        });\n    }\n    /**\n     * Return the new width if above the minimum width\n     *\n     * @param start - The starting width\n     * @param difference - The amount moved\n     * @returns The final column width\n     */\n    static determineWidth(start, difference) {\n        const total = start + difference;\n        return (total >= TS_TABLE_MIN_COLUMN_WIDTH) ? total : TS_TABLE_MIN_COLUMN_WIDTH;\n    }\n    /**\n     * Save initial width and offset, bind to more events\n     *\n     * @param event - The mouse event\n     */\n    onResizeColumn(event) {\n        this.startOffsetX = event.clientX;\n        this.startWidth = this.cellWidth;\n        // TODO: Refactor deprecation\n        // eslint-disable-next-line deprecation/deprecation\n        fromEvent(this.documentService.document, 'mousemove')\n            .pipe(untilComponentDestroyed(this), takeUntil(this.killStream$)).subscribe(e => {\n            const diff = e.clientX - this.startOffsetX;\n            const newWidth = TsHeaderCellDirective_1.determineWidth(this.startWidth, diff);\n            // istanbul ignore else\n            if (newWidth) {\n                this.setColumnWidth(newWidth);\n            }\n        });\n        // TODO: Refactor deprecation\n        // eslint-disable-next-line deprecation/deprecation\n        fromEvent(this.documentService.document, 'mouseup')\n            .pipe(untilComponentDestroyed(this), take(1)).subscribe(() => {\n            this.startOffsetX = 0;\n            this.startWidth = 0;\n            this.killStream$.next(void 0);\n            this.resized.emit(new TsHeaderCellResizeEvent(this, this.elementRef.nativeElement.offsetWidth));\n        });\n    }\n    /**\n     * Set the column width style and save the width\n     *\n     * @param width - The width to set\n     */\n    setColumnWidth(width) {\n        this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${width}px`);\n        this.width = `${width}px`;\n    }\n    /**\n     * Sync the hovered class\n     *\n     * @param isHovered - Whether the resize element is currently hovered\n     */\n    syncHoverClass(isHovered) {\n        isHovered\n            ? this.renderer.addClass(this.elementRef.nativeElement, 'ts-cell--resizing')\n            : this.renderer.removeClass(this.elementRef.nativeElement, 'ts-cell--resizing');\n    }\n};\nTsHeaderCellDirective.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: TsDocumentService },\n    { type: NgZone }\n];\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsHeaderCellDirective.prototype, \"resized\", void 0);\nTsHeaderCellDirective = TsHeaderCellDirective_1 = __decorate([\n    Directive({\n        // eslint-disable-next-line @angular-eslint/directive-selector\n        selector: 'ts-header-cell, th[ts-header-cell]',\n        host: {\n            'class': 'ts-header-cell',\n            'role': 'columnheader',\n            '[id]': 'uid',\n        },\n        exportAs: 'tsHeaderCell',\n    }),\n    __metadata(\"design:paramtypes\", [CdkColumnDef,\n        ElementRef,\n        Renderer2,\n        TsDocumentService,\n        NgZone])\n], TsHeaderCellDirective);\n/**\n * Cell template container that adds the right classes and role.\n */\nlet TsCellDirective = class TsCellDirective extends CdkCell {\n    constructor(elementRef, columnDef, renderer) {\n        super(columnDef, elementRef);\n        this.elementRef = elementRef;\n        this.columnDef = columnDef;\n        this.renderer = renderer;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-table-cell-${cellNextUniqueId++}`;\n    }\n    /**\n     * Initial setup\n     */\n    ngOnInit() {\n        // HACK: Changing the type in the constructor from `CdkColumnDef` to `TsColumnDefDirective` doesn't seem to play well with the CDK.\n        // Coercing the type here is a hack, but allows us to reference properties that do not exist on the underlying `CdkColumnDef`.\n        this.column = this.columnDef;\n        // Set a custom class for each column\n        this.elementRef.nativeElement.classList.add(`ts-column-${this.column.cssClassFriendlyName}`);\n        setColumnAlignment(this.column, this.renderer, this.elementRef);\n        // eslint-disable-next-line no-underscore-dangle\n        if (this.column._stickyEnd) {\n            this.elementRef.nativeElement.classList.add(`ts-table__column--sticky-end`);\n        }\n        if (this.column.sticky) {\n            this.elementRef.nativeElement.classList.add(`ts-table__column--sticky`);\n        }\n    }\n};\nTsCellDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkColumnDef },\n    { type: Renderer2 }\n];\nTsCellDirective = __decorate([\n    Directive({\n        // eslint-disable-next-line @angular-eslint/directive-selector\n        selector: 'ts-cell, td[ts-cell]',\n        host: {\n            class: 'ts-cell',\n            role: 'gridcell',\n        },\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        CdkColumnDef,\n        Renderer2])\n], TsCellDirective);\n/**\n * Footer cell definition for the mat-table.\n *\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nlet TsFooterCellDefDirective = TsFooterCellDefDirective_1 = class TsFooterCellDefDirective extends CdkFooterCellDef {\n};\nTsFooterCellDefDirective = TsFooterCellDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsFooterCellDef]',\n        providers: [{\n                provide: CdkFooterCellDef,\n                useExisting: TsFooterCellDefDirective_1,\n            }],\n    })\n], TsFooterCellDefDirective);\n/**\n * Footer cell template container that adds the right classes and role.\n */\nlet TsFooterCellDirective = class TsFooterCellDirective extends CdkFooterCell {\n    constructor(columnDef, elementRef, renderer) {\n        super(columnDef, elementRef);\n        this.columnDef = columnDef;\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n    }\n    /**\n     * Initial setup\n     */\n    ngOnInit() {\n        // HACK: Changing the type in the constructor from `CdkColumnDef` to `TsColumnDefDirective` doesn't seem to play well with the CDK.\n        // Coercing the type here is a hack, but allows us to reference properties that do not exist on the underlying `CdkColumnDef`.\n        this.column = this.columnDef;\n        // Set a custom class for each column\n        this.elementRef.nativeElement.classList.add(`ts-column-${this.column.cssClassFriendlyName}`);\n        setColumnAlignment(this.column, this.renderer, this.elementRef);\n        // eslint-disable-next-line no-underscore-dangle\n        if (this.column._stickyEnd) {\n            this.elementRef.nativeElement.classList.add(`ts-table__column--sticky-end`);\n        }\n        if (this.column.sticky) {\n            this.elementRef.nativeElement.classList.add(`ts-table__column--sticky`);\n        }\n    }\n};\nTsFooterCellDirective.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nTsFooterCellDirective = __decorate([\n    Directive({\n        // eslint-disable-next-line @angular-eslint/directive-selector\n        selector: 'ts-footer-cell, td[ts-footer-cell]',\n        host: {\n            class: 'ts-footer-cell',\n            role: 'gridcell',\n        },\n    }),\n    __metadata(\"design:paramtypes\", [CdkColumnDef,\n        ElementRef,\n        Renderer2])\n], TsFooterCellDirective);\n\nvar TsHeaderRowDefDirective_1, TsFooterRowDefDirective_1, TsFooterRowComponent_1, TsRowDefDirective_1;\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nlet TsHeaderRowComponent = class TsHeaderRowComponent extends CdkHeaderRow {\n    constructor(elementRef) {\n        super();\n        this.elementRef = elementRef;\n    }\n};\nTsHeaderRowComponent.ctorParameters = () => [\n    { type: ElementRef }\n];\nTsHeaderRowComponent = __decorate([\n    Component({\n        selector: 'ts-header-row, tr[ts-header-row]',\n        template: CDK_ROW_TEMPLATE,\n        host: {\n            class: 'ts-header-row',\n            role: 'row',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsHeaderRow',\n        preserveWhitespaces: false\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef])\n], TsHeaderRowComponent);\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nlet TsRowComponent = class TsRowComponent extends CdkRow {\n    constructor(elementRef) {\n        super();\n        this.elementRef = elementRef;\n    }\n};\nTsRowComponent.ctorParameters = () => [\n    { type: ElementRef }\n];\nTsRowComponent = __decorate([\n    Component({\n        selector: 'ts-row, tr[ts-row]',\n        template: CDK_ROW_TEMPLATE,\n        host: {\n            class: 'ts-row',\n            role: 'row',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsRow',\n        preserveWhitespaces: false\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef])\n], TsRowComponent);\n/**\n * Header row definition for the {@link TsTableComponent}.\n *\n * Captures the header row's template and other header properties such as the columns to display.\n */\nlet TsHeaderRowDefDirective = TsHeaderRowDefDirective_1 = class TsHeaderRowDefDirective extends CdkHeaderRowDef {\n};\nTsHeaderRowDefDirective = TsHeaderRowDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsHeaderRowDef]',\n        providers: [\n            {\n                provide: CdkHeaderRowDef,\n                useExisting: TsHeaderRowDefDirective_1,\n            },\n            {\n                provide: CdkHeaderRow,\n                useExisting: TsHeaderRowComponent,\n            },\n        ],\n        // NOTE: @Inputs are defined here rather than using decorators since we are extending the @Inputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n        inputs: [\n            'columns: tsHeaderRowDef',\n            'sticky: tsHeaderRowDefSticky',\n        ],\n    })\n], TsHeaderRowDefDirective);\n/**\n * Footer row definition for the {@link TsTableComponent}.\n *\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nlet TsFooterRowDefDirective = TsFooterRowDefDirective_1 = class TsFooterRowDefDirective extends CdkFooterRowDef {\n};\nTsFooterRowDefDirective = TsFooterRowDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsFooterRowDef]',\n        providers: [{\n                provide: CdkFooterRowDef,\n                useExisting: TsFooterRowDefDirective_1,\n            }],\n        // NOTE: @Inputs are defined here rather than using decorators since we are extending the @Inputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n        inputs: [\n            'columns: tsFooterRowDef',\n            'sticky: tsFooterRowDefSticky',\n        ],\n    })\n], TsFooterRowDefDirective);\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nlet TsFooterRowComponent = TsFooterRowComponent_1 = class TsFooterRowComponent extends CdkFooterRow {\n};\nTsFooterRowComponent = TsFooterRowComponent_1 = __decorate([\n    Component({\n        selector: 'ts-footer-row, tr[ts-footer-row]',\n        template: CDK_ROW_TEMPLATE,\n        host: {\n            class: 'ts-footer-row',\n            role: 'row',\n        },\n        providers: [{\n                provide: CdkFooterRow,\n                useExisting: TsFooterRowComponent_1,\n            }],\n        // See note on CdkTable for explanation on why this uses the default change detection strategy.\n        // eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection\n        changeDetection: ChangeDetectionStrategy.Default,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsFooterRow'\n    })\n], TsFooterRowComponent);\n/**\n * Data row definition for the {@link TsTableComponent}.\n *\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nlet TsRowDefDirective = TsRowDefDirective_1 = class TsRowDefDirective extends CdkRowDef {\n};\nTsRowDefDirective = TsRowDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsRowDef]',\n        providers: [\n            {\n                provide: CdkRowDef,\n                useExisting: TsRowDefDirective_1,\n            },\n            {\n                provide: CdkRow,\n                useExisting: TsRowComponent,\n            },\n        ],\n        // NOTE: @Inputs are defined here rather than using decorators since we are extending the @Inputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n        inputs: [\n            'columns: tsRowDefColumns',\n            'when: tsRowDefWhen',\n        ],\n    })\n], TsRowDefDirective);\n\nvar TsTableComponent_1;\n/**\n * The default debounce delay for column sizing update calls\n */\nconst COLUMN_DEBOUNCE_DELAY = 100;\nconst VIEWPORT_DEBOUNCE = 500;\n/**\n * The payload for a columns change event\n */\nclass TsTableColumnsChangeEvent {\n    constructor(\n    // The table instance that originated the event\n    table, \n    // The updated array of columns\n    columns) {\n        this.table = table;\n        this.columns = columns;\n    }\n}\n// Unique ID for each instance\nlet nextUniqueId = 0;\n/**\n * The primary data table implementation\n *\n * @example\n *  <ts-table\n *               [columns]=\"myColumns\"\n *               [dataSource]=\"dataSource\"\n *               [multiTemplateDataRows]=\"false\"\n *               [trackBy]=\"myTrackByFn\"\n *               (columnsChange)=\"columnsWereUpdated($event)\n *               #myTable=\"tsTable\"\n *  >\n *               <ng-container tsColumnDef=\"title\">\n *                 <ts-header-cell *tsHeaderCellDef>\n *                   Title\n *                 </ts-header-cell>\n *                 <ts-cell *tsCellDef=\"let item\">\n *                   {{ item.title }}\n *                 </ts-cell>\n *               </ng-container>\n *\n *               <ng-container tsColumnDef=\"id\">\n *                 <ts-header-cell *tsHeaderCellDef>\n *                   ID\n *                 </ts-header-cell>\n *                 <ts-cell *tsCellDef=\"let item\">\n *                   {{ item.id }},\n *                 </ts-cell>\n *               </ng-container>\n *\n *               <ts-header-row *tsHeaderRowDef=\"myTable.columnNames\"></ts-header-row>\n *               <ts-row *tsRowDef=\"let row; columns: myTable.columnNames;\"></ts-row>\n *  </ts-table>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/table</example-url>\n */\nlet TsTableComponent = TsTableComponent_1 = \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass TsTableComponent extends CdkTable {\n    constructor(platform, renderer, differs, changeDetectorRef, role, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    document, dir, elementRef, ngZone, windowService, viewportRuler) {\n        super(differs, changeDetectorRef, elementRef, role, dir, document, platform);\n        this.platform = platform;\n        this.renderer = renderer;\n        this.differs = differs;\n        this.changeDetectorRef = changeDetectorRef;\n        this.document = document;\n        this.dir = dir;\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n        this.windowService = windowService;\n        this.viewportRuler = viewportRuler;\n        /**\n         * Combined stream of all of the columns resized events\n         */\n        this.columnResizeChanges$ = defer(() => {\n            if (this.headerCells && this.headerCells.length) {\n                // TODO: Refactor deprecation\n                // eslint-disable-next-line deprecation/deprecation\n                return merge(...this.headerCells.map(cell => cell.resized)).pipe(pluck('instance'), untilComponentDestroyed(this));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // In that case, return a stream that we'll replace with the real one once everything is in place.\n            return this.ngZone.onStable\n                .asObservable()\n                // TODO: Refactor deprecation\n                // eslint-disable-next-line deprecation/deprecation\n                .pipe(take(1), switchMap(() => this.columnResizeChanges$));\n        });\n        /**\n         * Create a debounced function to update CDK sticky styles\n         */\n        this.debouncedStickyColumnUpdate = debounce(this.updateStickyColumnStyles, COLUMN_DEBOUNCE_DELAY);\n        /**\n         * Store a mutable array of internal column definitions\n         */\n        this.columnsInternal = [];\n        /**\n         * Override the sticky CSS class set by the `CdkTable`\n         */\n        this.stickyCssClass = 'ts-table--sticky';\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-table-${nextUniqueId++}`;\n        this._columns = [];\n        /**\n         * Define the density of the cells\n         */\n        this.density = 'comfy';\n        this._id = this.uid;\n        /**\n         * Emit when a column is resized\n         *\n         * NOTE: This output is not debounce or throttled and may be called repeatedly\n         */\n        this.columnsChange = new EventEmitter();\n    }\n    /**\n     * Return a simple array of column names\n     *\n     * Used by {@link TsHeaderRowDefDirective} and {@link TsRowDefDirective}.\n     */\n    get columnNames() {\n        return this.columns.map(c => c.name);\n    }\n    /**\n     * Build array of columns to emit out to the consumer\n     */\n    get columnsToSendToConsumer() {\n        const internalColumns = this.getFreshColumnsCopy(this.columnsInternal);\n        const userColumns = this.getFreshColumnsCopy();\n        const lastIndex = internalColumns.length - 1;\n        // Reset the last column width to the consumer defined width\n        internalColumns[lastIndex].width = userColumns[lastIndex].width;\n        return internalColumns;\n    }\n    /**\n     * Return the width of the element wrapping the table\n     */\n    get containerWidth() {\n        return this.parentElement.offsetWidth;\n    }\n    /**\n     * Determine if the container around the table has overflow (ie the table is scrollable)\n     */\n    get hasOverflowX() {\n        return this.parentElement.scrollWidth > this.tableWidth;\n    }\n    /**\n     * Return the parent HTMLElement\n     */\n    get parentElement() {\n        return this.elementRef.nativeElement.parentNode;\n    }\n    /**\n     * Determine the remaining space in the table after the columns take up their needed width\n     */\n    get remainingTableSpace() {\n        // NOTE: The outer borders take up 2px so we subtract them here to avoid a 2px overflow.\n        const borderOffset = 2;\n        const remainingWidth = (this.containerWidth - this.totalWidthOfColumns) - borderOffset;\n        return (remainingWidth > 0) ? remainingWidth : 0;\n    }\n    /**\n     * Return the width of the table\n     */\n    get tableWidth() {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n    /**\n     * Return the total width of all visible columns\n     */\n    get totalWidthOfColumns() {\n        const currentWidths = this.headerCells.map(hc => hc.cellWidth);\n        const userWidths = this.columns.map(v => v.width);\n        const columnsToReduce = currentWidths.slice();\n        // NOTE: Since the last column is never resized by the user, we should use the original size for the last column and the current\n        // size for all other columns.\n        const lastIndex = userWidths.length - 1;\n        columnsToReduce[lastIndex] = this.columns[lastIndex].width;\n        return columnsToReduce.reduce((a, b) => a + b, 0);\n    }\n    /**\n     * Define the array of columns\n     *\n     * @param value\n     */\n    set columns(value) {\n        // istanbul ignore else\n        if (value && (value.length > 0)) {\n            this._columns = this.getFreshColumnsCopy(value);\n            this.columnsInternal = this.getFreshColumnsCopy(value);\n        }\n    }\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * Define a custom ID\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Subscribe to viewport changes\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        this.viewportChange$ = this.viewportRuler.change(VIEWPORT_DEBOUNCE).pipe(untilComponentDestroyed(this));\n        this.viewportChange$.pipe(untilComponentDestroyed(this)).subscribe(() => {\n            this.windowService.nativeWindow.requestAnimationFrame(() => {\n                this.updateInternalColumns(this.getFreshColumnsCopy());\n                this.columnsChange.emit(new TsTableColumnsChangeEvent(this, this.columnsToSendToConsumer));\n            });\n        });\n    }\n    /**\n     * Set up header cell changes subscription\n     */\n    ngAfterViewChecked() {\n        this.subscribeToHeaderCellChanges();\n    }\n    /**\n     * Subscribe to column resize events\n     */\n    ngAfterContentInit() {\n        this.columnResizeChanges$\n            .subscribe(v => {\n            this.updateLastColumnWidth();\n            // Update the recorded width for the changed column\n            const found = this.columnsInternal.find(column => column.name === v.columnDef.name);\n            // istanbul ignore else\n            if (found) {\n                found.width = v.cellWidth;\n            }\n            this.columnsChange.emit(new TsTableColumnsChangeEvent(this, this.columnsToSendToConsumer));\n        });\n    }\n    /**\n     * NOTE: Must be present for `untilComponentDestroyed`\n     */\n    ngOnDestroy() {\n        // istanbul ignore else\n        if (this.headerCellSubscription) {\n            this.headerCellSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Adjusts the last column of the array to fill any remaining space inside the table\n     *\n     * NOTE: Due to issues during testing, we have not made this function static.\n     *\n     * @param columns - The array of columns to adjust\n     * @param remainingWidth - The remaining table width to be added to the last column\n     * @returns The adjusted array of columns\n     */\n    addRemainingSpaceToLastColumn(columns, remainingWidth) {\n        const lastColumn = columns[columns.length - 1];\n        lastColumn.width = lastColumn.width + remainingWidth;\n        return columns;\n    }\n    /**\n     * Return a fresh clone of the passed in array of columns\n     *\n     * @param columns - The array of columns to clone\n     * @returns The array of fresh columns\n     */\n    getFreshColumnsCopy(columns = this.columns) {\n        return columns.slice().map(c => (Object.assign({}, c)));\n    }\n    /**\n     * Set the column widths for all columns passed in\n     *\n     * @param columns - The array of columns\n     */\n    setAllColumnsToDefinedWidths(columns) {\n        for (const column of columns) {\n            this.setColumnWidthStyle(column.name, column.width, false);\n        }\n        this.updateStickyCellsIfNeeded();\n    }\n    /**\n     * Set the width for a specific column\n     *\n     * @param columnName - The name of the column that needs it's width updated\n     * @param width - The width to set\n     * @param updateStickCells - Whether the sticky cells should be updated\n     */\n    setColumnWidthStyle(columnName, width, updateStickCells = true) {\n        // eslint-disable-next-line no-underscore-dangle\n        const columnDirective = this.headerCells.find(cell => cell.columnDef._name === columnName);\n        // istanbul ignore else\n        if (columnDirective) {\n            columnDirective.setColumnWidth(width);\n            // istanbul ignore else\n            if (updateStickCells) {\n                this.updateStickyCellsIfNeeded();\n            }\n        }\n    }\n    /**\n     * Set up subscription to header cell changes\n     */\n    subscribeToHeaderCellChanges() {\n        if (this.headerCellSubscription) {\n            this.headerCellSubscription.unsubscribe();\n        }\n        this.headerCellSubscription = this.headerCells.changes\n            .pipe(untilComponentDestroyed(this))\n            .subscribe(() => {\n            // 1. Set user widths\n            this.setAllColumnsToDefinedWidths(this.getFreshColumnsCopy());\n            // 2. Add space to last column as needed\n            this.updateLastColumnWidth();\n            // 3. Set all widths to internal columns\n            this.setAllColumnsToDefinedWidths(this.getFreshColumnsCopy(this.columnsInternal));\n            // 4. Alert the consumer\n            this.columnsChange.emit(new TsTableColumnsChangeEvent(this, this.columnsToSendToConsumer));\n            // Inject the header cell resize element in every cell except the last (last column is not resizable)\n            this.headerCells.forEach((headerCellDirective, i) => {\n                if (i !== this.headerCells.length - 1) {\n                    headerCellDirective.injectResizeElement();\n                }\n            });\n        });\n    }\n    /**\n     * Update the internal columns array and set widths\n     *\n     * @param columns - The array of columns to update\n     */\n    updateInternalColumns(columns) {\n        // If there is space left over, add all remaining space to the last column\n        if (!this.hasOverflowX) {\n            columns = this.addRemainingSpaceToLastColumn(columns, this.remainingTableSpace);\n        }\n        this.columnsInternal = columns;\n        this.setAllColumnsToDefinedWidths(this.columnsInternal);\n    }\n    /**\n     * Update the last column's width and update the internal columns\n     */\n    updateLastColumnWidth() {\n        // 1. Determine last column width\n        const columns = this.getFreshColumnsCopy();\n        const lastIndex = columns.length - 1;\n        const lastColumn = columns[lastIndex];\n        let newWidth = lastColumn.width;\n        if (!this.hasOverflowX) {\n            newWidth = lastColumn.width + this.remainingTableSpace;\n        }\n        // 2. Set the width\n        this.setColumnWidthStyle(lastColumn.name, newWidth);\n        // 3. Update internal columns\n        this.columnsInternal[lastIndex].width = newWidth;\n    }\n    /**\n     * Trigger an update on sticky cells if they exist\n     */\n    updateStickyCellsIfNeeded() {\n        // NOTE: To lessen the thrashing, only call the sticky column updater if there are defined sticky columns\n        const stickyCells = this.headerCells.toArray().filter(c => c.columnDef.sticky || c.columnDef.stickyEnd);\n        // istanbul ignore else\n        if (stickyCells.length) {\n            this.debouncedStickyColumnUpdate();\n        }\n    }\n};\nTsTableComponent.ctorParameters = () => [\n    { type: Platform },\n    { type: Renderer2 },\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: TsWindowService },\n    { type: ViewportRuler }\n];\n__decorate([\n    ContentChildren(TsHeaderCellDirective, { descendants: true }),\n    __metadata(\"design:type\", QueryList)\n], TsTableComponent.prototype, \"headerCells\", void 0);\n__decorate([\n    ContentChildren(TsRowComponent),\n    __metadata(\"design:type\", QueryList)\n], TsTableComponent.prototype, \"rows\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array),\n    __metadata(\"design:paramtypes\", [Array])\n], TsTableComponent.prototype, \"columns\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsTableComponent.prototype, \"density\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsTableComponent.prototype, \"id\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsTableComponent.prototype, \"columnsChange\", void 0);\nTsTableComponent = TsTableComponent_1 = __decorate([\n    Component({\n        selector: 'ts-table, table[ts-table]',\n        template: CDK_TABLE_TEMPLATE,\n        host: {\n            'class': 'ts-table',\n            '[class.ts-table--comfy]': 'density === \"comfy\"',\n            '[class.ts-table--compact]': 'density === \"compact\"',\n            '[id]': 'id',\n        },\n        providers: [{\n                provide: CdkTable,\n                useExisting: TsTableComponent_1,\n            }],\n        encapsulation: ViewEncapsulation.None,\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        exportAs: 'tsTable',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-table{--table-bg:#fafafa;--header-bg:#cecdd1;--header-text-color:#302d35;--border-color:#cecdd1;--header-border-color:#999;--drop-bg:#e8eef3;--z-index-base-context:2;--z-index-resize-background:calc(var(--z-index-base-context) + 1);--z-index-resize-grabber:calc(var(--z-index-resize-background) + 1);--cell-padding:16px;--sticky-end-z:50;--grip-vertical-adjustment:50%;font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:400;border-collapse:separate;border-spacing:unset;max-height:100%;table-layout:fixed;width:100%}.ts-table :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-table h1,.ts-table h2,.ts-table h3,.ts-table h4,.ts-table h5,.ts-table p{margin:unset}.ts-table:not(.c-button):not(.c-input):not(.c-select):not(.ts-checkbox){line-height:20px}.ts-table.ts-table--compact{--cell-padding:4px;--grip-vertical-adjustment:calc(50% - 4px)}.ts-table .ts-table__column--sticky-end:last-of-type.ts-header-cell{overflow:hidden}.ts-table .ts-table__column--sticky-end:last-of-type.ts-header-cell .ts-header-cell__resizer{transform:translateX(40%)}.ts-table .ts-header-row{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;background-color:var(--header-bg);color:var(--header-text-color);font-weight:700;transition:background-color .2s ease-out}.ts-table .ts-header-row::after{content:'';display:block}.ts-table .ts-row{border-bottom:1px solid var(--border-color)}.ts-table .ts-row:hover .ts-cell{background-color:var(--drop-bg)}.ts-table .ts-row::after{content:'';display:inline-block;min-height:inherit}.ts-table .ts-cell,.ts-table .ts-footer-cell,.ts-table .ts-header-cell{min-height:inherit;position:relative;text-align:left;word-wrap:break-word}.ts-table .ts-cell.ts-table__column--sticky-end,.ts-table .ts-footer-cell.ts-table__column--sticky-end,.ts-table .ts-header-cell.ts-table__column--sticky-end{border-left:2px solid var(--header-border-color)}.ts-table .ts-cell.ts-table__column--sticky:not(.ts-table__column--sticky-end),.ts-table .ts-footer-cell.ts-table__column--sticky:not(.ts-table__column--sticky-end),.ts-table .ts-header-cell.ts-table__column--sticky:not(.ts-table__column--sticky-end){border-right:2px solid var(--header-border-color)}.ts-table .ts-cell.ts-column-no-wrap,.ts-table .ts-footer-cell.ts-column-no-wrap,.ts-table .ts-header-cell.ts-column-no-wrap{white-space:nowrap}.ts-table .ts-cell--align-right,.ts-table .ts-footer-cell--align-right,.ts-table .ts-header-cell--align-right{text-align:right}.ts-table .ts-cell--align-right .ts-sort-header-container,.ts-table .ts-footer-cell--align-right .ts-sort-header-container,.ts-table .ts-header-cell--align-right .ts-sort-header-container{justify-content:flex-end}.ts-table .ts-cell--align-left,.ts-table .ts-footer-cell--align-left,.ts-table .ts-header-cell--align-left{text-align:left}.ts-table .ts-cell--align-center,.ts-table .ts-footer-cell--align-center,.ts-table .ts-header-cell--align-center{text-align:center}.ts-table .ts-cell,.ts-table .ts-footer-cell{background-color:var(--table-bg);overflow:hidden;padding:var(--cell-padding);text-overflow:ellipsis;transition:background-color .2s ease-out;white-space:nowrap}.ts-table .ts-cell.ts-table__column--sticky,.ts-table .ts-footer-cell.ts-table__column--sticky{background-color:var(--table-bg)}.ts-table .ts-header-cell{background-color:var(--header-bg);border-color:var(--header-border-color);padding:var(--cell-padding)}.ts-table .ts-header-cell:not(:last-of-type){position:relative}.ts-table .ts-header-cell:not(:last-of-type)::after{background-color:var(--header-border-color);bottom:0;content:'';display:block;left:calc(100% - 1px);opacity:0;position:absolute;top:0;transition:opacity .2s ease-out;width:1px;z-index:var(--z-index-base-context)}.ts-table .ts-header-cell:not(:last-of-type):focus::after,.ts-table .ts-header-cell:not(:last-of-type):hover::after{opacity:1}.ts-table .ts-header-cell.ts-sort-header-sorted{color:#2f854d}.ts-table .ts-header-cell:nth-child(1){z-index:39!important}.ts-table .ts-header-cell:nth-child(2){z-index:38!important}.ts-table .ts-header-cell:nth-child(3){z-index:37!important}.ts-table .ts-header-cell:nth-child(4){z-index:36!important}.ts-table .ts-header-cell:nth-child(5){z-index:35!important}.ts-table .ts-header-cell:nth-child(6){z-index:34!important}.ts-table .ts-header-cell:nth-child(7){z-index:33!important}.ts-table .ts-header-cell:nth-child(8){z-index:32!important}.ts-table .ts-header-cell:nth-child(9){z-index:31!important}.ts-table .ts-header-cell:nth-child(10){z-index:30!important}.ts-table .ts-header-cell:nth-child(11){z-index:29!important}.ts-table .ts-header-cell:nth-child(12){z-index:28!important}.ts-table .ts-header-cell:nth-child(13){z-index:27!important}.ts-table .ts-header-cell:nth-child(14){z-index:26!important}.ts-table .ts-header-cell:nth-child(15){z-index:25!important}.ts-table .ts-header-cell:nth-child(16){z-index:24!important}.ts-table .ts-header-cell:nth-child(17){z-index:23!important}.ts-table .ts-header-cell:nth-child(18){z-index:22!important}.ts-table .ts-header-cell:nth-child(19){z-index:21!important}.ts-table .ts-header-cell:nth-child(20){z-index:20!important}.ts-table .ts-header-cell:nth-child(21){z-index:19!important}.ts-table .ts-header-cell:nth-child(22){z-index:18!important}.ts-table .ts-header-cell:nth-child(23){z-index:17!important}.ts-table .ts-header-cell:nth-child(24){z-index:16!important}.ts-table .ts-header-cell:nth-child(25){z-index:15!important}.ts-table .ts-header-cell:nth-child(26){z-index:14!important}.ts-table .ts-header-cell:nth-child(27){z-index:13!important}.ts-table .ts-header-cell:nth-child(28){z-index:12!important}.ts-table .ts-header-cell:nth-child(29){z-index:11!important}.ts-table .ts-header-cell:nth-child(30){z-index:10!important}.ts-table .ts-header-cell:nth-child(31){z-index:9!important}.ts-table .ts-header-cell:nth-child(32){z-index:8!important}.ts-table .ts-header-cell:nth-child(33){z-index:7!important}.ts-table .ts-header-cell:nth-child(34){z-index:6!important}.ts-table .ts-header-cell:nth-child(35){z-index:5!important}.ts-table .ts-header-cell:nth-child(36){z-index:4!important}.ts-table .ts-header-cell:nth-child(37){z-index:3!important}.ts-table .ts-header-cell:nth-child(38){z-index:2!important}.ts-table .ts-header-cell:nth-child(39){z-index:1!important}.ts-table .ts-header-cell:nth-child(40){z-index:0!important}.ts-table .ts-header-cell.ts-table__column--sticky-end{z-index:var(--sticky-end-z)!important}.ts-table .ts-header-cell.ts-cell--resizing .ts-header-cell__resizer{opacity:1}.ts-table .ts-header-cell.ts-cell--resizing .ts-header-cell__resizer::before{width:7px}.ts-table .ts-header-cell__resizer{bottom:-1px;cursor:col-resize;display:block;opacity:0;position:absolute;right:0;top:-1px;transform:translateX(50%);transition:opacity .2s ease-out;width:24px;z-index:calc(var(--z-index-resize-background))}.ts-table .ts-header-cell__resizer::before{background-color:#00538a;bottom:1px;content:'';display:block;left:50%;position:absolute;top:0;transform:translateX(-50%);transition:width .1s ease-out;width:1px}.ts-table .ts-header-cell__resizer::after{--grabber-icon-font-size:14px;color:#f2f0f7;content:'\\\\2026';display:block;font-size:var(--grabber-icon-font-size);height:11px;left:50%;position:absolute;top:30%;transform:rotate(90deg) translate(var(--grip-vertical-adjustment),-3px);z-index:var(--z-index-resize-grabber)}\"]\n    })\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ,\n    __param(4, Attribute('role')),\n    __param(5, Inject(DOCUMENT)),\n    __param(6, Optional()),\n    __metadata(\"design:paramtypes\", [Platform,\n        Renderer2,\n        IterableDiffers,\n        ChangeDetectorRef, String, Object, Directionality,\n        ElementRef,\n        NgZone,\n        TsWindowService,\n        ViewportRuler])\n], TsTableComponent);\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using {@link TsSortDirective}), and paginator (using {@link TsPaginatorComponent}).\n */\nclass TsTableDataSource {\n    /**\n     * Set up data and change subscriptions\n     *\n     * @param initialData\n     */\n    constructor(initialData = []) {\n        /**\n         * Stream emitting render data to the table (depends on ordered data changes).\n         */\n        this._renderData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Array of data that should be rendered by the table, where each object represents one row.\n     *\n     * @param data\n     */\n    set data(data) {\n        this._data.next(data);\n    }\n    get data() {\n        return this._data.value;\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with the\n     * provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        if (this._renderChangesSubscription) {\n            this._renderChangesSubscription.unsubscribe();\n        }\n        // Watch for base data or filter changes to provide a filtered set of data.\n        this._renderChangesSubscription = this._data\n            // Watched for paged data changes and send the result to the table to render.\n            .subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Used by the {@link TsTableComponent}. Called when it connects to the data source.\n     */\n    connect() {\n        return this._renderData;\n    }\n    /**\n     * Used by the {@link TsTableComponent}. Called when it is destroyed. No-op.\n     */\n    disconnect() { }\n}\n\n// NOTE: Moving declarations/exports items into shared array breaks documentation generation.\nlet TsTableModule = class TsTableModule {\n};\nTsTableModule = __decorate([\n    NgModule({\n        imports: [\n            CdkTableModule,\n            CommonModule,\n            TsPaginatorModule,\n            TsSortModule,\n        ],\n        declarations: [\n            // Table\n            TsTableComponent,\n            // Template definitions\n            TsHeaderCellDefDirective,\n            TsHeaderRowDefDirective,\n            TsColumnDefDirective,\n            TsCellDefDirective,\n            TsRowDefDirective,\n            TsFooterCellDefDirective,\n            TsFooterRowDefDirective,\n            // Cell directives\n            TsHeaderCellDirective,\n            TsCellDirective,\n            TsFooterCellDirective,\n            // Row directives\n            TsHeaderRowComponent,\n            TsRowComponent,\n            TsFooterRowComponent,\n        ],\n        exports: [\n            // Table\n            TsTableComponent,\n            // Template definitions\n            TsHeaderCellDefDirective,\n            TsHeaderRowDefDirective,\n            TsColumnDefDirective,\n            TsCellDefDirective,\n            TsRowDefDirective,\n            TsFooterCellDefDirective,\n            TsFooterRowDefDirective,\n            // Cell directives\n            TsHeaderCellDirective,\n            TsCellDirective,\n            TsFooterCellDirective,\n            // Row directives\n            TsHeaderRowComponent,\n            TsRowComponent,\n            TsFooterRowComponent,\n        ],\n    })\n], TsTableModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TS_TABLE_MIN_COLUMN_WIDTH, TsCellDefDirective, TsCellDirective, TsColumnDefDirective, TsFooterCellDefDirective, TsFooterCellDirective, TsFooterRowComponent, TsFooterRowDefDirective, TsHeaderCellDefDirective, TsHeaderCellDirective, TsHeaderCellResizeEvent, TsHeaderRowComponent, TsHeaderRowDefDirective, TsRowComponent, TsRowDefDirective, TsTableColumnsChangeEvent, TsTableComponent, TsTableDataSource, TsTableModule, setColumnAlignment, tsTableColumnAlignmentTypesArray };\n//# sourceMappingURL=terminus-ui-table.js.map\n","<ng-container cdkCellOutlet></ng-container>","<ng-container cdkCellOutlet></ng-container>","<ng-container cdkCellOutlet></ng-container>","\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n","import { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-styling.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n * @record\n */\nfunction DragCSSStyleDeclaration() { }\nif (false) {\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.webkitUserDrag;\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.MozUserSelect;\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = (/** @type {?} */ (source[key]));\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/transition-duration.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    const computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    const property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => prop === 'transform' || prop === 'all'));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    const propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/client-rect.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets a mutable version of an element's bounding `ClientRect`.\n * @param {?} element\n * @return {?}\n */\nfunction getMutableClientRect(element) {\n    /** @type {?} */\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param {?} rect ClientRect to check against.\n * @param {?} threshold Threshold around the ClientRect.\n * @param {?} pointerX Coordinates along the X axis.\n * @param {?} pointerY Coordinates along the Y axis.\n * @return {?}\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    /** @type {?} */\n    const xThreshold = width * threshold;\n    /** @type {?} */\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/parent-position-tracker.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object holding the scroll position of something.\n * @record\n */\nfunction ScrollPosition() { }\nif (false) {\n    /** @type {?} */\n    ScrollPosition.prototype.top;\n    /** @type {?} */\n    ScrollPosition.prototype.left;\n}\n/**\n * Keeps track of the scroll position and dimensions of the parents of an element.\n */\nclass ParentPositionTracker {\n    /**\n     * @param {?} _document\n     * @param {?} _viewportRuler\n     */\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Cached positions of the scrollable parent elements.\n         */\n        this.positions = new Map();\n    }\n    /**\n     * Clears the cached positions.\n     * @return {?}\n     */\n    clear() {\n        this.positions.clear();\n    }\n    /**\n     * Caches the positions. Should be called at the beginning of a drag sequence.\n     * @param {?} elements\n     * @return {?}\n     */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach((/**\n         * @param {?} element\n         * @return {?}\n         */\n        element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        }));\n    }\n    /**\n     * Handles scrolling while a drag is taking place.\n     * @param {?} event\n     * @return {?}\n     */\n    handleScroll(event) {\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        /** @type {?} */\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        /** @type {?} */\n        const scrollPosition = cachedPosition.scrollPosition;\n        /** @type {?} */\n        let newTop;\n        /** @type {?} */\n        let newLeft;\n        if (target === this._document) {\n            /** @type {?} */\n            const viewportScrollPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = ((/** @type {?} */ (target))).scrollTop;\n            newLeft = ((/** @type {?} */ (target))).scrollLeft;\n        }\n        /** @type {?} */\n        const topDifference = scrollPosition.top - newTop;\n        /** @type {?} */\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((/**\n         * @param {?} position\n         * @param {?} node\n         * @return {?}\n         */\n        (position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        }));\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\nif (false) {\n    /**\n     * Cached positions of the scrollable parent elements.\n     * @type {?}\n     */\n    ParentPositionTracker.prototype.positions;\n    /**\n     * @type {?}\n     * @private\n     */\n    ParentPositionTracker.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    ParentPositionTracker.prototype._viewportRuler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object that can be used to configure the behavior of DragRef.\n * @record\n */\nfunction DragRefConfig() { }\nif (false) {\n    /**\n     * Minimum amount of pixels that the user should\n     * drag, before the CDK initiates a drag sequence.\n     * @type {?}\n     */\n    DragRefConfig.prototype.dragStartThreshold;\n    /**\n     * Amount the pixels the user should drag before the CDK\n     * considers them to have changed the drag direction.\n     * @type {?}\n     */\n    DragRefConfig.prototype.pointerDirectionChangeThreshold;\n    /**\n     * `z-index` for the absolutely-positioned elements that are created by the drag item.\n     * @type {?|undefined}\n     */\n    DragRefConfig.prototype.zIndex;\n}\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * \\@docs-private\n * @record\n */\nfunction DragRefInternal() { }\n/**\n * Template that can be used to create a drag helper element (e.g. a preview or a placeholder).\n * @record\n * @template T\n */\nfunction DragHelperTemplate() { }\nif (false) {\n    /** @type {?} */\n    DragHelperTemplate.prototype.template;\n    /** @type {?} */\n    DragHelperTemplate.prototype.viewContainer;\n    /** @type {?} */\n    DragHelperTemplate.prototype.context;\n}\n/**\n * Template that can be used to create a drag preview element.\n * @record\n * @template T\n */\nfunction DragPreviewTemplate() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragPreviewTemplate.prototype.matchSize;\n}\n/**\n * Point on the page or within an element.\n * @record\n */\nfunction Point() { }\nif (false) {\n    /** @type {?} */\n    Point.prototype.x;\n    /** @type {?} */\n    Point.prototype.y;\n}\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @template T\n */\nclass DragRef {\n    /**\n     * @param {?} element\n     * @param {?} _config\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being scrolled.\n         */\n        this._scrollSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being resized.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                /** @type {?} */\n                const targetHandle = this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => {\n                    /** @type {?} */\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                /** @type {?} */\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                /** @type {?} */\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                /** @type {?} */\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    /** @type {?} */\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._startDragSequence(event)));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this._endDragSequence(event);\n        });\n        this.withRootElement(element);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     * @return {?}\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    withHandles(handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => coerceElement(handle)));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => toggleNativeDragInteractions(handle, false)));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    withPreviewTemplate(template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    withPlaceholderTemplate(template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    withRootElement(rootElement) {\n        /** @type {?} */\n        const element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            (/** @type {?} */ (this))._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            }));\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    withBoundaryElement(boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        (/** @type {?} */ (this))._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            (/** @type {?} */ (this))._resizeSubscription = (/** @type {?} */ (this))._viewportRuler\n                .change(10)\n                .subscribe((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (this))._containInsideBoundaryOnResize()));\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = (/** @type {?} */ (null));\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        /** @type {?} */\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    setFreeDragPosition(value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the item's sort order based on the last-known pointer position.\n     * @return {?}\n     */\n    _sortFromLastPointerPosition() {\n        /** @type {?} */\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position));\n        }\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @private\n     * @param {?} event Browser event object that ended the sequence.\n     * @return {?}\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            () => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }));\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            }));\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _startDragSequence(event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        /** @type {?} */\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const parent = (/** @type {?} */ (element.parentNode));\n            /** @type {?} */\n            const preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            /** @type {?} */\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this._initialContainer = this._initialIndex = (/** @type {?} */ (undefined));\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        const isDragging = this.isDragging();\n        /** @type {?} */\n        const isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        const rootElement = this._rootElement;\n        /** @type {?} */\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @param {?} scrollEvent\n         * @return {?}\n         */\n        scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        }));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        /** @type {?} */\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        (/** @type {?} */ (this._anchor.parentNode)).replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = (/** @type {?} */ (this._dropContainer));\n            /** @type {?} */\n            const currentIndex = container.getItemIndex(this);\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        }));\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\n                (/** @type {?} */ (this._dropContainer)).exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = (/** @type {?} */ (newContainer));\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    _createPreviewElement() {\n        /** @type {?} */\n        const previewConfig = this._previewTemplate;\n        /** @type {?} */\n        const previewClass = this.previewClass;\n        /** @type {?} */\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            /** @type {?} */\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            /** @type {?} */\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, (/** @type {?} */ (rootRect)));\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            /** @type {?} */\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach((/**\n                 * @param {?} className\n                 * @return {?}\n                 */\n                className => preview.classList.add(className)));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                /** @type {?} */\n                const handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    _createPlaceholderElement() {\n        /** @type {?} */\n        const placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        const scrollPosition = this._getViewportScrollPosition();\n        /** @type {?} */\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        /** @type {?} */\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getPointerPositionOnPage(event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        /** @type {?} */\n        const scrollPosition = this._getViewportScrollPosition();\n        return {\n            x: point.pageX - scrollPosition.left,\n            y: point.pageY - scrollPosition.top\n        };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} point\n     * @return {?}\n     */\n    _getConstrainedPointerPosition(point) {\n        /** @type {?} */\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        /** @type {?} */\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            /** @type {?} */\n            const boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            const previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            const minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            const minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        /** @type {?} */\n        const delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    _applyRootElementTransform(x, y) {\n        /** @type {?} */\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    _getDragDistance(currentPosition) {\n        /** @type {?} */\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /**\n     * Cleans up any cached element dimensions that we don't need after dragging has stopped.\n     * @private\n     * @return {?}\n     */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     * @private\n     * @return {?}\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        /** @type {?} */\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        /** @type {?} */\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        /** @type {?} */\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        /** @type {?} */\n        const topOverflow = boundaryRect.top - elementRect.top;\n        /** @type {?} */\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /**\n     * Gets the drag start delay, based on the event type.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getDragStartDelay(event) {\n        /** @type {?} */\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /**\n     * Updates the internal state of the draggable element when scrolling has occurred.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _updateOnScroll(event) {\n        /** @type {?} */\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        // ClientRect dimensions are based on the page's scroll position so\n        // we have to update the cached boundary ClientRect if the user has scrolled.\n        if (this._boundaryRect && scrollDifference) {\n            adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n        }\n    }\n    /**\n     * Gets the scroll position of the viewport.\n     * @private\n     * @return {?}\n     */\n    _getViewportScrollPosition() {\n        /** @type {?} */\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n}\nif (false) {\n    /**\n     * Element displayed next to the user's pointer while the element is dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._preview;\n    /**\n     * Reference to the view of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRef;\n    /**\n     * Reference to the view of the placeholder element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderRef;\n    /**\n     * Element that is rendered instead of the draggable item while it is being sorted.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholder;\n    /**\n     * Coordinates within the element at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionInElement;\n    /**\n     * Coordinates on the page at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._passiveTransform;\n    /**\n     * CSS `transform` that is applied to the element while it's being dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._activeTransform;\n    /**\n     * Inline `transform` value that the element had before the first dragging sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasStartedDragging;\n    /**\n     * Whether the element has moved since the user started dragging it.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasMoved;\n    /**\n     * Drop container in which the DragRef resided when dragging began.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialContainer;\n    /**\n     * Index at which the item started in its initial container.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialIndex;\n    /**\n     * Cached positions of scrollable parent elements.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._parentPositions;\n    /**\n     * Emits when the item is being moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._moveEvents;\n    /**\n     * Keeps track of the direction in which the user is dragging along each axis.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDirectionDelta;\n    /**\n     * Pointer position at which the last change in the delta occurred.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerPositionAtLastDirectionChange;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElementTapHighlight;\n    /**\n     * Subscription to pointer movement events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMoveSubscription;\n    /**\n     * Subscription to the event that is dispatched when the user lifts their pointer.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUpSubscription;\n    /**\n     * Subscription to the viewport being scrolled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollSubscription;\n    /**\n     * Subscription to the viewport being resized.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._resizeSubscription;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._lastTouchEventTime;\n    /**\n     * Time at which the last dragging sequence was started.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragStartTime;\n    /**\n     * Cached reference to the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryElement;\n    /**\n     * Whether the native dragging interactions have been enabled on the root element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._nativeInteractionsEnabled;\n    /**\n     * Cached dimensions of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRect;\n    /**\n     * Cached dimensions of the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryRect;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderTemplate;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._handles;\n    /**\n     * Registered handles that are currently disabled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabledHandles;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dropContainer;\n    /**\n     * Layout direction of the item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._direction;\n    /**\n     * Axis along which dragging is locked.\n     * @type {?}\n     */\n    DragRef.prototype.lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    DragRef.prototype.dragStartDelay;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    DragRef.prototype.previewClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabled;\n    /**\n     * Emits as the drag sequence is being prepared.\n     * @type {?}\n     */\n    DragRef.prototype.beforeStarted;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    DragRef.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    DragRef.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    DragRef.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    DragRef.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    DragRef.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    DragRef.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    DragRef.prototype.moved;\n    /**\n     * Arbitrary data that can be attached to the drag item.\n     * @type {?}\n     */\n    DragRef.prototype.data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    DragRef.prototype.constrainPosition;\n    /**\n     * Handler for the `mousedown`/`touchstart` events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDown;\n    /**\n     * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMove;\n    /**\n     * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUp;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragDropRegistry;\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param {?} node Node to be removed.\n * @return {?}\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n * @param {?} viewRef\n * @param {?} _document\n * @return {?}\n */\nfunction getRootNode(viewRef, _document) {\n    /** @type {?} */\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return (/** @type {?} */ (rootNodes[0]));\n    }\n    /** @type {?} */\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach((/**\n     * @param {?} node\n     * @return {?}\n     */\n    node => wrapper.appendChild(node)));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param {?} target Element that needs to be resized.\n * @param {?} sourceRect Dimensions of the source element.\n * @return {?}\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    const from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    const target = array[from];\n    /** @type {?} */\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drop-list-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Entry in the position cache for draggable items.\n * \\@docs-private\n * @record\n */\nfunction CachedItemPosition() { }\nif (false) {\n    /**\n     * Instance of the drag item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.drag;\n    /**\n     * Dimensions of the item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.clientRect;\n    /**\n     * Amount by which the item has been moved since dragging started.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.offset;\n}\n/** @enum {number} */\nconst AutoScrollVerticalDirection = {\n    NONE: 0, UP: 1, DOWN: 2,\n};\n/** @enum {number} */\nconst AutoScrollHorizontalDirection = {\n    NONE: 0, LEFT: 1, RIGHT: 2,\n};\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * \\@docs-private\n * @record\n */\nfunction DropListRefInternal() { }\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @template T\n */\nclass DropListRef {\n    /**\n     * @param {?} element\n     * @param {?} _dragDropRegistry\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     */\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        /**\n         * Subscription to the window being scrolled.\n         */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /**\n         * Vertical direction in which the list is currently scrolling.\n         */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /**\n         * Horizontal direction in which the list is currently scrolling.\n         */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /**\n         * Used to signal to the current auto-scroll sequence when to stop.\n         */\n        this._stopScrollTimers = new Subject();\n        /**\n         * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n         */\n        this._cachedShadowRoot = null;\n        /**\n         * Starts the interval that'll auto-scroll the element.\n         */\n        this._startScrollInterval = (/**\n         * @return {?}\n         */\n        () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            }));\n        });\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = (/** @type {?} */ (null));\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        /** @type {?} */\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || ((/** @type {?} */ (styles))).scrollSnapType || '';\n        ((/** @type {?} */ (styles))).scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._startReceiving(this)));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?=} index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        /** @type {?} */\n        const activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        const currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        const placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            const element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n                element.insertBefore(placeholder, activeDraggables[0].getRootElement());\n                activeDraggables.unshift(item);\n            }\n            else {\n                element.appendChild(placeholder);\n                activeDraggables.push(item);\n            }\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * \\@breaking-change 11.0.0 `previousIndex` parameter to become required.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?} distance Distance the user has dragged since the start of the dragging sequence.\n     * @param {?=} previousIndex Index of the item when dragging started.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    withItems(items) {\n        /** @type {?} */\n        const previousItems = (/** @type {?} */ (this))._draggables;\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._withDropContainer((/** @type {?} */ (this)))));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            /** @type {?} */\n            const draggedItems = previousItems.filter((/**\n             * @param {?} item\n             * @return {?}\n             */\n            item => item.isDragging()));\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every((/**\n             * @param {?} item\n             * @return {?}\n             */\n            item => items.indexOf(item) === -1))) {\n                (/** @type {?} */ (this))._reset();\n            }\n            else {\n                (/** @type {?} */ (this))._cacheItems();\n            }\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    connectedTo(connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    withOrientation(orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} elements Elements that can be scrolled.\n     * @return {THIS}\n     */\n    withScrollableParents(elements) {\n        /** @type {?} */\n        const element = coerceElement((/** @type {?} */ (this)).element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        (/** @type {?} */ (this))._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the scrollable parents that are registered with this drop container.\n     * @return {?}\n     */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        const siblings = this._itemPositions;\n        /** @type {?} */\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n        /** @type {?} */\n        const siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        const delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        (sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            const isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param {?} pointerX User's pointer position along the x axis.\n     * @param {?} pointerY User's pointer position along the y axis.\n     * @return {?}\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        /** @type {?} */\n        let scrollNode;\n        /** @type {?} */\n        let verticalScrollDirection = 0 /* NONE */;\n        /** @type {?} */\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((/**\n         * @param {?} position\n         * @param {?} element\n         * @return {?}\n         */\n        (position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections((/** @type {?} */ (element)), position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = (/** @type {?} */ (element));\n                }\n            }\n        }));\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /**\n     * Stops any currently-running auto-scroll sequences.\n     * @return {?}\n     */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /**\n     * Caches the positions of the configured scrollable parents.\n     * @private\n     * @return {?}\n     */\n    _cacheParentPositions() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = (/** @type {?} */ ((/** @type {?} */ (this._parentPositions.positions.get(element))).clientRect));\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    _cacheItemPositions() {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        drag => {\n            /** @type {?} */\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    _reset() {\n        this._isDragging = false;\n        /** @type {?} */\n        const styles = coerceElement(this.element).style;\n        ((/** @type {?} */ (styles))).scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => {\n            /** @type {?} */\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        }));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._stopReceiving(this)));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            const start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @private\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @return {?}\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        /** @type {?} */\n        const itemPositions = this._itemPositions;\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        /** @type {?} */\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            /** @type {?} */\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            /** @type {?} */\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        }));\n    }\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._canReceive(item, x, y)));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        /** @type {?} */\n        const elementFromPoint = (/** @type {?} */ (this._getShadowRoot().elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    _startReceiving(sibling) {\n        /** @type {?} */\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     * @private\n     * @return {?}\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (this.isDragging()) {\n                /** @type {?} */\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach((/**\n                     * @param {?} __0\n                     * @return {?}\n                     */\n                    ({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    }));\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach((/**\n                     * @param {?} __0\n                     * @return {?}\n                     */\n                    ({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    }));\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        }));\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     * @private\n     * @return {?}\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            /** @type {?} */\n            const shadowRoot = (/** @type {?} */ (_getShadowRoot(coerceElement(this.element))));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\nif (false) {\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    DropListRef.prototype.element;\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.disabled;\n    /**\n     * Whether sorting items within the list is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.sortingDisabled;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    DropListRef.prototype.lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.autoScrollDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    DropListRef.prototype.enterPredicate;\n    /**\n     * Emits right before dragging has started.\n     * @type {?}\n     */\n    DropListRef.prototype.beforeStarted;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    DropListRef.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    DropListRef.prototype.exited;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    DropListRef.prototype.dropped;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    DropListRef.prototype.sorted;\n    /**\n     * Arbitrary data that can be attached to the drop list.\n     * @type {?}\n     */\n    DropListRef.prototype.data;\n    /**\n     * Whether an item in the list is being dragged.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._isDragging;\n    /**\n     * Cache of the dimensions of all the items inside the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._itemPositions;\n    /**\n     * Keeps track of the positions of any parent scrollable elements.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._parentPositions;\n    /**\n     * Cached `ClientRect` of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._clientRect;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * from `_draggables`, as well as any items that have been dragged in, but haven't\n     * been dropped yet.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeDraggables;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as\n     * well as what direction the pointer was moving in when the swap occured.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._previousSwap;\n    /**\n     * Draggable items in the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._draggables;\n    /**\n     * Drop lists that are connected to the current one.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._siblings;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._orientation;\n    /**\n     * Connected siblings that currently have a dragged item.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeSiblings;\n    /**\n     * Layout direction of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._direction;\n    /**\n     * Subscription to the window being scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportScrollSubscription;\n    /**\n     * Vertical direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._verticalScrollDirection;\n    /**\n     * Horizontal direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._horizontalScrollDirection;\n    /**\n     * Node that is being auto-scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollNode;\n    /**\n     * Used to signal to the current auto-scroll sequence when to stop.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._stopScrollTimers;\n    /**\n     * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._cachedShadowRoot;\n    /**\n     * Reference to the document.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._document;\n    /**\n     * Elements that can be scrolled while the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollableElements;\n    /**\n     * Initial value for the element's `scroll-snap-type` style.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._initialScrollSnap;\n    /**\n     * Starts the interval that'll auto-scroll the element.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._startScrollInterval;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._dragDropRegistry;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportRuler;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    /** @type {?} */\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @return {?}\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    /** @type {?} */\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param {?} element Element for which we should calculate the scroll direction.\n * @param {?} clientRect Bounding client rectangle of the element.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    /** @type {?} */\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    /** @type {?} */\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    /** @type {?} */\n    let verticalScrollDirection = 0 /* NONE */;\n    /** @type {?} */\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        /** @type {?} */\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        /** @type {?} */\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            const isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\n                options: true\n            })\n                .set('scroll', {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.scroll.next(e)),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDragItem(instance)));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDropContainer(instance)));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        (config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ DragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._document;\n    /**\n     * Registered drop container instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dropInstances;\n    /**\n     * Registered drag item instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dragInstances;\n    /**\n     * Drag item instances that are currently being dragged.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._activeDragInstances;\n    /**\n     * Keeps track of the event listeners that we've bound to the `document`.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._globalListeners;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerMove;\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerUp;\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.scroll;\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * \\@param event Event whose default action should be prevented.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._preventDefaultWhileDragging;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/** @nocollapse */ DragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._dragDropRegistry;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-events.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Event emitted when the user starts dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragStart() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragStart.prototype.source;\n}\n/**\n * Event emitted when the user releases an item, before any animations have started.\n * @record\n * @template T\n */\nfunction CdkDragRelease() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragRelease.prototype.source;\n}\n/**\n * Event emitted when the user stops dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragEnd() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.source;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.distance;\n}\n/**\n * Event emitted when the user moves an item into a new drop container.\n * @record\n * @template T, I\n */\nfunction CdkDragEnter() { }\nif (false) {\n    /**\n     * Container into which the user has moved the item.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.container;\n    /**\n     * Item that was moved into the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.item;\n    /**\n     * Index at which the item has entered the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.currentIndex;\n}\n/**\n * Event emitted when the user removes an item from a\n * drop container by moving it into another one.\n * @record\n * @template T, I\n */\nfunction CdkDragExit() { }\nif (false) {\n    /**\n     * Container from which the user has a removed an item.\n     * @type {?}\n     */\n    CdkDragExit.prototype.container;\n    /**\n     * Item that was removed from the container.\n     * @type {?}\n     */\n    CdkDragExit.prototype.item;\n}\n/**\n * Event emitted when the user drops a draggable item inside a drop container.\n * @record\n * @template T, O\n */\nfunction CdkDragDrop() { }\nif (false) {\n    /**\n     * Index of the item when it was picked up.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousIndex;\n    /**\n     * Current index of the item.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.currentIndex;\n    /**\n     * Item that is being dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.item;\n    /**\n     * Container in which the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.container;\n    /**\n     * Container from which the item was picked up. Can be the same as the `container`.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousContainer;\n    /**\n     * Whether the user's pointer was over the container when the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.isPointerOverContainer;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.distance;\n}\n/**\n * Event emitted as the user is dragging a draggable item.\n * @record\n * @template T\n */\nfunction CdkDragMove() { }\nif (false) {\n    /**\n     * Item that is being dragged.\n     * @type {?}\n     */\n    CdkDragMove.prototype.source;\n    /**\n     * Position of the user's pointer on the page.\n     * @type {?}\n     */\n    CdkDragMove.prototype.pointerPosition;\n    /**\n     * Native event that is causing the dragging.\n     * @type {?}\n     */\n    CdkDragMove.prototype.event;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragMove.prototype.distance;\n    /**\n     * Indicates the direction in which the user is dragging the element along each axis.\n     * `1` means that the position is increasing (e.g. the user is moving to the right or downwards),\n     * whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means\n     * that the position hasn't changed.\n     * @type {?}\n     */\n    CdkDragMove.prototype.delta;\n}\n/**\n * Event emitted when the user swaps the position of two drag items.\n * @record\n * @template T, I\n */\nfunction CdkDragSortEvent() { }\nif (false) {\n    /**\n     * Index from which the item was sorted previously.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.previousIndex;\n    /**\n     * Index that the item is currently in.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.currentIndex;\n    /**\n     * Container that the item belongs to.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.container;\n    /**\n     * Item that is being sorted.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.item;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-parent.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-handle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nclass CdkDragHandle {\n    /**\n     * @param {?} element\n     * @param {?=} parentDrag\n     */\n    constructor(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /**\n     * Whether starting to drag through this handle is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            },] }\n];\n/** @nocollapse */\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkDragHandle.ngAcceptInputType_disabled;\n    /**\n     * Closest parent draggable instance.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._parentDrag;\n    /**\n     * Emits when the state of the handle has changed.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._stateChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragHandle.prototype._disabled;\n    /** @type {?} */\n    CdkDragHandle.prototype.element;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-placeholder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nclass CdkDragPlaceholder {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            },] }\n];\n/** @nocollapse */\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Context data to be added to the placeholder template instance.\n     * @type {?}\n     */\n    CdkDragPlaceholder.prototype.data;\n    /** @type {?} */\n    CdkDragPlaceholder.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-preview.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nclass CdkDragPreview {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /**\n     * Whether the preview should preserve the same size as the item that is being dragged.\n     * @return {?}\n     */\n    get matchSize() { return this._matchSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            },] }\n];\n/** @nocollapse */\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CdkDragPreview.ngAcceptInputType_matchSize;\n    /**\n     * Context data to be added to the preview template instance.\n     * @type {?}\n     */\n    CdkDragPreview.prototype.data;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragPreview.prototype._matchSize;\n    /** @type {?} */\n    CdkDragPreview.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n * @type {?}\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n/**\n * Object that can be used to configure the drag\n * items and drop lists within a module or a component.\n * @record\n */\nfunction DragDropConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.lockAxis;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.dragStartDelay;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.constrainPosition;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.previewClass;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.boundaryElement;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.rootElementSelector;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.draggingDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.sortingDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.listAutoScrollDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.listOrientation;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.zIndex;\n}\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nclass CdkDrag {\n    /**\n     * @param {?} element\n     * @param {?} dropContainer\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} config\n     * @param {?} _dir\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     */\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            })))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                /** @type {?} */\n                const childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle._parentDrag === this))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle.element));\n                this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                return (/** @type {?} */ (merge(...handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                item => {\n                    return item._stateChanges.pipe(startWith(item));\n                })))));\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                const dragRef = this._dragRef;\n                /** @type {?} */\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    _updateRootElement() {\n        /** @type {?} */\n        const element = this.element.nativeElement;\n        /** @type {?} */\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    _getBoundaryElement() {\n        /** @type {?} */\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                const dir = this._dir;\n                /** @type {?} */\n                const dragStartDelay = this.dragStartDelay;\n                /** @type {?} */\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.released.emit({ source: this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        }));\n    }\n    /**\n     * Assigns the default input values based on a provided config object.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            },] }\n];\n/** @nocollapse */\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkDrag.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._destroyed;\n    /**\n     * Reference to the underlying drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype._dragRef;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     */\n    CdkDrag.prototype._handles;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     */\n    CdkDrag.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     */\n    CdkDrag.prototype._placeholderTemplate;\n    /**\n     * Arbitrary data to attach to this drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype.data;\n    /**\n     * Locks the position of the dragged element along the specified axis.\n     * @type {?}\n     */\n    CdkDrag.prototype.lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     * @type {?}\n     */\n    CdkDrag.prototype.rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     * @type {?}\n     */\n    CdkDrag.prototype.boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    CdkDrag.prototype.dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     * @type {?}\n     */\n    CdkDrag.prototype.freeDragPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    CdkDrag.prototype.constrainPosition;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    CdkDrag.prototype.previewClass;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    CdkDrag.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    CdkDrag.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    CdkDrag.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    CdkDrag.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    CdkDrag.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    CdkDrag.prototype.moved;\n    /**\n     * Element that the draggable is attached to.\n     * @type {?}\n     */\n    CdkDrag.prototype.element;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._changeDetectorRef;\n}\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    let currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list-group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nclass CdkDropListGroup {\n    constructor() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /**\n     * Whether starting a dragging sequence from inside this group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n            },] }\n];\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkDropListGroup.ngAcceptInputType_disabled;\n    /**\n     * Drop lists registered inside the group.\n     * @type {?}\n     */\n    CdkDropListGroup.prototype._items;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropListGroup.prototype._disabled;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * \\@docs-private\n * @record\n */\nfunction CdkDropListInternal() { }\nconst ɵ0 = undefined;\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nclass CdkDropList {\n    /**\n     * @param {?} element\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     * @param {?=} _dir\n     * @param {?=} _group\n     * @param {?=} _scrollDispatcher\n     * @param {?=} config\n     */\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group, _scrollDispatcher, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        });\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Registers an items with the drop list.\n     * @param {?} item\n     * @return {?}\n     */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /**\n     * Removes an item from the drop list.\n     * @param {?} item\n     * @return {?}\n     */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /**\n     * Gets the registered items in the list, sorted by their position in the DOM.\n     * @return {?}\n     */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            /** @type {?} */\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @return {?}\n     */\n    start() {\n        this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => ref.withDirection(value)));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const siblings = coerceArray(this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    list => list.id === drop)))) : drop;\n            }));\n            if (this._group) {\n                this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n            if (!this._scrollableParentsResolved && this._scrollDispatcher) {\n                /** @type {?} */\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map((/**\n                 * @param {?} scrollable\n                 * @return {?}\n                 */\n                scrollable => scrollable.getElementRef().nativeElement));\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => drop && drop !== this)).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            list => list._dropListRef)))\n                .withOrientation(this.orientation);\n        }));\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * Assigns the default input values based on a provided config object.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /**\n     * Syncs up the registered drag items with underlying drop list ref.\n     * @private\n     * @return {?}\n     */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._dragRef)));\n    }\n}\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\nCdkDropList._dropLists = [];\nCdkDropList.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                }\n            },] }\n];\n/** @nocollapse */\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ScrollDispatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\nif (false) {\n    /**\n     * Keeps track of the drop lists that are currently on the page.\n     * @type {?}\n     * @private\n     */\n    CdkDropList._dropLists;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_sortingDisabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_autoScrollDisabled;\n    /**\n     * Emits when the list has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._destroyed;\n    /**\n     * Whether the element's scrollable parents have been resolved.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._scrollableParentsResolved;\n    /**\n     * Reference to the underlying drop list instance.\n     * @type {?}\n     */\n    CdkDropList.prototype._dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     * @type {?}\n     */\n    CdkDropList.prototype.connectedTo;\n    /**\n     * Arbitrary data to attach to this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.data;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     */\n    CdkDropList.prototype.orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     * @type {?}\n     */\n    CdkDropList.prototype.id;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    CdkDropList.prototype.lockAxis;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._disabled;\n    /**\n     * Whether sorting within this drop list is disabled.\n     * @type {?}\n     */\n    CdkDropList.prototype.sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    CdkDropList.prototype.enterPredicate;\n    /**\n     * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n     * @type {?}\n     */\n    CdkDropList.prototype.autoScrollDisabled;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    CdkDropList.prototype.dropped;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    CdkDropList.prototype.exited;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    CdkDropList.prototype.sorted;\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._unsortedItems;\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    CdkDropList.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._group;\n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * \\@breaking-change 11.0.0\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._scrollDispatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DragDropModule {\n}\nDragDropModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_CONFIG_FACTORY, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\n//# sourceMappingURL=drag-drop.js.map\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { isDataSource } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, isDevMode, ChangeDetectorRef, Attribute, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/can-stick.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interface for a mixin to provide a directive with a function that checks if the sticky input has\n * been changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @record\n */\nfunction CanStick() { }\nif (false) {\n    /**\n     * Whether sticky positioning should be applied.\n     * @type {?}\n     */\n    CanStick.prototype.sticky;\n    /**\n     * Whether the sticky input has changed since it was last checked.\n     * @type {?}\n     */\n    CanStick.prototype._hasStickyChanged;\n    /**\n     * Whether the sticky value has changed since this was last called.\n     * @return {?}\n     */\n    CanStick.prototype.hasStickyChanged = function () { };\n    /**\n     * Resets the dirty check for cases where the sticky state has been used without checking.\n     * @return {?}\n     */\n    CanStick.prototype.resetStickyChanged = function () { };\n}\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            this._hasStickyChanged = false;\n        }\n        /**\n         * Whether sticky positioning should be applied.\n         * @return {?}\n         */\n        get sticky() { return this._sticky; }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set sticky(v) {\n            /** @type {?} */\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        hasStickyChanged() {\n            /** @type {?} */\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/tokens.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/**\n * Configurable options for `CdkTextColumn`.\n * @record\n * @template T\n */\nfunction TextColumnOptions() { }\nif (false) {\n    /**\n     * Default function that provides the header text based on the column name if a header\n     * text is not provided.\n     * @type {?|undefined}\n     */\n    TextColumnOptions.prototype.defaultHeaderTextTransform;\n    /**\n     * Default data accessor to use if one is not provided.\n     * @type {?|undefined}\n     */\n    TextColumnOptions.prototype.defaultDataAccessor;\n}\n/**\n * Injection token that can be used to specify the text column options.\n * @type {?}\n */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/cell.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base interface for a cell definition. Captures a column's cell template definition.\n * @record\n */\nfunction CellDef() { }\nif (false) {\n    /** @type {?} */\n    CellDef.prototype.template;\n}\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellDef]' },] }\n];\n/** @nocollapse */\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkCellDef.prototype.template;\n}\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkHeaderCellDef]' },] }\n];\n/** @nocollapse */\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkHeaderCellDef.prototype.template;\n}\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkFooterCellDef]' },] }\n];\n/** @nocollapse */\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkFooterCellDef.prototype.template;\n}\n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nclass CdkColumnDefBase {\n}\n/** @type {?} */\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    /**\n     * @param {?=} _table\n     */\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /**\n     * Unique name for this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (name) {\n            this._name = name;\n            this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n        }\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     * @return {?}\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set stickyEnd(v) {\n        /** @type {?} */\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n}\nCdkColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n            },] }\n];\n/** @nocollapse */\nCdkColumnDef.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkColumnDef.ngAcceptInputType_sticky;\n    /** @type {?} */\n    CdkColumnDef.ngAcceptInputType_stickyEnd;\n    /** @type {?} */\n    CdkColumnDef.prototype._name;\n    /** @type {?} */\n    CdkColumnDef.prototype._stickyEnd;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkColumnDef.prototype.cell;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkColumnDef.prototype.headerCell;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkColumnDef.prototype.footerCell;\n    /**\n     * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n     * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n     * do not match are replaced by the '-' character.\n     * @type {?}\n     */\n    CdkColumnDef.prototype.cssClassFriendlyName;\n    /** @type {?} */\n    CdkColumnDef.prototype._table;\n}\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nclass BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        /** @type {?} */\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass CdkHeaderCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader',\n                },\n            },] }\n];\n/** @nocollapse */\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass CdkFooterCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] }\n];\n/** @nocollapse */\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass CdkCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell',\n                },\n            },] }\n];\n/** @nocollapse */\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/row.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @type {?}\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nclass BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.decorators = [\n    { type: Directive }\n];\n/** @nocollapse */\nBaseRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\nif (false) {\n    /**\n     * The columns to be displayed on this row.\n     * @type {?}\n     */\n    BaseRowDef.prototype.columns;\n    /**\n     * Differ used to check if any changes were made to the columns.\n     * @type {?}\n     * @protected\n     */\n    BaseRowDef.prototype._columnsDiffer;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    BaseRowDef.prototype.template;\n    /**\n     * @type {?}\n     * @protected\n     */\n    BaseRowDef.prototype._differs;\n}\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     * @param {?=} _table\n     */\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n            },] }\n];\n/** @nocollapse */\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nif (false) {\n    /** @type {?} */\n    CdkHeaderRowDef.ngAcceptInputType_sticky;\n    /** @type {?} */\n    CdkHeaderRowDef.prototype._table;\n}\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     * @param {?=} _table\n     */\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n            },] }\n];\n/** @nocollapse */\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nif (false) {\n    /** @type {?} */\n    CdkFooterRowDef.ngAcceptInputType_sticky;\n    /** @type {?} */\n    CdkFooterRowDef.prototype._table;\n}\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     * @param {?=} _table\n     */\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n}\nCdkRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n            },] }\n];\n/** @nocollapse */\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nif (false) {\n    /**\n     * Function that should return true if this row template should be used for the provided index\n     * and row data. If left undefined, this row will be considered the default row template to use\n     * when no other when functions return true for the data.\n     * For every row, there must be at least one when function that passes or an undefined to default.\n     * @type {?}\n     */\n    CdkRowDef.prototype.when;\n    /** @type {?} */\n    CdkRowDef.prototype._table;\n}\n/**\n * Context provided to the row cells when `multiTemplateDataRows` is false\n * @record\n * @template T\n */\nfunction CdkCellOutletRowContext() { }\nif (false) {\n    /**\n     * Data for the row that this cell is located within.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.$implicit;\n    /**\n     * Index of the data object in the provided data array.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.index;\n    /**\n     * Length of the number of total rows.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.count;\n    /**\n     * True if this cell is contained in the first row.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.first;\n    /**\n     * True if this cell is contained in the last row.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.last;\n    /**\n     * True if this cell is contained in a row with an even-numbered index.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.even;\n    /**\n     * True if this cell is contained in a row with an odd-numbered index.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.odd;\n}\n/**\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\n * `renderIndex`.\n * @record\n * @template T\n */\nfunction CdkCellOutletMultiRowContext() { }\nif (false) {\n    /**\n     * Data for the row that this cell is located within.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.$implicit;\n    /**\n     * Index of the data object in the provided data array.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.dataIndex;\n    /**\n     * Index location of the rendered row that this cell is located within.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.renderIndex;\n    /**\n     * Length of the number of total rows.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.count;\n    /**\n     * True if this cell is contained in the first row.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.first;\n    /**\n     * True if this cell is contained in the last row.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.last;\n    /**\n     * True if this cell is contained in a row with an even-numbered index.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.even;\n    /**\n     * True if this cell is contained in a row with an odd-numbered index.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.odd;\n}\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * @param {?} _viewContainer\n     */\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellOutlet]' },] }\n];\n/** @nocollapse */\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\nif (false) {\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     * @type {?}\n     */\n    CdkCellOutlet.mostRecentCellOutlet;\n    /**\n     * The ordered list of cells to render within this outlet's view container\n     * @type {?}\n     */\n    CdkCellOutlet.prototype.cells;\n    /**\n     * The data context to be provided to each cell\n     * @type {?}\n     */\n    CdkCellOutlet.prototype.context;\n    /** @type {?} */\n    CdkCellOutlet.prototype._viewContainer;\n}\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }] }\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkFooterRow {\n}\nCdkFooterRow.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }] }\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkRow {\n}\nCdkRow.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/sticky-styler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n * @type {?}\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nclass StickyStyler {\n    /**\n     * @param {?} _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param {?} _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser = true) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (let i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        const hasStickyColumns = stickyStartStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state)) || stickyEndStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state));\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const firstRow = rows[0];\n        /** @type {?} */\n        const numCells = firstRow.children.length;\n        /** @type {?} */\n        const cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        const isRtl = this.direction === 'rtl';\n        for (const row of rows) {\n            for (let i = 0; i < numCells; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on.\n        /** @type {?} */\n        const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        let stickyHeight = 0;\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            const row = rows[rowIndex];\n            if (this._isNativeHtmlTable) {\n                for (let j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    const cell = (/** @type {?} */ (row.children[j]));\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        const tfoot = (/** @type {?} */ (tableElement.querySelector('tfoot')));\n        if (stickyStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => !state))) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        /** @type {?} */\n        const hasDirection = STICKY_DIRECTIONS.some((/**\n         * @param {?} dir\n         * @return {?}\n         */\n        dir => !!element.style[dir]));\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this._stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    _getCalculatedZIndex(element) {\n        /** @type {?} */\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of (/** @type {?} */ (STICKY_DIRECTIONS))) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    _getCellWidths(row) {\n        /** @type {?} */\n        const cellWidths = [];\n        /** @type {?} */\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            let cell = (/** @type {?} */ (firstRowCells[i]));\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    StickyStyler.prototype._isNativeHtmlTable;\n    /**\n     * @type {?}\n     * @private\n     */\n    StickyStyler.prototype._stickCellCss;\n    /** @type {?} */\n    StickyStyler.prototype.direction;\n    /**\n     * @type {?}\n     * @private\n     */\n    StickyStyler.prototype._isBrowser;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/table-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/table.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interface used to provide an outlet for rows to be inserted into.\n * @record\n */\nfunction RowOutlet() { }\nif (false) {\n    /** @type {?} */\n    RowOutlet.prototype.viewContainer;\n}\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nclass DataRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[rowOutlet]' },] }\n];\n/** @nocollapse */\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\nif (false) {\n    /** @type {?} */\n    DataRowOutlet.prototype.viewContainer;\n    /** @type {?} */\n    DataRowOutlet.prototype.elementRef;\n}\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nclass HeaderRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[headerRowOutlet]' },] }\n];\n/** @nocollapse */\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\nif (false) {\n    /** @type {?} */\n    HeaderRowOutlet.prototype.viewContainer;\n    /** @type {?} */\n    HeaderRowOutlet.prototype.elementRef;\n}\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nclass FooterRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[footerRowOutlet]' },] }\n];\n/** @nocollapse */\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\nif (false) {\n    /** @type {?} */\n    FooterRowOutlet.prototype.viewContainer;\n    /** @type {?} */\n    FooterRowOutlet.prototype.elementRef;\n}\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Interface used to conveniently type the possible context interfaces for the render row.\n * \\@docs-private\n * @record\n * @template T\n */\nfunction RowContext() { }\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * \\@docs-private\n * @abstract\n * @template T\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * Set of properties that represents the identity of a single rendered row.\n *\n * When the table needs to determine the list of rows to render, it will do so by iterating through\n * each data object and evaluating its list of row templates to display (when multiTemplateDataRows\n * is false, there is only one template per data object). For each pair of data object and row\n * template, a `RenderRow` is added to the list of rows to render. If the data object and row\n * template pair has already been rendered, the previously used `RenderRow` is added; else a new\n * `RenderRow` is * created. Once the list is complete and all data objects have been itereated\n * through, a diff is performed to determine the changes that need to be made to the rendered rows.\n *\n * \\@docs-private\n * @record\n * @template T\n */\nfunction RenderRow() { }\nif (false) {\n    /** @type {?} */\n    RenderRow.prototype.data;\n    /** @type {?} */\n    RenderRow.prototype.dataIndex;\n    /** @type {?} */\n    RenderRow.prototype.rowDef;\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nclass CdkTable {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} role\n     * @param {?} _dir\n     * @param {?} _document\n     * @param {?} _platform\n     */\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * \\@docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @return {?}\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set trackBy(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function' && (/** @type {?} */ (console)) &&\n            (/** @type {?} */ (console.warn))) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     * @return {?}\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     * @return {?}\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((/**\n         * @param {?} _i\n         * @param {?} dataRow\n         * @return {?}\n         */\n        (_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} prevIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, prevIndex, currentIndex) => {\n            if (record.previousIndex == null) {\n                this._insertRow(record.item, (/** @type {?} */ (currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                const view = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (prevIndex)))));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const rowView = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (record.currentIndex)))));\n            rowView.context.$implicit = record.item.data;\n        }));\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    setHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    setFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyHeaderRowStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._headerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyFooterRowStyles() {\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._footerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    updateStickyColumnStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((/**\n         * @param {?} headerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        }));\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            // Collect all the rows rendered with this row definition.\n            /** @type {?} */\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        }));\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((/**\n         * @param {?} footerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        }));\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    _getAllRenderRows() {\n        /** @type {?} */\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        /** @type {?} */\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            let data = this._data[i];\n            /** @type {?} */\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                let renderRow = renderRowsForData[j];\n                /** @type {?} */\n                const cache = (/** @type {?} */ (this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    (/** @type {?} */ (cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        /** @type {?} */\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            /** @type {?} */\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? (/** @type {?} */ (cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                const dataRow = (/** @type {?} */ (cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        }));\n    }\n    /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => {\n            if (this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        }));\n    }\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        /** @type {?} */\n        const defaultRowDefs = this._rowDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    _renderUpdatedColumns() {\n        /** @type {?} */\n        const columnsDiffReducer = (/**\n         * @param {?} acc\n         * @param {?} def\n         * @return {?}\n         */\n        (acc, def) => acc || !!def.getColumnsDiff());\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data || [];\n            this.renderRows();\n        }));\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._headerRowOutlet, def, i)));\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._footerRowOutlet, def, i)));\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _addStickyColumnStyles(rows, rowDef) {\n        /** @type {?} */\n        const columnDefs = Array.from(rowDef.columns || []).map((/**\n         * @param {?} columnName\n         * @return {?}\n         */\n        columnName => {\n            /** @type {?} */\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return (/** @type {?} */ (columnDef));\n        }));\n        /** @type {?} */\n        const stickyStartStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.sticky));\n        /** @type {?} */\n        const stickyEndStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.stickyEnd));\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    _getRenderedRows(rowOutlet) {\n        /** @type {?} */\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            const viewRef = ((/** @type {?} */ ((/** @type {?} */ (rowOutlet.viewContainer.get(i))))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => !def.when || def.when(dataIndex, data)));\n        }\n        else {\n            /** @type {?} */\n            let rowDef = this._rowDefs.find((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => def.when && def.when(dataIndex, data))) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    _insertRow(renderRow, renderIndex) {\n        /** @type {?} */\n        const rowDef = renderRow.rowDef;\n        /** @type {?} */\n        const context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    _updateRowIndexContext() {\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (viewContainer.get(renderIndex)));\n            /** @type {?} */\n            const context = (/** @type {?} */ (viewRef.context));\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, (/**\n         * @param {?} columnId\n         * @return {?}\n         */\n        columnId => {\n            /** @type {?} */\n            const column = this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        }));\n    }\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    _applyNativeTableSections() {\n        /** @type {?} */\n        const documentFragment = this._document.createDocumentFragment();\n        /** @type {?} */\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (const section of sections) {\n            /** @type {?} */\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    _checkStickyStates() {\n        /** @type {?} */\n        const stickyCheckReducer = (/**\n         * @param {?} acc\n         * @param {?} d\n         * @return {?}\n         */\n        (acc, d) => {\n            return acc || d.hasStickyChanged();\n        });\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    _setupStickyStyler() {\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        }));\n    }\n    /**\n     * Filters definitions that belong to this table from a QueryList.\n     * @private\n     * @template I\n     * @param {?} items\n     * @return {?}\n     */\n    _getOwnDefs(items) {\n        return items.filter((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => !item._table || item._table === this));\n    }\n}\nCdkTable.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table',\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CDK_TABLE, useExisting: CdkTable }]\n            }] }\n];\n/** @nocollapse */\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef, { descendants: true },] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef, {\n                    descendants: true\n                },] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef, {\n                    descendants: true\n                },] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkTable.ngAcceptInputType_multiTemplateDataRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._document;\n    /**\n     * Latest data provided by the data source.\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._data;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._onDestroy;\n    /**\n     * List of the rendered rows as identified by their `RenderRow` object.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._renderRows;\n    /**\n     * Subscription that listens for the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._renderChangeSubscription;\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._columnDefsByName;\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._rowDefs;\n    /**\n     * Set of all header row definitions that can be used by this table. Populated by the rows\n     * gathered by using `ContentChildren` as well as any custom row definitions added to\n     * `_customHeaderRowDefs`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._headerRowDefs;\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to\n     * `_customFooterRowDefs`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._footerRowDefs;\n    /**\n     * Differ used to find the changes in the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._dataDiffer;\n    /**\n     * Stores the row definition that does not have a when predicate.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._defaultRowDef;\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._customColumnDefs;\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._customRowDefs;\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._customHeaderRowDefs;\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._customFooterRowDefs;\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._headerRowDefChanged;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._footerRowDefChanged;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._cachedRenderRowsMap;\n    /**\n     * Whether the table is applied to a native `<table>`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._isNativeHtmlTable;\n    /**\n     * Utility class that is responsible for applying the appropriate sticky positioning styles to\n     * the table's rows and cells.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._stickyStyler;\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n     * table subclasses.\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype.stickyCssClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._trackByFn;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._dataSource;\n    /** @type {?} */\n    CdkTable.prototype._multiTemplateDataRows;\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkTable.prototype.viewChange;\n    /** @type {?} */\n    CdkTable.prototype._rowOutlet;\n    /** @type {?} */\n    CdkTable.prototype._headerRowOutlet;\n    /** @type {?} */\n    CdkTable.prototype._footerRowOutlet;\n    /**\n     * The column definitions provided by the user that contain what the header, data, and footer\n     * cells should render for each column.\n     * @type {?}\n     */\n    CdkTable.prototype._contentColumnDefs;\n    /**\n     * Set of data row definitions that were provided to the table as content children.\n     * @type {?}\n     */\n    CdkTable.prototype._contentRowDefs;\n    /**\n     * Set of header row definitions that were provided to the table as content children.\n     * @type {?}\n     */\n    CdkTable.prototype._contentHeaderRowDefs;\n    /**\n     * Set of footer row definitions that were provided to the table as content children.\n     * @type {?}\n     */\n    CdkTable.prototype._contentFooterRowDefs;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._differs;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._platform;\n}\n/**\n * Utility function that gets a merged list of the entries in an array and values of a Set.\n * @template T\n * @param {?} array\n * @param {?} set\n * @return {?}\n */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/text-column.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass CdkTextColumn {\n    /**\n     * @param {?} _table\n     * @param {?} _options\n     */\n    constructor(_table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /**\n         * Alignment of the cell values.\n         */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /**\n     * Column name that should be used to reference this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((/**\n                 * @param {?} data\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (data, name) => ((/** @type {?} */ (data)))[name]));\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     * @return {?}\n     */\n    _createDefaultHeaderText() {\n        /** @type {?} */\n        const name = this.name;\n        if (isDevMode() && !name) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /**\n     * Synchronizes the column definition name with the text column name.\n     * @private\n     * @return {?}\n     */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }] }\n];\n/** @nocollapse */\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkTextColumn.prototype._name;\n    /**\n     * Text label that should be used for the column header. If this property is not\n     * set, the header text will default to the column name with its first letter capitalized.\n     * @type {?}\n     */\n    CdkTextColumn.prototype.headerText;\n    /**\n     * Accessor function to retrieve the data rendered for each cell. If this\n     * property is not set, the data cells will render the value found in the data's property matching\n     * the column's name. For example, if the column is named `id`, then the rendered value will be\n     * value defined by the data's `id` property.\n     * @type {?}\n     */\n    CdkTextColumn.prototype.dataAccessor;\n    /**\n     * Alignment of the cell values.\n     * @type {?}\n     */\n    CdkTextColumn.prototype.justify;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkTextColumn.prototype.columnDef;\n    /**\n     * The column cell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkTextColumn.prototype.cell;\n    /**\n     * The column headerCell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkTextColumn.prototype.headerCell;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextColumn.prototype._table;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextColumn.prototype._options;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/table-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n];\nclass CdkTableModule {\n}\nCdkTableModule.decorators = [\n    { type: NgModule, args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, STICKY_DIRECTIONS, StickyStyler, TEXT_COLUMN_OPTIONS, mixinHasStickyInput };\n//# sourceMappingURL=table.js.map\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { TableComponent } from './table.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TableComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TableRoutingModule { }\n","<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" tsVerticalSpacing>\n  <div style=\"font-size: 12px;\">\n    <p>\n      To get around GitHub rate limiting, we cache response data by default.\n      <br>\n      Clear cached data and/or disable below.\n    </p>\n\n    <div>\n      <label style=\"margin-right: 1rem;\">\n        Use cached data:\n        <input type=\"checkbox\" [(ngModel)]=\"useCachedData\">\n      </label>\n\n      <button (click)=\"clearCachedData()\">Clear cached GitHub data</button>\n    </div>\n\n    <div>\n      <label>\n        Table density:\n        <select name=\"density\" id=\"density\" [(ngModel)]=\"density\">\n          <option value=\"comfy\">Comfy</option>\n          <option value=\"compact\">Compact</option>\n        </select>\n      </label>\n    </div>\n  </div>\n\n  <span fxFlex></span>\n\n  <ts-menu [menuItemsTemplate]=\"columns\" theme=\"accent\">\n    <ts-icon svgIcon=\"table_large_plus\"></ts-icon>\n    Edit Columns\n  </ts-menu>\n\n  <ng-template #columns>\n    <form\n      [formGroup]=\"columnsForm\"\n      cdkDropList\n      cdkDropListLockAxis=\"y\"\n      (cdkDropListDropped)=\"columnDropped($event)\"\n    >\n      <ng-container *ngFor=\"let column of allPossibleColumns\">\n        <!-- The menu normally closes after each interaction, so we need to stop propagation here to\n        support multiple selections while open -->\n        <ts-checkbox\n          [formControl]=\"column.control\"\n          (click)=\"$event.stopPropagation()\"\n          theme=\"accent\"\n          cdkDrag\n        >\n          <span>\n            {{ column.display }}\n          </span>\n\n          <!-- Stop drag interactions from affecting the checkbox status -->\n          <ts-icon\n            cdkDragHandle\n            (click)=\"$event.preventDefault() && $event.stopPropagation()\"\n          >drag_indicator</ts-icon>\n\n          <div *cdkDragPlaceholder></div>\n        </ts-checkbox>\n      </ng-container>\n    </form>\n  </ng-template>\n</div>\n\n\n<div class=\"example-container\">\n  <table\n    ts-table\n    [density]=\"density\"\n    [dataSource]=\"dataSource\"\n    [columns]=\"visibleColumns\"\n    (columnsChange)=\"columnsChange($event)\"\n    tsSort\n    tsVerticalSpacing\n    [trackBy]=\"trackBy\"\n    #myTable=\"tsTable\"\n  >\n\n    <ng-container tsColumnDef=\"title\" sticky>\n      <th ts-header-cell *tsHeaderCellDef>Title</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.title }}</td>\n      <td ts-footer-cell *tsFooterCellDef>TEST footer content</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"updated\" alignment=\"right\">\n      <th ts-header-cell *tsHeaderCellDef ts-sort-header>Updated</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.updated_at | date:\"shortDate\" }}</td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"comments\" alignment=\"right\">\n      <th ts-header-cell *tsHeaderCellDef>Comments</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.comments }}</td>\n      <td ts-footer-cell *matfootercelldef>427</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"assignee\">\n      <th ts-header-cell *tsHeaderCellDef ts-sort-header>Assignee</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.login }}</td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"number\" alignment=\"right\">\n      <th ts-header-cell *tsHeaderCellDef ts-sort-header>Number</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.number }}</td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"labels\">\n      <th ts-header-cell *tsHeaderCellDef>Labels</th>\n      <td ts-cell *tsCellDef=\"let item\">\n        <span *ngFor=\"let l of item.labels\">{{ l.name }},</span>\n      </td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"created\">\n      <th ts-header-cell *tsHeaderCellDef ts-sort-header>Created</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.created_at | date:\"shortDate\" }}</td>\n      <td ts-footer-cell *tsFooterCellDef>{{ latestCreationDate }}</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"body\">\n      <th ts-header-cell *tsHeaderCellDef>\n        Body\n      </th>\n      <td ts-cell *tsCellDef=\"let item\">\n        <span class=\"truncate\" [innerHTML]=\"sanitize(item.body)\"></span>\n      </td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"state\">\n      <th ts-header-cell *tsHeaderCellDef>State</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.state }}</td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"id\" alignment=\"right\">\n      <th ts-header-cell *tsHeaderCellDef>ID</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.id }}</td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"html_url\">\n      <th ts-header-cell *tsHeaderCellDef>View</th>\n      <td ts-cell *tsCellDef=\"let item\">\n        <a href=\"{{ item.html_url }}\">\n          <ts-icon theme=\"accent\">open_in_new</ts-icon>\n        </a>\n      </td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <tr ts-header-row *tsHeaderRowDef=\"myTable.columnNames; sticky: true\"></tr>\n    <tr ts-row *tsRowDef=\"let row; columns: myTable.columnNames;\"></tr>\n    <tr ts-footer-row *tsFooterRowDef=\"myTable.columnNames; sticky: true\"></tr>\n  </table>\n</div>\n\n<div fxLayout=\"row\" fxLayoutAlign=\"end start\">\n  <ts-paginator\n    [totalRecords]=\"resultsLength\"\n    recordCountTooHighMessage=\"Please refine your filters.\"\n    (pageSelect)=\"onPageSelect($event)\"\n    (recordsPerPageChange)=\"perPageChange($event)\"\n  ></ts-paginator>\n</div>\n\n<div>\n  <button (click)=\"log()\">Log column definitions</button>\n</div>\n","import {\n  CdkDragDrop,\n  moveItemInArray,\n} from '@angular/cdk/drag-drop';\nimport { HttpClient } from '@angular/common/http';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n} from '@angular/forms';\nimport {\n  DomSanitizer,\n  SafeHtml,\n} from '@angular/platform-browser';\nimport {\n  merge,\n  Observable,\n  of,\n} from 'rxjs';\nimport {\n  catchError,\n  map,\n  startWith,\n  switchMap,\n} from 'rxjs/operators';\n\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\nimport {\n  TsPaginatorComponent,\n  TsPaginatorMenuItem,\n} from '@terminus/ui-paginator';\nimport { TsSortDirective } from '@terminus/ui-sort';\nimport {\n  TsColumn,\n  TsTableColumnsChangeEvent,\n  TsTableComponent,\n  TsTableDataSource,\n  TsTableDensity,\n} from '@terminus/ui-table';\n\n/**\n * Extend the TsColumn interface with properties our component needs\n */\nexport interface CustomColumn extends TsColumn {\n  // The UI text for the column dropdown\n  display: string;\n  // The associated FormControl\n  control: FormControl;\n  // The column name\n  name: string;\n  // The column width\n  width: number;\n}\n\nexport interface GithubApi {\n  items: GithubIssue[];\n  // NOTE: Format controlled by GitHub\n  // eslint-disable-next-line camelcase\n  total_count: number;\n}\n\nexport interface GithubIssue {\n  // NOTE: Format controlled by GitHub\n  // eslint-disable-next-line camelcase\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n  comments: string;\n}\n\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleHttpDao {\n  constructor(private http: HttpClient) {}\n\n  public getRepoIssues(sort: string, order: string, page: number, perPage: number): Observable<GithubApi> {\n    console.log('Hitting the GitHub API');\n    const href = `https://api.github.com/search/issues`;\n    const requestUrl = `${href}?q=repo:GetTerminus/terminus-ui`;\n    const requestParams = `&sort=${sort}&order=${order}&page=${page + 1}&per_page=${perPage}`;\n    return this.http.get<GithubApi>(`${requestUrl}${requestParams}`);\n  }\n}\n\n\n@Component({\n  selector: 'demo-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n})\nexport class TableComponent implements OnInit, AfterViewInit, OnDestroy {\n  private readonly columnsSource: CustomColumn[] = [\n    {\n      display: 'Title',\n      name: 'title',\n      width: 300,\n      control: new FormControl(true),\n    },\n    {\n      display: 'Comments',\n      name: 'comments',\n      width: 100,\n      control: new FormControl(false),\n    },\n    {\n      display: 'Number',\n      name: 'number',\n      width: 100,\n      control: new FormControl(true),\n    },\n    {\n      display: 'Updated',\n      name: 'updated',\n      width: 200,\n      control: new FormControl(true),\n    },\n    {\n      display: 'State',\n      name: 'state',\n      width: 100,\n      control: new FormControl(false),\n    },\n    {\n      display: 'Labels',\n      name: 'labels',\n      width: 200,\n      control: new FormControl(true),\n    },\n    // {\n    //   display: 'Body',\n    //   name: 'body',\n    //   width: '260px',\n    //   control: new FormControl(true),\n    // },\n    {\n      display: 'Assignee',\n      name: 'assignee',\n      width: 200,\n      control: new FormControl(false),\n    },\n    {\n      display: 'ID',\n      name: 'id',\n      width: 100,\n      control: new FormControl(true),\n    },\n    {\n      display: 'Created',\n      name: 'created',\n      width: 100,\n      control: new FormControl(false),\n    },\n    {\n      display: 'View',\n      name: 'html_url',\n      width: 100,\n      control: new FormControl(true),\n    },\n  ];\n  public savedResponse: GithubApi | null = null;\n  public useCachedData = true;\n  public allPossibleColumns: CustomColumn[] = this.columnsSource.slice();\n  public columnsForm = this.formBuilder.group({});\n  public exampleDatabase!: ExampleHttpDao;\n  public dataSource = new TsTableDataSource<GithubIssue>();\n  public resultsLength = 0;\n  public density: TsTableDensity = 'comfy';\n  public visibleColumns: TsColumn[] = [];\n  public allFormControlChanges$ = merge(...this.allPossibleColumns.map(c => c.control && c.control.valueChanges));\n  public latestCreationDate = new Date(2020, 2, 23);\n\n  @ViewChild(TsSortDirective, { static: true })\n  public sort!: TsSortDirective;\n\n  @ViewChild(TsPaginatorComponent, { static: true })\n  public readonly paginator!: TsPaginatorComponent;\n\n  @ViewChild('myTable', { static: false })\n  public readonly myTable!: TsTableComponent;\n\n\n  constructor(\n    private domSanitizer: DomSanitizer,\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private changeDetectorRef: ChangeDetectorRef,\n  ) {}\n\n  public ngOnInit(): void {\n    this.setVisibleColumns();\n  }\n\n  public ngAfterViewInit(): void {\n    this.setUpTable();\n\n    this.allFormControlChanges$.pipe(untilComponentDestroyed(this)).subscribe(change => {\n      this.setVisibleColumns();\n    });\n  }\n\n  // NOTE: Needed for untilComponentDestroyed\n  public ngOnDestroy(): void {}\n\n  public setVisibleColumns(): void {\n    this.visibleColumns = this.allPossibleColumns.filter(c => c.control && c.control.value);\n    console.log('DEMO: setVisibleColumns', this.visibleColumns);\n  }\n\n  /**\n   * Set up the database, sorting and API calls\n   */\n  public setUpTable(): void {\n    this.exampleDatabase = new ExampleHttpDao(this.http);\n\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => {\n      this.paginator.currentPageIndex = 0;\n    });\n\n    // Fetch new data anytime the sort is changed, the page is changed, or the records shown per\n    // page is changed\n    merge(this.sort.sortChange, this.paginator.pageSelect, this.paginator.recordsPerPageChange)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          if (this.useCachedData && this.savedResponse && this.savedResponse.items) {\n            return of(this.savedResponse);\n          }\n\n          return this.exampleDatabase.getRepoIssues(\n            this.sort.active,\n            this.sort.direction,\n            this.paginator.currentPageIndex,\n            this.paginator.recordsPerPage,\n          );\n        }),\n        map(data => {\n          // console.log('Demo: fetched data: ', data);\n          this.savedResponse = data;\n          this.resultsLength = data.total_count;\n\n          return data.items;\n        }),\n        catchError(() => {\n          console.warn('GitHub API rate limit has been reached!');\n          return of([]);\n        }),\n      ).subscribe(data => {\n        this.dataSource.data = data;\n      });\n  }\n\n  public clearCachedData(): void {\n    this.savedResponse = null;\n  }\n\n  /**\n   * Sanitize HTML content before injecting it\n   *\n   * @param content - The HTML to sanitize\n   * @returns The safe HTML\n   */\n  public sanitize(content): SafeHtml {\n    return this.domSanitizer.bypassSecurityTrustHtml(content);\n  }\n\n  /**\n   * Reorder columns list when a list item is dropped\n   *\n   * @param event - The drop event\n   */\n  public columnDropped(event: CdkDragDrop<string[]>): void {\n    const columns = this.allPossibleColumns.slice();\n    moveItemInArray(columns, event.previousIndex, event.currentIndex);\n\n    this.allPossibleColumns = columns;\n    this.setVisibleColumns();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  public trackBy(index: number, item: GithubIssue): string {\n    return item.number;\n  }\n\n\n  // Log functions for Demo purposes\n\n  public perPageChange(e: number): void {\n    console.log('DEMO: Records per page changed: ', e);\n  }\n\n  public onPageSelect(e: TsPaginatorMenuItem): void {\n    console.log('DEMO: Page selected: ', e);\n  }\n\n  public columnsChange(e: TsTableColumnsChangeEvent): void {\n    // NOTE: Commented out due to the volume - uncomment as needed for demo purposes.\n    console.log('DEMO: Columns change: ', e);\n  }\n\n  public log() {\n    console.log('Demo: columns: ', this.myTable.columns);\n  }\n\n}\n","import { DragDropModule } from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsCheckboxModule } from '@terminus/ui-checkbox';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { TsMenuModule } from '@terminus/ui-menu';\nimport { TsOptionModule } from '@terminus/ui-option';\nimport { TsPaginatorModule } from '@terminus/ui-paginator';\nimport { TsSelectModule } from '@terminus/ui-select';\nimport { TsSortModule } from '@terminus/ui-sort';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\nimport { TsTableModule } from '@terminus/ui-table';\n\nimport { TableRoutingModule } from './table-routing.module';\nimport { TableComponent } from './table.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DragDropModule,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TableRoutingModule,\n    TsCardModule,\n    TsCheckboxModule,\n    TsIconModule,\n    TsMenuModule,\n    TsOptionModule,\n    TsPaginatorModule,\n    TsSelectModule,\n    TsSortModule,\n    TsSpacingModule,\n    TsTableModule,\n  ],\n  declarations: [\n    TableComponent,\n  ],\n})\nexport class TableModule {}\n"]}