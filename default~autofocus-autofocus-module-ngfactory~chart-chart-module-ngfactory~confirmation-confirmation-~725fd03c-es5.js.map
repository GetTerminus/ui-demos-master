{"version":3,"sources":["webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/select/fesm2015/terminus-ui-select.js","webpack:///home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/material/fesm2015/chips.js"],"names":["tsSelectAnimations","transformPanel","transform","minWidth","opacity","nextUniqueId","TsSelectTriggerComponent","uid","_id","value","String","prototype","selector","template","host","changeDetection","OnPush","encapsulation","None","exportAs","TsSelectComponent_1","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_ITEM_HEIGHT","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","DEFAULT_DELIMITER","DEFAULT_COMPARE_WITH","o1","o2","TS_SELECT_PANEL_VIEWPORT_PADDING","TsSelectChange","source","nextUniqueId$1","DEFAULT_VIEWPORT_MARGIN","Éµ0","clickAction","TsSelectComponent","viewportRuler","changeDetectorRef","ngZone","documentService","elementRef","ngControl","componentName","flexGap","small","labelChanges","offsetY","optionIds","optionSelectionChanges","options","map","option","selectionChange","panelDoneAnimatingStream","panelOpen","positions","originX","originY","overlayX","overlayY","scrollTop","searchQuery","selfReference","stateChanges","transformOrigin","triggerFontSize","querySubject","viewportMarginSpacing","allowMultiple","_compareWith","_delimiter","hideRequiredMarker","isDisabled","isFilterable","_isRequired","noValidationOrHint","showProgress","showRefineSearchMessage","showRefresh","_tabIndex","theme","validateOnChange","closed","duplicateSelection","opened","optionDeselected","optionSelected","optionsRefreshRequested","queryChange","valueChange","onChange","onTouched","document","valueAccessor","selectionModel","valueChanges","pipe","subscribe","newValue","setSelectionByValue","initKeyManager","changed","event","added","forEach","select","emit","removed","deselect","changes","resetOptions","initializeSelection","label","firstChange","detectChanges","next","complete","close","open","length","triggerRect","trigger","nativeElement","getBoundingClientRect","parseInt","getComputedStyle","keyManager","withHorizontalOrientation","highlightCorrectOption","markForCheck","onStable","asObservable","overlayDir","overlayRef","overlayElement","style","fontSize","first","calculateOverlayPosition","updateValueAndValidity","positionChange","setPanelScrollTop","handleOpenKeydown","handleClosedKeydown","keyCode","code","arrowKeys","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isArrowKey","indexOf","isOpenKey","ENTER","SPACE","altKey","preventDefault","onKeydown","manager","target","isFilter","tagName","toLowerCase","HOME","END","setFirstItemActive","setLastItemActive","activeItem","selectViaInteraction","A","ctrlKey","hasDeselectedOptions","some","opt","selected","shouldSelect","shiftKey","setNextItemActive","setPreviousItemActive","onSelect","isUserInput","focus","setOptionIds","wasSelected","isSelected","clear","propagateChanges","setActiveItem","sortValues","id","join","withTypeAhead","withVerticalOrientation","tabOut","change","panel","scrollActiveOptionIntoView","toArray","sort","a","b","sortComparator","fallbackValue","valueToEmit","control","fn","Promise","resolve","then","currentValue","selectOptionByValue","correspondingOption","find","compareWith","error","console","warn","activeOptionIndex","activeItemIndex","labelCount","optionGroups","total","itemHeight","getPanelScrollTop","items","itemCount","panelHeight","Math","min","scrollContainerHeight","maxScroll","selectedOptionOffset","empty","getOptionIndex","scrollBuffer","calculateOverlayScroll","calculateOverlayOffsetY","checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","max","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","round","viewportSize","getViewportSize","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","reduce","result","current","index","optionIndexIfCurrent","undefined","isEmpty","el","inputElement","activeElement","offsetHeight","focused","selectedOptions","viewValue","delimiter","_hint","ctrl","requiredFormControl","_label","_placeholder","_value","ctorParameters","type","decorators","descendants","Object","Function","Boolean","Number","animations","providers","provide","useExisting","useValue","styles","TsSelectModule","imports","exports","declarations","MatChipEvent","MatChipSelectionChange","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","args","MatChipTrailingIcon","MatChip","_ngZone","platform","globalRippleOptions","animationMode","_changeDetectorRef","tabIndex","_document","_hasFocus","chipListSelectable","_chipListMultiple","_selected","_selectable","_removable","_onFocus","_onBlur","destroyed","_addHostClassName","_chipRippleTarget","createElement","classList","add","appendChild","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","basicChipAttrName","element","hasAttribute","chip","_removeTriggerEvents","_dispatchSelectionChange","_markForCheck","removable","disabled","stopPropagation","remove","selectable","toggleSelected","run","disableRipple","coercedValue","textContent","toString","inputs","propDecorators","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","nodeName","setAttribute","parentChip","MatChipsDefaultOptions","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","_MatChipListMixinBase","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_userTabIndex","_onTouched","_onChange","_multiple","_required","_disabled","ariaOrientation","_keyManager","chips","withWrap","dir","_allowFocusEscape","_syncChipsState","_resetChips","_initializeSelection","_updateTabIndex","_updateFocusForDestroyedChips","_selectionModel","multiple","updateErrorState","_dropSubscriptions","_chipInput","ids","_ariaDescribedby","_setSelectionByValue","_originatesFromChip","_focusInput","_isInputEmpty","contains","newChipIndex","input","_clearSelection","Array","isArray","_selectValue","_sortValues","correspondingChip","skip","_hasFocusedChip","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","_propagateChanges","chipFocusChanges","chipIndex","_isValidIndex","updateActiveItem","chipBlurChanges","_blur","chipRemoveChanges","currentElement","parentElement","writeValue","placeholder","errorStateMatcher","required","MatChipInputEvent","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","_chipList","_emitChipEnd","addOnBlur","_keydown","_isSeparatorKey","separators","has","registerInput","chipList","CHIP_DECLARATIONS","MatChipsModule"],"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","file":"default~autofocus-autofocus-module-ngfactory~chart-chart-module-ngfactory~confirmation-confirmation-~725fd03c-es5.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { ViewportRuler, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { Input, Component, ChangeDetectionStrategy, ViewEncapsulation, EventEmitter, isDevMode, ChangeDetectorRef, NgZone, ElementRef, Self, Optional, ContentChild, ViewChild, ContentChildren, QueryList, Output, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { TsCheckboxModule } from '@terminus/ui-checkbox';\nimport { TsFormFieldControl, TsFormFieldModule } from '@terminus/ui-form-field';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { TsInputModule } from '@terminus/ui-input';\nimport { allOptionsAreSelected, someOptionsAreSelected, countGroupLabelsBeforeOption, getOptionScrollPosition, toggleAllOptions, TsOptionComponent, TsOptgroupComponent, TS_OPTION_PARENT_COMPONENT, TsOptionModule } from '@terminus/ui-option';\nimport { TsValidationMessagesModule } from '@terminus/ui-validation-messages';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { MAT_CHECKBOX_DEFAULT_OPTIONS } from '@angular/material/checkbox';\nimport { Subject, defer, merge, BehaviorSubject } from 'rxjs';\nimport { startWith, take, takeUntil } from 'rxjs/operators';\nimport { TsDocumentService } from '@terminus/ngx-tools/browser';\nimport { coerceNumberProperty, coerceArray } from '@terminus/ngx-tools/coercion';\nimport { KEYS } from '@terminus/ngx-tools/keycodes';\nimport { isString, isUndefined } from '@terminus/ngx-tools/type-guards';\nimport { hasRequiredControl, untilComponentDestroyed, inputHasChanged } from '@terminus/ngx-tools/utilities';\nimport { TS_SPACING } from '@terminus/ui-spacing';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n/**\n * The defined panel animations for the {@link TsSelectComponent}\n */\nconst tsSelectAnimations = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0,\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)',\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 24px)',\n            transform: 'scaleY(1)',\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Unique ID for each instance\nlet nextUniqueId = 0;\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n *\n * @deprecated Please use `TsSelectionListTriggerDirective`\n */\nlet TsSelectTriggerComponent = class TsSelectTriggerComponent {\n    constructor() {\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-select-trigger-${nextUniqueId++}`;\n        this._id = this.uid;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsSelectTriggerComponent.prototype, \"id\", null);\nTsSelectTriggerComponent = __decorate([\n    Component({\n        selector: 'ts-select-trigger',\n        template: `<ng-content></ng-content>`,\n        host: {\n            'class': 'ts-select-custom-trigger qa-select-custom-trigger',\n            '[attr.id]': 'id',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsSelectTrigger'\n    })\n], TsSelectTriggerComponent);\n\nvar TsSelectComponent_1;\n/**\n * The following style constants are necessary to save here in order to properly calculate the alignment of the selected option over the\n * trigger element.\n */\n// The max height of the select's overlay panel\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n// The panel's padding on the x-axis\nconst SELECT_PANEL_PADDING_X = 16;\nconst SELECT_ITEM_HEIGHT = 3;\n// The panel's x axis padding if it is indented (e.g. there is an option group)\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n// The height of the select items in `em` units\nconst SELECT_ITEM_HEIGHT_EM = SELECT_ITEM_HEIGHT;\n/**\n * Distance between the panel edge and the option text in multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at this value or more away from the viewport boundary\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\nconst DEFAULT_DELIMITER = ',';\n/**\n * The default compare with function used when the consumer does not define one\n *\n * @param o1\n * @param o2\n */\nconst DEFAULT_COMPARE_WITH = (o1, o2) => o1 === o2;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at this value or more away from the viewport boundary\n */\nconst TS_SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * The event object that is emitted when the select value has changed\n */\nclass TsSelectChange {\n    constructor(\n    // Reference to the select that emitted the change event\n    // eslint-disable-next-line deprecation/deprecation\n    source, \n    // The current value\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Unique ID for each instance\nlet nextUniqueId$1 = 0;\nconst DEFAULT_VIEWPORT_MARGIN = 100;\nconst Éµ0 = { clickAction: 'noop' };\n/**\n * A component to create a select menu\n *\n * @deprecated Please use `TsSelectionListComponent`\n *\n * @example\n * <ts-select\n *              [allowMultiple]=\"true\"\n *              [compareWith]=\"myCompareFn\"\n *              delimiter=\",\"\n *              [hideRequiredMarker]=\"true\"\n *              hint=\"My hint!\"\n *              id=\"my-id\"\n *              [isDisabled]=\"true\"\n *              [isFilterable]=\"true\"\n *              [isRequired]=\"true\"\n *              label=\"My label!\"\n *              placeholder=\"My placeholder!\"\n *              [showProgress]=\"true\"\n *              [showRefineSearchMessage]=\"true\"\n *              [showRefresh]=\"true\"\n *              [sortComparator]=\"myComparator\"\n *              tabIndex=\"-1\"\n *              theme=\"primary\"\n *              [totalHiddenResults]=\"1278\"\n *              [validateOnChange]=\"true\"\n *              value=\"My value!\"\n *              (closed)=\"panelWasClosed($event)\"\n *              (duplicateSelection)=\"duplicateWasSelected($event)\"\n *              (opened)=\"panelWasOpened($event)\"\n *              (optionDeselected)=\"optionWasDeselected($event)\"\n *              (optionSelected)=\"optionWasSelected($event)\"\n *              (optionsRefreshRequested)=\"refreshWasSelected()\"\n *              (queryChange)=\"searchQueryChanged($event)\"\n *              (selectionChange)=\"aSelectionWasChanged($event)\"\n *              (valueChange)=\"theValueWasChanged($event)\"\n * ></ts-select>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/select</example-url>\n */\nlet TsSelectComponent = TsSelectComponent_1 = class TsSelectComponent {\n    constructor(viewportRuler, changeDetectorRef, ngZone, documentService, elementRef, ngControl) {\n        this.viewportRuler = viewportRuler;\n        this.changeDetectorRef = changeDetectorRef;\n        this.ngZone = ngZone;\n        this.documentService = documentService;\n        this.elementRef = elementRef;\n        this.ngControl = ngControl;\n        /**\n         * Give the component an explicit name\n         */\n        this.componentName = 'TsSelectComponent';\n        /**\n         * Define the flex layout gap\n         */\n        this.flexGap = TS_SPACING.small[0];\n        /**\n         * Subject used to alert the parent {@link FormFieldComponent} when the label gap should be recalculated\n         *\n         * Implemented as part of TsFormFieldControl.\n         */\n        this.labelChanges = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. This will be changed based on the y-position of the selected option.\n         */\n        this.offsetY = 0;\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        this.optionIds = '';\n        /**\n         * Combined stream of all of the child options' change events\n         */\n        this.optionSelectionChanges = \n        // eslint-disable-next-line deprecation/deprecation\n        defer(() => merge(...this.options.map(option => option.selectionChange)));\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        this.panelDoneAnimatingStream = new Subject();\n        /**\n         * Whether or not the overlay panel is open\n         */\n        this.panelOpen = false;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely).\n         */\n        this.positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        this.scrollTop = 0;\n        /**\n         * Store the search query\n         */\n        this.searchQuery = '';\n        // Since the FormFieldComponent is inside this template, we cannot use a provider to pass this component instance to the form field.\n        // Instead, we pass it manually through the template with this reference.\n        this.selfReference = this;\n        /*\n         * Implemented as part of TsFormFieldControl.\n         */\n        this.stateChanges = new Subject();\n        /**\n         * The value of the select panel's transform-origin property\n         */\n        this.transformOrigin = 'top';\n        /**\n         * The cached font-size of the trigger element\n         */\n        this.triggerFontSize = 0;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-select-${nextUniqueId$1++}`;\n        /**\n         * Management of the query string\n         */\n        this.querySubject = new BehaviorSubject('');\n        /**\n         * Margin between select panel edge and viewport edge\n         */\n        this.viewportMarginSpacing = DEFAULT_VIEWPORT_MARGIN;\n        /**\n         * Define if multiple selections are allowed\n         */\n        this.allowMultiple = false;\n        this._compareWith = DEFAULT_COMPARE_WITH;\n        this._delimiter = DEFAULT_DELIMITER;\n        /**\n         * Define if the required marker should be hidden\n         */\n        this.hideRequiredMarker = false;\n        this._id = this.uid;\n        /**\n         * Define if the control should be disabled\n         */\n        this.isDisabled = false;\n        /**\n         * Define if the select is filterable\n         */\n        this.isFilterable = false;\n        this._isRequired = false;\n        /**\n         * Define whether a validation or a hint needed.\n         */\n        this.noValidationOrHint = false;\n        /**\n         * Define if the component should currently be showing a progress spinner\n         */\n        this.showProgress = false;\n        /**\n         * Define if the component should expose a message telling the user to refine their search\n         */\n        this.showRefineSearchMessage = false;\n        /**\n         * Define if the select should show an option to trigger a refresh (by emitting an event)\n         */\n        this.showRefresh = false;\n        this._tabIndex = 0;\n        /**\n         * Define the component theme\n         */\n        this.theme = 'primary';\n        /**\n         * Define if validation messages should be shown immediately or on blur\n         */\n        this.validateOnChange = false;\n        /**\n         * Event for when the panel is closed\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event for when a duplicate selection is made\n         */\n        this.duplicateSelection = new EventEmitter();\n        /**\n         * Event for when the panel is opened\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event for when an option is removed\n         */\n        this.optionDeselected = new EventEmitter();\n        /**\n         * Event for when an option is selected\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event for when the user requests a refresh of the available options\n         */\n        this.optionsRefreshRequested = new EventEmitter();\n        /**\n         * Event for when the query has changed, used by filterable select\n         */\n        this.queryChange = new EventEmitter();\n        /**\n         * Event for when the selections change\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         *\n         * Needed for {@link TsFormFieldComponent}.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Stub in onChange\n         *\n         * Needed for ControlValueAccessor (View -> model callback called when value changes)\n         */\n        // istanbul ignore next\n        this.onChange = () => { };\n        /**\n         * Stub in onTouched\n         *\n         * Needed for ControlValueAccessor (View -> model callback called when select has been touched)\n         */\n        // istanbul ignore next\n        this.onTouched = () => { };\n        this.document = this.documentService.document;\n        // This is the assigned FormControl or NgModel\n        // istanbul ignore else\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * Whether all options are selected\n     */\n    get allOptionsSelected() {\n        return allOptionsAreSelected(this.options);\n    }\n    /**\n     * Whether the select has a value\n     */\n    get empty() {\n        return this.selectionModel && this.selectionModel.isEmpty();\n    }\n    /**\n     * Whether the input has focus\n     */\n    get focused() {\n        const el = this.inputElement && this.inputElement.nativeElement;\n        return (this.document.activeElement === el) || this.panelOpen;\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     */\n    get itemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the options\n     *\n     * Only called if at least one option exists\n     */\n    get itemHeight() {\n        // Try to use the 2nd option in case the first option is blank or a filter etc. Fall back to the first item if needed.\n        const options = this.options.toArray();\n        const option = options[1] || options[0];\n        return option && option.elementRef.nativeElement.offsetHeight;\n    }\n    /**\n     * Whether at least 1 option is selected, but not all options\n     */\n    get someOptionsSelected() {\n        return someOptionsAreSelected(this.options);\n    }\n    /**\n     * Determine if the label should float\n     */\n    get shouldLabelFloat() {\n        return this.focused || !this.empty || this.searchQuery.length > 0;\n    }\n    /**\n     * The value displayed in the select trigger\n     */\n    get selectTriggerValue() {\n        if (this.allowMultiple) {\n            const selectedOptions = this.selectionModel.selected.map(option => option.viewValue);\n            return selectedOptions.join(`${this.delimiter} `);\n        }\n        return this.selectionModel.selected[0].viewValue;\n    }\n    /**\n     * The currently selected option or options\n     */\n    get selected() {\n        return this.allowMultiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     *\n     * Learn more about `compareWith` in the Angular docs:\n     * https://angular.io/api/forms/SelectControlValueAccessor#customizing-option-selection\n     *\n     * @param fn\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && isDevMode()) {\n            // eslint-disable-next-line no-console\n            console.warn(`TsSelectComponent: \"compareWith\" must be a function. Falling back to the default.`);\n            this._compareWith = DEFAULT_COMPARE_WITH;\n        }\n        this._compareWith = fn;\n        // A different comparator means the selection could change so we need to reinitialize any selections\n        if (this.selectionModel) {\n            this.initializeSelection();\n        }\n    }\n    get compareWith() {\n        return this._compareWith;\n    }\n    /**\n     * Define the delimiter used in the list of selected options\n     *\n     * @param value\n     */\n    set delimiter(value) {\n        this._delimiter = isString(value) ? value : DEFAULT_DELIMITER;\n    }\n    get delimiter() {\n        return this._delimiter;\n    }\n    /**\n     * Define a hint for the input\n     *\n     * @param value\n     */\n    set hint(value) {\n        this._hint = value;\n    }\n    get hint() {\n        return this._hint;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Define if the control is required\n     *\n     * @param value\n     */\n    set isRequired(value) {\n        this._isRequired = value;\n    }\n    get isRequired() {\n        const ctrl = this.ngControl && this.ngControl.control;\n        const requiredFormControl = !!ctrl && hasRequiredControl(ctrl);\n        return this._isRequired || requiredFormControl;\n    }\n    /**\n     * Define the label text\n     *\n     * @param value\n     */\n    set label(value) {\n        this._label = value;\n    }\n    get label() {\n        return this._label;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected\n     *\n     * @param value\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    get placeholder() {\n        return this._placeholder;\n    }\n    /**\n     * Define the tab index for the component\n     *\n     * @param value\n     */\n    set tabIndex(value) {\n        this._tabIndex = coerceNumberProperty(value);\n    }\n    get tabIndex() {\n        return this._tabIndex;\n    }\n    /**\n     * Value of the select control\n     *\n     * @param newValue\n     */\n    set value(newValue) {\n        if (newValue !== this._value) {\n            this._value = newValue;\n        }\n    }\n    get value() {\n        return this._value;\n    }\n    /**\n     * Trigger change detection when the underlying form changes\n     */\n    ngOnInit() {\n        // TODO: re-initialize the selection model if this.allowMultiple changes (rather than throw error like material)\n        this.selectionModel = new SelectionModel(this.allowMultiple);\n        // Seed the control value\n        // NOTE: When the consumer is using an ngModel, the value is not set on the first cycle.\n        // We need to push it to the next event loop. When using a FormControl the value is there on the first run.\n        // istanbul ignore else\n        // eslint-disable-next-line dot-notation\n        if (this.ngControl && this.ngControl['form']) {\n            // Support dynamic form control updates\n            // istanbul ignore else\n            if (this.ngControl.valueChanges) {\n                this.ngControl.valueChanges\n                    .pipe(untilComponentDestroyed(this))\n                    .subscribe(newValue => {\n                    // istanbul ignore else\n                    if (newValue) {\n                        this.setSelectionByValue(newValue);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Initialize the key manager and set up change listeners\n     */\n    ngAfterContentInit() {\n        this.initKeyManager();\n        // NOTE: Known bug: This event will come through twice for each selection.\n        // NOTE: Selection model is created during OnInit so it cannot be null here\n        this.selectionModel.changed.pipe(untilComponentDestroyed(this)).subscribe(event => {\n            event.added.forEach(option => {\n                option.select();\n                this.optionSelected.emit(new TsSelectChange(this, option.value));\n            });\n            event.removed.forEach(option => {\n                option.deselect();\n                this.optionDeselected.emit(new TsSelectChange(this, option.value));\n            });\n        });\n        // If the array changes, reset options\n        this.options.changes.pipe(\n        // eslint-disable-next-line deprecation/deprecation\n        startWith(null), untilComponentDestroyed(this)).subscribe(() => {\n            this.resetOptions();\n            this.initializeSelection();\n        });\n    }\n    /**\n     * Trigger updates when the label is dynamically changed\n     *\n     * @param changes\n     */\n    ngOnChanges(changes) {\n        // Let the parent FormField know that it should update the ouline gap for the new label\n        // istanbul ignore else\n        if ((!!(inputHasChanged(changes, 'label')) && !changes.label.firstChange)) {\n            // Trigger change detection first so that the FormField will be working with the latest version\n            this.changeDetectorRef.detectChanges();\n            this.labelChanges.next();\n        }\n    }\n    /**\n     * Cleanup\n     */\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     */\n    toggle() {\n        // istanbul ignore else\n        if (!this.isDisabled) {\n            this.panelOpen ? this.close() : this.open();\n        }\n    }\n    /**\n     * Open the overlay panel\n     */\n    open() {\n        if (this.isDisabled || !this.options || !this.options.length || this.panelOpen) {\n            return;\n        }\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size'], 10);\n        this.panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.highlightCorrectOption();\n        this.changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n            // istanbul ignore else\n            if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n            }\n            this.options.first.elementRef.nativeElement.getBoundingClientRect();\n            this.calculateOverlayPosition();\n        });\n        // Alert the consumer\n        this.opened.emit();\n    }\n    /**\n     * Close the overlay panel\n     */\n    close() {\n        if (this.panelOpen) {\n            this.panelOpen = false;\n            this.keyManager.withHorizontalOrientation('ltr');\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n            this.updateValueAndValidity();\n            // Alert the consumer\n            this.closed.emit();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached\n     */\n    onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this.changeDetectorRef.detectChanges();\n            this.setPanelScrollTop(this.scrollTop);\n        });\n    }\n    /**\n     * Handles all keydown events on the select\n     *\n     * @param event - The KeyboardEvent\n     */\n    handleKeydown(event) {\n        if (this.isDisabled) {\n            return;\n        }\n        this.panelOpen ? this.handleOpenKeydown(event) : this.handleClosedKeydown(event);\n    }\n    /**\n     * Handle keyboard events when the select panel is closed\n     *\n     * @param event - The KeyboardEvent\n     */\n    handleClosedKeydown(event) {\n        const keyCode = event.code;\n        const arrowKeys = [KEYS.DOWN_ARROW.code, KEYS.UP_ARROW.code, KEYS.LEFT_ARROW.code, KEYS.RIGHT_ARROW.code];\n        const isArrowKey = arrowKeys.indexOf(keyCode) >= 0;\n        const isOpenKey = keyCode === KEYS.ENTER.code || keyCode === KEYS.SPACE.code;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.allowMultiple || event.altKey) && isArrowKey)) {\n            // Prevent the page from scrolling down when space is pressed\n            event.preventDefault();\n            this.open();\n        }\n        else if (!this.allowMultiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Handle keyboard events when the select panel is open\n     *\n     * @param event - The KeyboardEvent\n     */\n    // eslint-disable-next-line complexity\n    handleOpenKeydown(event) {\n        const keyCode = event.code;\n        const isArrowKey = keyCode === KEYS.DOWN_ARROW.code || keyCode === KEYS.UP_ARROW.code;\n        const manager = this.keyManager;\n        const target = event.target;\n        const isFilter = this.isFilterable && target.tagName.toLowerCase() === 'input';\n        if (keyCode === KEYS.HOME.code || keyCode === KEYS.END.code) {\n            // Focus the first/last item with HOME/END respectively\n            event.preventDefault();\n            keyCode === KEYS.HOME.code ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT+ARROW to match the native <select>\n            event.preventDefault();\n            this.close();\n        }\n        else if ((keyCode === KEYS.ENTER.code || (keyCode === KEYS.SPACE.code && !isFilter)) && manager.activeItem) {\n            // Select the active item with SPACE or ENTER\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        }\n        else if (this.allowMultiple && keyCode === KEYS.A.code && event.ctrlKey) {\n            // Select all with CTRL+A\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.isDisabled && !opt.selected);\n            this.options.forEach(option => {\n                // istanbul ignore else\n                if (!option.isDisabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const shouldSelect = this.allowMultiple && isArrowKey && event.shiftKey;\n            if (isArrowKey && event.shiftKey) {\n                if (keyCode === KEYS.DOWN_ARROW.code) {\n                    manager.setNextItemActive();\n                }\n                else {\n                    manager.setPreviousItemActive();\n                }\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            if (shouldSelect && manager.activeItem) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch\n     */\n    resetOptions() {\n        this.optionSelectionChanges.pipe(takeUntil(this.options.changes), untilComponentDestroyed(this)).subscribe(event => {\n            this.onSelect(event.source, event.isUserInput);\n            // istanbul ignore else\n            if (event.isUserInput && !this.allowMultiple && this.panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        // eslint-disable-next-line deprecation/deprecation\n        merge(...this.options.map(option => option.stateChanges))\n            .pipe(untilComponentDestroyed(this))\n            .subscribe(() => {\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n        this.setOptionIds();\n    }\n    /**\n     * Handle the selection when an option is clicked\n     *\n     * @param option - The selected option\n     * @param isUserInput - Whether this selection happened from a user's click\n     */\n    onSelect(option, isUserInput) {\n        const wasSelected = this.selectionModel.isSelected(option);\n        // If not in multiple selection mode, clear any existing selection first\n        if (option.value == null && !this.allowMultiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        }\n        else {\n            option.selected ? this.selectionModel.select(option) : this.selectionModel.deselect(option);\n            // istanbul ignore else\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n            // istanbul ignore else\n            if (this.allowMultiple) {\n                this.sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `TsOptionComponent`.\n                    this.focus();\n                }\n            }\n        }\n        // Only propagate if the selected option is not already in the selectionModel\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property\n     */\n    setOptionIds() {\n        this.optionIds = this.options.map(option => option.id).join(' ');\n    }\n    /**\n     * Set up a key manager to listen to keyboard events on the overlay panel\n     */\n    initKeyManager() {\n        this.keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation('ltr');\n        this.keyManager.tabOut.pipe(untilComponentDestroyed(this)).subscribe(() => {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            this.focus();\n            this.close();\n        });\n        this.keyManager.change.pipe(untilComponentDestroyed(this)).subscribe(() => {\n            if (this.panelOpen && this.panel) {\n                this.scrollActiveOptionIntoView();\n            }\n            else if (!this.panelOpen && !this.allowMultiple && this.keyManager.activeItem) {\n                this.keyManager.activeItem.selectViaInteraction();\n            }\n        });\n    }\n    /**\n     * Focus the correct element\n     *\n     * When in standard select mode we should focus the select itself.\n     */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n    /**\n     * Sort the selected values in the selectedModel based on their order in the panel\n     */\n    sortValues() {\n        // istanbul ignore else\n        if (this.allowMultiple) {\n            const options = this.options.toArray();\n            this.selectionModel\n                .sort((a, b) => {\n                if (this.sortComparator) {\n                    return this.sortComparator(a, b, options);\n                }\n                return options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emit a change event to set the model value\n     *\n     * @param fallbackValue - A fallback value to use when no selection exists\n     */\n    propagateChanges(fallbackValue) {\n        let valueToEmit;\n        if (this.allowMultiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this.value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new TsSelectChange(this, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n    /**\n     * Call FormControl updateValueAndValidity function to ensure value and valid status get updated.\n     */\n    updateValueAndValidity() {\n        if (this.ngControl && this.ngControl.control) {\n            this.ngControl.control.updateValueAndValidity();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface required to integrate with Angular's core forms API.\n     *\n     * NOTE: Currently we are not using this, but it still must be present since this component is acting as a CVA.\n     *\n     * @param value - New value to be written to the model\n     */\n    writeValue(value) { }\n    /**\n     * Save a callback function to be invoked when the select's value changes from user input.\n     * Part of the ControlValueAccessor interface required to integrate with Angular's core forms API.\n     *\n     * @param fn - Callback to be triggered when the value changes\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Save a callback function to be invoked when the select is blurred by the user.\n     * Part of the ControlValueAccessor interface required to integrate with Angular's core forms API.\n     *\n     * @param fn - Callback to be triggered when the component has been touched\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Disables the select.\n     * Part of the ControlValueAccessor interface required to integrate with Angular's core forms API.\n     *\n     * @param isDisabled - If the component is disabled\n     */\n    setDisabledState(isDisabled) {\n        this.isDisabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Initialize any existing selections into the selectionModel\n     */\n    initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this.value);\n        });\n    }\n    /**\n     * Sets the selected option based on a value.\n     * If no option can be found with the designated value, the select trigger is cleared.\n     *\n     * @param value - The value to use to look up options\n     */\n    setSelectionByValue(value) {\n        if (this.allowMultiple && value) {\n            value = coerceArray(value);\n            this.selectionModel.clear();\n            value.forEach((currentValue) => this.selectOptionByValue(currentValue));\n            this.sortValues();\n        }\n        else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n    /**\n     * Find and select an option based on its value\n     *\n     * @param value - The value to use when searching for a matching option\n     * @returns Option that has the corresponding value\n     */\n    selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this.compareWith(option.value, value);\n            }\n            catch (error) {\n                // istanbul ignore else\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    // eslint-disable-next-line no-console\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /**\n     * Scroll the active option into view\n     */\n    scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        const total = getOptionScrollPosition(activeOptionIndex + labelCount, this.itemHeight, this.getPanelScrollTop(), SELECT_PANEL_MAX_HEIGHT);\n        this.setPanelScrollTop(total);\n    }\n    /**\n     * Calculate the scroll position and x- and y- offsets of the overlay panel\n     */\n    calculateOverlayPosition() {\n        const itemHeight = this.itemHeight;\n        const items = this.itemCount;\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        // NOTE: Since we are checking the `empty` value first, we know that the selection model is not empty\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        let selectedOptionOffset = this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0]);\n        // Make sure we take into account optgroups also\n        selectedOptionOffset += countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculate the scroll position of the select's overlay panel\n     *\n     * This attempts to center the selected option in the panel. If the option is too high or too low in the panel to be scrolled to the\n     * center, it clamps the scroll position to the min or max scroll positions respectively.\n     *\n     * @param selectedIndex - The index of the item to scroll to\n     * @param scrollBuffer - The amount to buffer the scroll\n     * @param maxScroll - The maximum amount the panel can scroll\n     */\n    calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this.itemHeight;\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the scroll container, then subtracts the scroll\n        // buffer to scroll the option down to the center of the overlay panel. Half the option height must be re-added to the scrollTop so the\n        // option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the top start corner of the trigger.\n     * It has to be adjusted in order for the selected option to be aligned over the trigger when the panel opens.\n     *\n     * @param selectedIndex - The index of the selected item\n     * @param scrollBuffer - The number of pixels to buffer the scroll by\n     * @param maxScroll - The farthest the panel can scroll\n     * @returns The overlay's Y offset\n     */\n    calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        // NOTE: scrollBuffer is half of the panel height - which is really half of SELECT_PANEL_MAX_HEIGHT (when many options exist)\n        // NOTE: maxScroll is the height of all options minus the height of the panel\n        const itemHeight = this.itemHeight;\n        // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n        const optionHeightAdjustment = (itemHeight - (this.triggerRect ? this.triggerRect.height : 0)) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        // scrollbuffer - options\n        let optionOffsetFromPanelTop;\n        if (this.scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this.scrollTop === maxScroll) {\n            const firstDisplayedIndex = this.itemCount - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            const partialItemHeight = itemHeight - (((this.itemCount * itemHeight) - SELECT_PANEL_MAX_HEIGHT) % itemHeight);\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = (selectedDisplayIndex * itemHeight) + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n            optionOffsetFromPanelTop = scrollBuffer - (itemHeight / 2);\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round((optionOffsetFromPanelTop * -1) - optionHeightAdjustment);\n    }\n    /**\n     * Check that the attempted overlay position will fit within the viewport.\n     *\n     * If it will not fit, tries to adjust the scroll position and the associated y-offset so the panel can open fully on-screen.\n     * If it still won't fit, sets the offset back to 0 to allow the fallback position to take over.\n     *\n     * @param maxScroll - The maximum amount to allow the panel to scroll\n     */\n    checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this.itemHeight;\n        const viewportSize = this.viewportRuler.getViewportSize();\n        // Space between top of trigger and top of viewport\n        const topSpaceAvailable = this.triggerRect ? (this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING) : 0;\n        // Viewport height - trigger bottom - viewport padding\n        const bottomSpaceAvailable = viewportSize.height - (this.triggerRect ? this.triggerRect.bottom : 0) - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this.offsetY);\n        // 256 when maxed out\n        const totalPanelHeight = Math.min(this.itemCount * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        // total panel - offsetY - trigger height\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - (this.triggerRect ? this.triggerRect.height : 0);\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n    /**\n     * Adjust the overlay panel up to fit in the viewport\n     *\n     * @param panelHeightBottom - The height of the panel bottom\n     * @param bottomSpaceAvailable - The amount of available space at the bottom\n     */\n    adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        // Don't allow the offset to be set below 0\n        this.offsetY = (this.offsetY - distanceBelowViewport) < 0 ? 0 : this.offsetY - distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take effect.\n        // istanbul ignore else\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport\n     *\n     * @param panelHeightTop - The height of the panel top\n     * @param topSpaceAvailable - The amount of available space at the top\n     * @param maxScroll - The maximum amount the panel can be scrolled\n     */\n    adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        // Don't allow the offset to be set below 0\n        this.offsetY = (this.offsetY + distanceAboveViewport) < 0 ? 0 : this.offsetY + distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        // istanbul ignore else\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /**\n     * Set the transform origin point based on the selected option\n     *\n     * @returns The transform origin CSS string\n     */\n    getOriginBasedOnOption() {\n        const itemHeight = this.itemHeight;\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - (this.triggerRect ? this.triggerRect.height : 0)) / 2;\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + (itemHeight / 2);\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n        return `50% ${originY}px 0px`;\n    }\n    /**\n     * Get the index of the provided option in the option list\n     *\n     * @param option - The option whose index should be found\n     * @returns The index of the option\n     */\n    getOptionIndex(option) {\n        return this.options.reduce((result, current, index) => {\n            // eslint-disable-next-line no-undefined\n            const optionIndexIfCurrent = option === current ? index : undefined;\n            return isUndefined(result) ? optionIndexIfCurrent : result;\n            // eslint-disable-next-line no-undefined\n        }, undefined);\n    }\n    /**\n     * Highlight the selected item.\n     *\n     * If no option is selected, it will highlight the first item instead.\n     */\n    highlightCorrectOption() {\n        // istanbul ignore else\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            }\n            else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n    /**\n     * Toggle the selection all options\n     *\n     * If any are selected, it will unselect all & vice-versa.\n     */\n    toggleAllOptions() {\n        toggleAllOptions(this.options);\n    }\n    /**\n     * Ensure the correct element gets focus when the primary container is clicked.\n     *\n     * Implemented as part of TsFormFieldControl.\n     */\n    onContainerClick() {\n        this.focus();\n        // istanbul ignore else\n        if (!this.isDisabled) {\n            this.open();\n        }\n    }\n    /**\n     * Get the panel's scrollTop\n     *\n     * @returns The scrollTop number\n     */\n    getPanelScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Set the panel's scrollTop\n     *\n     * This allows us to manually scroll to display options above or below the fold, as they are not actually being focused when active.\n     *\n     *\n     * @param scrollTop - The number to set scrollTop to\n     */\n    setPanelScrollTop(scrollTop) {\n        // istanbul ignore else\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n};\nTsSelectComponent.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: TsDocumentService },\n    { type: ElementRef },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }\n];\n__decorate([\n    ContentChild(TsSelectTriggerComponent),\n    __metadata(\"design:type\", TsSelectTriggerComponent)\n], TsSelectComponent.prototype, \"customTrigger\", void 0);\n__decorate([\n    ViewChild('input'),\n    __metadata(\"design:type\", ElementRef)\n], TsSelectComponent.prototype, \"inputElement\", void 0);\n__decorate([\n    ViewChild('labelElement'),\n    __metadata(\"design:type\", ElementRef)\n], TsSelectComponent.prototype, \"labelElement\", void 0);\n__decorate([\n    ViewChild('trigger'),\n    __metadata(\"design:type\", ElementRef)\n], TsSelectComponent.prototype, \"trigger\", void 0);\n__decorate([\n    ViewChild(CdkConnectedOverlay),\n    __metadata(\"design:type\", CdkConnectedOverlay)\n], TsSelectComponent.prototype, \"overlayDir\", void 0);\n__decorate([\n    ViewChild('panel'),\n    __metadata(\"design:type\", ElementRef)\n], TsSelectComponent.prototype, \"panel\", void 0);\n__decorate([\n    ContentChildren(TsOptionComponent, { descendants: true }),\n    __metadata(\"design:type\", QueryList)\n], TsSelectComponent.prototype, \"options\", void 0);\n__decorate([\n    ContentChildren(TsOptgroupComponent),\n    __metadata(\"design:type\", QueryList)\n], TsSelectComponent.prototype, \"optionGroups\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectComponent.prototype, \"allowMultiple\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Function])\n], TsSelectComponent.prototype, \"compareWith\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsSelectComponent.prototype, \"delimiter\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectComponent.prototype, \"hideRequiredMarker\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsSelectComponent.prototype, \"hint\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsSelectComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectComponent.prototype, \"isDisabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectComponent.prototype, \"isFilterable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsSelectComponent.prototype, \"isRequired\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsSelectComponent.prototype, \"label\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectComponent.prototype, \"noValidationOrHint\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsSelectComponent.prototype, \"placeholder\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectComponent.prototype, \"showProgress\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectComponent.prototype, \"showRefineSearchMessage\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectComponent.prototype, \"showRefresh\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function)\n], TsSelectComponent.prototype, \"sortComparator\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], TsSelectComponent.prototype, \"tabIndex\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsSelectComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], TsSelectComponent.prototype, \"totalHiddenResults\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectComponent.prototype, \"validateOnChange\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], TsSelectComponent.prototype, \"value\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsSelectComponent.prototype, \"closed\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsSelectComponent.prototype, \"duplicateSelection\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsSelectComponent.prototype, \"opened\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsSelectComponent.prototype, \"optionDeselected\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsSelectComponent.prototype, \"optionSelected\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsSelectComponent.prototype, \"optionsRefreshRequested\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsSelectComponent.prototype, \"queryChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsSelectComponent.prototype, \"selectionChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsSelectComponent.prototype, \"valueChange\", void 0);\nTsSelectComponent = TsSelectComponent_1 = __decorate([\n    Component({\n        selector: 'ts-select',\n        template: \"<ts-form-field\\n  [validateOnChange]=\\\"validateOnChange\\\"\\n  [control]=\\\"selfReference\\\"\\n  [hideRequiredMarker]=\\\"hideRequiredMarker\\\"\\n  [hint]=\\\"hint\\\"\\n  [id]=\\\"id\\\"\\n  [noValidationOrHint]=\\\"noValidationOrHint\\\"\\n  [theme]=\\\"theme\\\"\\n  cdk-overlay-origin\\n  #origin=\\\"cdkOverlayOrigin\\\"\\n>\\n  <ts-label *ngIf=\\\"label\\\">\\n    {{ label }}\\n  </ts-label>\\n\\n  <!--\\n     -SELECT TRIGGER\\n     -->\\n    <div\\n      class=\\\"ts-select-trigger qa-select-trigger\\\"\\n      [attr.id]=\\\"id\\\"\\n      [attr.tabindex]=\\\"tabIndex\\\"\\n      aria-hidden=\\\"true\\\"\\n      (click)=\\\"toggle()\\\"\\n      #trigger\\n    >\\n      <div class=\\\"ts-select-value\\\" [ngSwitch]=\\\"empty\\\">\\n        <span\\n          class=\\\"ts-select-placeholder\\\"\\n          *ngSwitchCase=\\\"true\\\"\\n        >\\n          {{ placeholder || '\\\\u00A0' }}\\n        </span>\\n\\n        <span class=\\\"ts-select-value-text qa-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n          <span *ngSwitchDefault [attr.title]=\\\"selectTriggerValue\\\">\\n            {{ selectTriggerValue || '\\\\u00A0' }}\\n          </span>\\n\\n          <ng-content select=\\\"ts-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n        </span>\\n      </div>\\n\\n      <div class=\\\"ts-select-arrow-wrapper qa-select-arrow-wrapper\\\">\\n        <div class=\\\"ts-select-arrow\\\"></div>\\n      </div>\\n    </div>\\n</ts-form-field>\\n\\n\\n<!--\\n   -SELECT PANEL\\n   -->\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayViewportMargin]=\\\"viewportMarginSpacing\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"triggerRect?.width\\\"\\n  [cdkConnectedOverlayWidth]=\\\"triggerRect?.width\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"onAttached()\\\"\\n  (detach)=\\\"close()\\\"\\n>\\n\\n  <div\\n    #panel\\n    class=\\\"ts-select-panel ts-{{ theme }} qa-select-panel\\\"\\n    [class.ts-select-panel--multiple]=\\\"allowMultiple\\\"\\n    [class.ts-select-panel--filter]=\\\"isFilterable\\\"\\n    [@transformPanel]=\\\"allowMultiple ? 'showing-multiple' : 'showing'\\\"\\n    (@transformPanel.done)=\\\"panelDoneAnimatingStream.next($event.toState)\\\"\\n    [style.transformOrigin]=\\\"transformOrigin\\\"\\n    [style.font-size.px]=\\\"triggerFontSize\\\"\\n    (keydown)=\\\"handleKeydown($event)\\\"\\n  >\\n    <div class=\\\"ts-select-panel__filter-input\\\" *ngIf=\\\"isFilterable\\\">\\n      <ts-input\\n        label=\\\"Begin typing to filter...\\\"\\n        [ngModel]=\\\"searchQuery\\\"\\n        (ngModelChange)=\\\"queryChange.emit($event)\\\"\\n      ></ts-input>\\n    </div>\\n\\n    <div\\n      class=\\\"ts-select-panel__toggle-all qa-select-toggle-all\\\"\\n      (click)=\\\"toggleAllOptions()\\\"\\n      *ngIf=\\\"allowMultiple\\\"\\n    >\\n      <ts-checkbox\\n        [isChecked]=\\\"allOptionsSelected\\\"\\n        [isIndeterminate]=\\\"someOptionsSelected\\\"\\n        theme=\\\"accent\\\"\\n      >\\n        {{ someOptionsSelected ? 'Deselect' : 'Select' }} All\\n\\n        <span\\n          class=\\\"ts-select-panel__count qa-select-selected-count\\\"\\n          *ngIf=\\\"selectionModel?.selected.length\\\"\\n        >\\n          {{ selectionModel?.selected.length }} selected\\n        </span>\\n      </ts-checkbox>\\n    </div>\\n\\n    <!-- Outlet for options passed in by consumer -->\\n    <ng-template *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-template>\\n\\n    <div\\n      class=\\\"ts-select-panel__refresh\\\"\\n      *ngIf=\\\"showRefresh\\\"\\n      (click)=\\\"optionsRefreshRequested.emit()\\\"\\n    >\\n      <ts-icon>refresh</ts-icon>\\n      <span>\\n        Refresh &amp; reload to bring in new choices.\\n      </span>\\n    </div>\\n\\n    <div\\n      class=\\\"ts-select-panel__refine\\\"\\n      *ngIf=\\\"showRefineSearchMessage\\\"\\n    >\\n      Narrow your search to reveal {{ totalHiddenResults ? totalHiddenResults + ' ' : '' }}hidden results.\\n    </div>\\n  </div>\\n</ng-template>\\n\\n\\n<ng-template #contentTemplate>\\n  <ng-content></ng-content>\\n</ng-template>\\n\",\n        host: {\n            'class': 'ts-select',\n            '[class.ts-select--required]': 'isRequired',\n            '[class.ts-select--disabled]': 'isDisabled',\n            '[attr.aria-owns]': 'panelOpen ? optionIds : null',\n            '[attr.aria-required]': 'isRequired.toString()',\n            '[attr.aria-multiselectable]': 'allowMultiple',\n            '[attr.tabindex]': 'tabIndex',\n            '(keydown)': 'handleKeydown($event)',\n        },\n        animations: [\n            tsSelectAnimations.transformPanel,\n        ],\n        providers: [\n            {\n                provide: TsFormFieldControl,\n                // eslint-disable-next-line deprecation/deprecation\n                useExisting: TsSelectComponent_1,\n            },\n            {\n                provide: TS_OPTION_PARENT_COMPONENT,\n                // eslint-disable-next-line deprecation/deprecation\n                useExisting: TsSelectComponent_1,\n            },\n            // Since we handle all option selection/deselection functionality we tell the underlying MatCheckbox to do nothing on click.\n            {\n                provide: MAT_CHECKBOX_DEFAULT_OPTIONS,\n                useValue: Éµ0,\n            },\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsSelect',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-select{display:block;outline:0}.ts-select :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-select h1,.ts-select h2,.ts-select h3,.ts-select h4,.ts-select h5,.ts-select p{margin:unset}.ts-select .ts-form-field.ts-form-field--float .ts-select-arrow-wrapper,.ts-select .ts-form-field:not(.ts-form-field--float) .ts-select-arrow-wrapper{display:table-cell;transform:translateY(-10%);vertical-align:middle}.ts-select .ts-select-trigger{box-sizing:border-box;cursor:pointer;display:inline-table;position:relative}.ts-select .ts-select-trigger--hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-option--disabled .ts-select .ts-select-trigger,.ts-select.ts-select--disabled .ts-select-trigger{cursor:not-allowed;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ts-select.ts-select--disabled .ts-select-arrow{color:#999}.ts-select .ts-select-value{display:table-cell;max-width:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%}.ts-select .ts-select-value-text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ts-select .ts-select-arrow{border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;height:0;margin:0 4px;width:0}.cdk-overlay-pane .ts-select-panel__filter-input{background-color:#fafafa;border-bottom:1px solid #cecdd1;left:0;padding:8px;position:absolute;right:-24px;top:0;width:calc(100% - 16px);z-index:501}.cdk-overlay-pane .ts-select-panel__filter-input .ts-form-field .ts-form-field__wrapper{padding-bottom:0}.ts-select-panel{max-height:256px;overflow:auto}.ts-select-panel.ts-select-panel--filter{padding-top:85px}.ts-select-panel .ts-optgroup .ts-option .ts-checkbox{padding-left:16px}.ts-select-panel .ts-select-panel__toggle-all{background-color:#f2f0f7;border-bottom:1px solid #999;position:relative}.ts-select-panel .ts-select-panel__toggle-all .ts-checkbox{line-height:3em}.ts-select-panel .ts-select-panel__count{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;color:#999;position:absolute;right:12px}.ts-select-panel .ts-select-panel__refresh{letter-spacing:.01em;font-weight:500;font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;background-color:#f2f0f7;color:#757575;cursor:pointer;height:48px;line-height:48px;padding:0 16px;transition:color .2s}.ts-select-panel .ts-select-panel__refresh .ts-icon{height:24px;vertical-align:text-bottom}.ts-select-panel .ts-select-panel__refresh:focus,.ts-select-panel .ts-select-panel__refresh:hover{color:#00538a}.ts-select-panel .ts-select-panel__refine{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;color:#999;font-style:italic;padding:12px 16px}.ts-paginator .ts-select{display:inline-block;position:relative;width:5em}.ts-paginator .ts-select.ts-select--disabled .ts-select-arrow-wrapper{transform:translateY(0)}\"]\n    }),\n    __param(5, Self()), __param(5, Optional()),\n    __metadata(\"design:paramtypes\", [ViewportRuler,\n        ChangeDetectorRef,\n        NgZone,\n        TsDocumentService,\n        ElementRef,\n        NgControl])\n], TsSelectComponent);\n\n// @deprecated Please use `TsSelectionListModule`\nlet TsSelectModule = class TsSelectModule {\n};\nTsSelectModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            FormsModule,\n            MatChipsModule,\n            MatProgressSpinnerModule,\n            MatRippleModule,\n            OverlayModule,\n            ReactiveFormsModule,\n            TsCheckboxModule,\n            TsFormFieldModule,\n            TsIconModule,\n            TsInputModule,\n            TsOptionModule,\n            TsValidationMessagesModule,\n        ],\n        exports: [\n            TsSelectComponent,\n            TsSelectTriggerComponent,\n        ],\n        declarations: [\n            TsSelectComponent,\n            TsSelectTriggerComponent,\n        ],\n    })\n], TsSelectModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_COMPARE_WITH, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, TS_SELECT_PANEL_VIEWPORT_PADDING, TsSelectChange, TsSelectComponent, TsSelectModule, TsSelectTriggerComponent, tsSelectAnimations, Éµ0 };\n//# sourceMappingURL=terminus-ui-select.js.map\n","import { SPACE, BACKSPACE, DELETE, HOME, END, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, forwardRef, Input, Output, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { DOCUMENT } from '@angular/common';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an event fired on an individual `mat-chip`.\n * @record\n */\nfunction MatChipEvent() { }\nif (false) {\n    /**\n     * The chip the event was fired on.\n     * @type {?}\n     */\n    MatChipEvent.prototype.chip;\n}\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nclass MatChipSelectionChange {\n    /**\n     * @param {?} source\n     * @param {?} selected\n     * @param {?=} isUserInput\n     */\n    constructor(source, selected, isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\nif (false) {\n    /**\n     * Reference to the chip that emitted the event.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.source;\n    /**\n     * Whether the chip that emitted the event is selected.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.selected;\n    /**\n     * Whether the selection change was a result of a user interaction.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.isUserInput;\n}\n// Boilerplate for applying mixins to MatChip.\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatChipBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' }\n            },] }\n];\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' }\n            },] }\n];\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} globalRippleOptions\n     * @param {?=} animationMode\n     * @param {?=} _changeDetectorRef\n     * @param {?=} tabIndex\n     * @param {?=} _document\n     */\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, \n    // @breaking-change 8.0.0 `animationMode` parameter to become required.\n    animationMode, _changeDetectorRef, tabIndex, \n    // @breaking-change 11.0.0 `_document` parameter to become required.\n    _document) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Whether the chip has focus.\n         */\n        this._hasFocus = false;\n        /**\n         * Whether the chip list is selectable\n         */\n        this.chipListSelectable = true;\n        /**\n         * Whether the chip list is in multi-selection mode.\n         */\n        this._chipListMultiple = false;\n        this._selected = false;\n        this._selectable = true;\n        this._removable = true;\n        /**\n         * Emits when the chip is focused.\n         */\n        this._onFocus = new Subject();\n        /**\n         * Emits when the chip is blured.\n         */\n        this._onBlur = new Subject();\n        /**\n         * Emitted when the chip is selected or deselected.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emitted when a chip is to be removed.\n         */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = (_document || document).createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        /** @type {?} */\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n    get removable() { return this._removable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    /**\n     * @return {?}\n     */\n    _addHostClassName() {\n        /** @type {?} */\n        const basicChipAttrName = 'mat-basic-chip';\n        /** @type {?} */\n        const element = (/** @type {?} */ (this._elementRef.nativeElement));\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._markForCheck();\n        }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._markForCheck();\n        return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /**\n     * Handles click events on the chip.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            }));\n        }));\n    }\n    /**\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _markForCheck() {\n        // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n}\nMatChip.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disabled', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                },\n            },] }\n];\n/** @nocollapse */\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MatChipAvatar,] }],\n    trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon,] }],\n    removeIcon: [{ type: ContentChild, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatChipRemove)),] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    MatChip.ngAcceptInputType_selected;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_selectable;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_removable;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_disableRipple;\n    /**\n     * Reference to the RippleRenderer for the chip.\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._chipRipple;\n    /**\n     * Reference to the element that acts as the chip's ripple target. This element is\n     * dynamically added as a child node of the chip. The chip itself cannot be used as the\n     * ripple target because it must be the host of the focus indicator.\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._chipRippleTarget;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down. The ripple config\n     * is set to the global ripple options since we don't have any configurable options for\n     * the chip ripples.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChip.prototype.rippleConfig;\n    /**\n     * Whether the chip has focus.\n     * @type {?}\n     */\n    MatChip.prototype._hasFocus;\n    /**\n     * Whether animations for the chip are enabled.\n     * @type {?}\n     */\n    MatChip.prototype._animationsDisabled;\n    /**\n     * Whether the chip list is selectable\n     * @type {?}\n     */\n    MatChip.prototype.chipListSelectable;\n    /**\n     * Whether the chip list is in multi-selection mode.\n     * @type {?}\n     */\n    MatChip.prototype._chipListMultiple;\n    /**\n     * The chip avatar\n     * @type {?}\n     */\n    MatChip.prototype.avatar;\n    /**\n     * The chip's trailing icon.\n     * @type {?}\n     */\n    MatChip.prototype.trailingIcon;\n    /**\n     * The chip's remove toggler.\n     * @type {?}\n     */\n    MatChip.prototype.removeIcon;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._selected;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._selectable;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._removable;\n    /**\n     * Emits when the chip is focused.\n     * @type {?}\n     */\n    MatChip.prototype._onFocus;\n    /**\n     * Emits when the chip is blured.\n     * @type {?}\n     */\n    MatChip.prototype._onBlur;\n    /**\n     * Emitted when the chip is selected or deselected.\n     * @type {?}\n     */\n    MatChip.prototype.selectionChange;\n    /**\n     * Emitted when the chip is destroyed.\n     * @type {?}\n     */\n    MatChip.prototype.destroyed;\n    /**\n     * Emitted when a chip is to be removed.\n     * @type {?}\n     */\n    MatChip.prototype.removed;\n    /** @type {?} */\n    MatChip.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._changeDetectorRef;\n}\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    /**\n     * @param {?} _parentChip\n     * @param {?=} elementRef\n     */\n    constructor(_parentChip, \n    // @breaking-change 11.0.0 `elementRef` parameter to be made required.\n    elementRef) {\n        this._parentChip = _parentChip;\n        // @breaking-change 11.0.0 Remove null check for `elementRef`.\n        if (elementRef && elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /**\n     * Calls the parent chip's public `remove()` method if applicable.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        /** @type {?} */\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.decorators = [\n    { type: Directive, args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)',\n                }\n            },] }\n];\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipRemove.prototype._parentChip;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-default-options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default options, for the chips module, that can be overridden.\n * @record\n */\nfunction MatChipsDefaultOptions() { }\nif (false) {\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     * @type {?}\n     */\n    MatChipsDefaultOptions.prototype.separatorKeyCodes;\n}\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatChipListBase.prototype._defaultErrorStateMatcher;\n    /** @type {?} */\n    MatChipListBase.prototype._parentForm;\n    /** @type {?} */\n    MatChipListBase.prototype._parentFormGroup;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipListBase.prototype.ngControl;\n}\n/** @type {?} */\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nif (false) {\n    /**\n     * Chip list that emitted the event.\n     * @type {?}\n     */\n    MatChipListChange.prototype.source;\n    /**\n     * Value of the chip list when the event was emitted.\n     * @type {?}\n     */\n    MatChipListChange.prototype.value;\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Uid of the chip list\n         */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /**\n         * Tab index for the chip list.\n         */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /**\n         * Function when touched\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Function when changed\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._multiple = false;\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        this._required = false;\n        this._disabled = false;\n        /**\n         * Orientation of the chip list.\n         */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /**\n         * Event emitted when the selected chip list value has been changed by the user.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * The array of selected chips inside chip list.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n    get role() { return this.empty ? null : 'listbox'; }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n    get selectable() { return this._selectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.chipListSelectable = this._selectable));\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.selectionChange)));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n    get chipFocusChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onFocus)));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n    get chipBlurChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onBlur)));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.destroyed)));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} dir\n             * @return {?}\n             */\n            dir => this._keyManager.withHorizontalOrientation(dir)));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._allowFocusEscape();\n        }));\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._syncChipsState();\n                }));\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @param {?=} options\n     * @return {?}\n     */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            if (event.keyCode === HOME) {\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (event.keyCode === END) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @protected\n     * @return {?}\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     * @protected\n     * @return {?}\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                /** @type {?} */\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            /** @type {?} */\n            let input = (/** @type {?} */ (element));\n            return !input.value;\n        }\n        return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.deselect()));\n        if (Array.isArray(value)) {\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            currentValue => this._selectValue(currentValue, isUserInput)));\n            this._sortValues();\n        }\n        else {\n            /** @type {?} */\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @private\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        /** @type {?} */\n        const correspondingChip = this.chips.find((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        }));\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        }));\n    }\n    /**\n     * Deselects every chip in the list.\n     * @private\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        }));\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.value));\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                }));\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     * @return {?}\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach((/**\n                 * @param {?} chip\n                 * @return {?}\n                 */\n                chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                }));\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        }));\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        }));\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._blur();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            const chip = event.chip;\n            /** @type {?} */\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        }));\n    }\n    /**\n     * Checks whether an event comes from inside a chip element.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _originatesFromChip(event) {\n        /** @type {?} */\n        let currentElement = (/** @type {?} */ (event.target));\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /**\n     * Checks whether any of the chips is focused.\n     * @private\n     * @return {?}\n     */\n    _hasFocusedChip() {\n        return this.chips.some((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._hasFocus));\n    }\n    /**\n     * Syncs the list's state with the individual chips.\n     * @private\n     * @return {?}\n     */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                chip.disabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            }));\n        }\n    }\n}\nMatChipList.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid',\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\nif (false) {\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_multiple;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_required;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_selectable;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.controlType;\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._lastDestroyedChipIndex;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._destroyed;\n    /**\n     * Subscription to focus changes in the chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipFocusSubscription;\n    /**\n     * Subscription to blur changes in the chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipBlurSubscription;\n    /**\n     * Subscription to selection changes in chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipSelectionSubscription;\n    /**\n     * Subscription to remove changes in chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipRemoveSubscription;\n    /**\n     * The chip input to add more chips\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._chipInput;\n    /**\n     * Uid of the chip list\n     * @type {?}\n     */\n    MatChipList.prototype._uid;\n    /**\n     * The aria-describedby attribute on the chip list for improved a11y.\n     * @type {?}\n     */\n    MatChipList.prototype._ariaDescribedby;\n    /**\n     * Tab index for the chip list.\n     * @type {?}\n     */\n    MatChipList.prototype._tabIndex;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     * @type {?}\n     */\n    MatChipList.prototype._userTabIndex;\n    /**\n     * The FocusKeyManager which handles focus.\n     * @type {?}\n     */\n    MatChipList.prototype._keyManager;\n    /**\n     * Function when touched\n     * @type {?}\n     */\n    MatChipList.prototype._onTouched;\n    /**\n     * Function when changed\n     * @type {?}\n     */\n    MatChipList.prototype._onChange;\n    /** @type {?} */\n    MatChipList.prototype._selectionModel;\n    /**\n     * An object used to control when error messages are shown.\n     * @type {?}\n     */\n    MatChipList.prototype.errorStateMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._compareWith;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._required;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._placeholder;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._disabled;\n    /**\n     * Orientation of the chip list.\n     * @type {?}\n     */\n    MatChipList.prototype.ariaOrientation;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._selectable;\n    /**\n     * Event emitted when the selected chip list value has been changed by the user.\n     * @type {?}\n     */\n    MatChipList.prototype.change;\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.valueChange;\n    /**\n     * The chip components contained within this chip list.\n     * @type {?}\n     */\n    MatChipList.prototype.chips;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._dir;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.ngControl;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an input event on a `matChipInput`.\n * @record\n */\nfunction MatChipInputEvent() { }\nif (false) {\n    /**\n     * The native `<input>` element that the event is being fired for.\n     * @type {?}\n     */\n    MatChipInputEvent.prototype.input;\n    /**\n     * The value of the input.\n     * @type {?}\n     */\n    MatChipInputEvent.prototype.value;\n}\n// Increasing integer for generating unique ids.\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * Whether the control is focused.\n         */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /**\n         * Emitted when a chip is to be added.\n         */\n        this.chipEnd = new EventEmitter();\n        /**\n         * The input's placeholder text.\n         */\n        this.placeholder = '';\n        /**\n         * Unique id for the input.\n         */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Register input for chip list\n     * @param {?} value\n     * @return {?}\n     */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n    get empty() { return !this._inputElement.value; }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n    _keydown(event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._inputElement.focus(options);\n    }\n    /**\n     * Checks whether a keycode is one of the configured separators.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _isSeparatorKey(event) {\n        if (hasModifierKey(event)) {\n            return false;\n        }\n        /** @type {?} */\n        const separators = this.separatorKeyCodes;\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\nMatChipInput.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null',\n                }\n            },] }\n];\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatChipInput.ngAcceptInputType_addOnBlur;\n    /** @type {?} */\n    MatChipInput.ngAcceptInputType_disabled;\n    /**\n     * Whether the control is focused.\n     * @type {?}\n     */\n    MatChipInput.prototype.focused;\n    /** @type {?} */\n    MatChipInput.prototype._chipList;\n    /** @type {?} */\n    MatChipInput.prototype._addOnBlur;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     * @type {?}\n     */\n    MatChipInput.prototype.separatorKeyCodes;\n    /**\n     * Emitted when a chip is to be added.\n     * @type {?}\n     */\n    MatChipInput.prototype.chipEnd;\n    /**\n     * The input's placeholder text.\n     * @type {?}\n     */\n    MatChipInput.prototype.placeholder;\n    /**\n     * Unique id for the input.\n     * @type {?}\n     */\n    MatChipInput.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipInput.prototype._disabled;\n    /**\n     * The native input element to which this directive is attached.\n     * @type {?}\n     * @protected\n     */\n    MatChipInput.prototype._inputElement;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipInput.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipInput.prototype._defaultOptions;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chips-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst Éµ0 = ({\n    separatorKeyCodes: [ENTER]\n});\nclass MatChipsModule {\n}\nMatChipsModule.decorators = [\n    { type: NgModule, args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: (/** @type {?} */ (Éµ0))\n                    }\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule };\n//# sourceMappingURL=chips.js.map\n"]}