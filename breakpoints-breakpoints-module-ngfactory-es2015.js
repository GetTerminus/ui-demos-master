(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["breakpoints-breakpoints-module-ngfactory"],{

/***/ "./src/app/components/breakpoints/breakpoints-routing.module.ts":
/*!**********************************************************************!*\
  !*** ./src/app/components/breakpoints/breakpoints-routing.module.ts ***!
  \**********************************************************************/
/*! exports provided: BreakpointsRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreakpointsRoutingModule", function() { return BreakpointsRoutingModule; });
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _breakpoints_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./breakpoints.component */ "./src/app/components/breakpoints/breakpoints.component.ts");


const routes = [
    {
        path: '',
        component: _breakpoints_component__WEBPACK_IMPORTED_MODULE_1__["BreakpointsComponent"],
    },
];
class BreakpointsRoutingModule {
}


/***/ }),

/***/ "./src/app/components/breakpoints/breakpoints.component.ngfactory.js":
/*!***************************************************************************!*\
  !*** ./src/app/components/breakpoints/breakpoints.component.ngfactory.js ***!
  \***************************************************************************/
/*! exports provided: RenderType_BreakpointsComponent, View_BreakpointsComponent_0, View_BreakpointsComponent_Host_0, BreakpointsComponentNgFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderType_BreakpointsComponent", function() { return RenderType_BreakpointsComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "View_BreakpointsComponent_0", function() { return View_BreakpointsComponent_0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "View_BreakpointsComponent_Host_0", function() { return View_BreakpointsComponent_Host_0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreakpointsComponentNgFactory", function() { return BreakpointsComponentNgFactory; });
/* harmony import */ var _breakpoints_component_scss_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./breakpoints.component.scss.shim.ngstyle */ "./src/app/components/breakpoints/breakpoints.component.scss.shim.ngstyle.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _dist_libs_ui_card_terminus_ui_card_ngfactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../dist/libs/ui/card/terminus-ui-card.ngfactory */ "../../dist/libs/ui/card/terminus-ui-card.ngfactory.js");
/* harmony import */ var _terminus_ui_card__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @terminus/ui-card */ "../../dist/libs/ui/card/fesm2015/terminus-ui-card.js");
/* harmony import */ var _breakpoints_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./breakpoints.component */ "./src/app/components/breakpoints/breakpoints.component.ts");
/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes,extraRequire}
 * tslint:disable
 */ 





var styles_BreakpointsComponent = [_breakpoints_component_scss_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__["styles"]];
var RenderType_BreakpointsComponent = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵcrt"]({ encapsulation: 0, styles: styles_BreakpointsComponent, data: {} });

function View_BreakpointsComponent_0(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["Text color will change at each breakpoint: "])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](1, 0, null, null, 0, "hr", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](2, 0, null, null, 3, "ts-card", [["class", "ts-card"]], null, null, null, _dist_libs_ui_card_terminus_ui_card_ngfactory__WEBPACK_IMPORTED_MODULE_2__["View_TsCardComponent_0"], _dist_libs_ui_card_terminus_ui_card_ngfactory__WEBPACK_IMPORTED_MODULE_2__["RenderType_TsCardComponent"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](3, 49152, null, 0, _terminus_ui_card__WEBPACK_IMPORTED_MODULE_3__["TsCardComponent"], [], { centeredContent: [0, "centeredContent"] }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](4, 0, null, 0, 1, "div", [["class", "example"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" Breakpoints example "]))], function (_ck, _v) { var currVal_0 = true; _ck(_v, 3, 0, currVal_0); }, null); }
function View_BreakpointsComponent_Host_0(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "demo-breakpoints", [], null, null, null, View_BreakpointsComponent_0, RenderType_BreakpointsComponent)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 49152, null, 0, _breakpoints_component__WEBPACK_IMPORTED_MODULE_4__["BreakpointsComponent"], [], null, null)], null, null); }
var BreakpointsComponentNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵccf"]("demo-breakpoints", _breakpoints_component__WEBPACK_IMPORTED_MODULE_4__["BreakpointsComponent"], View_BreakpointsComponent_Host_0, {}, {}, []);



/***/ }),

/***/ "./src/app/components/breakpoints/breakpoints.component.scss.shim.ngstyle.js":
/*!***********************************************************************************!*\
  !*** ./src/app/components/breakpoints/breakpoints.component.scss.shim.ngstyle.js ***!
  \***********************************************************************************/
/*! exports provided: styles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "styles", function() { return styles; });
/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes,extraRequire}
 * tslint:disable
 */ 
var styles = ["[_ngcontent-%COMP%]:root {\n  --swift-ease-out-duration: var(--ts-animation-time-duration-400);\n  --swift-ease-out-timing-function: cubic-bezier(.25, .8, .25, 1);\n  --swift-ease-in-duration: var(--ts-animation-time-duration-300);\n  --swift-ease-in-timing-function: cubic-bezier(.55, 0, .55, .2);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.cdk-drag[_ngcontent-%COMP%] {\n  position: relative;\n}\n.cdk-drag[_ngcontent-%COMP%]:not(.cdk-drag-placeholder) {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.cdk-drag[_ngcontent-%COMP%]   .cdk-drag-handle[_ngcontent-%COMP%] {\n  color: #cecdd1;\n  cursor: ns-resize;\n  position: absolute;\n  right: 8px;\n}\n.cdk-drag.cdk-drag-preview[_ngcontent-%COMP%] {\n  \n  --shadow:\n      0 5px 5px -3px rgba(0, 0, 0, .2),\n      0 8px 10px 1px rgba(0, 0, 0, .14),\n      0 3px 14px 2px rgba(0, 0, 0, .12);\n  background-color: #fafafa;\n  box-shadow: var(--shadow);\n  min-height: 50px;\n  \n  padding: 0 !important;\n}\n.cdk-drag.cdk-drag-preview[_ngcontent-%COMP%]   .c-checkbox[_ngcontent-%COMP%] {\n  margin-left: 16px;\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  --drop-bg: #cce8d5;\n  --drop-border: #7fd09c;\n  background: var(--drop-bg);\n  border: 2px dotted var(--drop-border);\n  cursor: ns-resize;\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.u-visually-hidden[_ngcontent-%COMP%] {\n  border: 0;\n  -webkit-clip-path: rect(0, 0, 0, 0);\n          clip-path: rect(0, 0, 0, 0);\n  display: block;\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  pointer-events: none;\n  position: absolute;\n  visibility: hidden;\n  width: 1px;\n}\n\n\n.example[_ngcontent-%COMP%] {\n  font-family: Roboto, Helvetica Neue, Helvetica, Arial, sans-serif;\n  font-size: 16px;\n  letter-spacing: .01em;\n  font-weight: 500;\n  color: #e74c3c;\n  transition: color 200ms ease;\n  will-change: color;\n}\n@media (max-width: 599px) {\n  .example[_ngcontent-%COMP%] {\n    color: #27ae60;\n  }\n}\n@media (min-width: 600px) {\n  .example[_ngcontent-%COMP%] {\n    color: #2980b9;\n  }\n}\n@media (min-width: 600px) and (max-width: 959px) {\n  .example[_ngcontent-%COMP%] {\n    color: #7f8c8d;\n  }\n}\n@media (min-width: 960px) {\n  .example[_ngcontent-%COMP%] {\n    color: #9b59b6;\n  }\n}\n@media (min-width: 960px) and (max-width: 1279px) {\n  .example[_ngcontent-%COMP%] {\n    color: #f39c12;\n  }\n}\n@media (min-width: 1280px) {\n  .example[_ngcontent-%COMP%] {\n    color: #34495e;\n  }\n}\n@media (min-width: 1280px) and (max-width: 1919px) {\n  .example[_ngcontent-%COMP%] {\n    color: #3498db;\n  }\n}\n@media (min-width: 1920px) {\n  .example[_ngcontent-%COMP%] {\n    color: #7f8c8d;\n  }\n}\n@media (min-width: 1920px) {\n  .example[_ngcontent-%COMP%] {\n    color: #8e44ad;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3Rlcm1pbnVzLW9zcy90ZXJtaW51cy1vc3Mvbm9kZV9tb2R1bGVzL0B0ZXJtaW51cy91aS1zdHlsZXMvaGVscGVycy5zY3NzIiwiYXBwcy9zaG93Y2FzZS11aS9zcmMvYXBwL2NvbXBvbmVudHMvYnJlYWtwb2ludHMvYnJlYWtwb2ludHMuY29tcG9uZW50LnNjc3MiLCIvaG9tZS9ydW5uZXIvd29yay90ZXJtaW51cy1vc3MvdGVybWludXMtb3NzL2FwcHMvc2hvd2Nhc2UtdWkvc3JjL2FwcC9jb21wb25lbnRzL2JyZWFrcG9pbnRzL2JyZWFrcG9pbnRzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztFQ0VFO0FEdUJGOzs7Ozs7RUNoQkU7QUQ2QkY7O0VDMUJFO0FEK0JGOztFQzVCRTtBRGlDRjs7RUM5QkU7QURvQ0Y7RUFDRSxnRUFBMEI7RUFDMUIsK0RBQWlDO0VBQ2pDLCtEQUF5QjtFQUN6Qiw4REFBZ0M7QUNsQ2xDO0FENENBOztFQ3hDRTtBRHdERjs7Ozs7Ozs7Ozs7O0VDM0NFO0FEb0hGOztFQ2pIRTtBRDhJRjs7Ozs7Ozs7OztFQ25JRTtBRDBKRjs7Ozs7Ozs7RUNqSkU7QURnS0Y7Ozs7O0VDMUpFO0FEZ0xGOztFQzdLRTtBRGtMRjs7RUMvS0U7QURvTEY7O0VDakxFO0FEeUxGOztFQ3RMRTtBRDJMRjs7RUN4TEU7QUQ2TEY7O0VDMUxFO0FEd01GOztFQ3JNRTtBRCtNRjs7RUM1TUU7QURxTkY7Ozs7Ozs7Ozs7OztFQ3hNRTtBRHdWRjs7Ozs7OztFQ2hWRTtBRDhWRjs7OztFQ3pWRTtBRGlXRjs7Ozs7Ozs7RUN4VkU7QURzWEY7Ozs7Ozs7Ozs7O0VDMVdFO0FEd1lGOzs7Ozs7RUNqWUU7QUQ0WUY7Ozs7Ozs7Ozs7O0VDaFlFO0FEbVpGOzs7Ozs7O0VDM1lFO0FEK2NGOzs7OztFQ3pjRTtBRG1kRjs7Ozs7OztFQzNjRTtBRDBlRjs7Ozs7Ozs7Ozs7O0VDN2RFO0FEK2ZGOzs7Ozs7Ozs7Ozs7Ozs7O0VDOWVFO0FEb2dCRjs7Ozs7Ozs7Ozs7Ozs7RUNyZkU7QURraEJGOzs7Ozs7Ozs7RUN4Z0JFO0FEbWlCRjs7Ozs7Ozs7Ozs7OztFQ3JoQkU7QUQwaUJGOzs7Ozs7Ozs7Ozs7Ozs7OztFQ3hoQkU7QURva0JGOzs7Ozs7Ozs7RUMxakJFO0FEK2tCRjs7RUM1a0JFO0FEeW1CRjs7Ozs7Ozs7OztFQzlsQkU7QURxbkJGOzs7Ozs7OztFQzVtQkU7QURpcEJGOztFQzlvQkU7QURtcEJGOztFQ2hwQkU7QUR3cEJGOztFQ3JwQkU7QUQwcEJGOztFQ3ZwQkU7QUQ0cEJGOztFQ3pwQkU7QUQ4cEJGOztFQzNwQkU7QURncUJGOztFQzdwQkU7QURtcUJGOztFQ2hxQkU7QURxcUJGOztFQ2xxQkU7QUR1cUJGOztFQ3BxQkU7QUR5cUJGOztFQ3RxQkU7QUQycUJGOztFQ3hxQkU7QUQ4cUJGOztFQzNxQkU7QURnckJGOztFQzdxQkU7QURrckJGOztFQy9xQkU7QURvckJGOztFQ2pyQkU7QURzckJGOztFQ25yQkU7QUQyckJGOztFQ3hyQkU7QUQ2ckJGOztFQzFyQkU7QUQrckJGOztFQzVyQkU7QURrc0JGOztFQy9yQkU7QURvc0JGOztFQ2pzQkU7QURzc0JGOztFQ25zQkU7QUR5c0JGOztFQ3RzQkU7QUQyc0JGOztFQ3hzQkU7QUQ2c0JGOztFQzFzQkU7QURndEJGOzs7O0VDM3NCRTtBRDR2QkY7Ozs7Ozs7Ozs7RUNqdkJFO0FEOHdCRjs7RUMzd0JFO0FEeXhCRjs7Ozs7Ozs7RUNoeEJFO0FEcXpCRjs7RUNsekJFO0FEczFCRjs7RUNuMUJFO0FEdTNCRjs7RUNwM0JFO0FEMDVCRjs7RUN2NUJFO0FEbzdCRjs7Ozs7Ozs7OztFQ3o2QkU7QURnOEJGOzs7Ozs7OztFQ3Y3QkU7QURvOEJGOztFQ2o4QkU7QURzOEJGOztFQ244QkU7QUQyOEJGOztFQ3g4QkU7QUQ2OEJGOztFQzE4QkU7QUQrOEJGOztFQzU4QkU7QURpOUJGOztFQzk4QkU7QURtOUJGOztFQ2g5QkU7QURzOUJGOztFQ245QkU7QUR3OUJGOztFQ3I5QkU7QUQwOUJGOztFQ3Y5QkU7QUQ0OUJGOztFQ3o5QkU7QUQ4OUJGOztFQzM5QkU7QURpK0JGOztFQzk5QkU7QURtK0JGOztFQ2grQkU7QURxK0JGOztFQ2wrQkU7QUR1K0JGOztFQ3ArQkU7QUR5K0JGOztFQ3QrQkU7QUQ4K0JGOztFQzMrQkU7QURnL0JGOztFQzcrQkU7QURrL0JGOztFQy8rQkU7QURxL0JGOztFQ2wvQkU7QUR1L0JGOztFQ3AvQkU7QUR5L0JGOztFQ3QvQkU7QUQ0L0JGOztFQ3ovQkU7QUQ4L0JGOztFQzMvQkU7QURnZ0NGOztFQzcvQkU7QURtZ0NGOzs7O0VDOS9CRTtBRCtpQ0Y7Ozs7Ozs7Ozs7RUNwaUNFO0FEaWtDRjs7RUM5akNFO0FENGtDRjs7Ozs7Ozs7RUNua0NFO0FEd21DRjs7RUNybUNFO0FEeW9DRjs7RUN0b0NFO0FEMHFDRjs7RUN2cUNFO0FENnNDRjs7RUMxc0NFO0FEdXVDRjs7Ozs7Ozs7OztFQzV0Q0U7QURtdkNGOzs7Ozs7OztFQzF1Q0U7QUR1dkNGOzs7O0VDbHZDRTtBRDB2Q0Y7Ozs7Ozs7O0VDanZDRTtBRCt3Q0Y7Ozs7Ozs7Ozs7O0VDbndDRTtBRGt5Q0Y7RUFFRSxrQkFBa0I7QUNqeUNwQjtBRCt4Q0E7RUFNSSxzREFBcUQ7QUNqeUN6RDtBRDJ4Q0E7RUFVSSxjQTE2QjJCO0VBMjZCM0IsaUJBNUhPO0VBNkhQLGtCQUFrQjtFQUNsQixVQTlEd0I7QUNudUM1QjtBRG94Q0E7RUFrQkksNkVBQUE7RUFDQTs7O3VDQUFTO0VBSVQseUJBOThCd0I7RUErOEJ4Qix5QkFBeUI7RUFDekIsZ0JBQWdCO0VBRWhCLHlEQUFBO0VBQ0EscUJBQXFCO0FDbnlDekI7QUR1d0NBO0VBK0JNLGlCQXY4Q1U7QUNxS2hCO0FEd3lDQTtFQUdFLGtCQUFVO0VBQ1Ysc0JBQWM7RUFDZCwwQkFBMEI7RUFDMUIscUNBQXFDO0VBRXJDLGlCQTlKUztFQStKVCxzREFBcUQ7QUN4eUN2RDtBRDJ5Q0E7Ozs7Ozs7RUNseUNFO0FEOHpDRjs7Ozs7OztFQ3R6Q0U7QURpMUNGOzs7OztFQzMwQ0U7QUR1MUNGOzs7Ozs7OztFQzkwQ0U7QURnM0NGOzs7Ozs7Ozs7RUN0MkNFO0FEMDNDRjs7Ozs7Ozs7Ozs7Ozs7RUMzMkNFO0FEbTVDRjs7Ozs7Ozs7RUMxNENFO0FEMjVDRjs7Ozs7RUNyNUNFO0FEZzdDRjs7RUM3NkNFO0FEazdDRjs7RUMvNkNFO0FEbzdDRjs7RUNqN0NFO0FEeTdDRjs7RUN0N0NFO0FEMjdDRjs7RUN4N0NFO0FENjdDRjs7RUMxN0NFO0FEdzhDRjs7RUNyOENFO0FEKzhDRjs7RUM1OENFO0FEcTlDRjs7Ozs7Ozs7Ozs7O0VDeDhDRTtBRHdsREY7Ozs7Ozs7RUNobERFO0FEOGxERjs7OztFQ3psREU7QURpbURGOzs7Ozs7OztFQ3hsREU7QURzbkRGOzs7Ozs7Ozs7OztFQzFtREU7QUR3b0RGOzs7OztFQ2xvREU7QURxcERGOzs7Ozs7OztFQzVvREU7QUR5cURGOztFQ3RxREU7QUQycURGOztFQ3hxREU7QURnckRGOztFQzdxREU7QURrckRGOztFQy9xREU7QURvckRGOztFQ2pyREU7QURzckRGOztFQ25yREU7QUR3ckRGOztFQ3JyREU7QUQyckRGOztFQ3hyREU7QUQ2ckRGOztFQzFyREU7QUQrckRGOztFQzVyREU7QURpc0RGOztFQzlyREU7QURtc0RGOztFQ2hzREU7QURzc0RGOztFQ25zREU7QUR3c0RGOztFQ3JzREU7QUQwc0RGOztFQ3ZzREU7QUQ0c0RGOztFQ3pzREU7QUQ4c0RGOztFQzNzREU7QURtdERGOztFQ2h0REU7QURxdERGOztFQ2x0REU7QUR1dERGOztFQ3B0REU7QUQwdERGOztFQ3Z0REU7QUQ0dERGOztFQ3p0REU7QUQ4dERGOztFQzN0REU7QURpdURGOztFQzl0REU7QURtdURGOztFQ2h1REU7QURxdURGOztFQ2x1REU7QUR3dURGOzs7O0VDbnVERTtBRG94REY7Ozs7Ozs7Ozs7RUN6d0RFO0FEc3lERjs7RUNueURFO0FEaXpERjs7Ozs7Ozs7RUN4eURFO0FENjBERjs7RUMxMERFO0FEODJERjs7RUMzMkRFO0FEKzRERjs7RUM1NERFO0FEczdERjs7OztFQ2o3REU7QURzL0RGOzs7Ozs7RUMvK0RFO0FEMC9ERjs7Ozs7Ozs7Ozs7RUM5K0RFO0FEaWdFRjs7Ozs7OztFQ3ovREU7QUQ2akVGOzs7OztFQ3ZqRUU7QURpa0VGOzs7Ozs7O0VDempFRTtBRHdsRUY7Ozs7Ozs7Ozs7OztFQzNrRUU7QUQ2bUVGOzs7Ozs7Ozs7Ozs7Ozs7O0VDNWxFRTtBRGtuRUY7Ozs7Ozs7Ozs7Ozs7O0VDbm1FRTtBRGdvRUY7Ozs7Ozs7OztFQ3RuRUU7QURpcEVGOzs7Ozs7Ozs7Ozs7O0VDbm9FRTtBRHdwRUY7Ozs7Ozs7Ozs7Ozs7Ozs7O0VDdG9FRTtBRGtyRUY7Ozs7Ozs7OztFQ3hxRUU7QUQ2ckVGOzs7O0VDeHJFRTtBRGdzRUY7Ozs7Ozs7O0VDdnJFRTtBRHF0RUY7Ozs7Ozs7Ozs7O0VDenNFRTtBRHF1RUY7Ozs7O0VDL3RFRTtBRDJ1RUY7Ozs7Ozs7O0VDbHVFRTtBRG93RUY7Ozs7Ozs7OztFQzF2RUU7QUQ4d0VGOzs7Ozs7Ozs7Ozs7OztFQy92RUU7QUR1eUVGOzs7Ozs7OztFQzl4RUU7QUQreUVGOzs7OztFQ3p5RUU7QURnMEVGOzs7Ozs7RUN6ekVFO0FEMDBFRjs7Ozs7Ozs7RUNqMEVFO0FEcTFFRjs7Ozs7Ozs7Ozs7Ozs7RUN0MEVFO0FEdzNFRjs7RUNyM0VFO0FEMDNFRjs7RUN2M0VFO0FENDNFRjs7RUN6M0VFO0FEaTRFRjs7RUM5M0VFO0FEbTRFRjs7RUNoNEVFO0FEcTRFRjs7RUNsNEVFO0FEZzVFRjs7RUM3NEVFO0FEdTVFRjs7RUNwNUVFO0FENjVFRjs7Ozs7Ozs7Ozs7O0VDaDVFRTtBRGdpRkY7Ozs7Ozs7RUN4aEZFO0FEc2lGRjs7Ozs7RUNoaUZFO0FENGlGRjs7Ozs7Ozs7RUNuaUZFO0FEcWtGRjs7Ozs7Ozs7O0VDM2pGRTtBRCtrRkY7Ozs7Ozs7Ozs7Ozs7O0VDaGtGRTtBRHdtRkY7Ozs7Ozs7O0VDL2xGRTtBRGduRkY7Ozs7O0VDMW1GRTtBRG1vRkY7O0VDaG9GRTtBRG1vRkY7RUFwQkUsU0FBUztFQUVULG1DQUEyQjtVQUEzQiwyQkFBMkI7RUFFM0IsY0FBYztFQUNkLFdBTnlCO0VBT3pCLFlBUHlCO0VBUXpCLGdCQUFnQjtFQUNoQixVQUFVO0VBQ1Ysb0JBQW9CO0VBQ3BCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsVUFieUI7QUNqbUYzQjtBRDBuRkE7Ozs7OztFQ2xuRkU7QURtb0ZGOzs7Ozs7OztFQzFuRkU7QUMzd0NGO0VGbWxISSxpRUF4MkcwRTtFQTA2RzFFLGVBQWU7RUFDZixxQkFBcUI7RUF3Qm5CLGdCQUFnQjtFRXhvSHBCLGNBbERjO0VBbURkLDRCQUE0QjtFQUM1QixrQkFBa0I7QUQ0dUNwQjtBRDlyQ007RUV0Rk47SUFHSSxjQWRZO0VEb3lDZDtBQUNGO0FEOXJDTTtFRTVGTjtJQU9JLGNBakJZO0VEeXlDZDtBQUNGO0FEOXJDTTtFRWxHTjtJQVdJLGNBcEJZO0VEOHlDZDtBQUNGO0FEOXJDTTtFRXhHTjtJQWVJLGNBdkJZO0VEbXpDZDtBQUNGO0FEOXJDTTtFRTlHTjtJQW1CSSxjQTFCWTtFRHd6Q2Q7QUFDRjtBRDlyQ007RUVwSE47SUF1QkksY0E3Qlk7RUQ2ekNkO0FBQ0Y7QUQ5ckNNO0VFMUhOO0lBMkJJLGNBaENZO0VEazBDZDtBQUNGO0FEOXJDTTtFRWhJTjtJQStCSSxjQW5DWTtFRHUwQ2Q7QUFDRjtBRDlyQ007RUV0SU47SUFtQ0ksY0F0Q2E7RUQ0MENmO0FBQ0YiLCJmaWxlIjoiYXBwcy9zaG93Y2FzZS11aS9zcmMvYXBwL2NvbXBvbmVudHMvYnJlYWtwb2ludHMvYnJlYWtwb2ludHMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgbWl4aW4gdGhhdCBlbmFibGVzIGhpZGRlbiBzdHlsZXMgZm9yIGEgbmVzdGVkIGNkayBjbGFzc1xuICovXG5AbWl4aW4gY2RrLWExMXkge1xuICAuY2RrLXZpc3VhbGx5LWhpZGRlbiB7XG4gICAgJHNtYWxsZXN0LWFkanVzdG1lbnQ6IDFweDtcblxuICAgIC8vIEF2b2lkIHNvbWUgY2FzZXMgd2hlcmUgdGhlIGJyb3dzZXIgd2lsbCBzdGlsbCByZW5kZXIgdGhlIG5hdGl2ZSBjb250cm9scyAoc2VlICM5MDQ5KS5cbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xuXG4gICAgYm9yZGVyOiAwO1xuICAgIGNsaXA6IHJlY3QoMCAwIDAgMCk7XG4gICAgaGVpZ2h0OiAkc21hbGxlc3QtYWRqdXN0bWVudDtcbiAgICBtYXJnaW46IC0kc21hbGxlc3QtYWRqdXN0bWVudDtcblxuICAgIC8vIEF2b2lkIGJyb3dzZXJzIHJlbmRlcmluZyB0aGUgZm9jdXMgcmluZyBpbiBzb21lIGNhc2VzLlxuICAgIG91dGxpbmU6IDA7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwYWRkaW5nOiAwO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogJHNtYWxsZXN0LWFkanVzdG1lbnQ7XG4gIH1cbn1cblxuLyoqXG4gKiBBcHBsaWVzIHN0eWxlcyBmb3IgdXNlcnMgaW4gaGlnaCBjb250cmFzdCBtb2RlLiBOb3RlIHRoYXQgdGhpcyBvbmx5IGFwcGxpZXNcbiAqIHRvIE1pY3Jvc29mdCBicm93c2Vycy4gQ2hyb21lIGNhbiBiZSBpbmNsdWRlZCBieSBjaGVja2luZyBmb3IgdGhlIGBodG1sW2hjXWBcbiAqIGF0dHJpYnV0ZSwgaG93ZXZlciBDaHJvbWUgaGFuZGxlcyBoaWdoIGNvbnRyYXN0IGRpZmZlcmVudGx5LlxuICogQHBhcmFtIHRhcmdldCBXaGljaCBraW5kIG9mIGhpZ2ggY29udHJhc3Qgc2V0dGluZyB0byB0YXJnZXQuIERlZmF1bHRzIHRvIGBhY3RpdmVgLCBjYW4gYmVcbiAqICAgIGB3aGl0ZS1vbi1ibGFja2Agb3IgYGJsYWNrLW9uLXdoaXRlYC5cbiAqL1xuQG1peGluIGNkay1oaWdoLWNvbnRyYXN0KCR0YXJnZXQ6IGFjdGl2ZSkge1xuICBAbWVkaWEgc2NyZWVuIGFuZCAoLW1zLWhpZ2gtY29udHJhc3Q6ICR0YXJnZXQpIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBwcmltYXJ5IGVhc2luZyBkZWZpbml0aW9uXG4gKi9cbiRnLWVhc2luZzogY3ViaWMtYmV6aWVyKC4yNiwgLjg2LCAuNDQsIC45ODUpICFkZWZhdWx0O1xuXG4vKipcbiAqIFRoZSBtYXRlcmlhbCBiYWNrZ3JvdW5kIGVhc2luZyBkZWZpbml0aW9uXG4gKi9cbiRnLW1hdGVyaWFsLWJhY2tncm91bmQtZWFzaW5nOiBjdWJpYy1iZXppZXIoLjI1LCAuOCwgLjI1LCAxKSAhZGVmYXVsdDtcblxuLyoqXG4gKiBUaGUgbWF0ZXJpYWwgc2hhZG93IGVhc2luZyBkZWZpbml0aW9uXG4gKi9cbiRnLW1hdGVyaWFsLXNoYWRvdy1lYXNpbmc6IGN1YmljLWJlemllciguNCwgMCwgLjIsIDEpICFkZWZhdWx0O1xuXG4vLyBBbmltYXRpb25zIGZyb20gTWF0ZXJpYWxcbjpyb290IHtcbiAgLS1zd2lmdC1lYXNlLW91dC1kdXJhdGlvbjogdmFyKC0tdHMtYW5pbWF0aW9uLXRpbWUtZHVyYXRpb24tNDAwKTtcbiAgLS1zd2lmdC1lYXNlLW91dC10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllciguMjUsIC44LCAuMjUsIDEpO1xuICAtLXN3aWZ0LWVhc2UtaW4tZHVyYXRpb246IHZhcigtLXRzLWFuaW1hdGlvbi10aW1lLWR1cmF0aW9uLTMwMCk7XG4gIC0tc3dpZnQtZWFzZS1pbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllciguNTUsIDAsIC41NSwgLjIpO1xufVxuXG4vLyBDdXJyZW50bHkgdXNlZCBpbiBleHBhbnNpb24gcGFuZWwgY29tcG9uZW50XG4kZy1hbmltYXRpb24tZmFzdC1vdXQtc2xvdy1pbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllciguNCwgMCwgLjIsIDEpICFkZWZhdWx0O1xuJGctZWxldmF0aW9uLXRyYW5zaXRpb24tZHVyYXRpb246IDI4MG1zICFkZWZhdWx0O1xuXG4kZy10YWItYW5pbWF0aW9uLWR1cmF0aW9uOiAyMDBtcyAhZGVmYXVsdDtcbiRnLXRhYi1lYXNlLWluLW91dC1jdXJ2ZS1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKC4zNSwgMCwgLjI1LCAxKSAhZGVmYXVsdDtcblxuLyoqXG4gKiBUaGUgbGlzdCBvZiBwb3NzaWJsZSBicmVha3BvaW50c1xuICovXG4kYnJlYWtwb2ludHM6IChcbiAgJ2xheW91dC14cycsXG4gICdsYXlvdXQtZ3QteHMnLFxuICAnbGF5b3V0LXNtJyxcbiAgJ2xheW91dC1ndC1zbScsXG4gICdsYXlvdXQtbWF0JyxcbiAgJ2xheW91dC1ndC1tYXQnLFxuICAnbGF5b3V0LWxnJyxcbiAgJ2xheW91dC1ndC1sZycsXG4gICdsYXlvdXQteGwnXG4pO1xuXG5cbi8qKlxuICogV3JhcCBzdHlsZXMgaW4gYSBtZWRpYSBxdWVyeVxuICpcbiAqIEBwYXJhbSAkcG9pbnRcbiAqICBUaGUgZGVzaXJlZCBicmVha3BvaW50XG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIGJwKGxheW91dC1ndC14cykge1xuICogICAgd2lkdGg6IDMwJTtcbiAqICB9XG4gKiAgQGluY2x1ZGUgYnAobGF5b3V0LXhzKSB7XG4gKiAgICB3aWR0aDogMTAwJTtcbiAqICB9XG4gKi9cbkBtaXhpbiBicCgkcG9pbnQpIHtcbiAgQGlmIGluZGV4KCRicmVha3BvaW50cywgJHBvaW50KSB7XG4gICAgQGlmICRwb2ludCA9PSAnbGF5b3V0LXhzJyB7XG4gICAgICBAbWVkaWEgKG1heC13aWR0aDogNTk5cHgpIHtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGlmICRwb2ludCA9PSAnbGF5b3V0LWd0LXhzJyB7XG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogNjAwcHgpIHtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGlmICRwb2ludCA9PSAnbGF5b3V0LXNtJyB7XG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogNjAwcHgpIGFuZCAobWF4LXdpZHRoOiA5NTlweCkge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaWYgJHBvaW50ID09ICdsYXlvdXQtZ3Qtc20nIHtcbiAgICAgIEBtZWRpYSAobWluLXdpZHRoOiA5NjBweCkge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaWYgJHBvaW50ID09ICdsYXlvdXQtbWF0JyB7XG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogOTYwcHgpIGFuZCAobWF4LXdpZHRoOiAxMjc5cHgpIHtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGlmICRwb2ludCA9PSAnbGF5b3V0LWd0LW1hdCcge1xuICAgICAgQG1lZGlhIChtaW4td2lkdGg6IDEyODBweCkge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaWYgJHBvaW50ID09ICdsYXlvdXQtbGcnIHtcbiAgICAgIEBtZWRpYSAobWluLXdpZHRoOiAxMjgwcHgpIGFuZCAobWF4LXdpZHRoOiAxOTE5cHgpIHtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGlmICRwb2ludCA9PSAnbGF5b3V0LWd0LWxnJyB7XG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogMTkyMHB4KSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIEBpZiAkcG9pbnQgPT0gJ2xheW91dC14bCcge1xuICAgICAgQG1lZGlhIChtaW4td2lkdGg6IDE5MjBweCkge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBlcnJvciAnVGhlcmUgaXMgbm8gYnJlYWtwb2ludCBgI3skcG9pbnR9YCBpbiB0aGlzIGxpc3Q7IGNob29zZSBvbmUgb2Y6ICN7JGJyZWFrcG9pbnRzfSc7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgbWFwIG9mIGF2YWlsYWJsZSBjdXJzb3JzXG4gKi9cbiRnLWN1cnNvcnM6IChcbiAgLyogSW5kaWNhdGVzIGFuIGFsaWFzIG9yIGNvcHkgd2lsbCBiZSBtYWRlICovXG4gIGFsaWFzLFxuICAvKiBMZXQgdGhlIGJyb3dzZXIgZGVjaWRlICovXG4gIGF1dG8sXG4gIC8qIEluZGljYXRlcyBhYmlsaXR5IHRvIHJlc2l6ZSBhIHBpZWNlIG9mIHRoZSBkb207IG9mdGVuIGEgdGFibGUgY29sdW1uICovXG4gIGNvbC1yZXNpemUsXG4gIC8qIEluZGljYXRlcyBhYmlsaXR5IHRvIGNvcHkgKi9cbiAgY29weSxcbiAgLyogUmVzZXQgdG8gdGhlIGRlZmF1bHQgY3Vyc29yICovXG4gIGRlZmF1bHQsXG4gIC8qIEluZGljYXRlcyBoZWxwIGlzIGF2YWlsYWJsZSAqL1xuICBoZWxwLFxuICAvKiBJbmRpY2F0ZXMgdGhlIGFiaWxpdHkgdG8gZHJhZyBhbiBpdGVtICovXG4gIG1vdmUsXG4gIC8qIEluZGljYXRlcyBubyBhdmFpbGFibGUgaW50ZXJhY3Rpb24gKi9cbiAgbm90LWFsbG93ZWQsXG4gIC8qIEluZGljYXRlcyB0aGUgYWJpbGl0eSB0byBtb3ZlIE5vcnRoIGFuZCBTb3V0aCAqL1xuICBucy1yZXNpemUsXG4gIC8qIEluZGljYXRlcyBpbnRlcmFjdGlvbiAqL1xuICBwb2ludGVyLFxuICAvKiBJbmRpY2F0ZXMgdGV4dCBjb250cm9scyAqL1xuICB0ZXh0LFxuKTtcblxuXG4vKipcbiAqIFJldHJpZXZlIGEgc3BhY2UgZnJvbSB0aGUgJGctY3Vyc29ycyBsaXN0LlxuICpcbiAqIFRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhpcyBmdW5jdGlvbiBpcyB0byBlbmZvcmNlIHdoaWNoIGN1cnNvcnMgY2FuIGJlIHVzZWQuXG4gKlxuICogQHBhcmFtICR0eXBlXG4gKiAgVGhlIGN1cnNvciB2YWx1ZSB0byB1c2UuIERlZmF1bHQ6IGF1dG9cbiAqIEBleGFtcGxlXG4gKiAgY3Vyc29yOiBjdXJzb3IoKTtcbiAqICBjdXJzb3I6IGN1cnNvcihwb2ludGVyKTtcbiAqL1xuQGZ1bmN0aW9uIGN1cnNvcigkdHlwZTogYXV0bykge1xuICAkaW5kZXg6IGluZGV4KCRnLWN1cnNvcnMsICR0eXBlKTtcblxuICAvLyBWZXJpZnkgdGhlIHR5cGUgZXhpc3RzXG4gIEBpZiAoJGluZGV4ID09IG51bGwpIHtcbiAgICBAZXJyb3IgJ0ludmFsaWQgY3Vyc29yIHR5cGUgbmFtZTogYCN7JHR5cGV9YC4gQWxsb3dlZCB0eXBlczogXCIjeyRnLWN1cnNvcnN9XCInO1xuICB9XG5cbiAgQHJldHVybiBudGgoJGctY3Vyc29ycywgJGluZGV4KTtcbn1cblxuXG4vKipcbiAqIEluY2x1ZGUgYSBjdXN0b20gY3Vyc29yXG4gKlxuICogQHBhcmFtICR0eXBlXG4gKiAgVGhlIGN1cnNvciB2YWx1ZSB0byB1c2UuXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIGN1cnNvcjtcbiAqICBAaW5jbHVkZSBjdXJzb3IocG9pbnRlcik7XG4gKi9cbkBtaXhpbiBjdXJzb3IoJHR5cGUpIHtcbiAgY3Vyc29yOiBjdXJzb3IoJHR5cGUpO1xufVxuXG5cblxuLyoqXG4gKiBSZXNldCBidXR0b24gc3R5bGVzXG4gKlxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSBidXR0b24tYmFzZTtcbiAqL1xuQG1peGluIGJ1dHRvbi1iYXNlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGJvcmRlcjogMDtcbiAgY3Vyc29yOiBjdXJzb3IocG9pbnRlcik7XG4gIG91dGxpbmU6IDA7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAmOmZvY3VzIHtcbiAgICBvdXRsaW5lOiAwO1xuICB9XG59XG5cbi8vIE5PVEU6IERpc2FibGluZyB0aGUgc3RyaWN0IHZhbHVlIHJ1bGUgYXMgd2UgbmVlZCB0byBidWlsZCBvdXIgdHlwZSBzdHlsZXNcbi8vIHN0eWxlbGludC1kaXNhYmxlIHNjYWxlLXVubGltaXRlZC9kZWNsYXJhdGlvbi1zdHJpY3QtdmFsdWVcblxuXG4vKipcbiAqIFRoZSBiYXNlIHR5cGVmYWNlXG4gKi9cbiR0eXBlX19mYW1pbHktLWJhc2U6ICN7Um9ib3RvLCAnSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmfSAhZGVmYXVsdDtcblxuLyoqXG4gKiBUaGUgbW9ub3NwYWNlZCB0eXBlZmFjZSBmYW1pbHlcbiAqL1xuJHR5cGVfX2ZhbWlseS0tbW9ub3NwYWNlZDogI3snTHVjaWRhIENvbnNvbGUnLCBNb25hY28sICdEZWphVnUgU2FucyBNb25vJywgbW9ub3NwYWNlfSAhZGVmYXVsdDtcblxuLyoqXG4gKiBUaGUgYXZhaWxhYmxlIHR5cGVmYWNlc1xuICovXG4kdHlwb2dyYXBoeS10eXBlZmFjZXM6IChcbiAgJ3ByaW1hcnknOiAkdHlwZV9fZmFtaWx5LS1iYXNlLFxuICAnbW9ub3NwYWNlZCc6ICR0eXBlX19mYW1pbHktLW1vbm9zcGFjZWRcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgdHlwb2dyYXBoeSBzaXplXG4gKi9cbiR0eXBlX19zaXplLS1iYXNlOiAxNnB4ICFkZWZhdWx0O1xuXG4vKipcbiAqIFRoZSBiYXNlIHR5cG9ncmFwaHkgd2VpZ2h0XG4gKi9cbiR0eXBlX193ZWlnaHQtLWJhc2U6IDQwMCAhZGVmYXVsdDtcblxuLyoqXG4gKiBUaGUgYXZhaWxhYmxlIHR5cG9ncmFwaHkgZm9ybWF0c1xuICovXG4kdHlwb2dyYXBoeS1mb3JtYXRzOiAoXG4gICdkaXNwbGF5JyxcbiAgJ2hlYWRsaW5lJyxcbiAgJ3RpdGxlJyxcbiAgJ3N1YmhlYWQnLFxuICAnYm9keScsXG4gICdjYXB0aW9uJyxcbiAgJ2ZpeGVkd2lkdGgnLFxuICAnaGludCdcbik7XG5cbi8qKlxuICogVGhlIGF2YWlsYWJsZSB0eXBvZ3JhcGh5IGxldmVscyBmb3IgdGhlIGBkaXNwbGF5YCBmb3JtYXRcbiAqL1xuJHR5cG9ncmFwaHktZGlzcGxheS1sZXZlbHM6IChcbiAgMSxcbiAgMixcbiAgMyxcbiAgNFxuKTtcblxuLyoqXG4gKiBUaGUgYXZhaWxhYmxlIHR5cG9ncmFwaHkgbGV2ZWxzIGZvciB0aGUgYGJvZHlgIGZvcm1hdFxuICovXG4kdHlwb2dyYXBoeS1ib2R5LWxldmVsczogKFxuICAxLFxuICAyXG4pO1xuXG5cbi8qKlxuICogUmV0dXJuIHR5cG9ncmFwaHkgc3R5bGVzIGJhc2VkIG9uIHRoZSBmb3JtYXQgYW5kIGxldmVsXG4gKlxuICogQHBhcmFtICRmb3JtYXRcbiAqICBPbmUgb2YgdGhlIGF2YWlsYWJsZSBmb3JtYXRzIGRlZmluZWQgd2l0aGluICR0eXBvZ3JhcGh5LWZvcm1hdHMuIERlZmF1bHQ6ICdib2R5Jy5cbiAqIEBwYXJhbSAkbGV2ZWxcbiAqICBPbmUgb2YgdGhlIGFjY2VwdGVkIGxldmVscyBmb3IgdGhlIHBhc3NlZCBpbiBmb3JtYXQuIERlZmF1bHQ6IDFcbiAqIEBwYXJhbSAkdHlwZWZhY2VcbiAqICBPbmUgb2YgdGhlIGF2YWlsYWJsZSB0eXBlZmFjZXMgZGVmaW5lZCBpbiAkdHlwb2dyYXBoeS10eXBlZmFjZXMuIERlZmF1bHQ6ICdwcmltYXJ5J1xuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSB0eXBvZ3JhcGh5O1xuICogIEBpbmNsdWRlIHR5cG9ncmFwaHkoZGlzcGxheSwgNCk7XG4gKi9cbkBtaXhpbiB0eXBvZ3JhcGh5KCRmb3JtYXQ6ICdib2R5JywgJGxldmVsOiAxLCAkdHlwZWZhY2U6ICdwcmltYXJ5Jykge1xuICAvLyBWZXJpZnkgdGhlIGZvcm1hdCBpcyB2YWxpZFxuICBAaWYgaW5kZXgoJHR5cG9ncmFwaHktZm9ybWF0cywgJGZvcm1hdCkgPT0gbnVsbCB7XG4gICAgQGVycm9yICdJbnZhbGlkIHR5cG9ncmFwaHkgZm9ybWF0OiBgI3skZm9ybWF0fWAuIEFsbG93ZWQgZm9ybWF0czogI3skdHlwb2dyYXBoeS1mb3JtYXRzfSc7XG4gIH1cblxuICAvLyBWZXJpZnkgdGhlIHR5cGVmYWNlIGlzIHZhbGlkXG4gIEBpZiBub3QobWFwLWhhcy1rZXkoJHR5cG9ncmFwaHktdHlwZWZhY2VzLCAkdHlwZWZhY2UpKSB7XG4gICAgJGFsbG93ZWQ6IG1hcC1rZXlzKCR0eXBvZ3JhcGh5LXR5cGVmYWNlcyk7XG4gICAgQGVycm9yICdJbnZhbGlkIHR5cG9ncmFwaHkgdHlwZWZhY2U6IGAjeyR0eXBlZmFjZX1gLiBBbGxvd2VkIHR5cGVmYWNlczogI3skYWxsb3dlZH0nO1xuICB9IEBlbHNlIHtcbiAgICBmb250LWZhbWlseTogbWFwLWdldCgkdHlwb2dyYXBoeS10eXBlZmFjZXMsICR0eXBlZmFjZSk7XG4gIH1cblxuXG4gIC8vIERJU1BMQVlcbiAgQGlmICRmb3JtYXQgPT0gJ2Rpc3BsYXknIHtcbiAgICAvLyBWZXJpZnkgdGhlIGxldmVsIGlzIHZhbGlkIGZvciB0aGlzIGZvcm1hdFxuICAgIEBpZiBpbmRleCgkdHlwb2dyYXBoeS1kaXNwbGF5LWxldmVscywgJGxldmVsKSA9PSBudWxsIHtcbiAgICAgIEBlcnJvciAnSW52YWxpZCBkaXNwbGF5IGZvcm1hdCBsZXZlbDogYCN7JGxldmVsfWAuIEFsbG93ZWQgbGV2ZWxzOiAjeyR0eXBvZ3JhcGh5LWRpc3BsYXktbGV2ZWxzfSc7XG4gICAgfVxuXG4gICAgQGlmICRsZXZlbCA9PSAxIHtcbiAgICAgIGZvbnQtc2l6ZTogMzRweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICBsaW5lLWhlaWdodDogNDBweDtcbiAgICB9XG5cbiAgICBAaWYgJGxldmVsID09IDIge1xuICAgICAgZm9udC1zaXplOiA0NXB4O1xuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgIGxpbmUtaGVpZ2h0OiA2NHB4O1xuICAgIH1cblxuICAgIEBpZiAkbGV2ZWwgPT0gMyB7XG4gICAgICBmb250LXNpemU6IDU2cHg7XG4gICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgbGV0dGVyLXNwYWNpbmc6IC0uMDA1ZW07XG4gICAgICBsaW5lLWhlaWdodDogNTZweDtcbiAgICB9XG5cbiAgICBAaWYgJGxldmVsID09IDQge1xuICAgICAgZm9udC1zaXplOiAxMTJweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICBsZXR0ZXItc3BhY2luZzogLS4wMWVtO1xuICAgICAgbGluZS1oZWlnaHQ6IDExMnB4O1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gSEVBRExJTkVcbiAgQGlmICRmb3JtYXQgPT0gJ2hlYWRsaW5lJyB7XG4gICAgZm9udC1zaXplOiAyNHB4O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgbGluZS1oZWlnaHQ6IDMycHg7XG4gIH1cblxuXG4gIC8vIFRJVExFXG4gIEBpZiAkZm9ybWF0ID09ICd0aXRsZScge1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGxldHRlci1zcGFjaW5nOiAuMDA1ZW07XG4gIH1cblxuXG4gIC8vIFNVQkhFQURcbiAgQGlmICRmb3JtYXQgPT0gJ3N1YmhlYWQnIHtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBsZXR0ZXItc3BhY2luZzogLjAxZW07XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIH1cblxuXG4gIC8vIEJPRFlcbiAgQGlmICRmb3JtYXQgPT0gJ2JvZHknIHtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgbGV0dGVyLXNwYWNpbmc6IC4wMWVtO1xuXG4gICAgLy8gVmVyaWZ5IHRoZSBsZXZlbCBpcyB2YWxpZCBmb3IgdGhpcyBmb3JtYXRcbiAgICBAaWYgaW5kZXgoJHR5cG9ncmFwaHktYm9keS1sZXZlbHMsICRsZXZlbCkgPT0gbnVsbCB7XG4gICAgICBAZXJyb3IgJ0ludmFsaWQgYm9keSBmb3JtYXQgbGV2ZWw6IGAjeyRsZXZlbH1gLiBBbGxvd2VkIGxldmVsczogI3skdHlwb2dyYXBoeS1ib2R5LWxldmVsc30nO1xuICAgIH1cblxuICAgIEBpZiAkbGV2ZWwgPT0gMSB7XG4gICAgICBmb250LXdlaWdodDogNDAwO1xuXG4gICAgICAvLyBUT0RPOiBvdmVyd3JpdGUgaW4gZmlsZXMgcmF0aGVyIHRoYW4gdGhpcyBuZXN0ZWQgY2hhaW4gKHRvbyBzcGVjaWZpYykgaHR0cHM6Ly9naXRodWIuY29tL0dldFRlcm1pbnVzL3Rlcm1pbnVzLXVpL2lzc3Vlcy8xMTUyXG4gICAgICAvLyBEb24ndCBhcHBseSBjdXN0b20gbGluZS1oZWlnaHQgdG8gYnV0dG9uc1xuICAgICAgJjpub3QoLmMtYnV0dG9uKSB7XG4gICAgICAgICY6bm90KC5jLWlucHV0KSB7XG4gICAgICAgICAgJjpub3QoLmMtc2VsZWN0KSB7XG4gICAgICAgICAgICAmOm5vdCgudHMtY2hlY2tib3gpIHtcbiAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGlmICRsZXZlbCA9PSAyIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgfVxuICB9XG5cblxuICAvLyBDQVBUSU9OXG4gIEBpZiAkZm9ybWF0ID09ICdjYXB0aW9uJyB7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIGxldHRlci1zcGFjaW5nOiAuMDJlbTtcbiAgfVxuXG5cbiAgLy8gRklYRURXSURUSFxuICBAaWYgJGZvcm1hdCA9PSAnZml4ZWR3aWR0aCcge1xuICAgIGZvbnQtZmFtaWx5OiAkdHlwZV9fZmFtaWx5LS1tb25vc3BhY2VkO1xuICB9XG5cblxuICAvLyBIaW50cyAoZm9yIGlucHV0cylcbiAgQGlmICRmb3JtYXQgPT0gJ2hpbnQnIHtcbiAgICBjb2xvcjogY29sb3IodXRpbGl0eSk7XG4gICAgZm9udC1zaXplOiA3NSU7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsZXR0ZXItc3BhY2luZzogLjAxZW07XG4gICAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgfVxufVxuXG5cbi8qKlxuICogVHJ1bmNhdGUgb3ZlcmZsb3dpbmcgdGV4dCB3aXRoIGFuIGVsbGlwc2lzXG4gKlxuICogQG1peGluIHR5cG9ncmFwaHlcbiAqIEBzZWN0aW9uIFN0eWxlIEhlbHBlcnNcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgdHJ1bmNhdGUtb3ZlcmZsb3c7XG4gKi9cbkBtaXhpbiB0cnVuY2F0ZS1vdmVyZmxvdygpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG59XG5cbi8qKlxuICogVGhlIHNwYWNpbmcgZGVmYXVsdFxuICpcbiAqIEBzZWN0aW9uIFNwYWNpbmdcbiAqL1xuJGctc3BhY2luZzogMTZweCAhZGVmYXVsdDtcblxuXG4vKipcbiAqIFRoZSBtYXAgb2YgbGF5b3V0IHNwYWNpbmdzXG4gKlxuICogU21hbGw6IDEyLCA4LCA0XG4gKiBCYXNlOiAxNlxuICogTGFyZ2U6IDI0LCAzMiwgNDAsIDQ4LCA1NiwgNzIsIDk2XG4gKlxuICogQHNlY3Rpb24gU3BhY2luZ1xuICovXG4kZy1zcGFjaW5nczogKFxuICBzbWFsbDogIChcbiAgICAyOiBmbG9vcigkZy1zcGFjaW5nIC8gNCksXG4gICAgMTogZmxvb3IoJGctc3BhY2luZyAvIDIpLFxuICAgIDA6IGZsb29yKCRnLXNwYWNpbmcgLSA0KSxcbiAgKSxcbiAgZGVmYXVsdDogKFxuICAgIDA6ICRnLXNwYWNpbmcsXG4gICksXG4gIGxhcmdlOiAoXG4gICAgMDogY2VpbCgkZy1zcGFjaW5nIC8gMiAqIDMpLFxuICAgIDE6IGNlaWwoJGctc3BhY2luZyAvIDIgKiA0KSxcbiAgICAyOiBjZWlsKCRnLXNwYWNpbmcgLyAyICogNSksXG4gICAgMzogY2VpbCgkZy1zcGFjaW5nIC8gMiAqIDYpLFxuICAgIDQ6IGNlaWwoJGctc3BhY2luZyAvIDIgKiA3KSxcbiAgICA1OiBjZWlsKCRnLXNwYWNpbmcgLyAyICogOSksXG4gICAgNjogY2VpbCgkZy1zcGFjaW5nIC8gMiAqIDEyKSxcbiAgKVxuKTtcblxuXG4vKipcbiAqIFJldHJpZXZlIGEgc3BhY2UgZnJvbSB0aGUgJGctc3BhY2luZ3MgbWFwXG4gKlxuICogQHBhcmFtICR0eXBlXG4gKiAgVGhlIHNwYWNpbmcgbWFwIHRvIHVzZS4gRGVmYXVsdDogZGVmYXVsdFxuICogQHBhcmFtICRzaXplXG4gKiAgVGhlIHZhbHVlIGRlc2lyZWQgZnJvbSB0aGUgbWFwLiBEZWZhdWx0OiAwXG4gKiBAZXhhbXBsZVxuICogIHBhZGRpbmc6IHNwYWNpbmcoZGVmYXVsdCk7XG4gKiAgcGFkZGluZzogc3BhY2luZyhsYXJnZSk7XG4gKiAgcGFkZGluZzogc3BhY2luZyhsYXJnZSwgNCk7XG4gKi9cbkBmdW5jdGlvbiBzcGFjaW5nKCR0eXBlOiBkZWZhdWx0LCAkc2l6ZTogMCkge1xuICAvLyBWZXJpZnkgdGhlIHR5cGUgZXhpc3RzXG4gIEBpZiBub3QobWFwLWhhcy1rZXkoJGctc3BhY2luZ3MsICR0eXBlKSkge1xuICAgICRhbGxvd2VkLXR5cGVzOiBtYXAta2V5cygkZy1zcGFjaW5ncyk7XG4gICAgQGVycm9yICdJbnZhbGlkIHNwYWNpbmcgdHlwZSBuYW1lOiBgI3skdHlwZX1gLiBBbGxvd2VkIHR5cGU6ICN7JGFsbG93ZWQtdHlwZXN9JztcbiAgfVxuXG4gIC8vIFZlcmlmeSB0aGUgc2l6ZVxuICBAaWYgbm90KG1hcC1oYXMta2V5KG1hcC1nZXQoJGctc3BhY2luZ3MsICR0eXBlKSwgJHNpemUpKSB7XG4gICAgJGFsbG93ZWQtc2l6ZXM6IG1hcC1rZXlzKG1hcC1nZXQoJGctc3BhY2luZ3MsICR0eXBlKSk7XG4gICAgQGVycm9yICdJbnZhbGlkIHNpemU6IGAjeyRzaXplfWAuIEFsbG93ZWQgc2l6ZXMgZm9yIGAjeyR0eXBlfWAgYXJlOiAjeyRhbGxvd2VkLXNpemVzfSc7XG4gIH1cblxuICBAcmV0dXJuIG1hcC1nZXQobWFwLWdldCgkZy1zcGFjaW5ncywgJHR5cGUpLCAkc2l6ZSk7XG59XG5cbi8vIHN0eWxlbGludC1kaXNhYmxlIG1heC1saW5lLWxlbmd0aFxuXG4vKipcbiAqIEJveCBTaGFkb3cgdmFsdWVzIGZyb20gTWF0ZXJpYWwgU2hhZG93IEludGVycG9sYXRvclxuICpcbiAqIC0gRXhpc3RpbmcgbGlicmFyeSByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9wcmVzdG9wYXN0by9TQ1NTLU1hdGVyaWFsLVNoYWRvd3NcbiAqIC0gQW5ndWxhciBNYXRlcmlhbCBkZXNpZ24gbm90ZXMgaGVyZTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVzNOR1NMcURaempiQkJMVzJDNnlfNk5VeHR2ZFpBVmFKdmc1OExZM1EwRS9wcmV2aWV3XG4gKiAtIFJlZmVyZW5jZSBDb2RlUGVuOiBodHRwczovL2NvZGVwZW4uaW8vc2h5bmRtYW4vcGVuL29qeG1kWT9lZGl0b3JzPTAwMVxuICovXG5cbi8vIHN0eWxlbGludC1lbmFibGUgbWF4LWxpbmUtbGVuZ3RoXG5cblxuLyoqXG4gKiBTaGFkb3cgY29sb3JzLlxuICogaHR0cDovL2NvZGVwZW4uaW8vc2h5bmRtYW4vcGVuL29qeG1kWVxuICpcbiAqIC0gVU1CUkE6IFwiQSBjb25pY2FsIHNoYWRvdyBleGNsdWRpbmcgYWxsIGxpZ2h0IGZyb20gYSBnaXZlbiBzb3VyY2U7IF9zcGVjaWZpY2FsbHlfOiB0aGUgY29uaWNhbFxuICogcGFydCBvZiB0aGUgc2hhZG93IG9mIGEgY2VsZXN0aWFsIGJvZHkgZXhjbHVkaW5nIGFsbCBsaWdodCBmcm9tIHRoZSBwcmltYXJ5IHNvdXJjZVwiXG4gKiAtIFBFTlVNQlJBOiBcIkEgc3BhY2Ugb2YgcGFydGlhbCBpbGx1bWluYXRpb24gKGFzIGluIGFuIGVjbGlwc2UpIGJldHdlZW4gdGhlIHBlcmZlY3Qgc2hhZG93IG9uIGFsbFxuICogc2lkZXMgYW5kIHRoZSBmdWxsIGxpZ2h0XCJcbiAqXG4gKiBAbnVjbGlkZSBTaGFkb3ctQ29sb3JzXG4gKiBAc2VjdGlvbiBDb25maWcgPiBTaGFkb3dzXG4gKi9cbi8vIHN0eWxlbGludC1kaXNhYmxlIHBsdWdpbi9zdHlsZWxpbnQtbm8taW5kaXN0aW5ndWlzaGFibGUtY29sb3JzXG4ka2V5LXVtYnJhOiByZ2JhKDAsIDAsIDAsIC4yKTtcbiRrZXktcGVudW1icmE6IHJnYmEoMCwgMCwgMCwgLjE0KTtcbiRhbWJpZW50OiByZ2JhKDAsIDAsIDAsIC4xMik7XG4vLyBzdHlsZWxpbnQtZW5hYmxlIHBsdWdpbi9zdHlsZWxpbnQtbm8taW5kaXN0aW5ndWlzaGFibGUtY29sb3JzXG5cblxuLyoqXG4gKiBIYW5kLWRlc2lnbmVkIHJlZmVyZW5jZSBzaGFkb3cgc2V0c1xuICpcbiAqIFNvdXJjZTogaHR0cDovL2NvZGVwZW4uaW8vc2h5bmRtYW4vcGVuL29qeG1kWVxuICpcbiAqIEBudWNsaWRlIFNoYWRvdy1TZXRzXG4gKiBAc2VjdGlvbiBDb25maWcgPiBTaGFkb3dzXG4gKi9cbiRyZWZlcmVuY2Utc2hhZG93czogKFxuICAoXG4gICAgZWxldmF0aW9uOiAwLFxuICAgIHNoYWRvd3M6IChcbiAgICAgICgwLCAwLCAwLCAwLCAka2V5LXVtYnJhKSxcbiAgICAgICgwLCAwLCAwLCAwLCAka2V5LXBlbnVtYnJhKSxcbiAgICAgICgwLCAwLCAwLCAwLCAkYW1iaWVudCksXG4gICAgKVxuICApLFxuICAoXG4gICAgZWxldmF0aW9uOiAyLFxuICAgIHNoYWRvd3M6IChcbiAgICAgICgwLCAzLCAxLCAtMiwgJGtleS11bWJyYSksXG4gICAgICAoMCwgMiwgMiwgMCwgJGtleS1wZW51bWJyYSksXG4gICAgICAoMCwgMSwgNSwgMCwgJGFtYmllbnQpLFxuICAgIClcbiAgKSxcbiAgKFxuICAgIGVsZXZhdGlvbjogMyxcbiAgICBzaGFkb3dzOiAoXG4gICAgICAoMCwgMywgMywgLTIsICRrZXktdW1icmEpLFxuICAgICAgKDAsIDMsIDQsIDAsICRrZXktcGVudW1icmEpLFxuICAgICAgKDAsIDEsIDgsIDAsICRhbWJpZW50KSxcbiAgICApXG4gICksXG4gIChcbiAgICBlbGV2YXRpb246IDQsXG4gICAgc2hhZG93czogKFxuICAgICAgKDAsIDIsIDQsIC0xLCAka2V5LXVtYnJhKSxcbiAgICAgICgwLCA0LCA1LCAwLCAka2V5LXBlbnVtYnJhKSxcbiAgICAgICgwLCAxLCAxMCwgMCwgJGFtYmllbnQpLFxuICAgIClcbiAgKSxcbiAgKFxuICAgIGVsZXZhdGlvbjogNixcbiAgICBzaGFkb3dzOiAoXG4gICAgICAoMCwgMywgNSwgLTEsICRrZXktdW1icmEpLFxuICAgICAgKDAsIDYsIDEwLCAwLCAka2V5LXBlbnVtYnJhKSxcbiAgICAgICgwLCAxLCAxOCwgMCwgJGFtYmllbnQpLFxuICAgIClcbiAgKSxcbiAgKFxuICAgIGVsZXZhdGlvbjogOCxcbiAgICBzaGFkb3dzOiAoXG4gICAgICAoMCwgNSwgNSwgLTMsICRrZXktdW1icmEpLFxuICAgICAgKDAsIDgsIDEwLCAxLCAka2V5LXBlbnVtYnJhKSxcbiAgICAgICgwLCAzLCAxNCwgMiwgJGFtYmllbnQpLFxuICAgIClcbiAgKSxcbiAgKFxuICAgIGVsZXZhdGlvbjogMTYsXG4gICAgc2hhZG93czogKFxuICAgICAgKDAsIDgsIDEwLCAtNSwgJGtleS11bWJyYSksXG4gICAgICAoMCwgMTYsIDI0LCAyLCAka2V5LXBlbnVtYnJhKSxcbiAgICAgICgwLCA2LCAzMCwgNSwgJGFtYmllbnQpLFxuICAgIClcbiAgKVxuKTtcblxuXG4vKipcbiAqIEFuaW1hdGlvbiBkdXJhdGlvbnNcbiAqXG4gKiBAbnVjbGlkZSBTaGFkb3ctQW5pbWF0aW9uLUR1cmF0aW9uc1xuICogQHNlY3Rpb24gQ29uZmlnID4gU2hhZG93c1xuICovXG4kbWluLWFuaW1hdGlvbi1sZW5ndGg6IDI1MG1zO1xuJG1heC1hbmltYXRpb24tbGVuZ3RoOiA0MDBtcztcblxuXG4vKipcbiAqIE1hdGVyaWFsIERlc2lnbiBlbGVtZW50IGVsZXZhdGlvbnNcbiAqXG4gKiBTb3VyY2U6IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tYXRlcmlhbC1kZXNpZ24vZWxldmF0aW9uLXNoYWRvd3MuaHRtbCNlbGV2YXRpb24tc2hhZG93cy1lbGV2YXRpb24tYW5kcm9pZFxuICpcbiAqIEBudWNsaWRlIFNoYWRvdy1FbGVtZW50cy1NYXBcbiAqIEBzZWN0aW9uIENvbmZpZyA+IFNoYWRvd3NcbiAqL1xuJG1hdGVyaWFsLWVsZW1lbnRzOiAoXG4gIGRpYWxvZzogKDI0KSxcbiAgcGlja2VyOiAoMjQpLFxuICBuYXYtZHJhd2VyOiAoMTYpLFxuICByaWdodC1kcmF3ZXI6IDE2LFxuICBib3R0b20tc2hlZXQ6IDE2LFxuICBmYWI6IDYgMTIgYWN0aXZlLFxuICBzdWItbWVudS0zOiAxMSxcbiAgc3ViLW1lbnUtMjogMTAsXG4gIHN1Yi1tZW51LTE6IDksXG4gIG1lbnU6IDgsXG4gIGJvdHRvbS1uYXYtYmFyOiA4LFxuICBjYXJkOiAyIDggaG92ZXIsXG4gIHJhaXNlZC1idXR0b246IDIgOCBhY3RpdmUsXG4gIHNuYWNrYmFyOiA2LFxuICBhcHAtYmFyOiA0LFxuICByZWZyZXNoLWluZGljYXRvcjogMyxcbiAgcXVpY2stZW50cnk6IDIgMyBhY3RpdmUsXG4gIHNlYXJjaC1iYXI6IDIgMyBhY3RpdmUsXG4gIHN3aXRjaDogMVxuKTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHR3byByZWZlcmVuY2Ugc2hhZG93cyB3aG9zZSBlbGV2YXRpb25zIGJvdW5kIHRoZSBzcGVjaWZpZWQgZWxldmF0aW9uXG4gKlxuICogSW4gdGhlIGNhc2Ugd2hlcmUgdGhlIHN1cHBsaWVkIGVsZXZhdGlvbiBleGNlZWRzIHRoZSBtYXhpbXVtIHJlZmVyZW5jZSBlbGV2YXRpb24sIHRoZSBsYXN0IHR3b1xuICogcmVmZXJlbmNlIHNoYWRvd3MgYXJlIHJldHVybmVkLlxuICpcbiAqIEBtaXhpbiBmaW5kLWJvdW5kaW5nLXNoYWRvdy1zZXRzXG4gKiBAc2VjdGlvbiBTaGFkb3ctRnVuY3Rpb25zXG4gKiBAcGFyYW0gJGVsZXZhdGlvblxuICogIFRoZSBlbGV2YXRpb25cbiAqIEBleGFtcGxlXG4gKiAgJGZvbyA9IGZpbmQtYm91bmRpbmctc2hhZG93LXNldHMoMik7XG4gKi9cbkBmdW5jdGlvbiBmaW5kLWJvdW5kaW5nLXNoYWRvdy1zZXRzKCRlbGV2YXRpb24pIHtcbiAgQGlmICRlbGV2YXRpb24gPCAwIHtcbiAgICBAZXJyb3IgJ2ZpbmQtYm91bmRpbmctc2hhZG93LXNldHM6IEVsZXZhdGlvbiBpcyBsZXNzIHRoYW4gemVybyc7XG4gIH1cblxuICAkbG93ZXI6IG50aCgkcmVmZXJlbmNlLXNoYWRvd3MsIGxlbmd0aCgkcmVmZXJlbmNlLXNoYWRvd3MpIC0gMSk7XG4gICR1cHBlcjogbnRoKCRyZWZlcmVuY2Utc2hhZG93cywgbGVuZ3RoKCRyZWZlcmVuY2Utc2hhZG93cykpO1xuXG4gIEBmb3IgJGkgZnJvbSAxIHRvIGxlbmd0aCgkcmVmZXJlbmNlLXNoYWRvd3MpIHtcbiAgICAkaW5uZXItbG93ZXI6IG50aCgkcmVmZXJlbmNlLXNoYWRvd3MsICRpKTtcbiAgICAkaW5uZXItdXBwZXI6IG50aCgkcmVmZXJlbmNlLXNoYWRvd3MsICRpICsgMSk7XG5cbiAgICBAaWYgKG1hcC1nZXQoJGlubmVyLWxvd2VyLCAnZWxldmF0aW9uJykgPD0gJGVsZXZhdGlvbikgYW5kIChtYXAtZ2V0KCRpbm5lci11cHBlciwgJ2VsZXZhdGlvbicpID4gJGVsZXZhdGlvbikge1xuICAgICAgQHJldHVybiAoJGlubmVyLWxvd2VyLCAkaW5uZXItdXBwZXIpO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gKCRsb3dlciwgJHVwcGVyKTtcbn1cblxuXG4vKipcbiAqIFBlcmZvcm1zIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdmFsdWVzIGEgYW5kIGJcbiAqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBiZXR3ZWVuIGEgYW5kIGIgcHJvcG9ydGlvbmFsIHRvIHggKHdoZW4geCBpcyBiZXR3ZWVuIDAgYW5kIDEuIFdoZW4geCBpcyBvdXRzaWRlXG4gKiB0aGlzIHJhbmdlLCB0aGUgcmV0dXJuIHZhbHVlIGlzIGEgbGluZWFyIGV4dHJhcG9sYXRpb24pXG4gKlxuICogQG1peGluIGxlcnBcbiAqIEBzZWN0aW9uIFNoYWRvdy1GdW5jdGlvbnNcbiAqIEBwYXJhbSAkeFxuICogIFRoZSBwcm9wb3J0aW9uYWwgY29udHJvbFxuICogQHBhcmFtICRhXG4gKiAgVGhlIHN0YXJ0aW5nIHZhbHVlXG4gKiBAcGFyYW0gJGJcbiAqICBUaGUgZW5kaW5nIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogICRmb28gPSBsZXJwKC4yLCAzLCA2KTtcbiAqL1xuQGZ1bmN0aW9uIGxlcnAoJHgsICRhLCAkYikge1xuICBAcmV0dXJuICRhICsgJHggKiAoJGIgLSAkYSk7XG59XG5cblxuLyoqXG4gKiBQZXJmb3JtcyBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHNoYWRvd3MgYnkgaW50ZXJwb2xhdGluZyBlYWNoIHByb3BlcnR5IGluZGl2aWR1YWxseVxuICpcbiAqIFJldHVybnMgdGhlIHZhbHVlIGJldHdlZW4gc2hhZG93MSBhbmQgc2hhZG93MiBwcm9wb3J0aW9uYWwgdG8geCAod2hlbiB4IGlzIGJldHdlZW4gMCBhbmQgMS4gV2hlblxuICogeCBpcyBvdXRzaWRlIHRoaXMgcmFuZ2UsIHRoZSByZXR1cm4gdmFsdWUgaXMgYSBsaW5lYXIgZXh0cmFwb2xhdGlvbikuXG4gKlxuICogQG1peGluIGxlcnAtc2hhZG93XG4gKiBAc2VjdGlvbiBTaGFkb3ctRnVuY3Rpb25zXG4gKiBAcGFyYW0gJHhcbiAqICBUaGUgcHJvcG9ydGlvbmFsIGNvbnRyb2xcbiAqIEBwYXJhbSAkc2hhZG93MVxuICogIFRoZSBzdGFydGluZyBzaGFkb3dcbiAqIEBwYXJhbSAkc2hhZG93MlxuICogIFRoZSBlbmRpbmcgc2hhZG93XG4gKi9cbkBmdW5jdGlvbiBsZXJwLXNoYWRvdygkeCwgJHNoYWRvdzEsICRzaGFkb3cyKSB7XG4gIC8vIFJvdW5kIGFsbCBwYXJhbWV0ZXJzLCBhcyBzaGFkb3cgZGVmaW5pdGlvbnMgZG8gbm90IHN1cHBvcnQgc3VicGl4ZWxzXG4gICRuZXcteDogcm91bmQobGVycCgkeCwgbnRoKCRzaGFkb3cxLCAxKSwgbnRoKCRzaGFkb3cyLCAxKSkpO1xuICAkbmV3LXk6IHJvdW5kKGxlcnAoJHgsIG50aCgkc2hhZG93MSwgMiksIG50aCgkc2hhZG93MiwgMikpKTtcbiAgJG5ldy1ibHVyOiByb3VuZChsZXJwKCR4LCBudGgoJHNoYWRvdzEsIDMpLCBudGgoJHNoYWRvdzIsIDMpKSk7XG4gICRuZXctc3ByZWFkOiByb3VuZChsZXJwKCR4LCBudGgoJHNoYWRvdzEsIDQpLCBudGgoJHNoYWRvdzIsIDQpKSk7XG4gIC8vIE5vIG5lZWQgdG8gbGVycCB0aGUgc2hhZG93IGNvbG9yXG4gICRuZXctY29sb3I6IG50aCgkc2hhZG93MSwgNSk7XG5cbiAgLy8gQ29lcmNlIHRvIHBpeGVsIHZhbHVlcyB3aGVuIHJldHVybmluZ1xuICBAcmV0dXJuICgjeyRuZXcteCArIHB4fSAjeyRuZXcteSArIHB4fSAjeyRuZXctYmx1ciArIHB4fSAjeyRuZXctc3ByZWFkICsgcHh9ICRuZXctY29sb3IpO1xufVxuXG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc2V0IG9mIHNoYWRvd3MgYXQgYSBnaXZlbiBlbGV2YXRpb25cbiAqXG4gKiBAbWl4aW4gY2FsY3VsYXRlLXNoYWRvdy1zZXQtYXQtZGVwdGhcbiAqIEBzZWN0aW9uIFNoYWRvdy1GdW5jdGlvbnNcbiAqIEBwYXJhbSAkZWxldmF0aW9uXG4gKiAgVGhlIGRlc2lyZWQgZWxldmF0aW9uXG4gKiBAZXhhbXBsZVxuICogICRmb28gPSBjYWxjdWxhdGUtc2hhZG93LXNldC1hdC1kZXB0aCgyKTtcbiAqL1xuQGZ1bmN0aW9uIGNhbGN1bGF0ZS1zaGFkb3ctc2V0LWF0LWRlcHRoKCRlbGV2YXRpb24pIHtcbiAgJGJvdW5kczogZmluZC1ib3VuZGluZy1zaGFkb3ctc2V0cygkZWxldmF0aW9uKTtcbiAgJG1pbjogbnRoKCRib3VuZHMsIDEpO1xuICAkbWF4OiBudGgoJGJvdW5kcywgMik7XG4gICR4OiAoJGVsZXZhdGlvbiAtIG1hcC1nZXQoJG1pbiwgJ2VsZXZhdGlvbicpKSAvIChtYXAtZ2V0KCRtYXgsICdlbGV2YXRpb24nKSAtIG1hcC1nZXQoJG1pbiwgJ2VsZXZhdGlvbicpKTtcbiAgJGVsZXZhdGlvbi1zaGFkb3dzOiAoKTtcblxuICBAZm9yICRpIGZyb20gMSB0byBsZW5ndGgobWFwLWdldCgkbWluLCAnc2hhZG93cycpKSArIDEge1xuICAgICRuZXctc2hhZG93OiBsZXJwLXNoYWRvdygkeCwgbnRoKG1hcC1nZXQoJG1pbiwgJ3NoYWRvd3MnKSwgJGkpLCBudGgobWFwLWdldCgkbWF4LCAnc2hhZG93cycpLCAkaSkpO1xuICAgICRlbGV2YXRpb24tc2hhZG93czogYXBwZW5kKCRlbGV2YXRpb24tc2hhZG93cywgJG5ldy1zaGFkb3csIGNvbW1hKTtcbiAgfVxuXG4gIEByZXR1cm4gJGVsZXZhdGlvbi1zaGFkb3dzO1xufVxuXG5cblxuLyoqXG4gKiBHZW5lcmF0ZXMgdGhlIHRyYW5zaXRpb24gZm9yIGEgY2hhbmdlIGJldHdlZW4gMiBlbGV2YXRpb25zXG4gKlxuICogVGhlIGxhcmdlciB0aGUgZWxldmF0aW9uIGNoYW5nZSB0aGUgbG9uZ2VyIHRoZSBhbmltYXRpb24gdGFrZXNcbiAqXG4gKiBAbWl4aW4gZWxldmF0aW9uLXRyYW5zaXRpb25cbiAqIEBzZWN0aW9uIFNoYWRvdy1NaXhpbnNcbiAqIEBwYXJhbSAkZWxldmF0aW9uLWNoYW5nZVxuICogIFRoZSBlbGV2YXRpb24gY2hhbmdlIGFtb3VudFxuICogQHBhcmFtICRlYXNpbmdcbiAqICBUaGUgZWFzaW5nIGZ1bmN0aW9uIG9yIG5hbWVcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgZWxldmF0aW9uLXRyYW5zaXRpb24oZGlhbG9nKTtcbiAqL1xuQG1peGluIGVsZXZhdGlvbi10cmFuc2l0aW9uKCRlbGV2YXRpb24tY2hhbmdlOiA2LCAkZWFzaW5nOiBjdWJpYy1iZXppZXIoLjQsIDAsIC4yLCAxKSkge1xuICAkZHVyYXRpb246IGxlcnAoJGVsZXZhdGlvbi1jaGFuZ2UgLyAyNCwgJG1pbi1hbmltYXRpb24tbGVuZ3RoLCAkbWF4LWFuaW1hdGlvbi1sZW5ndGgpO1xuXG4gIHRyYW5zaXRpb246IGJveC1zaGFkb3cgJGR1cmF0aW9uICRlYXNpbmc7XG59XG5cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYm94LXNoYWRvdyBhbmQgdGhlIHRyYW5zaXRpb24gZm9yIGEgZ2l2ZW4gZWxldmF0aW9uXG4gKlxuICogLSBBIHNpbmdsZSBlbGV2YXRpb24gd2lsbCBnZW5lcmF0ZSBhIHNpbmdsZSBib3gtc2hhZG93IHNldFxuICogLSBUd28gZWxldmF0aW9ucyBhbmQgYSBzdGF0ZSB3aWxsIGdlbmVyYXRlIGEgZGVmYXVsdCBib3gtc2hhZG93IHNldCBhbmQgYW5vdGhlciBzZXQgdGhhdCBpc1xuICogYWN0aXZhdGVkIGJ5IHRoZSBzdGF0ZSB0ZXN0ZWQgd2l0aCA6aG92ZXIgYW5kIDphY3RpdmVcbiAqXG4gKiBAbWl4aW4gZWxldmF0aW9uXG4gKiBAc2VjdGlvbiBTaGFkb3ctTWl4aW5zXG4gKiBAcGFyYW0gJGVsZXZhdGlvbjFcbiAqICBUaGUgc3RhcnRpbmcgZWxldmF0aW9uXG4gKiBAcGFyYW0gJGVsZXZhdGlvbjJcbiAqICBUaGUgZGVzdGluYXRpb24gZWxldmF0aW9uXG4gKiBAcGFyYW0gJHN0YXRlXG4gKiAgaG92ZXIsIGZvY3VzLCBhY3RpdmVcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgZWxldmF0aW9uKDIsIDgsIGFjdGl2ZSk7XG4gKi9cbkBtaXhpbiBlbGV2YXRpb24oJGVsZXZhdGlvbjEsICRlbGV2YXRpb24yOiBudWxsLCAkc3RhdGU6IG51bGwpIHtcbiAgQGlmICRlbGV2YXRpb24xID09IDAge1xuICAgIC8vIHN0eWxlbGludC1kaXNhYmxlIGRlY2xhcmF0aW9uLW5vLWltcG9ydGFudFxuICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcbiAgICAvLyBzdHlsZWxpbnQtZW5hYmxlIGRlY2xhcmF0aW9uLW5vLWltcG9ydGFudFxuICB9IEBlbHNlIHtcbiAgICBib3gtc2hhZG93OiBjYWxjdWxhdGUtc2hhZG93LXNldC1hdC1kZXB0aCgkZWxldmF0aW9uMSk7XG4gIH1cblxuICBAaWYgJGVsZXZhdGlvbjIgIT0gbnVsbCB7XG4gICAgLy8gVE9ETzogRml4IG1pc3N1c2Ugb2YgbWl4aW4gaHR0cHM6Ly9naXRodWIuY29tL0dldFRlcm1pbnVzL3Rlcm1pbnVzLXVpL2lzc3Vlcy8xNTI5XG4gICAgQGluY2x1ZGUgZWxldmF0aW9uLXRyYW5zaXRpb24oJGVsZXZhdGlvbjIgLSAkZWxldmF0aW9uMik7XG5cbiAgICAmOiN7JHN0YXRlfSB7XG4gICAgICBAaWYgJGVsZXZhdGlvbjEgPT0gMCB7XG4gICAgICAgIC8vIHN0eWxlbGludC1kaXNhYmxlIGRlY2xhcmF0aW9uLW5vLWltcG9ydGFudFxuICAgICAgICBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XG4gICAgICAgIC8vIHN0eWxlbGludC1lbmFibGUgZGVjbGFyYXRpb24tbm8taW1wb3J0YW50XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgYm94LXNoYWRvdzogY2FsY3VsYXRlLXNoYWRvdy1zZXQtYXQtZGVwdGgoJGVsZXZhdGlvbjIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogUmV0dXJucyBib3gtc2hhZG93IGFuZCB0cmFuc2l0aW9uIHByb3BlcnRpZXMgZm9yIHNwZWNpZmljIGVsZW1lbnRzLiBTZWUgJG1hdGVyaWFsLWVsZW1lbnRzLlxuICpcbiAqIEBtaXhpbiBlbGV2YXRpb24tZWxlbWVudFxuICogQHNlY3Rpb24gU2hhZG93LU1peGluc1xuICogQHBhcmFtICRlbGVtZW50LW5hbWVcbiAqICBUaGUgZWxlbWVudCB0byBhZGQgYSBzaGFkb3cgdG9cbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgZWxldmF0aW9uLWVsZW1lbnQoZGlhbG9nKTtcbiAqL1xuQG1peGluIGVsZXZhdGlvbi1lbGVtZW50KCRlbGVtZW50LW5hbWUpIHtcbiAgJGF0dHI6IG1hcC1nZXQoJG1hdGVyaWFsLWVsZW1lbnRzLCAkZWxlbWVudC1uYW1lKTtcblxuICBAaWYgbGVuZ3RoKCRhdHRyKSA9PSAxIHtcbiAgICBAaW5jbHVkZSBlbGV2YXRpb24obnRoKCRhdHRyLCAxKSk7XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIGVsZXZhdGlvbihudGgoJGF0dHIsIDEpLCBudGgoJGF0dHIsIDIpLCBudGgoJGF0dHIsIDMpKTtcbiAgfVxufVxuXG5cbi8qKlxuICogVGhlIG1hcCBvZiBhdmFpbGFibGUgY3Vyc29yc1xuICovXG4kZy1jdXJzb3JzOiAoXG4gIC8qIEluZGljYXRlcyBhbiBhbGlhcyBvciBjb3B5IHdpbGwgYmUgbWFkZSAqL1xuICBhbGlhcyxcbiAgLyogTGV0IHRoZSBicm93c2VyIGRlY2lkZSAqL1xuICBhdXRvLFxuICAvKiBJbmRpY2F0ZXMgYWJpbGl0eSB0byByZXNpemUgYSBwaWVjZSBvZiB0aGUgZG9tOyBvZnRlbiBhIHRhYmxlIGNvbHVtbiAqL1xuICBjb2wtcmVzaXplLFxuICAvKiBJbmRpY2F0ZXMgYWJpbGl0eSB0byBjb3B5ICovXG4gIGNvcHksXG4gIC8qIFJlc2V0IHRvIHRoZSBkZWZhdWx0IGN1cnNvciAqL1xuICBkZWZhdWx0LFxuICAvKiBJbmRpY2F0ZXMgaGVscCBpcyBhdmFpbGFibGUgKi9cbiAgaGVscCxcbiAgLyogSW5kaWNhdGVzIHRoZSBhYmlsaXR5IHRvIGRyYWcgYW4gaXRlbSAqL1xuICBtb3ZlLFxuICAvKiBJbmRpY2F0ZXMgbm8gYXZhaWxhYmxlIGludGVyYWN0aW9uICovXG4gIG5vdC1hbGxvd2VkLFxuICAvKiBJbmRpY2F0ZXMgdGhlIGFiaWxpdHkgdG8gbW92ZSBOb3J0aCBhbmQgU291dGggKi9cbiAgbnMtcmVzaXplLFxuICAvKiBJbmRpY2F0ZXMgaW50ZXJhY3Rpb24gKi9cbiAgcG9pbnRlcixcbiAgLyogSW5kaWNhdGVzIHRleHQgY29udHJvbHMgKi9cbiAgdGV4dCxcbik7XG5cblxuLyoqXG4gKiBSZXRyaWV2ZSBhIHNwYWNlIGZyb20gdGhlICRnLWN1cnNvcnMgbGlzdC5cbiAqXG4gKiBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdG8gZW5mb3JjZSB3aGljaCBjdXJzb3JzIGNhbiBiZSB1c2VkLlxuICpcbiAqIEBwYXJhbSAkdHlwZVxuICogIFRoZSBjdXJzb3IgdmFsdWUgdG8gdXNlLiBEZWZhdWx0OiBhdXRvXG4gKiBAZXhhbXBsZVxuICogIGN1cnNvcjogY3Vyc29yKCk7XG4gKiAgY3Vyc29yOiBjdXJzb3IocG9pbnRlcik7XG4gKi9cbkBmdW5jdGlvbiBjdXJzb3IoJHR5cGU6IGF1dG8pIHtcbiAgJGluZGV4OiBpbmRleCgkZy1jdXJzb3JzLCAkdHlwZSk7XG5cbiAgLy8gVmVyaWZ5IHRoZSB0eXBlIGV4aXN0c1xuICBAaWYgKCRpbmRleCA9PSBudWxsKSB7XG4gICAgQGVycm9yICdJbnZhbGlkIGN1cnNvciB0eXBlIG5hbWU6IGAjeyR0eXBlfWAuIEFsbG93ZWQgdHlwZXM6IFwiI3skZy1jdXJzb3JzfVwiJztcbiAgfVxuXG4gIEByZXR1cm4gbnRoKCRnLWN1cnNvcnMsICRpbmRleCk7XG59XG5cblxuLyoqXG4gKiBJbmNsdWRlIGEgY3VzdG9tIGN1cnNvclxuICpcbiAqIEBwYXJhbSAkdHlwZVxuICogIFRoZSBjdXJzb3IgdmFsdWUgdG8gdXNlLlxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSBjdXJzb3I7XG4gKiAgQGluY2x1ZGUgY3Vyc29yKHBvaW50ZXIpO1xuICovXG5AbWl4aW4gY3Vyc29yKCR0eXBlKSB7XG4gIGN1cnNvcjogY3Vyc29yKCR0eXBlKTtcbn1cblxuXG5cbkBtaXhpbiBjYXJkKFxuICAkYWxsb3dzLWludGVyYWN0aW9uOiBmYWxzZVxuKSB7XG4gIG1pbi1oZWlnaHQ6IGNhbGMoMTAwJSAtICN7c3BhY2luZyhsYXJnZSkgKiAyfSk7XG4gIHBhZGRpbmc6IHNwYWNpbmcobGFyZ2UpO1xuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuXG4gIC8vIElmIHRoZSBjYXJkIGFsbG93cyBpbnRlcmFjdGlvbiwgZ2l2ZSBpdCBhIGhvdmVyIHN0YXRlXG4gIEBpZiAkYWxsb3dzLWludGVyYWN0aW9uID09IHRydWUge1xuICAgIEBpbmNsdWRlIGVsZXZhdGlvbi1lbGVtZW50KGNhcmQpO1xuICAgIGN1cnNvcjogY3Vyc29yKHBvaW50ZXIpO1xuICB9IEBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UgaW5jbHVkZSBzdGFuZGFyZCBlbGV2YXRpb25cbiAgICBAaW5jbHVkZSBlbGV2YXRpb24oMik7XG4gIH1cblxuICAvLyBDbGFzcyBhZGRlZCBieSB0aGUgVHNDYXJkVGl0bGVEaXJlY3RpdmVcbiAgLmMtY2FyZF9fdGl0bGUge1xuICAgIEBpbmNsdWRlIHR5cG9ncmFwaHkodGl0bGUpO1xuICB9XG59XG5cbi8qKlxuICogUHVyZSAtIERhcmtcbiAqL1xuJGNvbG9yX19wdXJlLS1kYXJrOiAjMzAyZDM1ICFkZWZhdWx0O1xuXG4vKipcbiAqIFB1cmUgLSBMaWdodFxuICovXG4kY29sb3JfX3B1cmUtLWxpZ2h0OiAjZmFmYWZhICFkZWZhdWx0O1xuXG5cblxuXG4vKipcbiAqIFV0aWxpdHkgLSBFeHRyYSBEYXJrXG4gKi9cbiRjb2xvcl9fdXRpbGl0eS0teGRhcms6ICMzZTNjNDMgIWRlZmF1bHQ7XG5cbi8qKlxuICogVXRpbGl0eSAtIERhcmtcbiAqL1xuJGNvbG9yX191dGlsaXR5LS1kYXJrOiAjNzU3NTc1ICFkZWZhdWx0O1xuXG4vKipcbiAqIFV0aWxpdHlcbiAqL1xuJGNvbG9yX191dGlsaXR5OiAjOTk5ICFkZWZhdWx0O1xuXG4vKipcbiAqIFV0aWxpdHkgLSBMaWdodFxuICovXG4kY29sb3JfX3V0aWxpdHktLWxpZ2h0OiAjY2VjZGQxICFkZWZhdWx0O1xuXG4vKipcbiAqIFV0aWxpdHkgLSBFeHRyYSBMaWdodFxuICovXG4kY29sb3JfX3V0aWxpdHktLXhsaWdodDogI2YyZjBmNyAhZGVmYXVsdDtcblxuXG4vKipcbiAqIFByaW1hcnkgLSBFeHRyYSBEYXJrXG4gKi9cbiRjb2xvcl9fcHJpbWFyeS0teGRhcms6ICMwYTM3NWIgIWRlZmF1bHQ7XG5cbi8qKlxuICogUHJpbWFyeSAtIERhcmtcbiAqL1xuJGNvbG9yX19wcmltYXJ5LS1kYXJrOiAjMGM0MjcxICFkZWZhdWx0O1xuXG4vKipcbiAqIFByaW1hcnlcbiAqL1xuJGNvbG9yX19wcmltYXJ5OiAjMDA1MzhhICFkZWZhdWx0O1xuXG4vKipcbiAqIFByaW1hcnkgLSBMaWdodFxuICovXG4kY29sb3JfX3ByaW1hcnktLWxpZ2h0OiAjMTY2NmIxICFkZWZhdWx0O1xuXG4vKipcbiAqIFByaW1hcnkgLSB4TGlnaHRcbiAqL1xuJGNvbG9yX19wcmltYXJ5LS14bGlnaHQ6ICMxNzc3YjYgIWRlZmF1bHQ7XG5cblxuLyoqXG4gKiBBY2NlbnQgLSBFeHRyYSBEYXJrXG4gKi9cbiRjb2xvcl9fYWNjZW50LS14ZGFyazogIzJiNjczZiAhZGVmYXVsdDtcblxuLyoqXG4gKiBBY2NlbnQgLSBEYXJrXG4gKi9cbiRjb2xvcl9fYWNjZW50LS1kYXJrOiAjMzE3NDQ4ICFkZWZhdWx0O1xuXG4vKipcbiAqIEFjY2VudFxuICovXG4kY29sb3JfX2FjY2VudDogIzJmODU0ZCAhZGVmYXVsdDtcblxuLyoqXG4gKiBBY2NlbnQgLSBMaWdodFxuICovXG4kY29sb3JfX2FjY2VudC0tbGlnaHQ6ICMzYjliNWMgIWRlZmF1bHQ7XG5cbi8qKlxuICogQWNjZW50IC0geExpZ2h0XG4gKi9cbiRjb2xvcl9fYWNjZW50LS14bGlnaHQ6IGxpZ2h0ZW4oJGNvbG9yX19hY2NlbnQsIDYwJSkgIWRlZmF1bHQ7XG5cblxuXG5cbi8qKlxuICogRXJyb3IgLSBEYXJrXG4gKi9cbiRjb2xvcl9fZXJyb3ItLWRhcms6ICNiNTU5NDkgIWRlZmF1bHQ7XG5cbi8qKlxuICogRXJyb3JcbiAqL1xuJGNvbG9yX19lcnJvcjogI2M4NjA0ZCAhZGVmYXVsdDtcblxuLyoqXG4gKiBFcnJvciAtIExpZ2h0XG4gKi9cbiRjb2xvcl9fZXJyb3ItLWxpZ2h0OiAjZDc2YzU5ICFkZWZhdWx0O1xuXG5cbi8qKlxuICogV2FybiAtIERhcmtcbiAqL1xuJGNvbG9yX193YXJuLS1kYXJrOiAjY2M5ZjQ1ICFkZWZhdWx0O1xuXG4vKipcbiAqIFdhcm5cbiAqL1xuJGNvbG9yX193YXJuOiAjZGVhODNiICFkZWZhdWx0O1xuXG4vKipcbiAqIFdhcm4gLSBMaWdodFxuICovXG4kY29sb3JfX3dhcm4tLWxpZ2h0OiAjZThiNTUwICFkZWZhdWx0O1xuXG5cbi8qKlxuICogSGlnaGxpZ2h0IC0gRGFya1xuICovXG4kY29sb3JfX2hpZ2hsaWdodC0tZGFyazogI2RkZDQ1NSAhZGVmYXVsdDtcblxuLyoqXG4gKiBIaWdobGlnaHRcbiAqL1xuJGNvbG9yX19oaWdobGlnaHQ6ICNlZmU1NTcgIWRlZmF1bHQ7XG5cbi8qKlxuICogSGlnaGxpZ2h0IC0gTGlnaHRcbiAqL1xuJGNvbG9yX19oaWdobGlnaHQtLWxpZ2h0OiAjZjZlZjhiICFkZWZhdWx0O1xuXG5cbi8qKlxuICogVGhlIG1hcCBvZiBjb2xvcnNcbiAqXG4gKiBOb3RlOiBDdXJyZW50bHksIHdhcm4gYW5kIGVycm9yIGFyZSB0aGUgc2FtZSBjb2xvciBpbiB0aGUgJHBhbGV0dGVzIG1hcC4gTW9yZSB3b3JrIG5lZWRzIHRvIGJlIGRvbmUgdG8gc29saWRpZnkgb3VyIHBhbGV0dGUuXG4gKi9cbiRwYWxldHRlczogKFxuICBwcmltYXJ5OiAoXG4gICAgeGxpZ2h0OiAkY29sb3JfX3ByaW1hcnktLXhsaWdodCxcbiAgICBsaWdodDogJGNvbG9yX19wcmltYXJ5LS1saWdodCxcbiAgICBiYXNlOiAkY29sb3JfX3ByaW1hcnksXG4gICAgZGFyazogJGNvbG9yX19wcmltYXJ5LS1kYXJrLFxuICAgIHhkYXJrOiAkY29sb3JfX3ByaW1hcnktLXhkYXJrXG4gICksXG4gIGFjY2VudDogKFxuICAgIHhsaWdodDogJGNvbG9yX19hY2NlbnQtLXhsaWdodCxcbiAgICBsaWdodDogJGNvbG9yX19hY2NlbnQtLWxpZ2h0LFxuICAgIGJhc2U6ICRjb2xvcl9fYWNjZW50LFxuICAgIGRhcms6ICRjb2xvcl9fYWNjZW50LS1kYXJrLFxuICAgIHhkYXJrOiAkY29sb3JfX2FjY2VudC0teGRhcmtcbiAgKSxcbiAgZXJyb3I6IChcbiAgICBsaWdodDogJGNvbG9yX19lcnJvci0tbGlnaHQsXG4gICAgYmFzZTogJGNvbG9yX19lcnJvcixcbiAgICBkYXJrOiAkY29sb3JfX2Vycm9yLS1kYXJrXG4gICksXG4gIHdhcm46IChcbiAgICBsaWdodDogJGNvbG9yX19lcnJvci0tbGlnaHQsXG4gICAgYmFzZTogJGNvbG9yX19lcnJvcixcbiAgICBkYXJrOiAkY29sb3JfX2Vycm9yLS1kYXJrXG4gICksXG4gIGhpZ2hsaWdodDogKFxuICAgIGxpZ2h0OiAkY29sb3JfX2hpZ2hsaWdodC0tbGlnaHQsXG4gICAgYmFzZTogJGNvbG9yX19oaWdobGlnaHQsXG4gICAgZGFyazogJGNvbG9yX19oaWdobGlnaHQtLWRhcmtcbiAgKSxcbiAgcHVyZTogKFxuICAgIGRhcms6ICRjb2xvcl9fcHVyZS0tZGFyayxcbiAgICBiYXNlOiAkY29sb3JfX3B1cmUtLWxpZ2h0XG4gICksXG4gIHV0aWxpdHk6IChcbiAgICB4bGlnaHQ6ICRjb2xvcl9fdXRpbGl0eS0teGxpZ2h0LFxuICAgIGxpZ2h0OiAkY29sb3JfX3V0aWxpdHktLWxpZ2h0LFxuICAgIGJhc2U6ICRjb2xvcl9fdXRpbGl0eSxcbiAgICBkYXJrOiAkY29sb3JfX3V0aWxpdHktLWRhcmssXG4gICAgeGRhcms6ICRjb2xvcl9fdXRpbGl0eS0teGRhcmtcbiAgKVxuKTtcblxuXG4vKipcbiAqIFJldHJpZXZlIGEgY29sb3IgZnJvbSB0aGUgY29sb3JzIG1hcFxuICpcbiAqIEBwYXJhbSAkcGFsZXR0ZVxuICogIFRoZSBwYWxldHRlIHRvIHVzZSBmcm9tIHRoZSBtYXBcbiAqIEBwYXJhbSAkdG9uZVxuICogIFRoZSB0b25lIHRvIHVzZSBmcm9tIHRoZSBzZWxlY3RlZCBtYXAuIERlZmF1bHQ6IGJhc2VcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgY29sb3IocHJpbWFyeSk7XG4gKiAgQGluY2x1ZGUgY29sb3IoYWNjZW50LCBsaWdodCk7XG4gKi9cbkBmdW5jdGlvbiBjb2xvcigkcGFsZXR0ZSwgJHRvbmU6ICdiYXNlJykge1xuICAvLyBWZXJpZnkgdGhlIHBhbGV0dGUgZXhpc3RzIChjb2xvcilcbiAgQGlmIG5vdChtYXAtaGFzLWtleSgkcGFsZXR0ZXMsICRwYWxldHRlKSkge1xuICAgICRhbGxvd2VkOiBtYXAta2V5cygkcGFsZXR0ZXMpO1xuICAgIEBlcnJvciAnSW52YWxpZCBwYWxldHRlIG5hbWU6IGAjeyRwYWxldHRlfWAuIEFsbG93ZWQgcGFsZXR0ZXM6ICN7JGFsbG93ZWR9JztcbiAgfVxuXG4gIC8vIFZlcmlmeSB0aGUgdG9uZSBleGlzdHMgKHZhcmlhdGlvbilcbiAgQGlmIG5vdChtYXAtaGFzLWtleShtYXAtZ2V0KCRwYWxldHRlcywgJHBhbGV0dGUpLCAkdG9uZSkpIHtcbiAgICAkYWxsb3dlZDogbWFwLWtleXMobWFwLWdldCgkcGFsZXR0ZXMsICRwYWxldHRlKSk7XG4gICAgQGVycm9yICdJbnZhbGlkIHBhbGV0dGUgdG9uZTogYCN7JHRvbmV9YC4gQWxsb3dlZCB0b25lcyBmb3IgYCN7JHBhbGV0dGV9YCBhcmU6ICN7JGFsbG93ZWR9JztcbiAgfVxuXG4gIEByZXR1cm4gbWFwLWdldChtYXAtZ2V0KCRwYWxldHRlcywgJHBhbGV0dGUpLCAkdG9uZSk7XG59XG5cblxuXG4vKipcbiAqIFRoZSBtYXAgdGhlbWVzIHRvIGNvbG9yc1xuICovXG4kdGhlbWUtYW5kLWNvbG9yOiAoXG4gICdwcmltYXJ5JzogJGNvbG9yX19wcmltYXJ5LFxuICAnYWNjZW50JzogJGNvbG9yX19hY2NlbnQsXG4gICdlcnJvcic6ICRjb2xvcl9fZXJyb3IsXG4gICd3YXJuJzogJGNvbG9yX193YXJuLFxuICAnaGlnaGxpZ2h0JzogJGNvbG9yX19oaWdobGlnaHQsXG4gICdwdXJlJzogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgJ3V0aWxpdHknOiAkY29sb3JfX3V0aWxpdHlcbik7XG5cblxuLyoqXG4gKiBPdXRwdXQgY29uZGl0aW9uYWwgc3R5bGVzIGZvciB0aGUgcG9zc2libGUgdGhlbWVzXG4gKlxuICogQHBhcmFtICRwcm9wZXJ0eVxuICogIFRoZSBDU1MgcHJvcGVydHkgdGhhdCBzaG91bGQgYmUgY29sb3JlZC4gRGVmYXVsdDogJ2JhY2tncm91bmQtY29sb3InXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIHRoZW1lLWNvbG9yO1xuICogIEBpbmNsdWRlIHRoZW1lLWNvbG9yKCdjb2xvcicpO1xuICovXG5AbWl4aW4gdGhlbWUtY29sb3IoJHByb3BlcnR5OiAnYmFja2dyb3VuZC1jb2xvcicpIHtcbiAgLy8gVmVyaWZ5IGFuIGFsbG93ZWQgcHJvcGVydHkgd2FzIHBhc3NlZCBpblxuICBAaWYgbm90KCgkcHJvcGVydHkgPT0gYmFja2dyb3VuZC1jb2xvcikpIGFuZCBub3QoKCRwcm9wZXJ0eSA9PSBjb2xvcikpIHtcbiAgICBAZXJyb3IgJ1RoZSBgdGhlbWVfX2NvbG9yYCBtaXhpbiBvbmx5IGFjY2VwdHMgYGJhY2tncm91bmQtY29sb3JgIG9yIGBjb2xvcmAnO1xuICB9XG5cbiAgQGVhY2ggJGtleSwgJHZhbHVlIGluICR0aGVtZS1hbmQtY29sb3Ige1xuICAgIDo6bmctZGVlcCAudS10aGVtZS0tI3ska2V5fSAmIHtcbiAgICAgICZbZGlzYWJsZWRdIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogY29sb3IodXRpbGl0eSwgbGlnaHQpO1xuICAgICAgICBjb2xvcjogY29sb3IodXRpbGl0eSk7XG4gICAgICB9XG4gICAgICAjeyRwcm9wZXJ0eX06ICR2YWx1ZTtcblxuICAgICAgQGlmICgkcHJvcGVydHkgPT0gJ2JhY2tncm91bmQtY29sb3InKSBhbmQgKG5vdCgoJGtleSA9PSAncHVyZScpKSBhbmQgbm90KCgka2V5ID09ICdoaWdobGlnaHQnKSkpIHtcbiAgICAgICAgY29sb3I6ICRjb2xvcl9fcHVyZS0tbGlnaHQ7XG4gICAgICB9XG5cbiAgICAgIEBpZiAoJHByb3BlcnR5ID09ICdiYWNrZ3JvdW5kLWNvbG9yJykgYW5kICgka2V5ID09ICdoaWdobGlnaHQnKSB7XG4gICAgICAgIGNvbG9yOiAkY29sb3JfX3B1cmUtLWRhcms7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuLy8gc3R5bGVsaW50LWRpc2FibGUgdmFsdWUta2V5d29yZC1jYXNlXG5cbi8qKlxuICogRGVmaW5lIHRoZSBtYXRlcmlhbCBiYXNlZCBwcmltYXJ5IG1hcFxuICovXG4kdHMtbWF0ZXJpYWwtcHJpbWFyeTogKFxuICA1MDogJGNvbG9yX19wcmltYXJ5LS14bGlnaHQsXG4gIDEwMDogJGNvbG9yX19wcmltYXJ5LS1saWdodCxcbiAgMjAwOiAkY29sb3JfX3ByaW1hcnksXG4gIDMwMDogJGNvbG9yX19wcmltYXJ5LFxuICA0MDA6ICRjb2xvcl9fcHJpbWFyeSxcbiAgNTAwOiAkY29sb3JfX3ByaW1hcnksXG4gIDYwMDogJGNvbG9yX19wcmltYXJ5LFxuICA3MDA6ICRjb2xvcl9fcHJpbWFyeS0tZGFyayxcbiAgODAwOiAkY29sb3JfX3ByaW1hcnksXG4gIDkwMDogJGNvbG9yX19wcmltYXJ5LS14ZGFyayxcbiAgYTEwMDogJGNvbG9yX19wcmltYXJ5LFxuICBhMjAwOiAkY29sb3JfX3ByaW1hcnksXG4gIGE0MDA6ICRjb2xvcl9fcHJpbWFyeSxcbiAgYTcwMDogJGNvbG9yX19wcmltYXJ5LFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDEwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICAyMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgMzAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDQwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA1MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNjAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDcwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA4MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgOTAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGExMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTIwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICBhNDAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGE3MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gIClcbik7XG5cbi8qKlxuICogRGVmaW5lIHRoZSBtYXRlcmlhbCBiYXNlZCBhY2NlbnQgbWFwXG4gKi9cbiR0cy1tYXRlcmlhbC1hY2NlbnQ6IChcbiAgNTA6ICRjb2xvcl9fYWNjZW50LS14bGlnaHQsXG4gIDEwMDogJGNvbG9yX19hY2NlbnQtLWxpZ2h0LFxuICAyMDA6ICRjb2xvcl9fYWNjZW50LFxuICAzMDA6ICRjb2xvcl9fYWNjZW50LFxuICA0MDA6ICRjb2xvcl9fYWNjZW50LFxuICA1MDA6ICRjb2xvcl9fYWNjZW50LFxuICA2MDA6ICRjb2xvcl9fYWNjZW50LFxuICA3MDA6ICRjb2xvcl9fYWNjZW50LS1kYXJrLFxuICA4MDA6ICRjb2xvcl9fYWNjZW50LFxuICA5MDA6ICRjb2xvcl9fYWNjZW50LS14ZGFyayxcbiAgYTEwMDogJGNvbG9yX19hY2NlbnQsXG4gIGEyMDA6ICRjb2xvcl9fYWNjZW50LFxuICBhNDAwOiAkY29sb3JfX2FjY2VudCxcbiAgYTcwMDogJGNvbG9yX19hY2NlbnQsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgMTAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDIwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICAzMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNDAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDUwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA2MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNzAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDgwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA5MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTEwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICBhMjAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGE0MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTcwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgKVxuKTtcblxuLyoqXG4gKiBEZWZpbmUgdGhlIG1hdGVyaWFsIGJhc2VkIHdhcm4gbWFwXG4gKi9cbiR0cy1tYXRlcmlhbC13YXJuOiAoXG4gIDUwOiAkY29sb3JfX2Vycm9yLS1saWdodCxcbiAgMTAwOiAkY29sb3JfX2Vycm9yLS1saWdodCxcbiAgMjAwOiAkY29sb3JfX2Vycm9yLFxuICAzMDA6ICRjb2xvcl9fZXJyb3IsXG4gIDQwMDogJGNvbG9yX19lcnJvcixcbiAgNTAwOiAkY29sb3JfX2Vycm9yLFxuICA2MDA6ICRjb2xvcl9fZXJyb3IsXG4gIDcwMDogJGNvbG9yX19lcnJvci0tZGFyayxcbiAgODAwOiAkY29sb3JfX2Vycm9yLFxuICA5MDA6ICRjb2xvcl9fZXJyb3ItLWRhcmssXG4gIGExMDA6ICRjb2xvcl9fZXJyb3IsXG4gIGEyMDA6ICRjb2xvcl9fZXJyb3IsXG4gIGE0MDA6ICRjb2xvcl9fZXJyb3IsXG4gIGE3MDA6ICRjb2xvcl9fZXJyb3IsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgMTAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDIwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICAzMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNDAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDUwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA2MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNzAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDgwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA5MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTEwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICBhMjAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGE0MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTcwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgKVxuKTtcblxuLy8gc3R5bGVsaW50LWVuYWJsZSB2YWx1ZS1rZXl3b3JkLWNhc2VcblxuLyoqXG4gKiBUaGUgbWFwIG9mIGF2YWlsYWJsZSBjdXJzb3JzXG4gKi9cbiRnLWN1cnNvcnM6IChcbiAgLyogSW5kaWNhdGVzIGFuIGFsaWFzIG9yIGNvcHkgd2lsbCBiZSBtYWRlICovXG4gIGFsaWFzLFxuICAvKiBMZXQgdGhlIGJyb3dzZXIgZGVjaWRlICovXG4gIGF1dG8sXG4gIC8qIEluZGljYXRlcyBhYmlsaXR5IHRvIHJlc2l6ZSBhIHBpZWNlIG9mIHRoZSBkb207IG9mdGVuIGEgdGFibGUgY29sdW1uICovXG4gIGNvbC1yZXNpemUsXG4gIC8qIEluZGljYXRlcyBhYmlsaXR5IHRvIGNvcHkgKi9cbiAgY29weSxcbiAgLyogUmVzZXQgdG8gdGhlIGRlZmF1bHQgY3Vyc29yICovXG4gIGRlZmF1bHQsXG4gIC8qIEluZGljYXRlcyBoZWxwIGlzIGF2YWlsYWJsZSAqL1xuICBoZWxwLFxuICAvKiBJbmRpY2F0ZXMgdGhlIGFiaWxpdHkgdG8gZHJhZyBhbiBpdGVtICovXG4gIG1vdmUsXG4gIC8qIEluZGljYXRlcyBubyBhdmFpbGFibGUgaW50ZXJhY3Rpb24gKi9cbiAgbm90LWFsbG93ZWQsXG4gIC8qIEluZGljYXRlcyB0aGUgYWJpbGl0eSB0byBtb3ZlIE5vcnRoIGFuZCBTb3V0aCAqL1xuICBucy1yZXNpemUsXG4gIC8qIEluZGljYXRlcyBpbnRlcmFjdGlvbiAqL1xuICBwb2ludGVyLFxuICAvKiBJbmRpY2F0ZXMgdGV4dCBjb250cm9scyAqL1xuICB0ZXh0LFxuKTtcblxuXG4vKipcbiAqIFJldHJpZXZlIGEgc3BhY2UgZnJvbSB0aGUgJGctY3Vyc29ycyBsaXN0LlxuICpcbiAqIFRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhpcyBmdW5jdGlvbiBpcyB0byBlbmZvcmNlIHdoaWNoIGN1cnNvcnMgY2FuIGJlIHVzZWQuXG4gKlxuICogQHBhcmFtICR0eXBlXG4gKiAgVGhlIGN1cnNvciB2YWx1ZSB0byB1c2UuIERlZmF1bHQ6IGF1dG9cbiAqIEBleGFtcGxlXG4gKiAgY3Vyc29yOiBjdXJzb3IoKTtcbiAqICBjdXJzb3I6IGN1cnNvcihwb2ludGVyKTtcbiAqL1xuQGZ1bmN0aW9uIGN1cnNvcigkdHlwZTogYXV0bykge1xuICAkaW5kZXg6IGluZGV4KCRnLWN1cnNvcnMsICR0eXBlKTtcblxuICAvLyBWZXJpZnkgdGhlIHR5cGUgZXhpc3RzXG4gIEBpZiAoJGluZGV4ID09IG51bGwpIHtcbiAgICBAZXJyb3IgJ0ludmFsaWQgY3Vyc29yIHR5cGUgbmFtZTogYCN7JHR5cGV9YC4gQWxsb3dlZCB0eXBlczogXCIjeyRnLWN1cnNvcnN9XCInO1xuICB9XG5cbiAgQHJldHVybiBudGgoJGctY3Vyc29ycywgJGluZGV4KTtcbn1cblxuXG4vKipcbiAqIEluY2x1ZGUgYSBjdXN0b20gY3Vyc29yXG4gKlxuICogQHBhcmFtICR0eXBlXG4gKiAgVGhlIGN1cnNvciB2YWx1ZSB0byB1c2UuXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIGN1cnNvcjtcbiAqICBAaW5jbHVkZSBjdXJzb3IocG9pbnRlcik7XG4gKi9cbkBtaXhpbiBjdXJzb3IoJHR5cGUpIHtcbiAgY3Vyc29yOiBjdXJzb3IoJHR5cGUpO1xufVxuXG4vKipcbiAqIFB1cmUgLSBEYXJrXG4gKi9cbiRjb2xvcl9fcHVyZS0tZGFyazogIzMwMmQzNSAhZGVmYXVsdDtcblxuLyoqXG4gKiBQdXJlIC0gTGlnaHRcbiAqL1xuJGNvbG9yX19wdXJlLS1saWdodDogI2ZhZmFmYSAhZGVmYXVsdDtcblxuXG5cblxuLyoqXG4gKiBVdGlsaXR5IC0gRXh0cmEgRGFya1xuICovXG4kY29sb3JfX3V0aWxpdHktLXhkYXJrOiAjM2UzYzQzICFkZWZhdWx0O1xuXG4vKipcbiAqIFV0aWxpdHkgLSBEYXJrXG4gKi9cbiRjb2xvcl9fdXRpbGl0eS0tZGFyazogIzc1NzU3NSAhZGVmYXVsdDtcblxuLyoqXG4gKiBVdGlsaXR5XG4gKi9cbiRjb2xvcl9fdXRpbGl0eTogIzk5OSAhZGVmYXVsdDtcblxuLyoqXG4gKiBVdGlsaXR5IC0gTGlnaHRcbiAqL1xuJGNvbG9yX191dGlsaXR5LS1saWdodDogI2NlY2RkMSAhZGVmYXVsdDtcblxuLyoqXG4gKiBVdGlsaXR5IC0gRXh0cmEgTGlnaHRcbiAqL1xuJGNvbG9yX191dGlsaXR5LS14bGlnaHQ6ICNmMmYwZjcgIWRlZmF1bHQ7XG5cblxuLyoqXG4gKiBQcmltYXJ5IC0gRXh0cmEgRGFya1xuICovXG4kY29sb3JfX3ByaW1hcnktLXhkYXJrOiAjMGEzNzViICFkZWZhdWx0O1xuXG4vKipcbiAqIFByaW1hcnkgLSBEYXJrXG4gKi9cbiRjb2xvcl9fcHJpbWFyeS0tZGFyazogIzBjNDI3MSAhZGVmYXVsdDtcblxuLyoqXG4gKiBQcmltYXJ5XG4gKi9cbiRjb2xvcl9fcHJpbWFyeTogIzAwNTM4YSAhZGVmYXVsdDtcblxuLyoqXG4gKiBQcmltYXJ5IC0gTGlnaHRcbiAqL1xuJGNvbG9yX19wcmltYXJ5LS1saWdodDogIzE2NjZiMSAhZGVmYXVsdDtcblxuLyoqXG4gKiBQcmltYXJ5IC0geExpZ2h0XG4gKi9cbiRjb2xvcl9fcHJpbWFyeS0teGxpZ2h0OiAjMTc3N2I2ICFkZWZhdWx0O1xuXG5cbi8qKlxuICogQWNjZW50IC0gRXh0cmEgRGFya1xuICovXG4kY29sb3JfX2FjY2VudC0teGRhcms6ICMyYjY3M2YgIWRlZmF1bHQ7XG5cbi8qKlxuICogQWNjZW50IC0gRGFya1xuICovXG4kY29sb3JfX2FjY2VudC0tZGFyazogIzMxNzQ0OCAhZGVmYXVsdDtcblxuLyoqXG4gKiBBY2NlbnRcbiAqL1xuJGNvbG9yX19hY2NlbnQ6ICMyZjg1NGQgIWRlZmF1bHQ7XG5cbi8qKlxuICogQWNjZW50IC0gTGlnaHRcbiAqL1xuJGNvbG9yX19hY2NlbnQtLWxpZ2h0OiAjM2I5YjVjICFkZWZhdWx0O1xuXG4vKipcbiAqIEFjY2VudCAtIHhMaWdodFxuICovXG4kY29sb3JfX2FjY2VudC0teGxpZ2h0OiBsaWdodGVuKCRjb2xvcl9fYWNjZW50LCA2MCUpICFkZWZhdWx0O1xuXG5cblxuXG4vKipcbiAqIEVycm9yIC0gRGFya1xuICovXG4kY29sb3JfX2Vycm9yLS1kYXJrOiAjYjU1OTQ5ICFkZWZhdWx0O1xuXG4vKipcbiAqIEVycm9yXG4gKi9cbiRjb2xvcl9fZXJyb3I6ICNjODYwNGQgIWRlZmF1bHQ7XG5cbi8qKlxuICogRXJyb3IgLSBMaWdodFxuICovXG4kY29sb3JfX2Vycm9yLS1saWdodDogI2Q3NmM1OSAhZGVmYXVsdDtcblxuXG4vKipcbiAqIFdhcm4gLSBEYXJrXG4gKi9cbiRjb2xvcl9fd2Fybi0tZGFyazogI2NjOWY0NSAhZGVmYXVsdDtcblxuLyoqXG4gKiBXYXJuXG4gKi9cbiRjb2xvcl9fd2FybjogI2RlYTgzYiAhZGVmYXVsdDtcblxuLyoqXG4gKiBXYXJuIC0gTGlnaHRcbiAqL1xuJGNvbG9yX193YXJuLS1saWdodDogI2U4YjU1MCAhZGVmYXVsdDtcblxuXG4vKipcbiAqIEhpZ2hsaWdodCAtIERhcmtcbiAqL1xuJGNvbG9yX19oaWdobGlnaHQtLWRhcms6ICNkZGQ0NTUgIWRlZmF1bHQ7XG5cbi8qKlxuICogSGlnaGxpZ2h0XG4gKi9cbiRjb2xvcl9faGlnaGxpZ2h0OiAjZWZlNTU3ICFkZWZhdWx0O1xuXG4vKipcbiAqIEhpZ2hsaWdodCAtIExpZ2h0XG4gKi9cbiRjb2xvcl9faGlnaGxpZ2h0LS1saWdodDogI2Y2ZWY4YiAhZGVmYXVsdDtcblxuXG4vKipcbiAqIFRoZSBtYXAgb2YgY29sb3JzXG4gKlxuICogTm90ZTogQ3VycmVudGx5LCB3YXJuIGFuZCBlcnJvciBhcmUgdGhlIHNhbWUgY29sb3IgaW4gdGhlICRwYWxldHRlcyBtYXAuIE1vcmUgd29yayBuZWVkcyB0byBiZSBkb25lIHRvIHNvbGlkaWZ5IG91ciBwYWxldHRlLlxuICovXG4kcGFsZXR0ZXM6IChcbiAgcHJpbWFyeTogKFxuICAgIHhsaWdodDogJGNvbG9yX19wcmltYXJ5LS14bGlnaHQsXG4gICAgbGlnaHQ6ICRjb2xvcl9fcHJpbWFyeS0tbGlnaHQsXG4gICAgYmFzZTogJGNvbG9yX19wcmltYXJ5LFxuICAgIGRhcms6ICRjb2xvcl9fcHJpbWFyeS0tZGFyayxcbiAgICB4ZGFyazogJGNvbG9yX19wcmltYXJ5LS14ZGFya1xuICApLFxuICBhY2NlbnQ6IChcbiAgICB4bGlnaHQ6ICRjb2xvcl9fYWNjZW50LS14bGlnaHQsXG4gICAgbGlnaHQ6ICRjb2xvcl9fYWNjZW50LS1saWdodCxcbiAgICBiYXNlOiAkY29sb3JfX2FjY2VudCxcbiAgICBkYXJrOiAkY29sb3JfX2FjY2VudC0tZGFyayxcbiAgICB4ZGFyazogJGNvbG9yX19hY2NlbnQtLXhkYXJrXG4gICksXG4gIGVycm9yOiAoXG4gICAgbGlnaHQ6ICRjb2xvcl9fZXJyb3ItLWxpZ2h0LFxuICAgIGJhc2U6ICRjb2xvcl9fZXJyb3IsXG4gICAgZGFyazogJGNvbG9yX19lcnJvci0tZGFya1xuICApLFxuICB3YXJuOiAoXG4gICAgbGlnaHQ6ICRjb2xvcl9fZXJyb3ItLWxpZ2h0LFxuICAgIGJhc2U6ICRjb2xvcl9fZXJyb3IsXG4gICAgZGFyazogJGNvbG9yX19lcnJvci0tZGFya1xuICApLFxuICBoaWdobGlnaHQ6IChcbiAgICBsaWdodDogJGNvbG9yX19oaWdobGlnaHQtLWxpZ2h0LFxuICAgIGJhc2U6ICRjb2xvcl9faGlnaGxpZ2h0LFxuICAgIGRhcms6ICRjb2xvcl9faGlnaGxpZ2h0LS1kYXJrXG4gICksXG4gIHB1cmU6IChcbiAgICBkYXJrOiAkY29sb3JfX3B1cmUtLWRhcmssXG4gICAgYmFzZTogJGNvbG9yX19wdXJlLS1saWdodFxuICApLFxuICB1dGlsaXR5OiAoXG4gICAgeGxpZ2h0OiAkY29sb3JfX3V0aWxpdHktLXhsaWdodCxcbiAgICBsaWdodDogJGNvbG9yX191dGlsaXR5LS1saWdodCxcbiAgICBiYXNlOiAkY29sb3JfX3V0aWxpdHksXG4gICAgZGFyazogJGNvbG9yX191dGlsaXR5LS1kYXJrLFxuICAgIHhkYXJrOiAkY29sb3JfX3V0aWxpdHktLXhkYXJrXG4gIClcbik7XG5cblxuLyoqXG4gKiBSZXRyaWV2ZSBhIGNvbG9yIGZyb20gdGhlIGNvbG9ycyBtYXBcbiAqXG4gKiBAcGFyYW0gJHBhbGV0dGVcbiAqICBUaGUgcGFsZXR0ZSB0byB1c2UgZnJvbSB0aGUgbWFwXG4gKiBAcGFyYW0gJHRvbmVcbiAqICBUaGUgdG9uZSB0byB1c2UgZnJvbSB0aGUgc2VsZWN0ZWQgbWFwLiBEZWZhdWx0OiBiYXNlXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIGNvbG9yKHByaW1hcnkpO1xuICogIEBpbmNsdWRlIGNvbG9yKGFjY2VudCwgbGlnaHQpO1xuICovXG5AZnVuY3Rpb24gY29sb3IoJHBhbGV0dGUsICR0b25lOiAnYmFzZScpIHtcbiAgLy8gVmVyaWZ5IHRoZSBwYWxldHRlIGV4aXN0cyAoY29sb3IpXG4gIEBpZiBub3QobWFwLWhhcy1rZXkoJHBhbGV0dGVzLCAkcGFsZXR0ZSkpIHtcbiAgICAkYWxsb3dlZDogbWFwLWtleXMoJHBhbGV0dGVzKTtcbiAgICBAZXJyb3IgJ0ludmFsaWQgcGFsZXR0ZSBuYW1lOiBgI3skcGFsZXR0ZX1gLiBBbGxvd2VkIHBhbGV0dGVzOiAjeyRhbGxvd2VkfSc7XG4gIH1cblxuICAvLyBWZXJpZnkgdGhlIHRvbmUgZXhpc3RzICh2YXJpYXRpb24pXG4gIEBpZiBub3QobWFwLWhhcy1rZXkobWFwLWdldCgkcGFsZXR0ZXMsICRwYWxldHRlKSwgJHRvbmUpKSB7XG4gICAgJGFsbG93ZWQ6IG1hcC1rZXlzKG1hcC1nZXQoJHBhbGV0dGVzLCAkcGFsZXR0ZSkpO1xuICAgIEBlcnJvciAnSW52YWxpZCBwYWxldHRlIHRvbmU6IGAjeyR0b25lfWAuIEFsbG93ZWQgdG9uZXMgZm9yIGAjeyRwYWxldHRlfWAgYXJlOiAjeyRhbGxvd2VkfSc7XG4gIH1cblxuICBAcmV0dXJuIG1hcC1nZXQobWFwLWdldCgkcGFsZXR0ZXMsICRwYWxldHRlKSwgJHRvbmUpO1xufVxuXG5cblxuLyoqXG4gKiBUaGUgbWFwIHRoZW1lcyB0byBjb2xvcnNcbiAqL1xuJHRoZW1lLWFuZC1jb2xvcjogKFxuICAncHJpbWFyeSc6ICRjb2xvcl9fcHJpbWFyeSxcbiAgJ2FjY2VudCc6ICRjb2xvcl9fYWNjZW50LFxuICAnZXJyb3InOiAkY29sb3JfX2Vycm9yLFxuICAnd2Fybic6ICRjb2xvcl9fd2FybixcbiAgJ2hpZ2hsaWdodCc6ICRjb2xvcl9faGlnaGxpZ2h0LFxuICAncHVyZSc6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICd1dGlsaXR5JzogJGNvbG9yX191dGlsaXR5XG4pO1xuXG5cbi8qKlxuICogT3V0cHV0IGNvbmRpdGlvbmFsIHN0eWxlcyBmb3IgdGhlIHBvc3NpYmxlIHRoZW1lc1xuICpcbiAqIEBwYXJhbSAkcHJvcGVydHlcbiAqICBUaGUgQ1NTIHByb3BlcnR5IHRoYXQgc2hvdWxkIGJlIGNvbG9yZWQuIERlZmF1bHQ6ICdiYWNrZ3JvdW5kLWNvbG9yJ1xuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSB0aGVtZS1jb2xvcjtcbiAqICBAaW5jbHVkZSB0aGVtZS1jb2xvcignY29sb3InKTtcbiAqL1xuQG1peGluIHRoZW1lLWNvbG9yKCRwcm9wZXJ0eTogJ2JhY2tncm91bmQtY29sb3InKSB7XG4gIC8vIFZlcmlmeSBhbiBhbGxvd2VkIHByb3BlcnR5IHdhcyBwYXNzZWQgaW5cbiAgQGlmIG5vdCgoJHByb3BlcnR5ID09IGJhY2tncm91bmQtY29sb3IpKSBhbmQgbm90KCgkcHJvcGVydHkgPT0gY29sb3IpKSB7XG4gICAgQGVycm9yICdUaGUgYHRoZW1lX19jb2xvcmAgbWl4aW4gb25seSBhY2NlcHRzIGBiYWNrZ3JvdW5kLWNvbG9yYCBvciBgY29sb3JgJztcbiAgfVxuXG4gIEBlYWNoICRrZXksICR2YWx1ZSBpbiAkdGhlbWUtYW5kLWNvbG9yIHtcbiAgICA6Om5nLWRlZXAgLnUtdGhlbWUtLSN7JGtleX0gJiB7XG4gICAgICAmW2Rpc2FibGVkXSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGNvbG9yKHV0aWxpdHksIGxpZ2h0KTtcbiAgICAgICAgY29sb3I6IGNvbG9yKHV0aWxpdHkpO1xuICAgICAgfVxuICAgICAgI3skcHJvcGVydHl9OiAkdmFsdWU7XG5cbiAgICAgIEBpZiAoJHByb3BlcnR5ID09ICdiYWNrZ3JvdW5kLWNvbG9yJykgYW5kIChub3QoKCRrZXkgPT0gJ3B1cmUnKSkgYW5kIG5vdCgoJGtleSA9PSAnaGlnaGxpZ2h0JykpKSB7XG4gICAgICAgIGNvbG9yOiAkY29sb3JfX3B1cmUtLWxpZ2h0O1xuICAgICAgfVxuXG4gICAgICBAaWYgKCRwcm9wZXJ0eSA9PSAnYmFja2dyb3VuZC1jb2xvcicpIGFuZCAoJGtleSA9PSAnaGlnaGxpZ2h0Jykge1xuICAgICAgICBjb2xvcjogJGNvbG9yX19wdXJlLS1kYXJrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHZhbHVlLWtleXdvcmQtY2FzZVxuXG4vKipcbiAqIERlZmluZSB0aGUgbWF0ZXJpYWwgYmFzZWQgcHJpbWFyeSBtYXBcbiAqL1xuJHRzLW1hdGVyaWFsLXByaW1hcnk6IChcbiAgNTA6ICRjb2xvcl9fcHJpbWFyeS0teGxpZ2h0LFxuICAxMDA6ICRjb2xvcl9fcHJpbWFyeS0tbGlnaHQsXG4gIDIwMDogJGNvbG9yX19wcmltYXJ5LFxuICAzMDA6ICRjb2xvcl9fcHJpbWFyeSxcbiAgNDAwOiAkY29sb3JfX3ByaW1hcnksXG4gIDUwMDogJGNvbG9yX19wcmltYXJ5LFxuICA2MDA6ICRjb2xvcl9fcHJpbWFyeSxcbiAgNzAwOiAkY29sb3JfX3ByaW1hcnktLWRhcmssXG4gIDgwMDogJGNvbG9yX19wcmltYXJ5LFxuICA5MDA6ICRjb2xvcl9fcHJpbWFyeS0teGRhcmssXG4gIGExMDA6ICRjb2xvcl9fcHJpbWFyeSxcbiAgYTIwMDogJGNvbG9yX19wcmltYXJ5LFxuICBhNDAwOiAkY29sb3JfX3ByaW1hcnksXG4gIGE3MDA6ICRjb2xvcl9fcHJpbWFyeSxcbiAgY29udHJhc3Q6IChcbiAgICA1MDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICAxMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgMjAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDMwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA0MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNTAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDYwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA3MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgODAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDkwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICBhMTAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGEyMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTQwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICBhNzAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICApXG4pO1xuXG4vKipcbiAqIERlZmluZSB0aGUgbWF0ZXJpYWwgYmFzZWQgYWNjZW50IG1hcFxuICovXG4kdHMtbWF0ZXJpYWwtYWNjZW50OiAoXG4gIDUwOiAkY29sb3JfX2FjY2VudC0teGxpZ2h0LFxuICAxMDA6ICRjb2xvcl9fYWNjZW50LS1saWdodCxcbiAgMjAwOiAkY29sb3JfX2FjY2VudCxcbiAgMzAwOiAkY29sb3JfX2FjY2VudCxcbiAgNDAwOiAkY29sb3JfX2FjY2VudCxcbiAgNTAwOiAkY29sb3JfX2FjY2VudCxcbiAgNjAwOiAkY29sb3JfX2FjY2VudCxcbiAgNzAwOiAkY29sb3JfX2FjY2VudC0tZGFyayxcbiAgODAwOiAkY29sb3JfX2FjY2VudCxcbiAgOTAwOiAkY29sb3JfX2FjY2VudC0teGRhcmssXG4gIGExMDA6ICRjb2xvcl9fYWNjZW50LFxuICBhMjAwOiAkY29sb3JfX2FjY2VudCxcbiAgYTQwMDogJGNvbG9yX19hY2NlbnQsXG4gIGE3MDA6ICRjb2xvcl9fYWNjZW50LFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDEwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICAyMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgMzAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDQwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA1MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNjAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDcwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA4MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgOTAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGExMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTIwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICBhNDAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGE3MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gIClcbik7XG5cbi8qKlxuICogRGVmaW5lIHRoZSBtYXRlcmlhbCBiYXNlZCB3YXJuIG1hcFxuICovXG4kdHMtbWF0ZXJpYWwtd2FybjogKFxuICA1MDogJGNvbG9yX19lcnJvci0tbGlnaHQsXG4gIDEwMDogJGNvbG9yX19lcnJvci0tbGlnaHQsXG4gIDIwMDogJGNvbG9yX19lcnJvcixcbiAgMzAwOiAkY29sb3JfX2Vycm9yLFxuICA0MDA6ICRjb2xvcl9fZXJyb3IsXG4gIDUwMDogJGNvbG9yX19lcnJvcixcbiAgNjAwOiAkY29sb3JfX2Vycm9yLFxuICA3MDA6ICRjb2xvcl9fZXJyb3ItLWRhcmssXG4gIDgwMDogJGNvbG9yX19lcnJvcixcbiAgOTAwOiAkY29sb3JfX2Vycm9yLS1kYXJrLFxuICBhMTAwOiAkY29sb3JfX2Vycm9yLFxuICBhMjAwOiAkY29sb3JfX2Vycm9yLFxuICBhNDAwOiAkY29sb3JfX2Vycm9yLFxuICBhNzAwOiAkY29sb3JfX2Vycm9yLFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDEwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICAyMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgMzAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDQwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA1MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNjAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDcwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA4MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgOTAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGExMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTIwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICBhNDAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGE3MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gIClcbik7XG5cbi8vIHN0eWxlbGludC1lbmFibGUgdmFsdWUta2V5d29yZC1jYXNlXG5cbi8qKlxuICogVGhlIG1hcCBvZiBhdmFpbGFibGUgY3Vyc29yc1xuICovXG4kZy1jdXJzb3JzOiAoXG4gIC8qIEluZGljYXRlcyBhbiBhbGlhcyBvciBjb3B5IHdpbGwgYmUgbWFkZSAqL1xuICBhbGlhcyxcbiAgLyogTGV0IHRoZSBicm93c2VyIGRlY2lkZSAqL1xuICBhdXRvLFxuICAvKiBJbmRpY2F0ZXMgYWJpbGl0eSB0byByZXNpemUgYSBwaWVjZSBvZiB0aGUgZG9tOyBvZnRlbiBhIHRhYmxlIGNvbHVtbiAqL1xuICBjb2wtcmVzaXplLFxuICAvKiBJbmRpY2F0ZXMgYWJpbGl0eSB0byBjb3B5ICovXG4gIGNvcHksXG4gIC8qIFJlc2V0IHRvIHRoZSBkZWZhdWx0IGN1cnNvciAqL1xuICBkZWZhdWx0LFxuICAvKiBJbmRpY2F0ZXMgaGVscCBpcyBhdmFpbGFibGUgKi9cbiAgaGVscCxcbiAgLyogSW5kaWNhdGVzIHRoZSBhYmlsaXR5IHRvIGRyYWcgYW4gaXRlbSAqL1xuICBtb3ZlLFxuICAvKiBJbmRpY2F0ZXMgbm8gYXZhaWxhYmxlIGludGVyYWN0aW9uICovXG4gIG5vdC1hbGxvd2VkLFxuICAvKiBJbmRpY2F0ZXMgdGhlIGFiaWxpdHkgdG8gbW92ZSBOb3J0aCBhbmQgU291dGggKi9cbiAgbnMtcmVzaXplLFxuICAvKiBJbmRpY2F0ZXMgaW50ZXJhY3Rpb24gKi9cbiAgcG9pbnRlcixcbiAgLyogSW5kaWNhdGVzIHRleHQgY29udHJvbHMgKi9cbiAgdGV4dCxcbik7XG5cblxuLyoqXG4gKiBSZXRyaWV2ZSBhIHNwYWNlIGZyb20gdGhlICRnLWN1cnNvcnMgbGlzdC5cbiAqXG4gKiBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdG8gZW5mb3JjZSB3aGljaCBjdXJzb3JzIGNhbiBiZSB1c2VkLlxuICpcbiAqIEBwYXJhbSAkdHlwZVxuICogIFRoZSBjdXJzb3IgdmFsdWUgdG8gdXNlLiBEZWZhdWx0OiBhdXRvXG4gKiBAZXhhbXBsZVxuICogIGN1cnNvcjogY3Vyc29yKCk7XG4gKiAgY3Vyc29yOiBjdXJzb3IocG9pbnRlcik7XG4gKi9cbkBmdW5jdGlvbiBjdXJzb3IoJHR5cGU6IGF1dG8pIHtcbiAgJGluZGV4OiBpbmRleCgkZy1jdXJzb3JzLCAkdHlwZSk7XG5cbiAgLy8gVmVyaWZ5IHRoZSB0eXBlIGV4aXN0c1xuICBAaWYgKCRpbmRleCA9PSBudWxsKSB7XG4gICAgQGVycm9yICdJbnZhbGlkIGN1cnNvciB0eXBlIG5hbWU6IGAjeyR0eXBlfWAuIEFsbG93ZWQgdHlwZXM6IFwiI3skZy1jdXJzb3JzfVwiJztcbiAgfVxuXG4gIEByZXR1cm4gbnRoKCRnLWN1cnNvcnMsICRpbmRleCk7XG59XG5cblxuLyoqXG4gKiBJbmNsdWRlIGEgY3VzdG9tIGN1cnNvclxuICpcbiAqIEBwYXJhbSAkdHlwZVxuICogIFRoZSBjdXJzb3IgdmFsdWUgdG8gdXNlLlxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSBjdXJzb3I7XG4gKiAgQGluY2x1ZGUgY3Vyc29yKHBvaW50ZXIpO1xuICovXG5AbWl4aW4gY3Vyc29yKCR0eXBlKSB7XG4gIGN1cnNvcjogY3Vyc29yKCR0eXBlKTtcbn1cblxuLyoqXG4gKiBUaGUgc3BhY2luZyBkZWZhdWx0XG4gKlxuICogQHNlY3Rpb24gU3BhY2luZ1xuICovXG4kZy1zcGFjaW5nOiAxNnB4ICFkZWZhdWx0O1xuXG5cbi8qKlxuICogVGhlIG1hcCBvZiBsYXlvdXQgc3BhY2luZ3NcbiAqXG4gKiBTbWFsbDogMTIsIDgsIDRcbiAqIEJhc2U6IDE2XG4gKiBMYXJnZTogMjQsIDMyLCA0MCwgNDgsIDU2LCA3MiwgOTZcbiAqXG4gKiBAc2VjdGlvbiBTcGFjaW5nXG4gKi9cbiRnLXNwYWNpbmdzOiAoXG4gIHNtYWxsOiAgKFxuICAgIDI6IGZsb29yKCRnLXNwYWNpbmcgLyA0KSxcbiAgICAxOiBmbG9vcigkZy1zcGFjaW5nIC8gMiksXG4gICAgMDogZmxvb3IoJGctc3BhY2luZyAtIDQpLFxuICApLFxuICBkZWZhdWx0OiAoXG4gICAgMDogJGctc3BhY2luZyxcbiAgKSxcbiAgbGFyZ2U6IChcbiAgICAwOiBjZWlsKCRnLXNwYWNpbmcgLyAyICogMyksXG4gICAgMTogY2VpbCgkZy1zcGFjaW5nIC8gMiAqIDQpLFxuICAgIDI6IGNlaWwoJGctc3BhY2luZyAvIDIgKiA1KSxcbiAgICAzOiBjZWlsKCRnLXNwYWNpbmcgLyAyICogNiksXG4gICAgNDogY2VpbCgkZy1zcGFjaW5nIC8gMiAqIDcpLFxuICAgIDU6IGNlaWwoJGctc3BhY2luZyAvIDIgKiA5KSxcbiAgICA2OiBjZWlsKCRnLXNwYWNpbmcgLyAyICogMTIpLFxuICApXG4pO1xuXG5cbi8qKlxuICogUmV0cmlldmUgYSBzcGFjZSBmcm9tIHRoZSAkZy1zcGFjaW5ncyBtYXBcbiAqXG4gKiBAcGFyYW0gJHR5cGVcbiAqICBUaGUgc3BhY2luZyBtYXAgdG8gdXNlLiBEZWZhdWx0OiBkZWZhdWx0XG4gKiBAcGFyYW0gJHNpemVcbiAqICBUaGUgdmFsdWUgZGVzaXJlZCBmcm9tIHRoZSBtYXAuIERlZmF1bHQ6IDBcbiAqIEBleGFtcGxlXG4gKiAgcGFkZGluZzogc3BhY2luZyhkZWZhdWx0KTtcbiAqICBwYWRkaW5nOiBzcGFjaW5nKGxhcmdlKTtcbiAqICBwYWRkaW5nOiBzcGFjaW5nKGxhcmdlLCA0KTtcbiAqL1xuQGZ1bmN0aW9uIHNwYWNpbmcoJHR5cGU6IGRlZmF1bHQsICRzaXplOiAwKSB7XG4gIC8vIFZlcmlmeSB0aGUgdHlwZSBleGlzdHNcbiAgQGlmIG5vdChtYXAtaGFzLWtleSgkZy1zcGFjaW5ncywgJHR5cGUpKSB7XG4gICAgJGFsbG93ZWQtdHlwZXM6IG1hcC1rZXlzKCRnLXNwYWNpbmdzKTtcbiAgICBAZXJyb3IgJ0ludmFsaWQgc3BhY2luZyB0eXBlIG5hbWU6IGAjeyR0eXBlfWAuIEFsbG93ZWQgdHlwZTogI3skYWxsb3dlZC10eXBlc30nO1xuICB9XG5cbiAgLy8gVmVyaWZ5IHRoZSBzaXplXG4gIEBpZiBub3QobWFwLWhhcy1rZXkobWFwLWdldCgkZy1zcGFjaW5ncywgJHR5cGUpLCAkc2l6ZSkpIHtcbiAgICAkYWxsb3dlZC1zaXplczogbWFwLWtleXMobWFwLWdldCgkZy1zcGFjaW5ncywgJHR5cGUpKTtcbiAgICBAZXJyb3IgJ0ludmFsaWQgc2l6ZTogYCN7JHNpemV9YC4gQWxsb3dlZCBzaXplcyBmb3IgYCN7JHR5cGV9YCBhcmU6ICN7JGFsbG93ZWQtc2l6ZXN9JztcbiAgfVxuXG4gIEByZXR1cm4gbWFwLWdldChtYXAtZ2V0KCRnLXNwYWNpbmdzLCAkdHlwZSksICRzaXplKTtcbn1cblxuXG5cbi8vIERyYWdnYWJsZSBpdGVtXG4uY2RrLWRyYWcge1xuICAvLyBTZXQgdXAgZm9yIGRyYWcgaW5kaWNhdG9yXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAvLyBBbmltYXRlIGl0ZW1zIGFzIHRoZXkgYXJlIGRyYWdnZWRcbiAgJjpub3QoLmNkay1kcmFnLXBsYWNlaG9sZGVyKSB7XG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDI1MG1zIGN1YmljLWJlemllcigwLCAwLCAuMiwgMSk7XG4gIH1cblxuICAuY2RrLWRyYWctaGFuZGxlIHtcbiAgICBjb2xvcjogY29sb3IodXRpbGl0eSwgbGlnaHQpO1xuICAgIGN1cnNvcjogY3Vyc29yKG5zLXJlc2l6ZSk7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiBzcGFjaW5nKHNtYWxsLCAxKTtcbiAgfVxuXG4gIC8vIENvbnRhaW5lciBmb3IgaXRlbSBjdXJyZW50bHkgYmVpbmcgbW92ZWRcbiAgJi5jZGstZHJhZy1wcmV2aWV3IHtcbiAgICAvKiBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcGx1Z2luL3N0eWxlbGludC1uby1pbmRpc3Rpbmd1aXNoYWJsZS1jb2xvcnMgKi9cbiAgICAtLXNoYWRvdzpcbiAgICAgIDAgNXB4IDVweCAtM3B4IHJnYmEoMCwgMCwgMCwgLjIpLFxuICAgICAgMCA4cHggMTBweCAxcHggcmdiYSgwLCAwLCAwLCAuMTQpLFxuICAgICAgMCAzcHggMTRweCAycHggcmdiYSgwLCAwLCAwLCAuMTIpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IGNvbG9yKHB1cmUpO1xuICAgIGJveC1zaGFkb3c6IHZhcigtLXNoYWRvdyk7XG4gICAgbWluLWhlaWdodDogNTBweDtcbiAgICAvLyBOT1RFOiBTaW5jZSB0aGUgd2lkdGggaXMgZHluYW1pY2FsbHkgc2V0IGJ5IHRoZSBDREssIHdlIHplcm8gb3V0IHRoZSBwYWRkaW5nIGhlcmUgYW5kIGZha2UgaXQgd2l0aCBsZWZ0IG1hcmdpbiBiZWxvdy5cbiAgICAvKiBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVjbGFyYXRpb24tbm8taW1wb3J0YW50ICovXG4gICAgcGFkZGluZzogMCAhaW1wb3J0YW50O1xuXG4gICAgLmMtY2hlY2tib3gge1xuICAgICAgbWFyZ2luLWxlZnQ6IHNwYWNpbmcoZGVmYXVsdCk7XG4gICAgfVxuICB9XG59XG5cbi8vIENvbnRhaW5lciB0aGF0IHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgZHJvcCBsb2NhdGlvblxuLmNkay1kcmFnLXBsYWNlaG9sZGVyIHtcbiAgJHByaW1hcnk6ICN7Y29sb3IocHJpbWFyeSl9O1xuICAvLyBUT0RPOiBGaXggaGFyZGNvZGVkIGNvbG9ycyBvbmNlIHRoZSBjb2xvciB1cGRhdGUgaGFwcGVuczogaHR0cHM6Ly9naXRodWIuY29tL0dldFRlcm1pbnVzL3Rlcm1pbnVzLXVpL2lzc3Vlcy85NjZcbiAgLS1kcm9wLWJnOiAjY2NlOGQ1O1xuICAtLWRyb3AtYm9yZGVyOiAjN2ZkMDljO1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1kcm9wLWJnKTtcbiAgYm9yZGVyOiAycHggZG90dGVkIHZhcigtLWRyb3AtYm9yZGVyKTtcbiAgLy8gTk9URTogVGhpcyBpcyB0aGUgY3Vyc29yIHRoZSB1c2VyIHdpbGwgc2VlIHdoZW4gZHJhZ2dpbmcgYW4gaXRlbSAodGhlIGRyYWcgcHJldmlldyBoYXMgYHBvaW50ZXItZXZlbnRzOiBub25lYClcbiAgY3Vyc29yOiBjdXJzb3IobnMtcmVzaXplKTtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDI1MG1zIGN1YmljLWJlemllcigwLCAwLCAuMiwgMSk7XG59XG5cbi8qKlxuICogQSBtaXhpbiB0byBjb3JyZWN0bHkgbmVzdCBwbGFjZWhvbGRlciBzdHlsZXNcbiAqXG4gKiBAZXhhbXBsZVxuICogIGlucHV0LXBsYWNlaG9sZGVyIHtcbiAqICAgIHRyYW5zaXRpb246IGFsbCAyMDBtcyBlYXNlO1xuICogIH1cbiAqL1xuQG1peGluIGlucHV0LXBsYWNlaG9sZGVyIHtcbiAgJjo6cGxhY2Vob2xkZXIge1xuICAgIEBjb250ZW50O1xuICB9XG5cbiAgJjo6LW1vei1wbGFjZWhvbGRlciB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cblxuICAmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgICBAY29udGVudDtcbiAgfVxuXG4gICY6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG5cblxuLyoqXG4gKiBBIG1peGluIHRvIGNvcnJlY3RseSBuZXN0IHBsYWNlaG9sZGVyIHN0eWxlc1xuICpcbiAqIEBleGFtcGxlXG4gKiAgaW5wdXQtcGxhY2Vob2xkZXIge1xuICogICAgdHJhbnNpdGlvbjogYWxsIDIwMG1zIGVhc2U7XG4gKiAgfVxuICovXG5AbWl4aW4gaW5wdXQtcGxhY2Vob2xkZXIge1xuICAmOjpwbGFjZWhvbGRlciB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cblxuICAmOjotbW96LXBsYWNlaG9sZGVyIHtcbiAgICBAY29udGVudDtcbiAgfVxuXG4gICY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xuICAgIEBjb250ZW50O1xuICB9XG5cbiAgJjotbXMtaW5wdXQtcGxhY2Vob2xkZXIge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cblxuLyoqXG4gKiBDZW50ZXIgY2hpbGQgY29udGVudCB2ZXJ0aWNhbGx5IGFuZCBob3Jpem9udGFsbHlcbiAqXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIGNlbnRlci1jb250ZW50O1xuICovXG5AbWl4aW4gY2VudGVyLWNvbnRlbnQge1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiBvZiBlYWNoIGRpcmVjdGlvbiBpbiBhIGxpc3RcbiAqXG4gKiBAcGFyYW0gJGRpcmVjdGlvbnNcbiAqICBMaXN0IG9mIGluaXRpYWwgZGlyZWN0aW9uc1xuICogQGV4YW1wbGVcbiAqICBvcHBvc2l0ZS1kaXJlY3Rpb24odG9wKTtcbiAqICBvcHBvc2l0ZS1kaXJlY3Rpb24obGVmdCwgYm90dG9tKTtcbiAqL1xuQGZ1bmN0aW9uIG9wcG9zaXRlLWRpcmVjdGlvbigkZGlyZWN0aW9ucykge1xuICAkb3Bwb3NpdGUtZGlyZWN0aW9uczogKCk7XG4gICRkaXJlY3Rpb24tbWFwOiAoXG4gICAgJ3RvcCc6ICdib3R0b20nLFxuICAgICdyaWdodCc6ICdsZWZ0JyxcbiAgICAnYm90dG9tJzogJ3RvcCcsXG4gICAgJ2xlZnQnOiAncmlnaHQnLFxuICAgICdjZW50ZXInOiAnY2VudGVyJyxcbiAgICAnbHRyJzogJ3J0bCcsXG4gICAgJ3J0bCc6ICdsdHInXG4gICk7XG5cbiAgQGVhY2ggJGRpcmVjdGlvbiBpbiAkZGlyZWN0aW9ucyB7XG4gICAgJGRpcmVjdGlvbjogdG8tbG93ZXItY2FzZSgkZGlyZWN0aW9uKTtcblxuICAgIEBpZiBtYXAtaGFzLWtleSgkZGlyZWN0aW9uLW1hcCwgJGRpcmVjdGlvbikge1xuICAgICAgJG9wcG9zaXRlLWRpcmVjdGlvbnM6IGFwcGVuZCgkb3Bwb3NpdGUtZGlyZWN0aW9ucywgdW5xdW90ZShtYXAtZ2V0KCRkaXJlY3Rpb24tbWFwLCAkZGlyZWN0aW9uKSkpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgQGVycm9yICdObyBvcHBvc2l0ZSBkaXJlY3Rpb24gY2FuIGJlIGZvdW5kIGZvciBgI3skZGlyZWN0aW9ufWAuIERpcmVjdGlvbiBvbWl0dGVkLic7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkb3Bwb3NpdGUtZGlyZWN0aW9ucztcbn1cblxuLyoqXG4gKiBQc2V1ZG8gZWxlbWVudCBiYXNlIHN0eWxlc1xuICpcbiAqIEBwYXJhbSAkZGlzcGxheVxuICogIFRoZSBkaXNwbGF5IHZhbHVlIChibG9jay9pbmxpbmUvZXRjKVxuICogQHBhcmFtICRwb3NpdGlvblxuICogIFRoZSBwb3NpdGlvbiBzdHlsZSAoYWJzb2x1dGUvc3RhdGljL2V0YylcbiAqIEBwYXJhbSAkY29udGVudFxuICogIFRoZSBjb250ZW50IHZhbHVlXG4gKi9cbkBtaXhpbiBwc2V1ZG8oXG4gICRkaXNwbGF5OiBibG9jayxcbiAgJHBvc2l0aW9uOiBhYnNvbHV0ZSxcbiAgJGNvbnRlbnQ6ICcnXG4pIHtcbiAgY29udGVudDogJGNvbnRlbnQ7XG4gIGRpc3BsYXk6ICRkaXNwbGF5O1xuICBwb3NpdGlvbjogJHBvc2l0aW9uO1xufVxuXG4vKipcbiAqIENvbnRyb2wgdGhlIHJhdGlvIGZvciByZXNwb25zaXZlIGVsZW1lbnRzXG4gKlxuICogQHBhcmFtICR4XG4gKiAgVGhlIHggcmF0aW9cbiAqIEBwYXJhbSAkeVxuICogIFRoZSB5IHJhdGlvXG4gKiBAcGFyYW0gJHBzZXVkb1xuICogIERldGVybWluZSBpZiBhIHBzZXVkbyBlbGVtZW50IHNob3VsZCBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJhdGlvLiBEZWZhdWx0OiB0cnVlXG4gKiBAcGFyYW0gJGltYWdlXG4gKiAgVGhlIGltYWdlIHNvdXJjZS4gRGVmYXVsdDogbnVsbFxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSByZXNwb25zaXZlLXJhdGlvKDMsIDQpO1xuICogIEBpbmNsdWRlIHJlc3BvbnNpdmUtcmF0aW8oMjAsIDksIHRydWUsIHVybCgnL2ltYWdlcy9sYW5kaW5nLWhlcm8uanBnJykpO1xuICovXG5AbWl4aW4gcmVzcG9uc2l2ZS1yYXRpbygkeCwgJHksICRwc2V1ZG86IHRydWUsICRpbWFnZTogbnVsbCkge1xuICAkcGFkZGluZzogdW5xdW90ZSgoKCAkeSAvICR4ICkgKiAxMDApICsgJyUnKTtcblxuICBAaWYgJHggPT0gbnVsbCBvciAkeSA9PSBudWxsIHtcbiAgICBAZXJyb3IgJ0JvdGggdGhlIHggYW5kIHkgcmF0aW9zIG11c3QgYmUgcGFzc2VkIGluLic7XG4gIH1cblxuICBAaWYgJHBzZXVkbyB7XG4gICAgJjo6YmVmb3JlIHtcbiAgICAgIEBpbmNsdWRlIHBzZXVkbygkcG9zaXRpb246IHJlbGF0aXZlKTtcbiAgICAgIHBhZGRpbmctdG9wOiAkcGFkZGluZztcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgcGFkZGluZy10b3A6ICRwYWRkaW5nO1xuICB9XG5cbiAgQGlmIGltYWdlICE9IG51bGwge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgkaW1hZ2UpO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIH1cbn1cblxuLyoqXG4gKiBGaWxsIHRoZSBwYXJlbnQgZWxlbWVudFxuICpcbiAqIEBwYXJhbSAkbWFyZ2luXG4gKiAgVGhlIGFtb3VudCBvZiBzcGFjZSBiZXR3ZWVuIHRoZSBlZGdlIG9mIHRoZSBwYXJlbnQuIERlZmF1bHQ6IDBcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgZmlsbC1wYXJlbnQ7XG4gKiAgQGluY2x1ZGUgZmlsbC1wYXJlbnQoMWVtKTtcbiAqL1xuQG1peGluIHRha2Utc3BhY2UoJG1hcmdpbjogMCkge1xuICBib3R0b206ICRtYXJnaW47XG4gIGxlZnQ6ICRtYXJnaW47XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcmlnaHQ6ICRtYXJnaW47XG4gIHRvcDogJG1hcmdpbjtcbn1cblxuLyoqXG4gKiBNYWtlIGNvbnRlbnQgdmlzdWFsbHkgaGlkZGVuXG4gKlxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSB2aXN1YWxseS1oaWRkZW47XG4gKi9cbkBtaXhpbiB2aXN1YWxseS1oaWRkZW4ge1xuICAkc21hbGxlc3QtYWRqdXN0bWVudDogMXB4O1xuICBib3JkZXI6IDA7XG4gIC8vIG5vaW5zcGVjdGlvbiBDc3NJbnZhbGlkUHJvcGVydHlWYWx1ZVxuICBjbGlwLXBhdGg6IHJlY3QoMCwgMCwgMCwgMCk7XG4gIC8vIE5vdCBhbGwgc3R5bGVzIGFwcGx5IHRvIGlubGluZSBlbGVtZW50c1xuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAkc21hbGxlc3QtYWRqdXN0bWVudDtcbiAgbWFyZ2luOiAtJHNtYWxsZXN0LWFkanVzdG1lbnQ7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBhZGRpbmc6IDA7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgd2lkdGg6ICRzbWFsbGVzdC1hZGp1c3RtZW50O1xufVxuXG4vLyBOT1RFOiBEaXNhYmxpbmcgdGhlIHN0cmljdCB2YWx1ZSBydWxlIGFzIHdlIG5lZWQgdG8gYnVpbGQgb3VyIHR5cGUgc3R5bGVzXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzY2FsZS11bmxpbWl0ZWQvZGVjbGFyYXRpb24tc3RyaWN0LXZhbHVlXG5cblxuLyoqXG4gKiBUaGUgYmFzZSB0eXBlZmFjZVxuICovXG4kdHlwZV9fZmFtaWx5LS1iYXNlOiAje1JvYm90bywgJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZn0gIWRlZmF1bHQ7XG5cbi8qKlxuICogVGhlIG1vbm9zcGFjZWQgdHlwZWZhY2UgZmFtaWx5XG4gKi9cbiR0eXBlX19mYW1pbHktLW1vbm9zcGFjZWQ6ICN7J0x1Y2lkYSBDb25zb2xlJywgTW9uYWNvLCAnRGVqYVZ1IFNhbnMgTW9ubycsIG1vbm9zcGFjZX0gIWRlZmF1bHQ7XG5cbi8qKlxuICogVGhlIGF2YWlsYWJsZSB0eXBlZmFjZXNcbiAqL1xuJHR5cG9ncmFwaHktdHlwZWZhY2VzOiAoXG4gICdwcmltYXJ5JzogJHR5cGVfX2ZhbWlseS0tYmFzZSxcbiAgJ21vbm9zcGFjZWQnOiAkdHlwZV9fZmFtaWx5LS1tb25vc3BhY2VkXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIHR5cG9ncmFwaHkgc2l6ZVxuICovXG4kdHlwZV9fc2l6ZS0tYmFzZTogMTZweCAhZGVmYXVsdDtcblxuLyoqXG4gKiBUaGUgYmFzZSB0eXBvZ3JhcGh5IHdlaWdodFxuICovXG4kdHlwZV9fd2VpZ2h0LS1iYXNlOiA0MDAgIWRlZmF1bHQ7XG5cbi8qKlxuICogVGhlIGF2YWlsYWJsZSB0eXBvZ3JhcGh5IGZvcm1hdHNcbiAqL1xuJHR5cG9ncmFwaHktZm9ybWF0czogKFxuICAnZGlzcGxheScsXG4gICdoZWFkbGluZScsXG4gICd0aXRsZScsXG4gICdzdWJoZWFkJyxcbiAgJ2JvZHknLFxuICAnY2FwdGlvbicsXG4gICdmaXhlZHdpZHRoJyxcbiAgJ2hpbnQnXG4pO1xuXG4vKipcbiAqIFRoZSBhdmFpbGFibGUgdHlwb2dyYXBoeSBsZXZlbHMgZm9yIHRoZSBgZGlzcGxheWAgZm9ybWF0XG4gKi9cbiR0eXBvZ3JhcGh5LWRpc3BsYXktbGV2ZWxzOiAoXG4gIDEsXG4gIDIsXG4gIDMsXG4gIDRcbik7XG5cbi8qKlxuICogVGhlIGF2YWlsYWJsZSB0eXBvZ3JhcGh5IGxldmVscyBmb3IgdGhlIGBib2R5YCBmb3JtYXRcbiAqL1xuJHR5cG9ncmFwaHktYm9keS1sZXZlbHM6IChcbiAgMSxcbiAgMlxuKTtcblxuXG4vKipcbiAqIFJldHVybiB0eXBvZ3JhcGh5IHN0eWxlcyBiYXNlZCBvbiB0aGUgZm9ybWF0IGFuZCBsZXZlbFxuICpcbiAqIEBwYXJhbSAkZm9ybWF0XG4gKiAgT25lIG9mIHRoZSBhdmFpbGFibGUgZm9ybWF0cyBkZWZpbmVkIHdpdGhpbiAkdHlwb2dyYXBoeS1mb3JtYXRzLiBEZWZhdWx0OiAnYm9keScuXG4gKiBAcGFyYW0gJGxldmVsXG4gKiAgT25lIG9mIHRoZSBhY2NlcHRlZCBsZXZlbHMgZm9yIHRoZSBwYXNzZWQgaW4gZm9ybWF0LiBEZWZhdWx0OiAxXG4gKiBAcGFyYW0gJHR5cGVmYWNlXG4gKiAgT25lIG9mIHRoZSBhdmFpbGFibGUgdHlwZWZhY2VzIGRlZmluZWQgaW4gJHR5cG9ncmFwaHktdHlwZWZhY2VzLiBEZWZhdWx0OiAncHJpbWFyeSdcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgdHlwb2dyYXBoeTtcbiAqICBAaW5jbHVkZSB0eXBvZ3JhcGh5KGRpc3BsYXksIDQpO1xuICovXG5AbWl4aW4gdHlwb2dyYXBoeSgkZm9ybWF0OiAnYm9keScsICRsZXZlbDogMSwgJHR5cGVmYWNlOiAncHJpbWFyeScpIHtcbiAgLy8gVmVyaWZ5IHRoZSBmb3JtYXQgaXMgdmFsaWRcbiAgQGlmIGluZGV4KCR0eXBvZ3JhcGh5LWZvcm1hdHMsICRmb3JtYXQpID09IG51bGwge1xuICAgIEBlcnJvciAnSW52YWxpZCB0eXBvZ3JhcGh5IGZvcm1hdDogYCN7JGZvcm1hdH1gLiBBbGxvd2VkIGZvcm1hdHM6ICN7JHR5cG9ncmFwaHktZm9ybWF0c30nO1xuICB9XG5cbiAgLy8gVmVyaWZ5IHRoZSB0eXBlZmFjZSBpcyB2YWxpZFxuICBAaWYgbm90KG1hcC1oYXMta2V5KCR0eXBvZ3JhcGh5LXR5cGVmYWNlcywgJHR5cGVmYWNlKSkge1xuICAgICRhbGxvd2VkOiBtYXAta2V5cygkdHlwb2dyYXBoeS10eXBlZmFjZXMpO1xuICAgIEBlcnJvciAnSW52YWxpZCB0eXBvZ3JhcGh5IHR5cGVmYWNlOiBgI3skdHlwZWZhY2V9YC4gQWxsb3dlZCB0eXBlZmFjZXM6ICN7JGFsbG93ZWR9JztcbiAgfSBAZWxzZSB7XG4gICAgZm9udC1mYW1pbHk6IG1hcC1nZXQoJHR5cG9ncmFwaHktdHlwZWZhY2VzLCAkdHlwZWZhY2UpO1xuICB9XG5cblxuICAvLyBESVNQTEFZXG4gIEBpZiAkZm9ybWF0ID09ICdkaXNwbGF5JyB7XG4gICAgLy8gVmVyaWZ5IHRoZSBsZXZlbCBpcyB2YWxpZCBmb3IgdGhpcyBmb3JtYXRcbiAgICBAaWYgaW5kZXgoJHR5cG9ncmFwaHktZGlzcGxheS1sZXZlbHMsICRsZXZlbCkgPT0gbnVsbCB7XG4gICAgICBAZXJyb3IgJ0ludmFsaWQgZGlzcGxheSBmb3JtYXQgbGV2ZWw6IGAjeyRsZXZlbH1gLiBBbGxvd2VkIGxldmVsczogI3skdHlwb2dyYXBoeS1kaXNwbGF5LWxldmVsc30nO1xuICAgIH1cblxuICAgIEBpZiAkbGV2ZWwgPT0gMSB7XG4gICAgICBmb250LXNpemU6IDM0cHg7XG4gICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgbGluZS1oZWlnaHQ6IDQwcHg7XG4gICAgfVxuXG4gICAgQGlmICRsZXZlbCA9PSAyIHtcbiAgICAgIGZvbnQtc2l6ZTogNDVweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICBsaW5lLWhlaWdodDogNjRweDtcbiAgICB9XG5cbiAgICBAaWYgJGxldmVsID09IDMge1xuICAgICAgZm9udC1zaXplOiA1NnB4O1xuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgIGxldHRlci1zcGFjaW5nOiAtLjAwNWVtO1xuICAgICAgbGluZS1oZWlnaHQ6IDU2cHg7XG4gICAgfVxuXG4gICAgQGlmICRsZXZlbCA9PSA0IHtcbiAgICAgIGZvbnQtc2l6ZTogMTEycHg7XG4gICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgbGV0dGVyLXNwYWNpbmc6IC0uMDFlbTtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxMTJweDtcbiAgICB9XG4gIH1cblxuXG4gIC8vIEhFQURMSU5FXG4gIEBpZiAkZm9ybWF0ID09ICdoZWFkbGluZScge1xuICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGxpbmUtaGVpZ2h0OiAzMnB4O1xuICB9XG5cblxuICAvLyBUSVRMRVxuICBAaWYgJGZvcm1hdCA9PSAndGl0bGUnIHtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBsZXR0ZXItc3BhY2luZzogLjAwNWVtO1xuICB9XG5cblxuICAvLyBTVUJIRUFEXG4gIEBpZiAkZm9ybWF0ID09ICdzdWJoZWFkJyB7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgbGV0dGVyLXNwYWNpbmc6IC4wMWVtO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICB9XG5cblxuICAvLyBCT0RZXG4gIEBpZiAkZm9ybWF0ID09ICdib2R5JyB7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGxldHRlci1zcGFjaW5nOiAuMDFlbTtcblxuICAgIC8vIFZlcmlmeSB0aGUgbGV2ZWwgaXMgdmFsaWQgZm9yIHRoaXMgZm9ybWF0XG4gICAgQGlmIGluZGV4KCR0eXBvZ3JhcGh5LWJvZHktbGV2ZWxzLCAkbGV2ZWwpID09IG51bGwge1xuICAgICAgQGVycm9yICdJbnZhbGlkIGJvZHkgZm9ybWF0IGxldmVsOiBgI3skbGV2ZWx9YC4gQWxsb3dlZCBsZXZlbHM6ICN7JHR5cG9ncmFwaHktYm9keS1sZXZlbHN9JztcbiAgICB9XG5cbiAgICBAaWYgJGxldmVsID09IDEge1xuICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcblxuICAgICAgLy8gVE9ETzogb3ZlcndyaXRlIGluIGZpbGVzIHJhdGhlciB0aGFuIHRoaXMgbmVzdGVkIGNoYWluICh0b28gc3BlY2lmaWMpIGh0dHBzOi8vZ2l0aHViLmNvbS9HZXRUZXJtaW51cy90ZXJtaW51cy11aS9pc3N1ZXMvMTE1MlxuICAgICAgLy8gRG9uJ3QgYXBwbHkgY3VzdG9tIGxpbmUtaGVpZ2h0IHRvIGJ1dHRvbnNcbiAgICAgICY6bm90KC5jLWJ1dHRvbikge1xuICAgICAgICAmOm5vdCguYy1pbnB1dCkge1xuICAgICAgICAgICY6bm90KC5jLXNlbGVjdCkge1xuICAgICAgICAgICAgJjpub3QoLnRzLWNoZWNrYm94KSB7XG4gICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIEBpZiAkbGV2ZWwgPT0gMiB7XG4gICAgICBmb250LXdlaWdodDogNTAwO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gQ0FQVElPTlxuICBAaWYgJGZvcm1hdCA9PSAnY2FwdGlvbicge1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBsZXR0ZXItc3BhY2luZzogLjAyZW07XG4gIH1cblxuXG4gIC8vIEZJWEVEV0lEVEhcbiAgQGlmICRmb3JtYXQgPT0gJ2ZpeGVkd2lkdGgnIHtcbiAgICBmb250LWZhbWlseTogJHR5cGVfX2ZhbWlseS0tbW9ub3NwYWNlZDtcbiAgfVxuXG5cbiAgLy8gSGludHMgKGZvciBpbnB1dHMpXG4gIEBpZiAkZm9ybWF0ID09ICdoaW50JyB7XG4gICAgY29sb3I6IGNvbG9yKHV0aWxpdHkpO1xuICAgIGZvbnQtc2l6ZTogNzUlO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGV0dGVyLXNwYWNpbmc6IC4wMWVtO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjU7XG4gIH1cbn1cblxuXG4vKipcbiAqIFRydW5jYXRlIG92ZXJmbG93aW5nIHRleHQgd2l0aCBhbiBlbGxpcHNpc1xuICpcbiAqIEBtaXhpbiB0eXBvZ3JhcGh5XG4gKiBAc2VjdGlvbiBTdHlsZSBIZWxwZXJzXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIHRydW5jYXRlLW92ZXJmbG93O1xuICovXG5AbWl4aW4gdHJ1bmNhdGUtb3ZlcmZsb3coKSB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xufVxuXG4vKipcbiAqIFRoZSBzcGFjaW5nIGRlZmF1bHRcbiAqXG4gKiBAc2VjdGlvbiBTcGFjaW5nXG4gKi9cbiRnLXNwYWNpbmc6IDE2cHggIWRlZmF1bHQ7XG5cblxuLyoqXG4gKiBUaGUgbWFwIG9mIGxheW91dCBzcGFjaW5nc1xuICpcbiAqIFNtYWxsOiAxMiwgOCwgNFxuICogQmFzZTogMTZcbiAqIExhcmdlOiAyNCwgMzIsIDQwLCA0OCwgNTYsIDcyLCA5NlxuICpcbiAqIEBzZWN0aW9uIFNwYWNpbmdcbiAqL1xuJGctc3BhY2luZ3M6IChcbiAgc21hbGw6ICAoXG4gICAgMjogZmxvb3IoJGctc3BhY2luZyAvIDQpLFxuICAgIDE6IGZsb29yKCRnLXNwYWNpbmcgLyAyKSxcbiAgICAwOiBmbG9vcigkZy1zcGFjaW5nIC0gNCksXG4gICksXG4gIGRlZmF1bHQ6IChcbiAgICAwOiAkZy1zcGFjaW5nLFxuICApLFxuICBsYXJnZTogKFxuICAgIDA6IGNlaWwoJGctc3BhY2luZyAvIDIgKiAzKSxcbiAgICAxOiBjZWlsKCRnLXNwYWNpbmcgLyAyICogNCksXG4gICAgMjogY2VpbCgkZy1zcGFjaW5nIC8gMiAqIDUpLFxuICAgIDM6IGNlaWwoJGctc3BhY2luZyAvIDIgKiA2KSxcbiAgICA0OiBjZWlsKCRnLXNwYWNpbmcgLyAyICogNyksXG4gICAgNTogY2VpbCgkZy1zcGFjaW5nIC8gMiAqIDkpLFxuICAgIDY6IGNlaWwoJGctc3BhY2luZyAvIDIgKiAxMiksXG4gIClcbik7XG5cblxuLyoqXG4gKiBSZXRyaWV2ZSBhIHNwYWNlIGZyb20gdGhlICRnLXNwYWNpbmdzIG1hcFxuICpcbiAqIEBwYXJhbSAkdHlwZVxuICogIFRoZSBzcGFjaW5nIG1hcCB0byB1c2UuIERlZmF1bHQ6IGRlZmF1bHRcbiAqIEBwYXJhbSAkc2l6ZVxuICogIFRoZSB2YWx1ZSBkZXNpcmVkIGZyb20gdGhlIG1hcC4gRGVmYXVsdDogMFxuICogQGV4YW1wbGVcbiAqICBwYWRkaW5nOiBzcGFjaW5nKGRlZmF1bHQpO1xuICogIHBhZGRpbmc6IHNwYWNpbmcobGFyZ2UpO1xuICogIHBhZGRpbmc6IHNwYWNpbmcobGFyZ2UsIDQpO1xuICovXG5AZnVuY3Rpb24gc3BhY2luZygkdHlwZTogZGVmYXVsdCwgJHNpemU6IDApIHtcbiAgLy8gVmVyaWZ5IHRoZSB0eXBlIGV4aXN0c1xuICBAaWYgbm90KG1hcC1oYXMta2V5KCRnLXNwYWNpbmdzLCAkdHlwZSkpIHtcbiAgICAkYWxsb3dlZC10eXBlczogbWFwLWtleXMoJGctc3BhY2luZ3MpO1xuICAgIEBlcnJvciAnSW52YWxpZCBzcGFjaW5nIHR5cGUgbmFtZTogYCN7JHR5cGV9YC4gQWxsb3dlZCB0eXBlOiAjeyRhbGxvd2VkLXR5cGVzfSc7XG4gIH1cblxuICAvLyBWZXJpZnkgdGhlIHNpemVcbiAgQGlmIG5vdChtYXAtaGFzLWtleShtYXAtZ2V0KCRnLXNwYWNpbmdzLCAkdHlwZSksICRzaXplKSkge1xuICAgICRhbGxvd2VkLXNpemVzOiBtYXAta2V5cyhtYXAtZ2V0KCRnLXNwYWNpbmdzLCAkdHlwZSkpO1xuICAgIEBlcnJvciAnSW52YWxpZCBzaXplOiBgI3skc2l6ZX1gLiBBbGxvd2VkIHNpemVzIGZvciBgI3skdHlwZX1gIGFyZTogI3skYWxsb3dlZC1zaXplc30nO1xuICB9XG5cbiAgQHJldHVybiBtYXAtZ2V0KG1hcC1nZXQoJGctc3BhY2luZ3MsICR0eXBlKSwgJHNpemUpO1xufVxuXG5cblxuLyoqXG4gKiBCYXNlIHN0eWxlcyBmb3IgbWVudSBpdGVtc1xuICpcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgbWVudS1iYXNlO1xuICovXG5AbWl4aW4gbWVudS1pdGVtLWJhc2UoKSB7XG4gIEBpbmNsdWRlIHRydW5jYXRlLW92ZXJmbG93O1xuICAvLyBOZWVkcyB0byBiZSBhIGJsb2NrIGZvciB0aGUgZWxsaXBzaXMgdG8gd29yay5cbiAgZGlzcGxheTogYmxvY2s7XG4gIC8vIFJlcXVpcmVkIGZvciBFZGdlIG5vdCB0byBzaG93IHNjcm9sbGJhcnMgd2hlbiBzZXR0aW5nIHRoZSB3aWR0aCBtYW51YWxseS5cbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAwIHNwYWNpbmcoZGVmYXVsdCk7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgLy8gTmVjZXNzYXJ5IHRvIHJlc2V0IGFuY2hvciB0YWdzOlxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5cbi8qKlxuICogUmVzZXQgYnJvd3NlciBhbmQgYm9vdHN0cmFwIHN0eWxlc1xuICpcbiAqIE5PVEU6IFRoaXMgaXMgbmVlZGVkIGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBhIGdsb2JhbCByZXNldCBzdHlsZXNoZWV0LiBPbmNlIHRoZSBmdWxsIFRlcm1pbnVzIGFwcFxuICogaGFzIHRyYW5zaXRpb25lZCB0byB0aGUgVUkgbGlicmFyeSwgdGhpcyBjYW4gYmUgcmVtb3ZlZCBpbiBmYXZvciBvZiBhIGdsb2JhbCByZXNldCBzdHlsZXNoZWV0LlxuICpcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgcmVzZXQ7XG4gKi9cbkBtaXhpbiByZXNldCgpIHtcbiAgLy8gRW5mb3JjZSBjb25zaXN0ZW50IHNpemluZ1xuICAvLyBOT1RFOiB3cmFwcGVycyBmb3IgTWF0ZXJpYWwgbGFiZWxzIHVzZSBhIGN1c3RvbSBib3gtc2l6aW5nXG4gICoge1xuICAgICY6bm90KC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyKSB7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIH1cbiAgfVxuXG4gIC8vIFVuc2V0IG1hcmdpbnNcbiAgaDEsXG4gIGgyLFxuICBoMyxcbiAgaDQsXG4gIGg1LFxuICBwIHtcbiAgICBtYXJnaW46IHVuc2V0O1xuICB9XG59XG5cbi8qKlxuICogUHVyZSAtIERhcmtcbiAqL1xuJGNvbG9yX19wdXJlLS1kYXJrOiAjMzAyZDM1ICFkZWZhdWx0O1xuXG4vKipcbiAqIFB1cmUgLSBMaWdodFxuICovXG4kY29sb3JfX3B1cmUtLWxpZ2h0OiAjZmFmYWZhICFkZWZhdWx0O1xuXG5cblxuXG4vKipcbiAqIFV0aWxpdHkgLSBFeHRyYSBEYXJrXG4gKi9cbiRjb2xvcl9fdXRpbGl0eS0teGRhcms6ICMzZTNjNDMgIWRlZmF1bHQ7XG5cbi8qKlxuICogVXRpbGl0eSAtIERhcmtcbiAqL1xuJGNvbG9yX191dGlsaXR5LS1kYXJrOiAjNzU3NTc1ICFkZWZhdWx0O1xuXG4vKipcbiAqIFV0aWxpdHlcbiAqL1xuJGNvbG9yX191dGlsaXR5OiAjOTk5ICFkZWZhdWx0O1xuXG4vKipcbiAqIFV0aWxpdHkgLSBMaWdodFxuICovXG4kY29sb3JfX3V0aWxpdHktLWxpZ2h0OiAjY2VjZGQxICFkZWZhdWx0O1xuXG4vKipcbiAqIFV0aWxpdHkgLSBFeHRyYSBMaWdodFxuICovXG4kY29sb3JfX3V0aWxpdHktLXhsaWdodDogI2YyZjBmNyAhZGVmYXVsdDtcblxuXG4vKipcbiAqIFByaW1hcnkgLSBFeHRyYSBEYXJrXG4gKi9cbiRjb2xvcl9fcHJpbWFyeS0teGRhcms6ICMwYTM3NWIgIWRlZmF1bHQ7XG5cbi8qKlxuICogUHJpbWFyeSAtIERhcmtcbiAqL1xuJGNvbG9yX19wcmltYXJ5LS1kYXJrOiAjMGM0MjcxICFkZWZhdWx0O1xuXG4vKipcbiAqIFByaW1hcnlcbiAqL1xuJGNvbG9yX19wcmltYXJ5OiAjMDA1MzhhICFkZWZhdWx0O1xuXG4vKipcbiAqIFByaW1hcnkgLSBMaWdodFxuICovXG4kY29sb3JfX3ByaW1hcnktLWxpZ2h0OiAjMTY2NmIxICFkZWZhdWx0O1xuXG4vKipcbiAqIFByaW1hcnkgLSB4TGlnaHRcbiAqL1xuJGNvbG9yX19wcmltYXJ5LS14bGlnaHQ6ICMxNzc3YjYgIWRlZmF1bHQ7XG5cblxuLyoqXG4gKiBBY2NlbnQgLSBFeHRyYSBEYXJrXG4gKi9cbiRjb2xvcl9fYWNjZW50LS14ZGFyazogIzJiNjczZiAhZGVmYXVsdDtcblxuLyoqXG4gKiBBY2NlbnQgLSBEYXJrXG4gKi9cbiRjb2xvcl9fYWNjZW50LS1kYXJrOiAjMzE3NDQ4ICFkZWZhdWx0O1xuXG4vKipcbiAqIEFjY2VudFxuICovXG4kY29sb3JfX2FjY2VudDogIzJmODU0ZCAhZGVmYXVsdDtcblxuLyoqXG4gKiBBY2NlbnQgLSBMaWdodFxuICovXG4kY29sb3JfX2FjY2VudC0tbGlnaHQ6ICMzYjliNWMgIWRlZmF1bHQ7XG5cbi8qKlxuICogQWNjZW50IC0geExpZ2h0XG4gKi9cbiRjb2xvcl9fYWNjZW50LS14bGlnaHQ6IGxpZ2h0ZW4oJGNvbG9yX19hY2NlbnQsIDYwJSkgIWRlZmF1bHQ7XG5cblxuXG5cbi8qKlxuICogRXJyb3IgLSBEYXJrXG4gKi9cbiRjb2xvcl9fZXJyb3ItLWRhcms6ICNiNTU5NDkgIWRlZmF1bHQ7XG5cbi8qKlxuICogRXJyb3JcbiAqL1xuJGNvbG9yX19lcnJvcjogI2M4NjA0ZCAhZGVmYXVsdDtcblxuLyoqXG4gKiBFcnJvciAtIExpZ2h0XG4gKi9cbiRjb2xvcl9fZXJyb3ItLWxpZ2h0OiAjZDc2YzU5ICFkZWZhdWx0O1xuXG5cbi8qKlxuICogV2FybiAtIERhcmtcbiAqL1xuJGNvbG9yX193YXJuLS1kYXJrOiAjY2M5ZjQ1ICFkZWZhdWx0O1xuXG4vKipcbiAqIFdhcm5cbiAqL1xuJGNvbG9yX193YXJuOiAjZGVhODNiICFkZWZhdWx0O1xuXG4vKipcbiAqIFdhcm4gLSBMaWdodFxuICovXG4kY29sb3JfX3dhcm4tLWxpZ2h0OiAjZThiNTUwICFkZWZhdWx0O1xuXG5cbi8qKlxuICogSGlnaGxpZ2h0IC0gRGFya1xuICovXG4kY29sb3JfX2hpZ2hsaWdodC0tZGFyazogI2RkZDQ1NSAhZGVmYXVsdDtcblxuLyoqXG4gKiBIaWdobGlnaHRcbiAqL1xuJGNvbG9yX19oaWdobGlnaHQ6ICNlZmU1NTcgIWRlZmF1bHQ7XG5cbi8qKlxuICogSGlnaGxpZ2h0IC0gTGlnaHRcbiAqL1xuJGNvbG9yX19oaWdobGlnaHQtLWxpZ2h0OiAjZjZlZjhiICFkZWZhdWx0O1xuXG5cbi8qKlxuICogVGhlIG1hcCBvZiBjb2xvcnNcbiAqXG4gKiBOb3RlOiBDdXJyZW50bHksIHdhcm4gYW5kIGVycm9yIGFyZSB0aGUgc2FtZSBjb2xvciBpbiB0aGUgJHBhbGV0dGVzIG1hcC4gTW9yZSB3b3JrIG5lZWRzIHRvIGJlIGRvbmUgdG8gc29saWRpZnkgb3VyIHBhbGV0dGUuXG4gKi9cbiRwYWxldHRlczogKFxuICBwcmltYXJ5OiAoXG4gICAgeGxpZ2h0OiAkY29sb3JfX3ByaW1hcnktLXhsaWdodCxcbiAgICBsaWdodDogJGNvbG9yX19wcmltYXJ5LS1saWdodCxcbiAgICBiYXNlOiAkY29sb3JfX3ByaW1hcnksXG4gICAgZGFyazogJGNvbG9yX19wcmltYXJ5LS1kYXJrLFxuICAgIHhkYXJrOiAkY29sb3JfX3ByaW1hcnktLXhkYXJrXG4gICksXG4gIGFjY2VudDogKFxuICAgIHhsaWdodDogJGNvbG9yX19hY2NlbnQtLXhsaWdodCxcbiAgICBsaWdodDogJGNvbG9yX19hY2NlbnQtLWxpZ2h0LFxuICAgIGJhc2U6ICRjb2xvcl9fYWNjZW50LFxuICAgIGRhcms6ICRjb2xvcl9fYWNjZW50LS1kYXJrLFxuICAgIHhkYXJrOiAkY29sb3JfX2FjY2VudC0teGRhcmtcbiAgKSxcbiAgZXJyb3I6IChcbiAgICBsaWdodDogJGNvbG9yX19lcnJvci0tbGlnaHQsXG4gICAgYmFzZTogJGNvbG9yX19lcnJvcixcbiAgICBkYXJrOiAkY29sb3JfX2Vycm9yLS1kYXJrXG4gICksXG4gIHdhcm46IChcbiAgICBsaWdodDogJGNvbG9yX19lcnJvci0tbGlnaHQsXG4gICAgYmFzZTogJGNvbG9yX19lcnJvcixcbiAgICBkYXJrOiAkY29sb3JfX2Vycm9yLS1kYXJrXG4gICksXG4gIGhpZ2hsaWdodDogKFxuICAgIGxpZ2h0OiAkY29sb3JfX2hpZ2hsaWdodC0tbGlnaHQsXG4gICAgYmFzZTogJGNvbG9yX19oaWdobGlnaHQsXG4gICAgZGFyazogJGNvbG9yX19oaWdobGlnaHQtLWRhcmtcbiAgKSxcbiAgcHVyZTogKFxuICAgIGRhcms6ICRjb2xvcl9fcHVyZS0tZGFyayxcbiAgICBiYXNlOiAkY29sb3JfX3B1cmUtLWxpZ2h0XG4gICksXG4gIHV0aWxpdHk6IChcbiAgICB4bGlnaHQ6ICRjb2xvcl9fdXRpbGl0eS0teGxpZ2h0LFxuICAgIGxpZ2h0OiAkY29sb3JfX3V0aWxpdHktLWxpZ2h0LFxuICAgIGJhc2U6ICRjb2xvcl9fdXRpbGl0eSxcbiAgICBkYXJrOiAkY29sb3JfX3V0aWxpdHktLWRhcmssXG4gICAgeGRhcms6ICRjb2xvcl9fdXRpbGl0eS0teGRhcmtcbiAgKVxuKTtcblxuXG4vKipcbiAqIFJldHJpZXZlIGEgY29sb3IgZnJvbSB0aGUgY29sb3JzIG1hcFxuICpcbiAqIEBwYXJhbSAkcGFsZXR0ZVxuICogIFRoZSBwYWxldHRlIHRvIHVzZSBmcm9tIHRoZSBtYXBcbiAqIEBwYXJhbSAkdG9uZVxuICogIFRoZSB0b25lIHRvIHVzZSBmcm9tIHRoZSBzZWxlY3RlZCBtYXAuIERlZmF1bHQ6IGJhc2VcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgY29sb3IocHJpbWFyeSk7XG4gKiAgQGluY2x1ZGUgY29sb3IoYWNjZW50LCBsaWdodCk7XG4gKi9cbkBmdW5jdGlvbiBjb2xvcigkcGFsZXR0ZSwgJHRvbmU6ICdiYXNlJykge1xuICAvLyBWZXJpZnkgdGhlIHBhbGV0dGUgZXhpc3RzIChjb2xvcilcbiAgQGlmIG5vdChtYXAtaGFzLWtleSgkcGFsZXR0ZXMsICRwYWxldHRlKSkge1xuICAgICRhbGxvd2VkOiBtYXAta2V5cygkcGFsZXR0ZXMpO1xuICAgIEBlcnJvciAnSW52YWxpZCBwYWxldHRlIG5hbWU6IGAjeyRwYWxldHRlfWAuIEFsbG93ZWQgcGFsZXR0ZXM6ICN7JGFsbG93ZWR9JztcbiAgfVxuXG4gIC8vIFZlcmlmeSB0aGUgdG9uZSBleGlzdHMgKHZhcmlhdGlvbilcbiAgQGlmIG5vdChtYXAtaGFzLWtleShtYXAtZ2V0KCRwYWxldHRlcywgJHBhbGV0dGUpLCAkdG9uZSkpIHtcbiAgICAkYWxsb3dlZDogbWFwLWtleXMobWFwLWdldCgkcGFsZXR0ZXMsICRwYWxldHRlKSk7XG4gICAgQGVycm9yICdJbnZhbGlkIHBhbGV0dGUgdG9uZTogYCN7JHRvbmV9YC4gQWxsb3dlZCB0b25lcyBmb3IgYCN7JHBhbGV0dGV9YCBhcmU6ICN7JGFsbG93ZWR9JztcbiAgfVxuXG4gIEByZXR1cm4gbWFwLWdldChtYXAtZ2V0KCRwYWxldHRlcywgJHBhbGV0dGUpLCAkdG9uZSk7XG59XG5cblxuXG4vKipcbiAqIFRoZSBtYXAgdGhlbWVzIHRvIGNvbG9yc1xuICovXG4kdGhlbWUtYW5kLWNvbG9yOiAoXG4gICdwcmltYXJ5JzogJGNvbG9yX19wcmltYXJ5LFxuICAnYWNjZW50JzogJGNvbG9yX19hY2NlbnQsXG4gICdlcnJvcic6ICRjb2xvcl9fZXJyb3IsXG4gICd3YXJuJzogJGNvbG9yX193YXJuLFxuICAnaGlnaGxpZ2h0JzogJGNvbG9yX19oaWdobGlnaHQsXG4gICdwdXJlJzogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgJ3V0aWxpdHknOiAkY29sb3JfX3V0aWxpdHlcbik7XG5cblxuLyoqXG4gKiBPdXRwdXQgY29uZGl0aW9uYWwgc3R5bGVzIGZvciB0aGUgcG9zc2libGUgdGhlbWVzXG4gKlxuICogQHBhcmFtICRwcm9wZXJ0eVxuICogIFRoZSBDU1MgcHJvcGVydHkgdGhhdCBzaG91bGQgYmUgY29sb3JlZC4gRGVmYXVsdDogJ2JhY2tncm91bmQtY29sb3InXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIHRoZW1lLWNvbG9yO1xuICogIEBpbmNsdWRlIHRoZW1lLWNvbG9yKCdjb2xvcicpO1xuICovXG5AbWl4aW4gdGhlbWUtY29sb3IoJHByb3BlcnR5OiAnYmFja2dyb3VuZC1jb2xvcicpIHtcbiAgLy8gVmVyaWZ5IGFuIGFsbG93ZWQgcHJvcGVydHkgd2FzIHBhc3NlZCBpblxuICBAaWYgbm90KCgkcHJvcGVydHkgPT0gYmFja2dyb3VuZC1jb2xvcikpIGFuZCBub3QoKCRwcm9wZXJ0eSA9PSBjb2xvcikpIHtcbiAgICBAZXJyb3IgJ1RoZSBgdGhlbWVfX2NvbG9yYCBtaXhpbiBvbmx5IGFjY2VwdHMgYGJhY2tncm91bmQtY29sb3JgIG9yIGBjb2xvcmAnO1xuICB9XG5cbiAgQGVhY2ggJGtleSwgJHZhbHVlIGluICR0aGVtZS1hbmQtY29sb3Ige1xuICAgIDo6bmctZGVlcCAudS10aGVtZS0tI3ska2V5fSAmIHtcbiAgICAgICZbZGlzYWJsZWRdIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogY29sb3IodXRpbGl0eSwgbGlnaHQpO1xuICAgICAgICBjb2xvcjogY29sb3IodXRpbGl0eSk7XG4gICAgICB9XG4gICAgICAjeyRwcm9wZXJ0eX06ICR2YWx1ZTtcblxuICAgICAgQGlmICgkcHJvcGVydHkgPT0gJ2JhY2tncm91bmQtY29sb3InKSBhbmQgKG5vdCgoJGtleSA9PSAncHVyZScpKSBhbmQgbm90KCgka2V5ID09ICdoaWdobGlnaHQnKSkpIHtcbiAgICAgICAgY29sb3I6ICRjb2xvcl9fcHVyZS0tbGlnaHQ7XG4gICAgICB9XG5cbiAgICAgIEBpZiAoJHByb3BlcnR5ID09ICdiYWNrZ3JvdW5kLWNvbG9yJykgYW5kICgka2V5ID09ICdoaWdobGlnaHQnKSB7XG4gICAgICAgIGNvbG9yOiAkY29sb3JfX3B1cmUtLWRhcms7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuLy8gc3R5bGVsaW50LWRpc2FibGUgdmFsdWUta2V5d29yZC1jYXNlXG5cbi8qKlxuICogRGVmaW5lIHRoZSBtYXRlcmlhbCBiYXNlZCBwcmltYXJ5IG1hcFxuICovXG4kdHMtbWF0ZXJpYWwtcHJpbWFyeTogKFxuICA1MDogJGNvbG9yX19wcmltYXJ5LS14bGlnaHQsXG4gIDEwMDogJGNvbG9yX19wcmltYXJ5LS1saWdodCxcbiAgMjAwOiAkY29sb3JfX3ByaW1hcnksXG4gIDMwMDogJGNvbG9yX19wcmltYXJ5LFxuICA0MDA6ICRjb2xvcl9fcHJpbWFyeSxcbiAgNTAwOiAkY29sb3JfX3ByaW1hcnksXG4gIDYwMDogJGNvbG9yX19wcmltYXJ5LFxuICA3MDA6ICRjb2xvcl9fcHJpbWFyeS0tZGFyayxcbiAgODAwOiAkY29sb3JfX3ByaW1hcnksXG4gIDkwMDogJGNvbG9yX19wcmltYXJ5LS14ZGFyayxcbiAgYTEwMDogJGNvbG9yX19wcmltYXJ5LFxuICBhMjAwOiAkY29sb3JfX3ByaW1hcnksXG4gIGE0MDA6ICRjb2xvcl9fcHJpbWFyeSxcbiAgYTcwMDogJGNvbG9yX19wcmltYXJ5LFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDEwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICAyMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgMzAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDQwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA1MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNjAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDcwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA4MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgOTAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGExMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTIwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICBhNDAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGE3MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gIClcbik7XG5cbi8qKlxuICogRGVmaW5lIHRoZSBtYXRlcmlhbCBiYXNlZCBhY2NlbnQgbWFwXG4gKi9cbiR0cy1tYXRlcmlhbC1hY2NlbnQ6IChcbiAgNTA6ICRjb2xvcl9fYWNjZW50LS14bGlnaHQsXG4gIDEwMDogJGNvbG9yX19hY2NlbnQtLWxpZ2h0LFxuICAyMDA6ICRjb2xvcl9fYWNjZW50LFxuICAzMDA6ICRjb2xvcl9fYWNjZW50LFxuICA0MDA6ICRjb2xvcl9fYWNjZW50LFxuICA1MDA6ICRjb2xvcl9fYWNjZW50LFxuICA2MDA6ICRjb2xvcl9fYWNjZW50LFxuICA3MDA6ICRjb2xvcl9fYWNjZW50LS1kYXJrLFxuICA4MDA6ICRjb2xvcl9fYWNjZW50LFxuICA5MDA6ICRjb2xvcl9fYWNjZW50LS14ZGFyayxcbiAgYTEwMDogJGNvbG9yX19hY2NlbnQsXG4gIGEyMDA6ICRjb2xvcl9fYWNjZW50LFxuICBhNDAwOiAkY29sb3JfX2FjY2VudCxcbiAgYTcwMDogJGNvbG9yX19hY2NlbnQsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgMTAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDIwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICAzMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNDAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDUwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA2MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNzAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDgwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA5MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTEwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICBhMjAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGE0MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTcwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgKVxuKTtcblxuLyoqXG4gKiBEZWZpbmUgdGhlIG1hdGVyaWFsIGJhc2VkIHdhcm4gbWFwXG4gKi9cbiR0cy1tYXRlcmlhbC13YXJuOiAoXG4gIDUwOiAkY29sb3JfX2Vycm9yLS1saWdodCxcbiAgMTAwOiAkY29sb3JfX2Vycm9yLS1saWdodCxcbiAgMjAwOiAkY29sb3JfX2Vycm9yLFxuICAzMDA6ICRjb2xvcl9fZXJyb3IsXG4gIDQwMDogJGNvbG9yX19lcnJvcixcbiAgNTAwOiAkY29sb3JfX2Vycm9yLFxuICA2MDA6ICRjb2xvcl9fZXJyb3IsXG4gIDcwMDogJGNvbG9yX19lcnJvci0tZGFyayxcbiAgODAwOiAkY29sb3JfX2Vycm9yLFxuICA5MDA6ICRjb2xvcl9fZXJyb3ItLWRhcmssXG4gIGExMDA6ICRjb2xvcl9fZXJyb3IsXG4gIGEyMDA6ICRjb2xvcl9fZXJyb3IsXG4gIGE0MDA6ICRjb2xvcl9fZXJyb3IsXG4gIGE3MDA6ICRjb2xvcl9fZXJyb3IsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgMTAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDIwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICAzMDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNDAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDUwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA2MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgNzAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIDgwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICA5MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTEwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgICBhMjAwOiAkY29sb3JfX3B1cmUtLWxpZ2h0LFxuICAgIGE0MDA6ICRjb2xvcl9fcHVyZS0tbGlnaHQsXG4gICAgYTcwMDogJGNvbG9yX19wdXJlLS1saWdodCxcbiAgKVxuKTtcblxuLy8gc3R5bGVsaW50LWVuYWJsZSB2YWx1ZS1rZXl3b3JkLWNhc2VcblxuXG5cbiRkZWZhdWx0Q29sb3I6ICN7Y29sb3IocHVyZSl9O1xuXG4vKipcbiAqIFN0eWxlcyB0byBtYWtlIHNjcm9sbGJhcnMgYWx3YXlzIHZpc2libGUgb24gd2Via2l0IGJyb3dzZXJzXG4gKlxuICogQHBhcmFtIGNvbG9yIC0gVGhlIGNvbG9yIGZvciB0aGUgYm9yZGVyIGFuZCBiYWNrZ3JvdW5kIChjYW5ub3QgYmUgdHJhbnNwYXJlbnQpXG4gKi9cbkBtaXhpbiB2aXNpYmxlLXNjcm9sbGJhcnMoJGNvbG9yOiAkZGVmYXVsdENvbG9yKSB7XG4gICR3ZWJraXQtZGVmYXVsdC1yYWRpdXM6IDhweDtcbiAgJHdlYmtpdC1kZWZhdWx0LXNpemU6IDExcHg7XG5cbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcblxuICAgICY6dmVydGljYWwge1xuICAgICAgd2lkdGg6ICR3ZWJraXQtZGVmYXVsdC1zaXplO1xuICAgIH1cblxuICAgICY6aG9yaXpvbnRhbCB7XG4gICAgICBoZWlnaHQ6ICR3ZWJraXQtZGVmYXVsdC1zaXplO1xuICAgIH1cbiAgfVxuXG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgICAkd2Via2l0LWJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgLjUpO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR3ZWJraXQtYmFja2dyb3VuZC1jb2xvcjtcbiAgICBib3JkZXI6IDJweCBzb2xpZCAkY29sb3I7XG4gICAgYm9yZGVyLXJhZGl1czogJHdlYmtpdC1kZWZhdWx0LXJhZGl1cztcbiAgfVxuXG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3I7XG4gICAgYm9yZGVyLXJhZGl1czogJHdlYmtpdC1kZWZhdWx0LXJhZGl1cztcbiAgfVxuXG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyLWNvcm5lciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yO1xuICB9XG59XG5cblxuQG1peGluIGhpZGRlbi1zY3JvbGxiYXJzKCkge1xuICAmOjotd2Via2l0LXNjcm9sbGJhciB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuXG4gICAgJjp2ZXJ0aWNhbCB7XG4gICAgICB3aWR0aDogMDtcbiAgICB9XG5cbiAgICAmOmhvcml6b250YWwge1xuICAgICAgaGVpZ2h0OiAwO1xuICAgIH1cbiAgfVxuXG4gICY6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICB9XG5cbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIH1cblxuICAmOjotd2Via2l0LXNjcm9sbGJhci1jb3JuZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICB9XG59XG5cbi8vIHN0eWxlbGludC1kaXNhYmxlIG1heC1saW5lLWxlbmd0aFxuXG4vKipcbiAqIEJveCBTaGFkb3cgdmFsdWVzIGZyb20gTWF0ZXJpYWwgU2hhZG93IEludGVycG9sYXRvclxuICpcbiAqIC0gRXhpc3RpbmcgbGlicmFyeSByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9wcmVzdG9wYXN0by9TQ1NTLU1hdGVyaWFsLVNoYWRvd3NcbiAqIC0gQW5ndWxhciBNYXRlcmlhbCBkZXNpZ24gbm90ZXMgaGVyZTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVzNOR1NMcURaempiQkJMVzJDNnlfNk5VeHR2ZFpBVmFKdmc1OExZM1EwRS9wcmV2aWV3XG4gKiAtIFJlZmVyZW5jZSBDb2RlUGVuOiBodHRwczovL2NvZGVwZW4uaW8vc2h5bmRtYW4vcGVuL29qeG1kWT9lZGl0b3JzPTAwMVxuICovXG5cbi8vIHN0eWxlbGludC1lbmFibGUgbWF4LWxpbmUtbGVuZ3RoXG5cblxuLyoqXG4gKiBTaGFkb3cgY29sb3JzLlxuICogaHR0cDovL2NvZGVwZW4uaW8vc2h5bmRtYW4vcGVuL29qeG1kWVxuICpcbiAqIC0gVU1CUkE6IFwiQSBjb25pY2FsIHNoYWRvdyBleGNsdWRpbmcgYWxsIGxpZ2h0IGZyb20gYSBnaXZlbiBzb3VyY2U7IF9zcGVjaWZpY2FsbHlfOiB0aGUgY29uaWNhbFxuICogcGFydCBvZiB0aGUgc2hhZG93IG9mIGEgY2VsZXN0aWFsIGJvZHkgZXhjbHVkaW5nIGFsbCBsaWdodCBmcm9tIHRoZSBwcmltYXJ5IHNvdXJjZVwiXG4gKiAtIFBFTlVNQlJBOiBcIkEgc3BhY2Ugb2YgcGFydGlhbCBpbGx1bWluYXRpb24gKGFzIGluIGFuIGVjbGlwc2UpIGJldHdlZW4gdGhlIHBlcmZlY3Qgc2hhZG93IG9uIGFsbFxuICogc2lkZXMgYW5kIHRoZSBmdWxsIGxpZ2h0XCJcbiAqXG4gKiBAbnVjbGlkZSBTaGFkb3ctQ29sb3JzXG4gKiBAc2VjdGlvbiBDb25maWcgPiBTaGFkb3dzXG4gKi9cbi8vIHN0eWxlbGludC1kaXNhYmxlIHBsdWdpbi9zdHlsZWxpbnQtbm8taW5kaXN0aW5ndWlzaGFibGUtY29sb3JzXG4ka2V5LXVtYnJhOiByZ2JhKDAsIDAsIDAsIC4yKTtcbiRrZXktcGVudW1icmE6IHJnYmEoMCwgMCwgMCwgLjE0KTtcbiRhbWJpZW50OiByZ2JhKDAsIDAsIDAsIC4xMik7XG4vLyBzdHlsZWxpbnQtZW5hYmxlIHBsdWdpbi9zdHlsZWxpbnQtbm8taW5kaXN0aW5ndWlzaGFibGUtY29sb3JzXG5cblxuLyoqXG4gKiBIYW5kLWRlc2lnbmVkIHJlZmVyZW5jZSBzaGFkb3cgc2V0c1xuICpcbiAqIFNvdXJjZTogaHR0cDovL2NvZGVwZW4uaW8vc2h5bmRtYW4vcGVuL29qeG1kWVxuICpcbiAqIEBudWNsaWRlIFNoYWRvdy1TZXRzXG4gKiBAc2VjdGlvbiBDb25maWcgPiBTaGFkb3dzXG4gKi9cbiRyZWZlcmVuY2Utc2hhZG93czogKFxuICAoXG4gICAgZWxldmF0aW9uOiAwLFxuICAgIHNoYWRvd3M6IChcbiAgICAgICgwLCAwLCAwLCAwLCAka2V5LXVtYnJhKSxcbiAgICAgICgwLCAwLCAwLCAwLCAka2V5LXBlbnVtYnJhKSxcbiAgICAgICgwLCAwLCAwLCAwLCAkYW1iaWVudCksXG4gICAgKVxuICApLFxuICAoXG4gICAgZWxldmF0aW9uOiAyLFxuICAgIHNoYWRvd3M6IChcbiAgICAgICgwLCAzLCAxLCAtMiwgJGtleS11bWJyYSksXG4gICAgICAoMCwgMiwgMiwgMCwgJGtleS1wZW51bWJyYSksXG4gICAgICAoMCwgMSwgNSwgMCwgJGFtYmllbnQpLFxuICAgIClcbiAgKSxcbiAgKFxuICAgIGVsZXZhdGlvbjogMyxcbiAgICBzaGFkb3dzOiAoXG4gICAgICAoMCwgMywgMywgLTIsICRrZXktdW1icmEpLFxuICAgICAgKDAsIDMsIDQsIDAsICRrZXktcGVudW1icmEpLFxuICAgICAgKDAsIDEsIDgsIDAsICRhbWJpZW50KSxcbiAgICApXG4gICksXG4gIChcbiAgICBlbGV2YXRpb246IDQsXG4gICAgc2hhZG93czogKFxuICAgICAgKDAsIDIsIDQsIC0xLCAka2V5LXVtYnJhKSxcbiAgICAgICgwLCA0LCA1LCAwLCAka2V5LXBlbnVtYnJhKSxcbiAgICAgICgwLCAxLCAxMCwgMCwgJGFtYmllbnQpLFxuICAgIClcbiAgKSxcbiAgKFxuICAgIGVsZXZhdGlvbjogNixcbiAgICBzaGFkb3dzOiAoXG4gICAgICAoMCwgMywgNSwgLTEsICRrZXktdW1icmEpLFxuICAgICAgKDAsIDYsIDEwLCAwLCAka2V5LXBlbnVtYnJhKSxcbiAgICAgICgwLCAxLCAxOCwgMCwgJGFtYmllbnQpLFxuICAgIClcbiAgKSxcbiAgKFxuICAgIGVsZXZhdGlvbjogOCxcbiAgICBzaGFkb3dzOiAoXG4gICAgICAoMCwgNSwgNSwgLTMsICRrZXktdW1icmEpLFxuICAgICAgKDAsIDgsIDEwLCAxLCAka2V5LXBlbnVtYnJhKSxcbiAgICAgICgwLCAzLCAxNCwgMiwgJGFtYmllbnQpLFxuICAgIClcbiAgKSxcbiAgKFxuICAgIGVsZXZhdGlvbjogMTYsXG4gICAgc2hhZG93czogKFxuICAgICAgKDAsIDgsIDEwLCAtNSwgJGtleS11bWJyYSksXG4gICAgICAoMCwgMTYsIDI0LCAyLCAka2V5LXBlbnVtYnJhKSxcbiAgICAgICgwLCA2LCAzMCwgNSwgJGFtYmllbnQpLFxuICAgIClcbiAgKVxuKTtcblxuXG4vKipcbiAqIEFuaW1hdGlvbiBkdXJhdGlvbnNcbiAqXG4gKiBAbnVjbGlkZSBTaGFkb3ctQW5pbWF0aW9uLUR1cmF0aW9uc1xuICogQHNlY3Rpb24gQ29uZmlnID4gU2hhZG93c1xuICovXG4kbWluLWFuaW1hdGlvbi1sZW5ndGg6IDI1MG1zO1xuJG1heC1hbmltYXRpb24tbGVuZ3RoOiA0MDBtcztcblxuXG4vKipcbiAqIE1hdGVyaWFsIERlc2lnbiBlbGVtZW50IGVsZXZhdGlvbnNcbiAqXG4gKiBTb3VyY2U6IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tYXRlcmlhbC1kZXNpZ24vZWxldmF0aW9uLXNoYWRvd3MuaHRtbCNlbGV2YXRpb24tc2hhZG93cy1lbGV2YXRpb24tYW5kcm9pZFxuICpcbiAqIEBudWNsaWRlIFNoYWRvdy1FbGVtZW50cy1NYXBcbiAqIEBzZWN0aW9uIENvbmZpZyA+IFNoYWRvd3NcbiAqL1xuJG1hdGVyaWFsLWVsZW1lbnRzOiAoXG4gIGRpYWxvZzogKDI0KSxcbiAgcGlja2VyOiAoMjQpLFxuICBuYXYtZHJhd2VyOiAoMTYpLFxuICByaWdodC1kcmF3ZXI6IDE2LFxuICBib3R0b20tc2hlZXQ6IDE2LFxuICBmYWI6IDYgMTIgYWN0aXZlLFxuICBzdWItbWVudS0zOiAxMSxcbiAgc3ViLW1lbnUtMjogMTAsXG4gIHN1Yi1tZW51LTE6IDksXG4gIG1lbnU6IDgsXG4gIGJvdHRvbS1uYXYtYmFyOiA4LFxuICBjYXJkOiAyIDggaG92ZXIsXG4gIHJhaXNlZC1idXR0b246IDIgOCBhY3RpdmUsXG4gIHNuYWNrYmFyOiA2LFxuICBhcHAtYmFyOiA0LFxuICByZWZyZXNoLWluZGljYXRvcjogMyxcbiAgcXVpY2stZW50cnk6IDIgMyBhY3RpdmUsXG4gIHNlYXJjaC1iYXI6IDIgMyBhY3RpdmUsXG4gIHN3aXRjaDogMVxuKTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHR3byByZWZlcmVuY2Ugc2hhZG93cyB3aG9zZSBlbGV2YXRpb25zIGJvdW5kIHRoZSBzcGVjaWZpZWQgZWxldmF0aW9uXG4gKlxuICogSW4gdGhlIGNhc2Ugd2hlcmUgdGhlIHN1cHBsaWVkIGVsZXZhdGlvbiBleGNlZWRzIHRoZSBtYXhpbXVtIHJlZmVyZW5jZSBlbGV2YXRpb24sIHRoZSBsYXN0IHR3b1xuICogcmVmZXJlbmNlIHNoYWRvd3MgYXJlIHJldHVybmVkLlxuICpcbiAqIEBtaXhpbiBmaW5kLWJvdW5kaW5nLXNoYWRvdy1zZXRzXG4gKiBAc2VjdGlvbiBTaGFkb3ctRnVuY3Rpb25zXG4gKiBAcGFyYW0gJGVsZXZhdGlvblxuICogIFRoZSBlbGV2YXRpb25cbiAqIEBleGFtcGxlXG4gKiAgJGZvbyA9IGZpbmQtYm91bmRpbmctc2hhZG93LXNldHMoMik7XG4gKi9cbkBmdW5jdGlvbiBmaW5kLWJvdW5kaW5nLXNoYWRvdy1zZXRzKCRlbGV2YXRpb24pIHtcbiAgQGlmICRlbGV2YXRpb24gPCAwIHtcbiAgICBAZXJyb3IgJ2ZpbmQtYm91bmRpbmctc2hhZG93LXNldHM6IEVsZXZhdGlvbiBpcyBsZXNzIHRoYW4gemVybyc7XG4gIH1cblxuICAkbG93ZXI6IG50aCgkcmVmZXJlbmNlLXNoYWRvd3MsIGxlbmd0aCgkcmVmZXJlbmNlLXNoYWRvd3MpIC0gMSk7XG4gICR1cHBlcjogbnRoKCRyZWZlcmVuY2Utc2hhZG93cywgbGVuZ3RoKCRyZWZlcmVuY2Utc2hhZG93cykpO1xuXG4gIEBmb3IgJGkgZnJvbSAxIHRvIGxlbmd0aCgkcmVmZXJlbmNlLXNoYWRvd3MpIHtcbiAgICAkaW5uZXItbG93ZXI6IG50aCgkcmVmZXJlbmNlLXNoYWRvd3MsICRpKTtcbiAgICAkaW5uZXItdXBwZXI6IG50aCgkcmVmZXJlbmNlLXNoYWRvd3MsICRpICsgMSk7XG5cbiAgICBAaWYgKG1hcC1nZXQoJGlubmVyLWxvd2VyLCAnZWxldmF0aW9uJykgPD0gJGVsZXZhdGlvbikgYW5kIChtYXAtZ2V0KCRpbm5lci11cHBlciwgJ2VsZXZhdGlvbicpID4gJGVsZXZhdGlvbikge1xuICAgICAgQHJldHVybiAoJGlubmVyLWxvd2VyLCAkaW5uZXItdXBwZXIpO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gKCRsb3dlciwgJHVwcGVyKTtcbn1cblxuXG4vKipcbiAqIFBlcmZvcm1zIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdmFsdWVzIGEgYW5kIGJcbiAqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBiZXR3ZWVuIGEgYW5kIGIgcHJvcG9ydGlvbmFsIHRvIHggKHdoZW4geCBpcyBiZXR3ZWVuIDAgYW5kIDEuIFdoZW4geCBpcyBvdXRzaWRlXG4gKiB0aGlzIHJhbmdlLCB0aGUgcmV0dXJuIHZhbHVlIGlzIGEgbGluZWFyIGV4dHJhcG9sYXRpb24pXG4gKlxuICogQG1peGluIGxlcnBcbiAqIEBzZWN0aW9uIFNoYWRvdy1GdW5jdGlvbnNcbiAqIEBwYXJhbSAkeFxuICogIFRoZSBwcm9wb3J0aW9uYWwgY29udHJvbFxuICogQHBhcmFtICRhXG4gKiAgVGhlIHN0YXJ0aW5nIHZhbHVlXG4gKiBAcGFyYW0gJGJcbiAqICBUaGUgZW5kaW5nIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogICRmb28gPSBsZXJwKC4yLCAzLCA2KTtcbiAqL1xuQGZ1bmN0aW9uIGxlcnAoJHgsICRhLCAkYikge1xuICBAcmV0dXJuICRhICsgJHggKiAoJGIgLSAkYSk7XG59XG5cblxuLyoqXG4gKiBQZXJmb3JtcyBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHNoYWRvd3MgYnkgaW50ZXJwb2xhdGluZyBlYWNoIHByb3BlcnR5IGluZGl2aWR1YWxseVxuICpcbiAqIFJldHVybnMgdGhlIHZhbHVlIGJldHdlZW4gc2hhZG93MSBhbmQgc2hhZG93MiBwcm9wb3J0aW9uYWwgdG8geCAod2hlbiB4IGlzIGJldHdlZW4gMCBhbmQgMS4gV2hlblxuICogeCBpcyBvdXRzaWRlIHRoaXMgcmFuZ2UsIHRoZSByZXR1cm4gdmFsdWUgaXMgYSBsaW5lYXIgZXh0cmFwb2xhdGlvbikuXG4gKlxuICogQG1peGluIGxlcnAtc2hhZG93XG4gKiBAc2VjdGlvbiBTaGFkb3ctRnVuY3Rpb25zXG4gKiBAcGFyYW0gJHhcbiAqICBUaGUgcHJvcG9ydGlvbmFsIGNvbnRyb2xcbiAqIEBwYXJhbSAkc2hhZG93MVxuICogIFRoZSBzdGFydGluZyBzaGFkb3dcbiAqIEBwYXJhbSAkc2hhZG93MlxuICogIFRoZSBlbmRpbmcgc2hhZG93XG4gKi9cbkBmdW5jdGlvbiBsZXJwLXNoYWRvdygkeCwgJHNoYWRvdzEsICRzaGFkb3cyKSB7XG4gIC8vIFJvdW5kIGFsbCBwYXJhbWV0ZXJzLCBhcyBzaGFkb3cgZGVmaW5pdGlvbnMgZG8gbm90IHN1cHBvcnQgc3VicGl4ZWxzXG4gICRuZXcteDogcm91bmQobGVycCgkeCwgbnRoKCRzaGFkb3cxLCAxKSwgbnRoKCRzaGFkb3cyLCAxKSkpO1xuICAkbmV3LXk6IHJvdW5kKGxlcnAoJHgsIG50aCgkc2hhZG93MSwgMiksIG50aCgkc2hhZG93MiwgMikpKTtcbiAgJG5ldy1ibHVyOiByb3VuZChsZXJwKCR4LCBudGgoJHNoYWRvdzEsIDMpLCBudGgoJHNoYWRvdzIsIDMpKSk7XG4gICRuZXctc3ByZWFkOiByb3VuZChsZXJwKCR4LCBudGgoJHNoYWRvdzEsIDQpLCBudGgoJHNoYWRvdzIsIDQpKSk7XG4gIC8vIE5vIG5lZWQgdG8gbGVycCB0aGUgc2hhZG93IGNvbG9yXG4gICRuZXctY29sb3I6IG50aCgkc2hhZG93MSwgNSk7XG5cbiAgLy8gQ29lcmNlIHRvIHBpeGVsIHZhbHVlcyB3aGVuIHJldHVybmluZ1xuICBAcmV0dXJuICgjeyRuZXcteCArIHB4fSAjeyRuZXcteSArIHB4fSAjeyRuZXctYmx1ciArIHB4fSAjeyRuZXctc3ByZWFkICsgcHh9ICRuZXctY29sb3IpO1xufVxuXG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc2V0IG9mIHNoYWRvd3MgYXQgYSBnaXZlbiBlbGV2YXRpb25cbiAqXG4gKiBAbWl4aW4gY2FsY3VsYXRlLXNoYWRvdy1zZXQtYXQtZGVwdGhcbiAqIEBzZWN0aW9uIFNoYWRvdy1GdW5jdGlvbnNcbiAqIEBwYXJhbSAkZWxldmF0aW9uXG4gKiAgVGhlIGRlc2lyZWQgZWxldmF0aW9uXG4gKiBAZXhhbXBsZVxuICogICRmb28gPSBjYWxjdWxhdGUtc2hhZG93LXNldC1hdC1kZXB0aCgyKTtcbiAqL1xuQGZ1bmN0aW9uIGNhbGN1bGF0ZS1zaGFkb3ctc2V0LWF0LWRlcHRoKCRlbGV2YXRpb24pIHtcbiAgJGJvdW5kczogZmluZC1ib3VuZGluZy1zaGFkb3ctc2V0cygkZWxldmF0aW9uKTtcbiAgJG1pbjogbnRoKCRib3VuZHMsIDEpO1xuICAkbWF4OiBudGgoJGJvdW5kcywgMik7XG4gICR4OiAoJGVsZXZhdGlvbiAtIG1hcC1nZXQoJG1pbiwgJ2VsZXZhdGlvbicpKSAvIChtYXAtZ2V0KCRtYXgsICdlbGV2YXRpb24nKSAtIG1hcC1nZXQoJG1pbiwgJ2VsZXZhdGlvbicpKTtcbiAgJGVsZXZhdGlvbi1zaGFkb3dzOiAoKTtcblxuICBAZm9yICRpIGZyb20gMSB0byBsZW5ndGgobWFwLWdldCgkbWluLCAnc2hhZG93cycpKSArIDEge1xuICAgICRuZXctc2hhZG93OiBsZXJwLXNoYWRvdygkeCwgbnRoKG1hcC1nZXQoJG1pbiwgJ3NoYWRvd3MnKSwgJGkpLCBudGgobWFwLWdldCgkbWF4LCAnc2hhZG93cycpLCAkaSkpO1xuICAgICRlbGV2YXRpb24tc2hhZG93czogYXBwZW5kKCRlbGV2YXRpb24tc2hhZG93cywgJG5ldy1zaGFkb3csIGNvbW1hKTtcbiAgfVxuXG4gIEByZXR1cm4gJGVsZXZhdGlvbi1zaGFkb3dzO1xufVxuXG5cblxuLyoqXG4gKiBHZW5lcmF0ZXMgdGhlIHRyYW5zaXRpb24gZm9yIGEgY2hhbmdlIGJldHdlZW4gMiBlbGV2YXRpb25zXG4gKlxuICogVGhlIGxhcmdlciB0aGUgZWxldmF0aW9uIGNoYW5nZSB0aGUgbG9uZ2VyIHRoZSBhbmltYXRpb24gdGFrZXNcbiAqXG4gKiBAbWl4aW4gZWxldmF0aW9uLXRyYW5zaXRpb25cbiAqIEBzZWN0aW9uIFNoYWRvdy1NaXhpbnNcbiAqIEBwYXJhbSAkZWxldmF0aW9uLWNoYW5nZVxuICogIFRoZSBlbGV2YXRpb24gY2hhbmdlIGFtb3VudFxuICogQHBhcmFtICRlYXNpbmdcbiAqICBUaGUgZWFzaW5nIGZ1bmN0aW9uIG9yIG5hbWVcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgZWxldmF0aW9uLXRyYW5zaXRpb24oZGlhbG9nKTtcbiAqL1xuQG1peGluIGVsZXZhdGlvbi10cmFuc2l0aW9uKCRlbGV2YXRpb24tY2hhbmdlOiA2LCAkZWFzaW5nOiBjdWJpYy1iZXppZXIoLjQsIDAsIC4yLCAxKSkge1xuICAkZHVyYXRpb246IGxlcnAoJGVsZXZhdGlvbi1jaGFuZ2UgLyAyNCwgJG1pbi1hbmltYXRpb24tbGVuZ3RoLCAkbWF4LWFuaW1hdGlvbi1sZW5ndGgpO1xuXG4gIHRyYW5zaXRpb246IGJveC1zaGFkb3cgJGR1cmF0aW9uICRlYXNpbmc7XG59XG5cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYm94LXNoYWRvdyBhbmQgdGhlIHRyYW5zaXRpb24gZm9yIGEgZ2l2ZW4gZWxldmF0aW9uXG4gKlxuICogLSBBIHNpbmdsZSBlbGV2YXRpb24gd2lsbCBnZW5lcmF0ZSBhIHNpbmdsZSBib3gtc2hhZG93IHNldFxuICogLSBUd28gZWxldmF0aW9ucyBhbmQgYSBzdGF0ZSB3aWxsIGdlbmVyYXRlIGEgZGVmYXVsdCBib3gtc2hhZG93IHNldCBhbmQgYW5vdGhlciBzZXQgdGhhdCBpc1xuICogYWN0aXZhdGVkIGJ5IHRoZSBzdGF0ZSB0ZXN0ZWQgd2l0aCA6aG92ZXIgYW5kIDphY3RpdmVcbiAqXG4gKiBAbWl4aW4gZWxldmF0aW9uXG4gKiBAc2VjdGlvbiBTaGFkb3ctTWl4aW5zXG4gKiBAcGFyYW0gJGVsZXZhdGlvbjFcbiAqICBUaGUgc3RhcnRpbmcgZWxldmF0aW9uXG4gKiBAcGFyYW0gJGVsZXZhdGlvbjJcbiAqICBUaGUgZGVzdGluYXRpb24gZWxldmF0aW9uXG4gKiBAcGFyYW0gJHN0YXRlXG4gKiAgaG92ZXIsIGZvY3VzLCBhY3RpdmVcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgZWxldmF0aW9uKDIsIDgsIGFjdGl2ZSk7XG4gKi9cbkBtaXhpbiBlbGV2YXRpb24oJGVsZXZhdGlvbjEsICRlbGV2YXRpb24yOiBudWxsLCAkc3RhdGU6IG51bGwpIHtcbiAgQGlmICRlbGV2YXRpb24xID09IDAge1xuICAgIC8vIHN0eWxlbGludC1kaXNhYmxlIGRlY2xhcmF0aW9uLW5vLWltcG9ydGFudFxuICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcbiAgICAvLyBzdHlsZWxpbnQtZW5hYmxlIGRlY2xhcmF0aW9uLW5vLWltcG9ydGFudFxuICB9IEBlbHNlIHtcbiAgICBib3gtc2hhZG93OiBjYWxjdWxhdGUtc2hhZG93LXNldC1hdC1kZXB0aCgkZWxldmF0aW9uMSk7XG4gIH1cblxuICBAaWYgJGVsZXZhdGlvbjIgIT0gbnVsbCB7XG4gICAgLy8gVE9ETzogRml4IG1pc3N1c2Ugb2YgbWl4aW4gaHR0cHM6Ly9naXRodWIuY29tL0dldFRlcm1pbnVzL3Rlcm1pbnVzLXVpL2lzc3Vlcy8xNTI5XG4gICAgQGluY2x1ZGUgZWxldmF0aW9uLXRyYW5zaXRpb24oJGVsZXZhdGlvbjIgLSAkZWxldmF0aW9uMik7XG5cbiAgICAmOiN7JHN0YXRlfSB7XG4gICAgICBAaWYgJGVsZXZhdGlvbjEgPT0gMCB7XG4gICAgICAgIC8vIHN0eWxlbGludC1kaXNhYmxlIGRlY2xhcmF0aW9uLW5vLWltcG9ydGFudFxuICAgICAgICBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XG4gICAgICAgIC8vIHN0eWxlbGludC1lbmFibGUgZGVjbGFyYXRpb24tbm8taW1wb3J0YW50XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgYm94LXNoYWRvdzogY2FsY3VsYXRlLXNoYWRvdy1zZXQtYXQtZGVwdGgoJGVsZXZhdGlvbjIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogUmV0dXJucyBib3gtc2hhZG93IGFuZCB0cmFuc2l0aW9uIHByb3BlcnRpZXMgZm9yIHNwZWNpZmljIGVsZW1lbnRzLiBTZWUgJG1hdGVyaWFsLWVsZW1lbnRzLlxuICpcbiAqIEBtaXhpbiBlbGV2YXRpb24tZWxlbWVudFxuICogQHNlY3Rpb24gU2hhZG93LU1peGluc1xuICogQHBhcmFtICRlbGVtZW50LW5hbWVcbiAqICBUaGUgZWxlbWVudCB0byBhZGQgYSBzaGFkb3cgdG9cbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgZWxldmF0aW9uLWVsZW1lbnQoZGlhbG9nKTtcbiAqL1xuQG1peGluIGVsZXZhdGlvbi1lbGVtZW50KCRlbGVtZW50LW5hbWUpIHtcbiAgJGF0dHI6IG1hcC1nZXQoJG1hdGVyaWFsLWVsZW1lbnRzLCAkZWxlbWVudC1uYW1lKTtcblxuICBAaWYgbGVuZ3RoKCRhdHRyKSA9PSAxIHtcbiAgICBAaW5jbHVkZSBlbGV2YXRpb24obnRoKCRhdHRyLCAxKSk7XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIGVsZXZhdGlvbihudGgoJGF0dHIsIDEpLCBudGgoJGF0dHIsIDIpLCBudGgoJGF0dHIsIDMpKTtcbiAgfVxufVxuXG5cbi8qKlxuICogVGhlIHNwYWNpbmcgZGVmYXVsdFxuICpcbiAqIEBzZWN0aW9uIFNwYWNpbmdcbiAqL1xuJGctc3BhY2luZzogMTZweCAhZGVmYXVsdDtcblxuXG4vKipcbiAqIFRoZSBtYXAgb2YgbGF5b3V0IHNwYWNpbmdzXG4gKlxuICogU21hbGw6IDEyLCA4LCA0XG4gKiBCYXNlOiAxNlxuICogTGFyZ2U6IDI0LCAzMiwgNDAsIDQ4LCA1NiwgNzIsIDk2XG4gKlxuICogQHNlY3Rpb24gU3BhY2luZ1xuICovXG4kZy1zcGFjaW5nczogKFxuICBzbWFsbDogIChcbiAgICAyOiBmbG9vcigkZy1zcGFjaW5nIC8gNCksXG4gICAgMTogZmxvb3IoJGctc3BhY2luZyAvIDIpLFxuICAgIDA6IGZsb29yKCRnLXNwYWNpbmcgLSA0KSxcbiAgKSxcbiAgZGVmYXVsdDogKFxuICAgIDA6ICRnLXNwYWNpbmcsXG4gICksXG4gIGxhcmdlOiAoXG4gICAgMDogY2VpbCgkZy1zcGFjaW5nIC8gMiAqIDMpLFxuICAgIDE6IGNlaWwoJGctc3BhY2luZyAvIDIgKiA0KSxcbiAgICAyOiBjZWlsKCRnLXNwYWNpbmcgLyAyICogNSksXG4gICAgMzogY2VpbCgkZy1zcGFjaW5nIC8gMiAqIDYpLFxuICAgIDQ6IGNlaWwoJGctc3BhY2luZyAvIDIgKiA3KSxcbiAgICA1OiBjZWlsKCRnLXNwYWNpbmcgLyAyICogOSksXG4gICAgNjogY2VpbCgkZy1zcGFjaW5nIC8gMiAqIDEyKSxcbiAgKVxuKTtcblxuXG4vKipcbiAqIFJldHJpZXZlIGEgc3BhY2UgZnJvbSB0aGUgJGctc3BhY2luZ3MgbWFwXG4gKlxuICogQHBhcmFtICR0eXBlXG4gKiAgVGhlIHNwYWNpbmcgbWFwIHRvIHVzZS4gRGVmYXVsdDogZGVmYXVsdFxuICogQHBhcmFtICRzaXplXG4gKiAgVGhlIHZhbHVlIGRlc2lyZWQgZnJvbSB0aGUgbWFwLiBEZWZhdWx0OiAwXG4gKiBAZXhhbXBsZVxuICogIHBhZGRpbmc6IHNwYWNpbmcoZGVmYXVsdCk7XG4gKiAgcGFkZGluZzogc3BhY2luZyhsYXJnZSk7XG4gKiAgcGFkZGluZzogc3BhY2luZyhsYXJnZSwgNCk7XG4gKi9cbkBmdW5jdGlvbiBzcGFjaW5nKCR0eXBlOiBkZWZhdWx0LCAkc2l6ZTogMCkge1xuICAvLyBWZXJpZnkgdGhlIHR5cGUgZXhpc3RzXG4gIEBpZiBub3QobWFwLWhhcy1rZXkoJGctc3BhY2luZ3MsICR0eXBlKSkge1xuICAgICRhbGxvd2VkLXR5cGVzOiBtYXAta2V5cygkZy1zcGFjaW5ncyk7XG4gICAgQGVycm9yICdJbnZhbGlkIHNwYWNpbmcgdHlwZSBuYW1lOiBgI3skdHlwZX1gLiBBbGxvd2VkIHR5cGU6ICN7JGFsbG93ZWQtdHlwZXN9JztcbiAgfVxuXG4gIC8vIFZlcmlmeSB0aGUgc2l6ZVxuICBAaWYgbm90KG1hcC1oYXMta2V5KG1hcC1nZXQoJGctc3BhY2luZ3MsICR0eXBlKSwgJHNpemUpKSB7XG4gICAgJGFsbG93ZWQtc2l6ZXM6IG1hcC1rZXlzKG1hcC1nZXQoJGctc3BhY2luZ3MsICR0eXBlKSk7XG4gICAgQGVycm9yICdJbnZhbGlkIHNpemU6IGAjeyRzaXplfWAuIEFsbG93ZWQgc2l6ZXMgZm9yIGAjeyR0eXBlfWAgYXJlOiAjeyRhbGxvd2VkLXNpemVzfSc7XG4gIH1cblxuICBAcmV0dXJuIG1hcC1nZXQobWFwLWdldCgkZy1zcGFjaW5ncywgJHR5cGUpLCAkc2l6ZSk7XG59XG5cbi8qKlxuICogQ2VudGVyIGNoaWxkIGNvbnRlbnQgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5XG4gKlxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSBjZW50ZXItY29udGVudDtcbiAqL1xuQG1peGluIGNlbnRlci1jb250ZW50IHtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gb2YgZWFjaCBkaXJlY3Rpb24gaW4gYSBsaXN0XG4gKlxuICogQHBhcmFtICRkaXJlY3Rpb25zXG4gKiAgTGlzdCBvZiBpbml0aWFsIGRpcmVjdGlvbnNcbiAqIEBleGFtcGxlXG4gKiAgb3Bwb3NpdGUtZGlyZWN0aW9uKHRvcCk7XG4gKiAgb3Bwb3NpdGUtZGlyZWN0aW9uKGxlZnQsIGJvdHRvbSk7XG4gKi9cbkBmdW5jdGlvbiBvcHBvc2l0ZS1kaXJlY3Rpb24oJGRpcmVjdGlvbnMpIHtcbiAgJG9wcG9zaXRlLWRpcmVjdGlvbnM6ICgpO1xuICAkZGlyZWN0aW9uLW1hcDogKFxuICAgICd0b3AnOiAnYm90dG9tJyxcbiAgICAncmlnaHQnOiAnbGVmdCcsXG4gICAgJ2JvdHRvbSc6ICd0b3AnLFxuICAgICdsZWZ0JzogJ3JpZ2h0JyxcbiAgICAnY2VudGVyJzogJ2NlbnRlcicsXG4gICAgJ2x0cic6ICdydGwnLFxuICAgICdydGwnOiAnbHRyJ1xuICApO1xuXG4gIEBlYWNoICRkaXJlY3Rpb24gaW4gJGRpcmVjdGlvbnMge1xuICAgICRkaXJlY3Rpb246IHRvLWxvd2VyLWNhc2UoJGRpcmVjdGlvbik7XG5cbiAgICBAaWYgbWFwLWhhcy1rZXkoJGRpcmVjdGlvbi1tYXAsICRkaXJlY3Rpb24pIHtcbiAgICAgICRvcHBvc2l0ZS1kaXJlY3Rpb25zOiBhcHBlbmQoJG9wcG9zaXRlLWRpcmVjdGlvbnMsIHVucXVvdGUobWFwLWdldCgkZGlyZWN0aW9uLW1hcCwgJGRpcmVjdGlvbikpKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgIEBlcnJvciAnTm8gb3Bwb3NpdGUgZGlyZWN0aW9uIGNhbiBiZSBmb3VuZCBmb3IgYCN7JGRpcmVjdGlvbn1gLiBEaXJlY3Rpb24gb21pdHRlZC4nO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJG9wcG9zaXRlLWRpcmVjdGlvbnM7XG59XG5cbi8qKlxuICogUHNldWRvIGVsZW1lbnQgYmFzZSBzdHlsZXNcbiAqXG4gKiBAcGFyYW0gJGRpc3BsYXlcbiAqICBUaGUgZGlzcGxheSB2YWx1ZSAoYmxvY2svaW5saW5lL2V0YylcbiAqIEBwYXJhbSAkcG9zaXRpb25cbiAqICBUaGUgcG9zaXRpb24gc3R5bGUgKGFic29sdXRlL3N0YXRpYy9ldGMpXG4gKiBAcGFyYW0gJGNvbnRlbnRcbiAqICBUaGUgY29udGVudCB2YWx1ZVxuICovXG5AbWl4aW4gcHNldWRvKFxuICAkZGlzcGxheTogYmxvY2ssXG4gICRwb3NpdGlvbjogYWJzb2x1dGUsXG4gICRjb250ZW50OiAnJ1xuKSB7XG4gIGNvbnRlbnQ6ICRjb250ZW50O1xuICBkaXNwbGF5OiAkZGlzcGxheTtcbiAgcG9zaXRpb246ICRwb3NpdGlvbjtcbn1cblxuLyoqXG4gKiBDb250cm9sIHRoZSByYXRpbyBmb3IgcmVzcG9uc2l2ZSBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSAkeFxuICogIFRoZSB4IHJhdGlvXG4gKiBAcGFyYW0gJHlcbiAqICBUaGUgeSByYXRpb1xuICogQHBhcmFtICRwc2V1ZG9cbiAqICBEZXRlcm1pbmUgaWYgYSBwc2V1ZG8gZWxlbWVudCBzaG91bGQgYmUgdXNlZCB0byBjb250cm9sIHRoZSByYXRpby4gRGVmYXVsdDogdHJ1ZVxuICogQHBhcmFtICRpbWFnZVxuICogIFRoZSBpbWFnZSBzb3VyY2UuIERlZmF1bHQ6IG51bGxcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgcmVzcG9uc2l2ZS1yYXRpbygzLCA0KTtcbiAqICBAaW5jbHVkZSByZXNwb25zaXZlLXJhdGlvKDIwLCA5LCB0cnVlLCB1cmwoJy9pbWFnZXMvbGFuZGluZy1oZXJvLmpwZycpKTtcbiAqL1xuQG1peGluIHJlc3BvbnNpdmUtcmF0aW8oJHgsICR5LCAkcHNldWRvOiB0cnVlLCAkaW1hZ2U6IG51bGwpIHtcbiAgJHBhZGRpbmc6IHVucXVvdGUoKCggJHkgLyAkeCApICogMTAwKSArICclJyk7XG5cbiAgQGlmICR4ID09IG51bGwgb3IgJHkgPT0gbnVsbCB7XG4gICAgQGVycm9yICdCb3RoIHRoZSB4IGFuZCB5IHJhdGlvcyBtdXN0IGJlIHBhc3NlZCBpbi4nO1xuICB9XG5cbiAgQGlmICRwc2V1ZG8ge1xuICAgICY6OmJlZm9yZSB7XG4gICAgICBAaW5jbHVkZSBwc2V1ZG8oJHBvc2l0aW9uOiByZWxhdGl2ZSk7XG4gICAgICBwYWRkaW5nLXRvcDogJHBhZGRpbmc7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIHBhZGRpbmctdG9wOiAkcGFkZGluZztcbiAgfVxuXG4gIEBpZiBpbWFnZSAhPSBudWxsIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJGltYWdlKTtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICB9XG59XG5cbi8qKlxuICogRmlsbCB0aGUgcGFyZW50IGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0gJG1hcmdpblxuICogIFRoZSBhbW91bnQgb2Ygc3BhY2UgYmV0d2VlbiB0aGUgZWRnZSBvZiB0aGUgcGFyZW50LiBEZWZhdWx0OiAwXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIGZpbGwtcGFyZW50O1xuICogIEBpbmNsdWRlIGZpbGwtcGFyZW50KDFlbSk7XG4gKi9cbkBtaXhpbiB0YWtlLXNwYWNlKCRtYXJnaW46IDApIHtcbiAgYm90dG9tOiAkbWFyZ2luO1xuICBsZWZ0OiAkbWFyZ2luO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiAkbWFyZ2luO1xuICB0b3A6ICRtYXJnaW47XG59XG5cbi8qKlxuICogTWFrZSBjb250ZW50IHZpc3VhbGx5IGhpZGRlblxuICpcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgdmlzdWFsbHktaGlkZGVuO1xuICovXG5AbWl4aW4gdmlzdWFsbHktaGlkZGVuIHtcbiAgJHNtYWxsZXN0LWFkanVzdG1lbnQ6IDFweDtcbiAgYm9yZGVyOiAwO1xuICAvLyBub2luc3BlY3Rpb24gQ3NzSW52YWxpZFByb3BlcnR5VmFsdWVcbiAgY2xpcC1wYXRoOiByZWN0KDAsIDAsIDAsIDApO1xuICAvLyBOb3QgYWxsIHN0eWxlcyBhcHBseSB0byBpbmxpbmUgZWxlbWVudHNcbiAgZGlzcGxheTogYmxvY2s7XG4gIGhlaWdodDogJHNtYWxsZXN0LWFkanVzdG1lbnQ7XG4gIG1hcmdpbjogLSRzbWFsbGVzdC1hZGp1c3RtZW50O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwYWRkaW5nOiAwO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIHdpZHRoOiAkc21hbGxlc3QtYWRqdXN0bWVudDtcbn1cblxuLyoqXG4gKiBUaGUgbGlzdCBvZiBwb3NzaWJsZSB6LWluZGV4IHZhbHVlc1xuICpcbiAqIChpdGVtcyBhdCB0aGUgdG9wIGhhdmUgYSBoaWdoZXIgdmFsdWUpXG4gKlxuICogQHNlY3Rpb24gQ29uZmlnXG4gKi9cbiR6LWxheWVyczogKFxuICAnZ2xvYmFsLW92ZXJsYXknLFxuICAnZ2xvYmFsLWhlYWRlcicsXG4gICdkcmF3ZXInLFxuICAndG9vbHRpcCcsXG4gICdhdHRhY2hlZC1wYW5lbC1vdmVybGF5JyxcbiAgJ3BhbmVsLWhlYWRlcicsXG4gICdtZW51LXRyaWdnZXInLFxuKTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgY29ycmVjdCB6LWluZGV4IHZhbHVlIGJ5IHBhc3NpbmcgaW4gdGhlIGl0ZW0gbmFtZVxuICpcbiAqIEBwYXJhbSAkbmFtZVxuICogIFRoZSBuYW1lIG9mIHRoZSBpdGVtIHRoYXQgc2hvdWxkIGhhdmUgYW4gYXNzb2NpYXRlZCB6LWluZGV4XG4gKiBAZXhhbXBsZVxuICogIHoodG9vbHRpcCk7XG4gKiAgeihhdHRhY2hlZC1wYW5lbC1vdmVybGF5KTtcbiAqL1xuQGZ1bmN0aW9uIHooJG5hbWUpIHtcbiAgQGlmIGluZGV4KCR6LWxheWVycywgJG5hbWUpIHtcbiAgICBAcmV0dXJuIChsZW5ndGgoJHotbGF5ZXJzKSAtIGluZGV4KCR6LWxheWVycywgJG5hbWUpKSArIDUwMDtcbiAgfSBAZWxzZSB7XG4gICAgQGVycm9yICdUaGVyZSBpcyBubyBpdGVtIFwiI3skbmFtZX1cIiBpbiB0aGlzIGxpc3Q7IGNob29zZSBvbmUgb2Y6ICN7JHotbGF5ZXJzfSc7XG4gICAgQHJldHVybiBudWxsO1xuICB9XG59XG5cblxuXG4vKipcbiAqIENyZWF0ZSBhIHRyaWFuZ2xlIHNoYXBlIHVzaW5nIENTU1xuICpcbiAqIEBtaXhpbiB0cmlhbmdsZVxuICogQHNlY3Rpb24gU3R5bGUgSGVscGVyc1xuICogQHBhcmFtICRkaXJlY3Rpb25cbiAqICBUcmlhbmdsZSBkaXJlY3Rpb24sIGVpdGhlciBgdG9wYCwgYHJpZ2h0YCwgYGJvdHRvbWAgb3IgYGxlZnRgLlxuICogQHBhcmFtICRjb2xvclxuICogIFRyaWFuZ2xlIGNvbG9yLiBEZWZhdWx0OiBjdXJyZW50Y29sb3JcbiAqIEBwYXJhbSAkc2l6ZVxuICogIFRyaWFuZ2xlIHNpemUuIERlZmF1bHQ6IDFlbVxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSB0cmlhbmdsZSh0b3ApO1xuICogIEBpbmNsdWRlIHRyaWFuZ2xlKGxlZnQsIHJlZCwgMmVtKTtcbiAqL1xuQG1peGluIHRyaWFuZ2xlKCRkaXJlY3Rpb24sICRjb2xvcjogY3VycmVudGNvbG9yLCAkc2l6ZTogMWVtKSB7XG4gICRwZXJwZW5kaWN1bGFyLWJvcmRlcnM6ICRzaXplIHNvbGlkIHRyYW5zcGFyZW50O1xuICBjb250ZW50OiAnJztcbiAgaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAwO1xuICB6LWluZGV4OiB6KHRvb2x0aXApO1xuXG4gIEBpZiBub3QgaW5kZXgodG9wIHJpZ2h0IGJvdHRvbSBsZWZ0LCAkZGlyZWN0aW9uKSB7XG4gICAgQGVycm9yICdEaXJlY3Rpb24gbXVzdCBiZSBlaXRoZXIgYHRvcGAsIGByaWdodGAsIGBib3R0b21gIG9yIGBsZWZ0YC4nO1xuICB9XG5cbiAgQGlmICRkaXJlY3Rpb24gPT0gdG9wIG9yICRkaXJlY3Rpb24gPT0gYm90dG9tIHtcbiAgICBib3JkZXItbGVmdDogJHBlcnBlbmRpY3VsYXItYm9yZGVycztcbiAgICBib3JkZXItcmlnaHQ6ICRwZXJwZW5kaWN1bGFyLWJvcmRlcnM7XG4gIH0gQGVsc2UgaWYgJGRpcmVjdGlvbiA9PSByaWdodCBvciAkZGlyZWN0aW9uID09IGxlZnQge1xuICAgIGJvcmRlci1ib3R0b206ICRwZXJwZW5kaWN1bGFyLWJvcmRlcnM7XG4gICAgYm9yZGVyLXRvcDogJHBlcnBlbmRpY3VsYXItYm9yZGVycztcbiAgfVxuXG4gIEBpZiAkZGlyZWN0aW9uID09IHRvcCB7XG4gICAgYm90dG9tOiAxMDAlO1xuICB9XG5cbiAgQGlmICRkaXJlY3Rpb24gPT0gYm90dG9tIHtcbiAgICB0b3A6IDEwMCU7XG4gIH1cblxuICBib3JkZXItI3tvcHBvc2l0ZS1kaXJlY3Rpb24oJGRpcmVjdGlvbil9OiAoJHNpemUgKiAxLjUpIHNvbGlkICRjb2xvcjtcbn1cblxuLy8gTk9URTogRGlzYWJsaW5nIHRoZSBzdHJpY3QgdmFsdWUgcnVsZSBhcyB3ZSBuZWVkIHRvIGJ1aWxkIG91ciB0eXBlIHN0eWxlc1xuLy8gc3R5bGVsaW50LWRpc2FibGUgc2NhbGUtdW5saW1pdGVkL2RlY2xhcmF0aW9uLXN0cmljdC12YWx1ZVxuXG5cbi8qKlxuICogVGhlIGJhc2UgdHlwZWZhY2VcbiAqL1xuJHR5cGVfX2ZhbWlseS0tYmFzZTogI3tSb2JvdG8sICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWZ9ICFkZWZhdWx0O1xuXG4vKipcbiAqIFRoZSBtb25vc3BhY2VkIHR5cGVmYWNlIGZhbWlseVxuICovXG4kdHlwZV9fZmFtaWx5LS1tb25vc3BhY2VkOiAjeydMdWNpZGEgQ29uc29sZScsIE1vbmFjbywgJ0RlamFWdSBTYW5zIE1vbm8nLCBtb25vc3BhY2V9ICFkZWZhdWx0O1xuXG4vKipcbiAqIFRoZSBhdmFpbGFibGUgdHlwZWZhY2VzXG4gKi9cbiR0eXBvZ3JhcGh5LXR5cGVmYWNlczogKFxuICAncHJpbWFyeSc6ICR0eXBlX19mYW1pbHktLWJhc2UsXG4gICdtb25vc3BhY2VkJzogJHR5cGVfX2ZhbWlseS0tbW9ub3NwYWNlZFxuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSB0eXBvZ3JhcGh5IHNpemVcbiAqL1xuJHR5cGVfX3NpemUtLWJhc2U6IDE2cHggIWRlZmF1bHQ7XG5cbi8qKlxuICogVGhlIGJhc2UgdHlwb2dyYXBoeSB3ZWlnaHRcbiAqL1xuJHR5cGVfX3dlaWdodC0tYmFzZTogNDAwICFkZWZhdWx0O1xuXG4vKipcbiAqIFRoZSBhdmFpbGFibGUgdHlwb2dyYXBoeSBmb3JtYXRzXG4gKi9cbiR0eXBvZ3JhcGh5LWZvcm1hdHM6IChcbiAgJ2Rpc3BsYXknLFxuICAnaGVhZGxpbmUnLFxuICAndGl0bGUnLFxuICAnc3ViaGVhZCcsXG4gICdib2R5JyxcbiAgJ2NhcHRpb24nLFxuICAnZml4ZWR3aWR0aCcsXG4gICdoaW50J1xuKTtcblxuLyoqXG4gKiBUaGUgYXZhaWxhYmxlIHR5cG9ncmFwaHkgbGV2ZWxzIGZvciB0aGUgYGRpc3BsYXlgIGZvcm1hdFxuICovXG4kdHlwb2dyYXBoeS1kaXNwbGF5LWxldmVsczogKFxuICAxLFxuICAyLFxuICAzLFxuICA0XG4pO1xuXG4vKipcbiAqIFRoZSBhdmFpbGFibGUgdHlwb2dyYXBoeSBsZXZlbHMgZm9yIHRoZSBgYm9keWAgZm9ybWF0XG4gKi9cbiR0eXBvZ3JhcGh5LWJvZHktbGV2ZWxzOiAoXG4gIDEsXG4gIDJcbik7XG5cblxuLyoqXG4gKiBSZXR1cm4gdHlwb2dyYXBoeSBzdHlsZXMgYmFzZWQgb24gdGhlIGZvcm1hdCBhbmQgbGV2ZWxcbiAqXG4gKiBAcGFyYW0gJGZvcm1hdFxuICogIE9uZSBvZiB0aGUgYXZhaWxhYmxlIGZvcm1hdHMgZGVmaW5lZCB3aXRoaW4gJHR5cG9ncmFwaHktZm9ybWF0cy4gRGVmYXVsdDogJ2JvZHknLlxuICogQHBhcmFtICRsZXZlbFxuICogIE9uZSBvZiB0aGUgYWNjZXB0ZWQgbGV2ZWxzIGZvciB0aGUgcGFzc2VkIGluIGZvcm1hdC4gRGVmYXVsdDogMVxuICogQHBhcmFtICR0eXBlZmFjZVxuICogIE9uZSBvZiB0aGUgYXZhaWxhYmxlIHR5cGVmYWNlcyBkZWZpbmVkIGluICR0eXBvZ3JhcGh5LXR5cGVmYWNlcy4gRGVmYXVsdDogJ3ByaW1hcnknXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIHR5cG9ncmFwaHk7XG4gKiAgQGluY2x1ZGUgdHlwb2dyYXBoeShkaXNwbGF5LCA0KTtcbiAqL1xuQG1peGluIHR5cG9ncmFwaHkoJGZvcm1hdDogJ2JvZHknLCAkbGV2ZWw6IDEsICR0eXBlZmFjZTogJ3ByaW1hcnknKSB7XG4gIC8vIFZlcmlmeSB0aGUgZm9ybWF0IGlzIHZhbGlkXG4gIEBpZiBpbmRleCgkdHlwb2dyYXBoeS1mb3JtYXRzLCAkZm9ybWF0KSA9PSBudWxsIHtcbiAgICBAZXJyb3IgJ0ludmFsaWQgdHlwb2dyYXBoeSBmb3JtYXQ6IGAjeyRmb3JtYXR9YC4gQWxsb3dlZCBmb3JtYXRzOiAjeyR0eXBvZ3JhcGh5LWZvcm1hdHN9JztcbiAgfVxuXG4gIC8vIFZlcmlmeSB0aGUgdHlwZWZhY2UgaXMgdmFsaWRcbiAgQGlmIG5vdChtYXAtaGFzLWtleSgkdHlwb2dyYXBoeS10eXBlZmFjZXMsICR0eXBlZmFjZSkpIHtcbiAgICAkYWxsb3dlZDogbWFwLWtleXMoJHR5cG9ncmFwaHktdHlwZWZhY2VzKTtcbiAgICBAZXJyb3IgJ0ludmFsaWQgdHlwb2dyYXBoeSB0eXBlZmFjZTogYCN7JHR5cGVmYWNlfWAuIEFsbG93ZWQgdHlwZWZhY2VzOiAjeyRhbGxvd2VkfSc7XG4gIH0gQGVsc2Uge1xuICAgIGZvbnQtZmFtaWx5OiBtYXAtZ2V0KCR0eXBvZ3JhcGh5LXR5cGVmYWNlcywgJHR5cGVmYWNlKTtcbiAgfVxuXG5cbiAgLy8gRElTUExBWVxuICBAaWYgJGZvcm1hdCA9PSAnZGlzcGxheScge1xuICAgIC8vIFZlcmlmeSB0aGUgbGV2ZWwgaXMgdmFsaWQgZm9yIHRoaXMgZm9ybWF0XG4gICAgQGlmIGluZGV4KCR0eXBvZ3JhcGh5LWRpc3BsYXktbGV2ZWxzLCAkbGV2ZWwpID09IG51bGwge1xuICAgICAgQGVycm9yICdJbnZhbGlkIGRpc3BsYXkgZm9ybWF0IGxldmVsOiBgI3skbGV2ZWx9YC4gQWxsb3dlZCBsZXZlbHM6ICN7JHR5cG9ncmFwaHktZGlzcGxheS1sZXZlbHN9JztcbiAgICB9XG5cbiAgICBAaWYgJGxldmVsID09IDEge1xuICAgICAgZm9udC1zaXplOiAzNHB4O1xuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgIGxpbmUtaGVpZ2h0OiA0MHB4O1xuICAgIH1cblxuICAgIEBpZiAkbGV2ZWwgPT0gMiB7XG4gICAgICBmb250LXNpemU6IDQ1cHg7XG4gICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgbGluZS1oZWlnaHQ6IDY0cHg7XG4gICAgfVxuXG4gICAgQGlmICRsZXZlbCA9PSAzIHtcbiAgICAgIGZvbnQtc2l6ZTogNTZweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICBsZXR0ZXItc3BhY2luZzogLS4wMDVlbTtcbiAgICAgIGxpbmUtaGVpZ2h0OiA1NnB4O1xuICAgIH1cblxuICAgIEBpZiAkbGV2ZWwgPT0gNCB7XG4gICAgICBmb250LXNpemU6IDExMnB4O1xuICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICAgIGxldHRlci1zcGFjaW5nOiAtLjAxZW07XG4gICAgICBsaW5lLWhlaWdodDogMTEycHg7XG4gICAgfVxuICB9XG5cblxuICAvLyBIRUFETElORVxuICBAaWYgJGZvcm1hdCA9PSAnaGVhZGxpbmUnIHtcbiAgICBmb250LXNpemU6IDI0cHg7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBsaW5lLWhlaWdodDogMzJweDtcbiAgfVxuXG5cbiAgLy8gVElUTEVcbiAgQGlmICRmb3JtYXQgPT0gJ3RpdGxlJyB7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgbGV0dGVyLXNwYWNpbmc6IC4wMDVlbTtcbiAgfVxuXG5cbiAgLy8gU1VCSEVBRFxuICBAaWYgJGZvcm1hdCA9PSAnc3ViaGVhZCcge1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGxldHRlci1zcGFjaW5nOiAuMDFlbTtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgfVxuXG5cbiAgLy8gQk9EWVxuICBAaWYgJGZvcm1hdCA9PSAnYm9keScge1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBsZXR0ZXItc3BhY2luZzogLjAxZW07XG5cbiAgICAvLyBWZXJpZnkgdGhlIGxldmVsIGlzIHZhbGlkIGZvciB0aGlzIGZvcm1hdFxuICAgIEBpZiBpbmRleCgkdHlwb2dyYXBoeS1ib2R5LWxldmVscywgJGxldmVsKSA9PSBudWxsIHtcbiAgICAgIEBlcnJvciAnSW52YWxpZCBib2R5IGZvcm1hdCBsZXZlbDogYCN7JGxldmVsfWAuIEFsbG93ZWQgbGV2ZWxzOiAjeyR0eXBvZ3JhcGh5LWJvZHktbGV2ZWxzfSc7XG4gICAgfVxuXG4gICAgQGlmICRsZXZlbCA9PSAxIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG5cbiAgICAgIC8vIFRPRE86IG92ZXJ3cml0ZSBpbiBmaWxlcyByYXRoZXIgdGhhbiB0aGlzIG5lc3RlZCBjaGFpbiAodG9vIHNwZWNpZmljKSBodHRwczovL2dpdGh1Yi5jb20vR2V0VGVybWludXMvdGVybWludXMtdWkvaXNzdWVzLzExNTJcbiAgICAgIC8vIERvbid0IGFwcGx5IGN1c3RvbSBsaW5lLWhlaWdodCB0byBidXR0b25zXG4gICAgICAmOm5vdCguYy1idXR0b24pIHtcbiAgICAgICAgJjpub3QoLmMtaW5wdXQpIHtcbiAgICAgICAgICAmOm5vdCguYy1zZWxlY3QpIHtcbiAgICAgICAgICAgICY6bm90KC50cy1jaGVja2JveCkge1xuICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaWYgJGxldmVsID09IDIge1xuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICB9XG4gIH1cblxuXG4gIC8vIENBUFRJT05cbiAgQGlmICRmb3JtYXQgPT0gJ2NhcHRpb24nIHtcbiAgICBmb250LXNpemU6IDEycHg7XG4gICAgbGV0dGVyLXNwYWNpbmc6IC4wMmVtO1xuICB9XG5cblxuICAvLyBGSVhFRFdJRFRIXG4gIEBpZiAkZm9ybWF0ID09ICdmaXhlZHdpZHRoJyB7XG4gICAgZm9udC1mYW1pbHk6ICR0eXBlX19mYW1pbHktLW1vbm9zcGFjZWQ7XG4gIH1cblxuXG4gIC8vIEhpbnRzIChmb3IgaW5wdXRzKVxuICBAaWYgJGZvcm1hdCA9PSAnaGludCcge1xuICAgIGNvbG9yOiBjb2xvcih1dGlsaXR5KTtcbiAgICBmb250LXNpemU6IDc1JTtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxldHRlci1zcGFjaW5nOiAuMDFlbTtcbiAgICBsaW5lLWhlaWdodDogMS41O1xuICB9XG59XG5cblxuLyoqXG4gKiBUcnVuY2F0ZSBvdmVyZmxvd2luZyB0ZXh0IHdpdGggYW4gZWxsaXBzaXNcbiAqXG4gKiBAbWl4aW4gdHlwb2dyYXBoeVxuICogQHNlY3Rpb24gU3R5bGUgSGVscGVyc1xuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSB0cnVuY2F0ZS1vdmVyZmxvdztcbiAqL1xuQG1peGluIHRydW5jYXRlLW92ZXJmbG93KCkge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbn1cblxuLyoqXG4gKiBDZW50ZXIgY2hpbGQgY29udGVudCB2ZXJ0aWNhbGx5IGFuZCBob3Jpem9udGFsbHlcbiAqXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIGNlbnRlci1jb250ZW50O1xuICovXG5AbWl4aW4gY2VudGVyLWNvbnRlbnQge1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiBvZiBlYWNoIGRpcmVjdGlvbiBpbiBhIGxpc3RcbiAqXG4gKiBAcGFyYW0gJGRpcmVjdGlvbnNcbiAqICBMaXN0IG9mIGluaXRpYWwgZGlyZWN0aW9uc1xuICogQGV4YW1wbGVcbiAqICBvcHBvc2l0ZS1kaXJlY3Rpb24odG9wKTtcbiAqICBvcHBvc2l0ZS1kaXJlY3Rpb24obGVmdCwgYm90dG9tKTtcbiAqL1xuQGZ1bmN0aW9uIG9wcG9zaXRlLWRpcmVjdGlvbigkZGlyZWN0aW9ucykge1xuICAkb3Bwb3NpdGUtZGlyZWN0aW9uczogKCk7XG4gICRkaXJlY3Rpb24tbWFwOiAoXG4gICAgJ3RvcCc6ICdib3R0b20nLFxuICAgICdyaWdodCc6ICdsZWZ0JyxcbiAgICAnYm90dG9tJzogJ3RvcCcsXG4gICAgJ2xlZnQnOiAncmlnaHQnLFxuICAgICdjZW50ZXInOiAnY2VudGVyJyxcbiAgICAnbHRyJzogJ3J0bCcsXG4gICAgJ3J0bCc6ICdsdHInXG4gICk7XG5cbiAgQGVhY2ggJGRpcmVjdGlvbiBpbiAkZGlyZWN0aW9ucyB7XG4gICAgJGRpcmVjdGlvbjogdG8tbG93ZXItY2FzZSgkZGlyZWN0aW9uKTtcblxuICAgIEBpZiBtYXAtaGFzLWtleSgkZGlyZWN0aW9uLW1hcCwgJGRpcmVjdGlvbikge1xuICAgICAgJG9wcG9zaXRlLWRpcmVjdGlvbnM6IGFwcGVuZCgkb3Bwb3NpdGUtZGlyZWN0aW9ucywgdW5xdW90ZShtYXAtZ2V0KCRkaXJlY3Rpb24tbWFwLCAkZGlyZWN0aW9uKSkpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgQGVycm9yICdObyBvcHBvc2l0ZSBkaXJlY3Rpb24gY2FuIGJlIGZvdW5kIGZvciBgI3skZGlyZWN0aW9ufWAuIERpcmVjdGlvbiBvbWl0dGVkLic7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkb3Bwb3NpdGUtZGlyZWN0aW9ucztcbn1cblxuLyoqXG4gKiBQc2V1ZG8gZWxlbWVudCBiYXNlIHN0eWxlc1xuICpcbiAqIEBwYXJhbSAkZGlzcGxheVxuICogIFRoZSBkaXNwbGF5IHZhbHVlIChibG9jay9pbmxpbmUvZXRjKVxuICogQHBhcmFtICRwb3NpdGlvblxuICogIFRoZSBwb3NpdGlvbiBzdHlsZSAoYWJzb2x1dGUvc3RhdGljL2V0YylcbiAqIEBwYXJhbSAkY29udGVudFxuICogIFRoZSBjb250ZW50IHZhbHVlXG4gKi9cbkBtaXhpbiBwc2V1ZG8oXG4gICRkaXNwbGF5OiBibG9jayxcbiAgJHBvc2l0aW9uOiBhYnNvbHV0ZSxcbiAgJGNvbnRlbnQ6ICcnXG4pIHtcbiAgY29udGVudDogJGNvbnRlbnQ7XG4gIGRpc3BsYXk6ICRkaXNwbGF5O1xuICBwb3NpdGlvbjogJHBvc2l0aW9uO1xufVxuXG4vKipcbiAqIENvbnRyb2wgdGhlIHJhdGlvIGZvciByZXNwb25zaXZlIGVsZW1lbnRzXG4gKlxuICogQHBhcmFtICR4XG4gKiAgVGhlIHggcmF0aW9cbiAqIEBwYXJhbSAkeVxuICogIFRoZSB5IHJhdGlvXG4gKiBAcGFyYW0gJHBzZXVkb1xuICogIERldGVybWluZSBpZiBhIHBzZXVkbyBlbGVtZW50IHNob3VsZCBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJhdGlvLiBEZWZhdWx0OiB0cnVlXG4gKiBAcGFyYW0gJGltYWdlXG4gKiAgVGhlIGltYWdlIHNvdXJjZS4gRGVmYXVsdDogbnVsbFxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSByZXNwb25zaXZlLXJhdGlvKDMsIDQpO1xuICogIEBpbmNsdWRlIHJlc3BvbnNpdmUtcmF0aW8oMjAsIDksIHRydWUsIHVybCgnL2ltYWdlcy9sYW5kaW5nLWhlcm8uanBnJykpO1xuICovXG5AbWl4aW4gcmVzcG9uc2l2ZS1yYXRpbygkeCwgJHksICRwc2V1ZG86IHRydWUsICRpbWFnZTogbnVsbCkge1xuICAkcGFkZGluZzogdW5xdW90ZSgoKCAkeSAvICR4ICkgKiAxMDApICsgJyUnKTtcblxuICBAaWYgJHggPT0gbnVsbCBvciAkeSA9PSBudWxsIHtcbiAgICBAZXJyb3IgJ0JvdGggdGhlIHggYW5kIHkgcmF0aW9zIG11c3QgYmUgcGFzc2VkIGluLic7XG4gIH1cblxuICBAaWYgJHBzZXVkbyB7XG4gICAgJjo6YmVmb3JlIHtcbiAgICAgIEBpbmNsdWRlIHBzZXVkbygkcG9zaXRpb246IHJlbGF0aXZlKTtcbiAgICAgIHBhZGRpbmctdG9wOiAkcGFkZGluZztcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgcGFkZGluZy10b3A6ICRwYWRkaW5nO1xuICB9XG5cbiAgQGlmIGltYWdlICE9IG51bGwge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgkaW1hZ2UpO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIH1cbn1cblxuLyoqXG4gKiBGaWxsIHRoZSBwYXJlbnQgZWxlbWVudFxuICpcbiAqIEBwYXJhbSAkbWFyZ2luXG4gKiAgVGhlIGFtb3VudCBvZiBzcGFjZSBiZXR3ZWVuIHRoZSBlZGdlIG9mIHRoZSBwYXJlbnQuIERlZmF1bHQ6IDBcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgZmlsbC1wYXJlbnQ7XG4gKiAgQGluY2x1ZGUgZmlsbC1wYXJlbnQoMWVtKTtcbiAqL1xuQG1peGluIHRha2Utc3BhY2UoJG1hcmdpbjogMCkge1xuICBib3R0b206ICRtYXJnaW47XG4gIGxlZnQ6ICRtYXJnaW47XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcmlnaHQ6ICRtYXJnaW47XG4gIHRvcDogJG1hcmdpbjtcbn1cblxuLyoqXG4gKiBNYWtlIGNvbnRlbnQgdmlzdWFsbHkgaGlkZGVuXG4gKlxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSB2aXN1YWxseS1oaWRkZW47XG4gKi9cbkBtaXhpbiB2aXN1YWxseS1oaWRkZW4ge1xuICAkc21hbGxlc3QtYWRqdXN0bWVudDogMXB4O1xuICBib3JkZXI6IDA7XG4gIC8vIG5vaW5zcGVjdGlvbiBDc3NJbnZhbGlkUHJvcGVydHlWYWx1ZVxuICBjbGlwLXBhdGg6IHJlY3QoMCwgMCwgMCwgMCk7XG4gIC8vIE5vdCBhbGwgc3R5bGVzIGFwcGx5IHRvIGlubGluZSBlbGVtZW50c1xuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAkc21hbGxlc3QtYWRqdXN0bWVudDtcbiAgbWFyZ2luOiAtJHNtYWxsZXN0LWFkanVzdG1lbnQ7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBhZGRpbmc6IDA7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgd2lkdGg6ICRzbWFsbGVzdC1hZGp1c3RtZW50O1xufVxuXG5cblxuLyoqXG4gKiBVdGlsaXR5IGNsYXNzIHRvIGhpZGUgYW4gZWxlbWVudFxuICovXG4udS12aXN1YWxseS1oaWRkZW4ge1xuICBAaW5jbHVkZSB2aXN1YWxseS1oaWRkZW47XG59XG5cbi8qKlxuICogVGhlIGxpc3Qgb2YgcG9zc2libGUgei1pbmRleCB2YWx1ZXNcbiAqXG4gKiAoaXRlbXMgYXQgdGhlIHRvcCBoYXZlIGEgaGlnaGVyIHZhbHVlKVxuICpcbiAqIEBzZWN0aW9uIENvbmZpZ1xuICovXG4kei1sYXllcnM6IChcbiAgJ2dsb2JhbC1vdmVybGF5JyxcbiAgJ2dsb2JhbC1oZWFkZXInLFxuICAnZHJhd2VyJyxcbiAgJ3Rvb2x0aXAnLFxuICAnYXR0YWNoZWQtcGFuZWwtb3ZlcmxheScsXG4gICdwYW5lbC1oZWFkZXInLFxuICAnbWVudS10cmlnZ2VyJyxcbik7XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGNvcnJlY3Qgei1pbmRleCB2YWx1ZSBieSBwYXNzaW5nIGluIHRoZSBpdGVtIG5hbWVcbiAqXG4gKiBAcGFyYW0gJG5hbWVcbiAqICBUaGUgbmFtZSBvZiB0aGUgaXRlbSB0aGF0IHNob3VsZCBoYXZlIGFuIGFzc29jaWF0ZWQgei1pbmRleFxuICogQGV4YW1wbGVcbiAqICB6KHRvb2x0aXApO1xuICogIHooYXR0YWNoZWQtcGFuZWwtb3ZlcmxheSk7XG4gKi9cbkBmdW5jdGlvbiB6KCRuYW1lKSB7XG4gIEBpZiBpbmRleCgkei1sYXllcnMsICRuYW1lKSB7XG4gICAgQHJldHVybiAobGVuZ3RoKCR6LWxheWVycykgLSBpbmRleCgkei1sYXllcnMsICRuYW1lKSkgKyA1MDA7XG4gIH0gQGVsc2Uge1xuICAgIEBlcnJvciAnVGhlcmUgaXMgbm8gaXRlbSBcIiN7JG5hbWV9XCIgaW4gdGhpcyBsaXN0OyBjaG9vc2Ugb25lIG9mOiAjeyR6LWxheWVyc30nO1xuICAgIEByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5cbiIsIi8qKlxuICogQSBtaXhpbiB0aGF0IGVuYWJsZXMgaGlkZGVuIHN0eWxlcyBmb3IgYSBuZXN0ZWQgY2RrIGNsYXNzXG4gKi9cbi8qKlxuICogQXBwbGllcyBzdHlsZXMgZm9yIHVzZXJzIGluIGhpZ2ggY29udHJhc3QgbW9kZS4gTm90ZSB0aGF0IHRoaXMgb25seSBhcHBsaWVzXG4gKiB0byBNaWNyb3NvZnQgYnJvd3NlcnMuIENocm9tZSBjYW4gYmUgaW5jbHVkZWQgYnkgY2hlY2tpbmcgZm9yIHRoZSBgaHRtbFtoY11gXG4gKiBhdHRyaWJ1dGUsIGhvd2V2ZXIgQ2hyb21lIGhhbmRsZXMgaGlnaCBjb250cmFzdCBkaWZmZXJlbnRseS5cbiAqIEBwYXJhbSB0YXJnZXQgV2hpY2gga2luZCBvZiBoaWdoIGNvbnRyYXN0IHNldHRpbmcgdG8gdGFyZ2V0LiBEZWZhdWx0cyB0byBgYWN0aXZlYCwgY2FuIGJlXG4gKiAgICBgd2hpdGUtb24tYmxhY2tgIG9yIGBibGFjay1vbi13aGl0ZWAuXG4gKi9cbi8qKlxuICogVGhlIHByaW1hcnkgZWFzaW5nIGRlZmluaXRpb25cbiAqL1xuLyoqXG4gKiBUaGUgbWF0ZXJpYWwgYmFja2dyb3VuZCBlYXNpbmcgZGVmaW5pdGlvblxuICovXG4vKipcbiAqIFRoZSBtYXRlcmlhbCBzaGFkb3cgZWFzaW5nIGRlZmluaXRpb25cbiAqL1xuOnJvb3Qge1xuICAtLXN3aWZ0LWVhc2Utb3V0LWR1cmF0aW9uOiB2YXIoLS10cy1hbmltYXRpb24tdGltZS1kdXJhdGlvbi00MDApO1xuICAtLXN3aWZ0LWVhc2Utb3V0LXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKC4yNSwgLjgsIC4yNSwgMSk7XG4gIC0tc3dpZnQtZWFzZS1pbi1kdXJhdGlvbjogdmFyKC0tdHMtYW5pbWF0aW9uLXRpbWUtZHVyYXRpb24tMzAwKTtcbiAgLS1zd2lmdC1lYXNlLWluLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKC41NSwgMCwgLjU1LCAuMik7XG59XG5cbi8qKlxuICogVGhlIGxpc3Qgb2YgcG9zc2libGUgYnJlYWtwb2ludHNcbiAqL1xuLyoqXG4gKiBXcmFwIHN0eWxlcyBpbiBhIG1lZGlhIHF1ZXJ5XG4gKlxuICogQHBhcmFtICRwb2ludFxuICogIFRoZSBkZXNpcmVkIGJyZWFrcG9pbnRcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgYnAobGF5b3V0LWd0LXhzKSB7XG4gKiAgICB3aWR0aDogMzAlO1xuICogIH1cbiAqICBAaW5jbHVkZSBicChsYXlvdXQteHMpIHtcbiAqICAgIHdpZHRoOiAxMDAlO1xuICogIH1cbiAqL1xuLyoqXG4gKiBUaGUgbWFwIG9mIGF2YWlsYWJsZSBjdXJzb3JzXG4gKi9cbi8qKlxuICogUmV0cmlldmUgYSBzcGFjZSBmcm9tIHRoZSAkZy1jdXJzb3JzIGxpc3QuXG4gKlxuICogVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIGZ1bmN0aW9uIGlzIHRvIGVuZm9yY2Ugd2hpY2ggY3Vyc29ycyBjYW4gYmUgdXNlZC5cbiAqXG4gKiBAcGFyYW0gJHR5cGVcbiAqICBUaGUgY3Vyc29yIHZhbHVlIHRvIHVzZS4gRGVmYXVsdDogYXV0b1xuICogQGV4YW1wbGVcbiAqICBjdXJzb3I6IGN1cnNvcigpO1xuICogIGN1cnNvcjogY3Vyc29yKHBvaW50ZXIpO1xuICovXG4vKipcbiAqIEluY2x1ZGUgYSBjdXN0b20gY3Vyc29yXG4gKlxuICogQHBhcmFtICR0eXBlXG4gKiAgVGhlIGN1cnNvciB2YWx1ZSB0byB1c2UuXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIGN1cnNvcjtcbiAqICBAaW5jbHVkZSBjdXJzb3IocG9pbnRlcik7XG4gKi9cbi8qKlxuICogUmVzZXQgYnV0dG9uIHN0eWxlc1xuICpcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgYnV0dG9uLWJhc2U7XG4gKi9cbi8qKlxuICogVGhlIGJhc2UgdHlwZWZhY2VcbiAqL1xuLyoqXG4gKiBUaGUgbW9ub3NwYWNlZCB0eXBlZmFjZSBmYW1pbHlcbiAqL1xuLyoqXG4gKiBUaGUgYXZhaWxhYmxlIHR5cGVmYWNlc1xuICovXG4vKipcbiAqIFRoZSBiYXNlIHR5cG9ncmFwaHkgc2l6ZVxuICovXG4vKipcbiAqIFRoZSBiYXNlIHR5cG9ncmFwaHkgd2VpZ2h0XG4gKi9cbi8qKlxuICogVGhlIGF2YWlsYWJsZSB0eXBvZ3JhcGh5IGZvcm1hdHNcbiAqL1xuLyoqXG4gKiBUaGUgYXZhaWxhYmxlIHR5cG9ncmFwaHkgbGV2ZWxzIGZvciB0aGUgYGRpc3BsYXlgIGZvcm1hdFxuICovXG4vKipcbiAqIFRoZSBhdmFpbGFibGUgdHlwb2dyYXBoeSBsZXZlbHMgZm9yIHRoZSBgYm9keWAgZm9ybWF0XG4gKi9cbi8qKlxuICogUmV0dXJuIHR5cG9ncmFwaHkgc3R5bGVzIGJhc2VkIG9uIHRoZSBmb3JtYXQgYW5kIGxldmVsXG4gKlxuICogQHBhcmFtICRmb3JtYXRcbiAqICBPbmUgb2YgdGhlIGF2YWlsYWJsZSBmb3JtYXRzIGRlZmluZWQgd2l0aGluICR0eXBvZ3JhcGh5LWZvcm1hdHMuIERlZmF1bHQ6ICdib2R5Jy5cbiAqIEBwYXJhbSAkbGV2ZWxcbiAqICBPbmUgb2YgdGhlIGFjY2VwdGVkIGxldmVscyBmb3IgdGhlIHBhc3NlZCBpbiBmb3JtYXQuIERlZmF1bHQ6IDFcbiAqIEBwYXJhbSAkdHlwZWZhY2VcbiAqICBPbmUgb2YgdGhlIGF2YWlsYWJsZSB0eXBlZmFjZXMgZGVmaW5lZCBpbiAkdHlwb2dyYXBoeS10eXBlZmFjZXMuIERlZmF1bHQ6ICdwcmltYXJ5J1xuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSB0eXBvZ3JhcGh5O1xuICogIEBpbmNsdWRlIHR5cG9ncmFwaHkoZGlzcGxheSwgNCk7XG4gKi9cbi8qKlxuICogVHJ1bmNhdGUgb3ZlcmZsb3dpbmcgdGV4dCB3aXRoIGFuIGVsbGlwc2lzXG4gKlxuICogQG1peGluIHR5cG9ncmFwaHlcbiAqIEBzZWN0aW9uIFN0eWxlIEhlbHBlcnNcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgdHJ1bmNhdGUtb3ZlcmZsb3c7XG4gKi9cbi8qKlxuICogVGhlIHNwYWNpbmcgZGVmYXVsdFxuICpcbiAqIEBzZWN0aW9uIFNwYWNpbmdcbiAqL1xuLyoqXG4gKiBUaGUgbWFwIG9mIGxheW91dCBzcGFjaW5nc1xuICpcbiAqIFNtYWxsOiAxMiwgOCwgNFxuICogQmFzZTogMTZcbiAqIExhcmdlOiAyNCwgMzIsIDQwLCA0OCwgNTYsIDcyLCA5NlxuICpcbiAqIEBzZWN0aW9uIFNwYWNpbmdcbiAqL1xuLyoqXG4gKiBSZXRyaWV2ZSBhIHNwYWNlIGZyb20gdGhlICRnLXNwYWNpbmdzIG1hcFxuICpcbiAqIEBwYXJhbSAkdHlwZVxuICogIFRoZSBzcGFjaW5nIG1hcCB0byB1c2UuIERlZmF1bHQ6IGRlZmF1bHRcbiAqIEBwYXJhbSAkc2l6ZVxuICogIFRoZSB2YWx1ZSBkZXNpcmVkIGZyb20gdGhlIG1hcC4gRGVmYXVsdDogMFxuICogQGV4YW1wbGVcbiAqICBwYWRkaW5nOiBzcGFjaW5nKGRlZmF1bHQpO1xuICogIHBhZGRpbmc6IHNwYWNpbmcobGFyZ2UpO1xuICogIHBhZGRpbmc6IHNwYWNpbmcobGFyZ2UsIDQpO1xuICovXG4vKipcbiAqIEJveCBTaGFkb3cgdmFsdWVzIGZyb20gTWF0ZXJpYWwgU2hhZG93IEludGVycG9sYXRvclxuICpcbiAqIC0gRXhpc3RpbmcgbGlicmFyeSByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9wcmVzdG9wYXN0by9TQ1NTLU1hdGVyaWFsLVNoYWRvd3NcbiAqIC0gQW5ndWxhciBNYXRlcmlhbCBkZXNpZ24gbm90ZXMgaGVyZTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVzNOR1NMcURaempiQkJMVzJDNnlfNk5VeHR2ZFpBVmFKdmc1OExZM1EwRS9wcmV2aWV3XG4gKiAtIFJlZmVyZW5jZSBDb2RlUGVuOiBodHRwczovL2NvZGVwZW4uaW8vc2h5bmRtYW4vcGVuL29qeG1kWT9lZGl0b3JzPTAwMVxuICovXG4vKipcbiAqIFNoYWRvdyBjb2xvcnMuXG4gKiBodHRwOi8vY29kZXBlbi5pby9zaHluZG1hbi9wZW4vb2p4bWRZXG4gKlxuICogLSBVTUJSQTogXCJBIGNvbmljYWwgc2hhZG93IGV4Y2x1ZGluZyBhbGwgbGlnaHQgZnJvbSBhIGdpdmVuIHNvdXJjZTsgX3NwZWNpZmljYWxseV86IHRoZSBjb25pY2FsXG4gKiBwYXJ0IG9mIHRoZSBzaGFkb3cgb2YgYSBjZWxlc3RpYWwgYm9keSBleGNsdWRpbmcgYWxsIGxpZ2h0IGZyb20gdGhlIHByaW1hcnkgc291cmNlXCJcbiAqIC0gUEVOVU1CUkE6IFwiQSBzcGFjZSBvZiBwYXJ0aWFsIGlsbHVtaW5hdGlvbiAoYXMgaW4gYW4gZWNsaXBzZSkgYmV0d2VlbiB0aGUgcGVyZmVjdCBzaGFkb3cgb24gYWxsXG4gKiBzaWRlcyBhbmQgdGhlIGZ1bGwgbGlnaHRcIlxuICpcbiAqIEBudWNsaWRlIFNoYWRvdy1Db2xvcnNcbiAqIEBzZWN0aW9uIENvbmZpZyA+IFNoYWRvd3NcbiAqL1xuLyoqXG4gKiBIYW5kLWRlc2lnbmVkIHJlZmVyZW5jZSBzaGFkb3cgc2V0c1xuICpcbiAqIFNvdXJjZTogaHR0cDovL2NvZGVwZW4uaW8vc2h5bmRtYW4vcGVuL29qeG1kWVxuICpcbiAqIEBudWNsaWRlIFNoYWRvdy1TZXRzXG4gKiBAc2VjdGlvbiBDb25maWcgPiBTaGFkb3dzXG4gKi9cbi8qKlxuICogQW5pbWF0aW9uIGR1cmF0aW9uc1xuICpcbiAqIEBudWNsaWRlIFNoYWRvdy1BbmltYXRpb24tRHVyYXRpb25zXG4gKiBAc2VjdGlvbiBDb25maWcgPiBTaGFkb3dzXG4gKi9cbi8qKlxuICogTWF0ZXJpYWwgRGVzaWduIGVsZW1lbnQgZWxldmF0aW9uc1xuICpcbiAqIFNvdXJjZTogaHR0cHM6Ly9tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21hdGVyaWFsLWRlc2lnbi9lbGV2YXRpb24tc2hhZG93cy5odG1sI2VsZXZhdGlvbi1zaGFkb3dzLWVsZXZhdGlvbi1hbmRyb2lkXG4gKlxuICogQG51Y2xpZGUgU2hhZG93LUVsZW1lbnRzLU1hcFxuICogQHNlY3Rpb24gQ29uZmlnID4gU2hhZG93c1xuICovXG4vKipcbiAqIFJldHVybnMgdGhlIHR3byByZWZlcmVuY2Ugc2hhZG93cyB3aG9zZSBlbGV2YXRpb25zIGJvdW5kIHRoZSBzcGVjaWZpZWQgZWxldmF0aW9uXG4gKlxuICogSW4gdGhlIGNhc2Ugd2hlcmUgdGhlIHN1cHBsaWVkIGVsZXZhdGlvbiBleGNlZWRzIHRoZSBtYXhpbXVtIHJlZmVyZW5jZSBlbGV2YXRpb24sIHRoZSBsYXN0IHR3b1xuICogcmVmZXJlbmNlIHNoYWRvd3MgYXJlIHJldHVybmVkLlxuICpcbiAqIEBtaXhpbiBmaW5kLWJvdW5kaW5nLXNoYWRvdy1zZXRzXG4gKiBAc2VjdGlvbiBTaGFkb3ctRnVuY3Rpb25zXG4gKiBAcGFyYW0gJGVsZXZhdGlvblxuICogIFRoZSBlbGV2YXRpb25cbiAqIEBleGFtcGxlXG4gKiAgJGZvbyA9IGZpbmQtYm91bmRpbmctc2hhZG93LXNldHMoMik7XG4gKi9cbi8qKlxuICogUGVyZm9ybXMgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB2YWx1ZXMgYSBhbmQgYlxuICpcbiAqIFJldHVybnMgdGhlIHZhbHVlIGJldHdlZW4gYSBhbmQgYiBwcm9wb3J0aW9uYWwgdG8geCAod2hlbiB4IGlzIGJldHdlZW4gMCBhbmQgMS4gV2hlbiB4IGlzIG91dHNpZGVcbiAqIHRoaXMgcmFuZ2UsIHRoZSByZXR1cm4gdmFsdWUgaXMgYSBsaW5lYXIgZXh0cmFwb2xhdGlvbilcbiAqXG4gKiBAbWl4aW4gbGVycFxuICogQHNlY3Rpb24gU2hhZG93LUZ1bmN0aW9uc1xuICogQHBhcmFtICR4XG4gKiAgVGhlIHByb3BvcnRpb25hbCBjb250cm9sXG4gKiBAcGFyYW0gJGFcbiAqICBUaGUgc3RhcnRpbmcgdmFsdWVcbiAqIEBwYXJhbSAkYlxuICogIFRoZSBlbmRpbmcgdmFsdWVcbiAqIEBleGFtcGxlXG4gKiAgJGZvbyA9IGxlcnAoLjIsIDMsIDYpO1xuICovXG4vKipcbiAqIFBlcmZvcm1zIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gc2hhZG93cyBieSBpbnRlcnBvbGF0aW5nIGVhY2ggcHJvcGVydHkgaW5kaXZpZHVhbGx5XG4gKlxuICogUmV0dXJucyB0aGUgdmFsdWUgYmV0d2VlbiBzaGFkb3cxIGFuZCBzaGFkb3cyIHByb3BvcnRpb25hbCB0byB4ICh3aGVuIHggaXMgYmV0d2VlbiAwIGFuZCAxLiBXaGVuXG4gKiB4IGlzIG91dHNpZGUgdGhpcyByYW5nZSwgdGhlIHJldHVybiB2YWx1ZSBpcyBhIGxpbmVhciBleHRyYXBvbGF0aW9uKS5cbiAqXG4gKiBAbWl4aW4gbGVycC1zaGFkb3dcbiAqIEBzZWN0aW9uIFNoYWRvdy1GdW5jdGlvbnNcbiAqIEBwYXJhbSAkeFxuICogIFRoZSBwcm9wb3J0aW9uYWwgY29udHJvbFxuICogQHBhcmFtICRzaGFkb3cxXG4gKiAgVGhlIHN0YXJ0aW5nIHNoYWRvd1xuICogQHBhcmFtICRzaGFkb3cyXG4gKiAgVGhlIGVuZGluZyBzaGFkb3dcbiAqL1xuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzZXQgb2Ygc2hhZG93cyBhdCBhIGdpdmVuIGVsZXZhdGlvblxuICpcbiAqIEBtaXhpbiBjYWxjdWxhdGUtc2hhZG93LXNldC1hdC1kZXB0aFxuICogQHNlY3Rpb24gU2hhZG93LUZ1bmN0aW9uc1xuICogQHBhcmFtICRlbGV2YXRpb25cbiAqICBUaGUgZGVzaXJlZCBlbGV2YXRpb25cbiAqIEBleGFtcGxlXG4gKiAgJGZvbyA9IGNhbGN1bGF0ZS1zaGFkb3ctc2V0LWF0LWRlcHRoKDIpO1xuICovXG4vKipcbiAqIEdlbmVyYXRlcyB0aGUgdHJhbnNpdGlvbiBmb3IgYSBjaGFuZ2UgYmV0d2VlbiAyIGVsZXZhdGlvbnNcbiAqXG4gKiBUaGUgbGFyZ2VyIHRoZSBlbGV2YXRpb24gY2hhbmdlIHRoZSBsb25nZXIgdGhlIGFuaW1hdGlvbiB0YWtlc1xuICpcbiAqIEBtaXhpbiBlbGV2YXRpb24tdHJhbnNpdGlvblxuICogQHNlY3Rpb24gU2hhZG93LU1peGluc1xuICogQHBhcmFtICRlbGV2YXRpb24tY2hhbmdlXG4gKiAgVGhlIGVsZXZhdGlvbiBjaGFuZ2UgYW1vdW50XG4gKiBAcGFyYW0gJGVhc2luZ1xuICogIFRoZSBlYXNpbmcgZnVuY3Rpb24gb3IgbmFtZVxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSBlbGV2YXRpb24tdHJhbnNpdGlvbihkaWFsb2cpO1xuICovXG4vKipcbiAqIEdlbmVyYXRlcyBib3gtc2hhZG93IGFuZCB0aGUgdHJhbnNpdGlvbiBmb3IgYSBnaXZlbiBlbGV2YXRpb25cbiAqXG4gKiAtIEEgc2luZ2xlIGVsZXZhdGlvbiB3aWxsIGdlbmVyYXRlIGEgc2luZ2xlIGJveC1zaGFkb3cgc2V0XG4gKiAtIFR3byBlbGV2YXRpb25zIGFuZCBhIHN0YXRlIHdpbGwgZ2VuZXJhdGUgYSBkZWZhdWx0IGJveC1zaGFkb3cgc2V0IGFuZCBhbm90aGVyIHNldCB0aGF0IGlzXG4gKiBhY3RpdmF0ZWQgYnkgdGhlIHN0YXRlIHRlc3RlZCB3aXRoIDpob3ZlciBhbmQgOmFjdGl2ZVxuICpcbiAqIEBtaXhpbiBlbGV2YXRpb25cbiAqIEBzZWN0aW9uIFNoYWRvdy1NaXhpbnNcbiAqIEBwYXJhbSAkZWxldmF0aW9uMVxuICogIFRoZSBzdGFydGluZyBlbGV2YXRpb25cbiAqIEBwYXJhbSAkZWxldmF0aW9uMlxuICogIFRoZSBkZXN0aW5hdGlvbiBlbGV2YXRpb25cbiAqIEBwYXJhbSAkc3RhdGVcbiAqICBob3ZlciwgZm9jdXMsIGFjdGl2ZVxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSBlbGV2YXRpb24oMiwgOCwgYWN0aXZlKTtcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGJveC1zaGFkb3cgYW5kIHRyYW5zaXRpb24gcHJvcGVydGllcyBmb3Igc3BlY2lmaWMgZWxlbWVudHMuIFNlZSAkbWF0ZXJpYWwtZWxlbWVudHMuXG4gKlxuICogQG1peGluIGVsZXZhdGlvbi1lbGVtZW50XG4gKiBAc2VjdGlvbiBTaGFkb3ctTWl4aW5zXG4gKiBAcGFyYW0gJGVsZW1lbnQtbmFtZVxuICogIFRoZSBlbGVtZW50IHRvIGFkZCBhIHNoYWRvdyB0b1xuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSBlbGV2YXRpb24tZWxlbWVudChkaWFsb2cpO1xuICovXG4vKipcbiAqIFRoZSBtYXAgb2YgYXZhaWxhYmxlIGN1cnNvcnNcbiAqL1xuLyoqXG4gKiBSZXRyaWV2ZSBhIHNwYWNlIGZyb20gdGhlICRnLWN1cnNvcnMgbGlzdC5cbiAqXG4gKiBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdG8gZW5mb3JjZSB3aGljaCBjdXJzb3JzIGNhbiBiZSB1c2VkLlxuICpcbiAqIEBwYXJhbSAkdHlwZVxuICogIFRoZSBjdXJzb3IgdmFsdWUgdG8gdXNlLiBEZWZhdWx0OiBhdXRvXG4gKiBAZXhhbXBsZVxuICogIGN1cnNvcjogY3Vyc29yKCk7XG4gKiAgY3Vyc29yOiBjdXJzb3IocG9pbnRlcik7XG4gKi9cbi8qKlxuICogSW5jbHVkZSBhIGN1c3RvbSBjdXJzb3JcbiAqXG4gKiBAcGFyYW0gJHR5cGVcbiAqICBUaGUgY3Vyc29yIHZhbHVlIHRvIHVzZS5cbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgY3Vyc29yO1xuICogIEBpbmNsdWRlIGN1cnNvcihwb2ludGVyKTtcbiAqL1xuLyoqXG4gKiBQdXJlIC0gRGFya1xuICovXG4vKipcbiAqIFB1cmUgLSBMaWdodFxuICovXG4vKipcbiAqIFV0aWxpdHkgLSBFeHRyYSBEYXJrXG4gKi9cbi8qKlxuICogVXRpbGl0eSAtIERhcmtcbiAqL1xuLyoqXG4gKiBVdGlsaXR5XG4gKi9cbi8qKlxuICogVXRpbGl0eSAtIExpZ2h0XG4gKi9cbi8qKlxuICogVXRpbGl0eSAtIEV4dHJhIExpZ2h0XG4gKi9cbi8qKlxuICogUHJpbWFyeSAtIEV4dHJhIERhcmtcbiAqL1xuLyoqXG4gKiBQcmltYXJ5IC0gRGFya1xuICovXG4vKipcbiAqIFByaW1hcnlcbiAqL1xuLyoqXG4gKiBQcmltYXJ5IC0gTGlnaHRcbiAqL1xuLyoqXG4gKiBQcmltYXJ5IC0geExpZ2h0XG4gKi9cbi8qKlxuICogQWNjZW50IC0gRXh0cmEgRGFya1xuICovXG4vKipcbiAqIEFjY2VudCAtIERhcmtcbiAqL1xuLyoqXG4gKiBBY2NlbnRcbiAqL1xuLyoqXG4gKiBBY2NlbnQgLSBMaWdodFxuICovXG4vKipcbiAqIEFjY2VudCAtIHhMaWdodFxuICovXG4vKipcbiAqIEVycm9yIC0gRGFya1xuICovXG4vKipcbiAqIEVycm9yXG4gKi9cbi8qKlxuICogRXJyb3IgLSBMaWdodFxuICovXG4vKipcbiAqIFdhcm4gLSBEYXJrXG4gKi9cbi8qKlxuICogV2FyblxuICovXG4vKipcbiAqIFdhcm4gLSBMaWdodFxuICovXG4vKipcbiAqIEhpZ2hsaWdodCAtIERhcmtcbiAqL1xuLyoqXG4gKiBIaWdobGlnaHRcbiAqL1xuLyoqXG4gKiBIaWdobGlnaHQgLSBMaWdodFxuICovXG4vKipcbiAqIFRoZSBtYXAgb2YgY29sb3JzXG4gKlxuICogTm90ZTogQ3VycmVudGx5LCB3YXJuIGFuZCBlcnJvciBhcmUgdGhlIHNhbWUgY29sb3IgaW4gdGhlICRwYWxldHRlcyBtYXAuIE1vcmUgd29yayBuZWVkcyB0byBiZSBkb25lIHRvIHNvbGlkaWZ5IG91ciBwYWxldHRlLlxuICovXG4vKipcbiAqIFJldHJpZXZlIGEgY29sb3IgZnJvbSB0aGUgY29sb3JzIG1hcFxuICpcbiAqIEBwYXJhbSAkcGFsZXR0ZVxuICogIFRoZSBwYWxldHRlIHRvIHVzZSBmcm9tIHRoZSBtYXBcbiAqIEBwYXJhbSAkdG9uZVxuICogIFRoZSB0b25lIHRvIHVzZSBmcm9tIHRoZSBzZWxlY3RlZCBtYXAuIERlZmF1bHQ6IGJhc2VcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgY29sb3IocHJpbWFyeSk7XG4gKiAgQGluY2x1ZGUgY29sb3IoYWNjZW50LCBsaWdodCk7XG4gKi9cbi8qKlxuICogVGhlIG1hcCB0aGVtZXMgdG8gY29sb3JzXG4gKi9cbi8qKlxuICogT3V0cHV0IGNvbmRpdGlvbmFsIHN0eWxlcyBmb3IgdGhlIHBvc3NpYmxlIHRoZW1lc1xuICpcbiAqIEBwYXJhbSAkcHJvcGVydHlcbiAqICBUaGUgQ1NTIHByb3BlcnR5IHRoYXQgc2hvdWxkIGJlIGNvbG9yZWQuIERlZmF1bHQ6ICdiYWNrZ3JvdW5kLWNvbG9yJ1xuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSB0aGVtZS1jb2xvcjtcbiAqICBAaW5jbHVkZSB0aGVtZS1jb2xvcignY29sb3InKTtcbiAqL1xuLyoqXG4gKiBEZWZpbmUgdGhlIG1hdGVyaWFsIGJhc2VkIHByaW1hcnkgbWFwXG4gKi9cbi8qKlxuICogRGVmaW5lIHRoZSBtYXRlcmlhbCBiYXNlZCBhY2NlbnQgbWFwXG4gKi9cbi8qKlxuICogRGVmaW5lIHRoZSBtYXRlcmlhbCBiYXNlZCB3YXJuIG1hcFxuICovXG4vKipcbiAqIFRoZSBtYXAgb2YgYXZhaWxhYmxlIGN1cnNvcnNcbiAqL1xuLyoqXG4gKiBSZXRyaWV2ZSBhIHNwYWNlIGZyb20gdGhlICRnLWN1cnNvcnMgbGlzdC5cbiAqXG4gKiBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdG8gZW5mb3JjZSB3aGljaCBjdXJzb3JzIGNhbiBiZSB1c2VkLlxuICpcbiAqIEBwYXJhbSAkdHlwZVxuICogIFRoZSBjdXJzb3IgdmFsdWUgdG8gdXNlLiBEZWZhdWx0OiBhdXRvXG4gKiBAZXhhbXBsZVxuICogIGN1cnNvcjogY3Vyc29yKCk7XG4gKiAgY3Vyc29yOiBjdXJzb3IocG9pbnRlcik7XG4gKi9cbi8qKlxuICogSW5jbHVkZSBhIGN1c3RvbSBjdXJzb3JcbiAqXG4gKiBAcGFyYW0gJHR5cGVcbiAqICBUaGUgY3Vyc29yIHZhbHVlIHRvIHVzZS5cbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgY3Vyc29yO1xuICogIEBpbmNsdWRlIGN1cnNvcihwb2ludGVyKTtcbiAqL1xuLyoqXG4gKiBQdXJlIC0gRGFya1xuICovXG4vKipcbiAqIFB1cmUgLSBMaWdodFxuICovXG4vKipcbiAqIFV0aWxpdHkgLSBFeHRyYSBEYXJrXG4gKi9cbi8qKlxuICogVXRpbGl0eSAtIERhcmtcbiAqL1xuLyoqXG4gKiBVdGlsaXR5XG4gKi9cbi8qKlxuICogVXRpbGl0eSAtIExpZ2h0XG4gKi9cbi8qKlxuICogVXRpbGl0eSAtIEV4dHJhIExpZ2h0XG4gKi9cbi8qKlxuICogUHJpbWFyeSAtIEV4dHJhIERhcmtcbiAqL1xuLyoqXG4gKiBQcmltYXJ5IC0gRGFya1xuICovXG4vKipcbiAqIFByaW1hcnlcbiAqL1xuLyoqXG4gKiBQcmltYXJ5IC0gTGlnaHRcbiAqL1xuLyoqXG4gKiBQcmltYXJ5IC0geExpZ2h0XG4gKi9cbi8qKlxuICogQWNjZW50IC0gRXh0cmEgRGFya1xuICovXG4vKipcbiAqIEFjY2VudCAtIERhcmtcbiAqL1xuLyoqXG4gKiBBY2NlbnRcbiAqL1xuLyoqXG4gKiBBY2NlbnQgLSBMaWdodFxuICovXG4vKipcbiAqIEFjY2VudCAtIHhMaWdodFxuICovXG4vKipcbiAqIEVycm9yIC0gRGFya1xuICovXG4vKipcbiAqIEVycm9yXG4gKi9cbi8qKlxuICogRXJyb3IgLSBMaWdodFxuICovXG4vKipcbiAqIFdhcm4gLSBEYXJrXG4gKi9cbi8qKlxuICogV2FyblxuICovXG4vKipcbiAqIFdhcm4gLSBMaWdodFxuICovXG4vKipcbiAqIEhpZ2hsaWdodCAtIERhcmtcbiAqL1xuLyoqXG4gKiBIaWdobGlnaHRcbiAqL1xuLyoqXG4gKiBIaWdobGlnaHQgLSBMaWdodFxuICovXG4vKipcbiAqIFRoZSBtYXAgb2YgY29sb3JzXG4gKlxuICogTm90ZTogQ3VycmVudGx5LCB3YXJuIGFuZCBlcnJvciBhcmUgdGhlIHNhbWUgY29sb3IgaW4gdGhlICRwYWxldHRlcyBtYXAuIE1vcmUgd29yayBuZWVkcyB0byBiZSBkb25lIHRvIHNvbGlkaWZ5IG91ciBwYWxldHRlLlxuICovXG4vKipcbiAqIFJldHJpZXZlIGEgY29sb3IgZnJvbSB0aGUgY29sb3JzIG1hcFxuICpcbiAqIEBwYXJhbSAkcGFsZXR0ZVxuICogIFRoZSBwYWxldHRlIHRvIHVzZSBmcm9tIHRoZSBtYXBcbiAqIEBwYXJhbSAkdG9uZVxuICogIFRoZSB0b25lIHRvIHVzZSBmcm9tIHRoZSBzZWxlY3RlZCBtYXAuIERlZmF1bHQ6IGJhc2VcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgY29sb3IocHJpbWFyeSk7XG4gKiAgQGluY2x1ZGUgY29sb3IoYWNjZW50LCBsaWdodCk7XG4gKi9cbi8qKlxuICogVGhlIG1hcCB0aGVtZXMgdG8gY29sb3JzXG4gKi9cbi8qKlxuICogT3V0cHV0IGNvbmRpdGlvbmFsIHN0eWxlcyBmb3IgdGhlIHBvc3NpYmxlIHRoZW1lc1xuICpcbiAqIEBwYXJhbSAkcHJvcGVydHlcbiAqICBUaGUgQ1NTIHByb3BlcnR5IHRoYXQgc2hvdWxkIGJlIGNvbG9yZWQuIERlZmF1bHQ6ICdiYWNrZ3JvdW5kLWNvbG9yJ1xuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSB0aGVtZS1jb2xvcjtcbiAqICBAaW5jbHVkZSB0aGVtZS1jb2xvcignY29sb3InKTtcbiAqL1xuLyoqXG4gKiBEZWZpbmUgdGhlIG1hdGVyaWFsIGJhc2VkIHByaW1hcnkgbWFwXG4gKi9cbi8qKlxuICogRGVmaW5lIHRoZSBtYXRlcmlhbCBiYXNlZCBhY2NlbnQgbWFwXG4gKi9cbi8qKlxuICogRGVmaW5lIHRoZSBtYXRlcmlhbCBiYXNlZCB3YXJuIG1hcFxuICovXG4vKipcbiAqIFRoZSBtYXAgb2YgYXZhaWxhYmxlIGN1cnNvcnNcbiAqL1xuLyoqXG4gKiBSZXRyaWV2ZSBhIHNwYWNlIGZyb20gdGhlICRnLWN1cnNvcnMgbGlzdC5cbiAqXG4gKiBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdG8gZW5mb3JjZSB3aGljaCBjdXJzb3JzIGNhbiBiZSB1c2VkLlxuICpcbiAqIEBwYXJhbSAkdHlwZVxuICogIFRoZSBjdXJzb3IgdmFsdWUgdG8gdXNlLiBEZWZhdWx0OiBhdXRvXG4gKiBAZXhhbXBsZVxuICogIGN1cnNvcjogY3Vyc29yKCk7XG4gKiAgY3Vyc29yOiBjdXJzb3IocG9pbnRlcik7XG4gKi9cbi8qKlxuICogSW5jbHVkZSBhIGN1c3RvbSBjdXJzb3JcbiAqXG4gKiBAcGFyYW0gJHR5cGVcbiAqICBUaGUgY3Vyc29yIHZhbHVlIHRvIHVzZS5cbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgY3Vyc29yO1xuICogIEBpbmNsdWRlIGN1cnNvcihwb2ludGVyKTtcbiAqL1xuLyoqXG4gKiBUaGUgc3BhY2luZyBkZWZhdWx0XG4gKlxuICogQHNlY3Rpb24gU3BhY2luZ1xuICovXG4vKipcbiAqIFRoZSBtYXAgb2YgbGF5b3V0IHNwYWNpbmdzXG4gKlxuICogU21hbGw6IDEyLCA4LCA0XG4gKiBCYXNlOiAxNlxuICogTGFyZ2U6IDI0LCAzMiwgNDAsIDQ4LCA1NiwgNzIsIDk2XG4gKlxuICogQHNlY3Rpb24gU3BhY2luZ1xuICovXG4vKipcbiAqIFJldHJpZXZlIGEgc3BhY2UgZnJvbSB0aGUgJGctc3BhY2luZ3MgbWFwXG4gKlxuICogQHBhcmFtICR0eXBlXG4gKiAgVGhlIHNwYWNpbmcgbWFwIHRvIHVzZS4gRGVmYXVsdDogZGVmYXVsdFxuICogQHBhcmFtICRzaXplXG4gKiAgVGhlIHZhbHVlIGRlc2lyZWQgZnJvbSB0aGUgbWFwLiBEZWZhdWx0OiAwXG4gKiBAZXhhbXBsZVxuICogIHBhZGRpbmc6IHNwYWNpbmcoZGVmYXVsdCk7XG4gKiAgcGFkZGluZzogc3BhY2luZyhsYXJnZSk7XG4gKiAgcGFkZGluZzogc3BhY2luZyhsYXJnZSwgNCk7XG4gKi9cbi5jZGstZHJhZyB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLmNkay1kcmFnOm5vdCguY2RrLWRyYWctcGxhY2Vob2xkZXIpIHtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDI1MG1zIGN1YmljLWJlemllcigwLCAwLCAwLjIsIDEpO1xufVxuXG4uY2RrLWRyYWcgLmNkay1kcmFnLWhhbmRsZSB7XG4gIGNvbG9yOiAjY2VjZGQxO1xuICBjdXJzb3I6IG5zLXJlc2l6ZTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogOHB4O1xufVxuXG4uY2RrLWRyYWcuY2RrLWRyYWctcHJldmlldyB7XG4gIC8qIHN0eWxlbGludC1kaXNhYmxlLW5leHQtbGluZSBwbHVnaW4vc3R5bGVsaW50LW5vLWluZGlzdGluZ3Vpc2hhYmxlLWNvbG9ycyAqL1xuICAtLXNoYWRvdzpcbiAgICAgIDAgNXB4IDVweCAtM3B4IHJnYmEoMCwgMCwgMCwgLjIpLFxuICAgICAgMCA4cHggMTBweCAxcHggcmdiYSgwLCAwLCAwLCAuMTQpLFxuICAgICAgMCAzcHggMTRweCAycHggcmdiYSgwLCAwLCAwLCAuMTIpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWZhO1xuICBib3gtc2hhZG93OiB2YXIoLS1zaGFkb3cpO1xuICBtaW4taGVpZ2h0OiA1MHB4O1xuICAvKiBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVjbGFyYXRpb24tbm8taW1wb3J0YW50ICovXG4gIHBhZGRpbmc6IDAgIWltcG9ydGFudDtcbn1cblxuLmNkay1kcmFnLmNkay1kcmFnLXByZXZpZXcgLmMtY2hlY2tib3gge1xuICBtYXJnaW4tbGVmdDogMTZweDtcbn1cblxuLmNkay1kcmFnLXBsYWNlaG9sZGVyIHtcbiAgLS1kcm9wLWJnOiAjY2NlOGQ1O1xuICAtLWRyb3AtYm9yZGVyOiAjN2ZkMDljO1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1kcm9wLWJnKTtcbiAgYm9yZGVyOiAycHggZG90dGVkIHZhcigtLWRyb3AtYm9yZGVyKTtcbiAgY3Vyc29yOiBucy1yZXNpemU7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAyNTBtcyBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKTtcbn1cblxuLyoqXG4gKiBBIG1peGluIHRvIGNvcnJlY3RseSBuZXN0IHBsYWNlaG9sZGVyIHN0eWxlc1xuICpcbiAqIEBleGFtcGxlXG4gKiAgaW5wdXQtcGxhY2Vob2xkZXIge1xuICogICAgdHJhbnNpdGlvbjogYWxsIDIwMG1zIGVhc2U7XG4gKiAgfVxuICovXG4vKipcbiAqIEEgbWl4aW4gdG8gY29ycmVjdGx5IG5lc3QgcGxhY2Vob2xkZXIgc3R5bGVzXG4gKlxuICogQGV4YW1wbGVcbiAqICBpbnB1dC1wbGFjZWhvbGRlciB7XG4gKiAgICB0cmFuc2l0aW9uOiBhbGwgMjAwbXMgZWFzZTtcbiAqICB9XG4gKi9cbi8qKlxuICogQ2VudGVyIGNoaWxkIGNvbnRlbnQgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5XG4gKlxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSBjZW50ZXItY29udGVudDtcbiAqL1xuLyoqXG4gKiBSZXR1cm4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiBvZiBlYWNoIGRpcmVjdGlvbiBpbiBhIGxpc3RcbiAqXG4gKiBAcGFyYW0gJGRpcmVjdGlvbnNcbiAqICBMaXN0IG9mIGluaXRpYWwgZGlyZWN0aW9uc1xuICogQGV4YW1wbGVcbiAqICBvcHBvc2l0ZS1kaXJlY3Rpb24odG9wKTtcbiAqICBvcHBvc2l0ZS1kaXJlY3Rpb24obGVmdCwgYm90dG9tKTtcbiAqL1xuLyoqXG4gKiBQc2V1ZG8gZWxlbWVudCBiYXNlIHN0eWxlc1xuICpcbiAqIEBwYXJhbSAkZGlzcGxheVxuICogIFRoZSBkaXNwbGF5IHZhbHVlIChibG9jay9pbmxpbmUvZXRjKVxuICogQHBhcmFtICRwb3NpdGlvblxuICogIFRoZSBwb3NpdGlvbiBzdHlsZSAoYWJzb2x1dGUvc3RhdGljL2V0YylcbiAqIEBwYXJhbSAkY29udGVudFxuICogIFRoZSBjb250ZW50IHZhbHVlXG4gKi9cbi8qKlxuICogQ29udHJvbCB0aGUgcmF0aW8gZm9yIHJlc3BvbnNpdmUgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0gJHhcbiAqICBUaGUgeCByYXRpb1xuICogQHBhcmFtICR5XG4gKiAgVGhlIHkgcmF0aW9cbiAqIEBwYXJhbSAkcHNldWRvXG4gKiAgRGV0ZXJtaW5lIGlmIGEgcHNldWRvIGVsZW1lbnQgc2hvdWxkIGJlIHVzZWQgdG8gY29udHJvbCB0aGUgcmF0aW8uIERlZmF1bHQ6IHRydWVcbiAqIEBwYXJhbSAkaW1hZ2VcbiAqICBUaGUgaW1hZ2Ugc291cmNlLiBEZWZhdWx0OiBudWxsXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIHJlc3BvbnNpdmUtcmF0aW8oMywgNCk7XG4gKiAgQGluY2x1ZGUgcmVzcG9uc2l2ZS1yYXRpbygyMCwgOSwgdHJ1ZSwgdXJsKCcvaW1hZ2VzL2xhbmRpbmctaGVyby5qcGcnKSk7XG4gKi9cbi8qKlxuICogRmlsbCB0aGUgcGFyZW50IGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0gJG1hcmdpblxuICogIFRoZSBhbW91bnQgb2Ygc3BhY2UgYmV0d2VlbiB0aGUgZWRnZSBvZiB0aGUgcGFyZW50LiBEZWZhdWx0OiAwXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIGZpbGwtcGFyZW50O1xuICogIEBpbmNsdWRlIGZpbGwtcGFyZW50KDFlbSk7XG4gKi9cbi8qKlxuICogTWFrZSBjb250ZW50IHZpc3VhbGx5IGhpZGRlblxuICpcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgdmlzdWFsbHktaGlkZGVuO1xuICovXG4vKipcbiAqIFRoZSBiYXNlIHR5cGVmYWNlXG4gKi9cbi8qKlxuICogVGhlIG1vbm9zcGFjZWQgdHlwZWZhY2UgZmFtaWx5XG4gKi9cbi8qKlxuICogVGhlIGF2YWlsYWJsZSB0eXBlZmFjZXNcbiAqL1xuLyoqXG4gKiBUaGUgYmFzZSB0eXBvZ3JhcGh5IHNpemVcbiAqL1xuLyoqXG4gKiBUaGUgYmFzZSB0eXBvZ3JhcGh5IHdlaWdodFxuICovXG4vKipcbiAqIFRoZSBhdmFpbGFibGUgdHlwb2dyYXBoeSBmb3JtYXRzXG4gKi9cbi8qKlxuICogVGhlIGF2YWlsYWJsZSB0eXBvZ3JhcGh5IGxldmVscyBmb3IgdGhlIGBkaXNwbGF5YCBmb3JtYXRcbiAqL1xuLyoqXG4gKiBUaGUgYXZhaWxhYmxlIHR5cG9ncmFwaHkgbGV2ZWxzIGZvciB0aGUgYGJvZHlgIGZvcm1hdFxuICovXG4vKipcbiAqIFJldHVybiB0eXBvZ3JhcGh5IHN0eWxlcyBiYXNlZCBvbiB0aGUgZm9ybWF0IGFuZCBsZXZlbFxuICpcbiAqIEBwYXJhbSAkZm9ybWF0XG4gKiAgT25lIG9mIHRoZSBhdmFpbGFibGUgZm9ybWF0cyBkZWZpbmVkIHdpdGhpbiAkdHlwb2dyYXBoeS1mb3JtYXRzLiBEZWZhdWx0OiAnYm9keScuXG4gKiBAcGFyYW0gJGxldmVsXG4gKiAgT25lIG9mIHRoZSBhY2NlcHRlZCBsZXZlbHMgZm9yIHRoZSBwYXNzZWQgaW4gZm9ybWF0LiBEZWZhdWx0OiAxXG4gKiBAcGFyYW0gJHR5cGVmYWNlXG4gKiAgT25lIG9mIHRoZSBhdmFpbGFibGUgdHlwZWZhY2VzIGRlZmluZWQgaW4gJHR5cG9ncmFwaHktdHlwZWZhY2VzLiBEZWZhdWx0OiAncHJpbWFyeSdcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgdHlwb2dyYXBoeTtcbiAqICBAaW5jbHVkZSB0eXBvZ3JhcGh5KGRpc3BsYXksIDQpO1xuICovXG4vKipcbiAqIFRydW5jYXRlIG92ZXJmbG93aW5nIHRleHQgd2l0aCBhbiBlbGxpcHNpc1xuICpcbiAqIEBtaXhpbiB0eXBvZ3JhcGh5XG4gKiBAc2VjdGlvbiBTdHlsZSBIZWxwZXJzXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIHRydW5jYXRlLW92ZXJmbG93O1xuICovXG4vKipcbiAqIFRoZSBzcGFjaW5nIGRlZmF1bHRcbiAqXG4gKiBAc2VjdGlvbiBTcGFjaW5nXG4gKi9cbi8qKlxuICogVGhlIG1hcCBvZiBsYXlvdXQgc3BhY2luZ3NcbiAqXG4gKiBTbWFsbDogMTIsIDgsIDRcbiAqIEJhc2U6IDE2XG4gKiBMYXJnZTogMjQsIDMyLCA0MCwgNDgsIDU2LCA3MiwgOTZcbiAqXG4gKiBAc2VjdGlvbiBTcGFjaW5nXG4gKi9cbi8qKlxuICogUmV0cmlldmUgYSBzcGFjZSBmcm9tIHRoZSAkZy1zcGFjaW5ncyBtYXBcbiAqXG4gKiBAcGFyYW0gJHR5cGVcbiAqICBUaGUgc3BhY2luZyBtYXAgdG8gdXNlLiBEZWZhdWx0OiBkZWZhdWx0XG4gKiBAcGFyYW0gJHNpemVcbiAqICBUaGUgdmFsdWUgZGVzaXJlZCBmcm9tIHRoZSBtYXAuIERlZmF1bHQ6IDBcbiAqIEBleGFtcGxlXG4gKiAgcGFkZGluZzogc3BhY2luZyhkZWZhdWx0KTtcbiAqICBwYWRkaW5nOiBzcGFjaW5nKGxhcmdlKTtcbiAqICBwYWRkaW5nOiBzcGFjaW5nKGxhcmdlLCA0KTtcbiAqL1xuLyoqXG4gKiBCYXNlIHN0eWxlcyBmb3IgbWVudSBpdGVtc1xuICpcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgbWVudS1iYXNlO1xuICovXG4vKipcbiAqIFJlc2V0IGJyb3dzZXIgYW5kIGJvb3RzdHJhcCBzdHlsZXNcbiAqXG4gKiBOT1RFOiBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHdlIGNhbm5vdCB1c2UgYSBnbG9iYWwgcmVzZXQgc3R5bGVzaGVldC4gT25jZSB0aGUgZnVsbCBUZXJtaW51cyBhcHBcbiAqIGhhcyB0cmFuc2l0aW9uZWQgdG8gdGhlIFVJIGxpYnJhcnksIHRoaXMgY2FuIGJlIHJlbW92ZWQgaW4gZmF2b3Igb2YgYSBnbG9iYWwgcmVzZXQgc3R5bGVzaGVldC5cbiAqXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIHJlc2V0O1xuICovXG4vKipcbiAqIFB1cmUgLSBEYXJrXG4gKi9cbi8qKlxuICogUHVyZSAtIExpZ2h0XG4gKi9cbi8qKlxuICogVXRpbGl0eSAtIEV4dHJhIERhcmtcbiAqL1xuLyoqXG4gKiBVdGlsaXR5IC0gRGFya1xuICovXG4vKipcbiAqIFV0aWxpdHlcbiAqL1xuLyoqXG4gKiBVdGlsaXR5IC0gTGlnaHRcbiAqL1xuLyoqXG4gKiBVdGlsaXR5IC0gRXh0cmEgTGlnaHRcbiAqL1xuLyoqXG4gKiBQcmltYXJ5IC0gRXh0cmEgRGFya1xuICovXG4vKipcbiAqIFByaW1hcnkgLSBEYXJrXG4gKi9cbi8qKlxuICogUHJpbWFyeVxuICovXG4vKipcbiAqIFByaW1hcnkgLSBMaWdodFxuICovXG4vKipcbiAqIFByaW1hcnkgLSB4TGlnaHRcbiAqL1xuLyoqXG4gKiBBY2NlbnQgLSBFeHRyYSBEYXJrXG4gKi9cbi8qKlxuICogQWNjZW50IC0gRGFya1xuICovXG4vKipcbiAqIEFjY2VudFxuICovXG4vKipcbiAqIEFjY2VudCAtIExpZ2h0XG4gKi9cbi8qKlxuICogQWNjZW50IC0geExpZ2h0XG4gKi9cbi8qKlxuICogRXJyb3IgLSBEYXJrXG4gKi9cbi8qKlxuICogRXJyb3JcbiAqL1xuLyoqXG4gKiBFcnJvciAtIExpZ2h0XG4gKi9cbi8qKlxuICogV2FybiAtIERhcmtcbiAqL1xuLyoqXG4gKiBXYXJuXG4gKi9cbi8qKlxuICogV2FybiAtIExpZ2h0XG4gKi9cbi8qKlxuICogSGlnaGxpZ2h0IC0gRGFya1xuICovXG4vKipcbiAqIEhpZ2hsaWdodFxuICovXG4vKipcbiAqIEhpZ2hsaWdodCAtIExpZ2h0XG4gKi9cbi8qKlxuICogVGhlIG1hcCBvZiBjb2xvcnNcbiAqXG4gKiBOb3RlOiBDdXJyZW50bHksIHdhcm4gYW5kIGVycm9yIGFyZSB0aGUgc2FtZSBjb2xvciBpbiB0aGUgJHBhbGV0dGVzIG1hcC4gTW9yZSB3b3JrIG5lZWRzIHRvIGJlIGRvbmUgdG8gc29saWRpZnkgb3VyIHBhbGV0dGUuXG4gKi9cbi8qKlxuICogUmV0cmlldmUgYSBjb2xvciBmcm9tIHRoZSBjb2xvcnMgbWFwXG4gKlxuICogQHBhcmFtICRwYWxldHRlXG4gKiAgVGhlIHBhbGV0dGUgdG8gdXNlIGZyb20gdGhlIG1hcFxuICogQHBhcmFtICR0b25lXG4gKiAgVGhlIHRvbmUgdG8gdXNlIGZyb20gdGhlIHNlbGVjdGVkIG1hcC4gRGVmYXVsdDogYmFzZVxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSBjb2xvcihwcmltYXJ5KTtcbiAqICBAaW5jbHVkZSBjb2xvcihhY2NlbnQsIGxpZ2h0KTtcbiAqL1xuLyoqXG4gKiBUaGUgbWFwIHRoZW1lcyB0byBjb2xvcnNcbiAqL1xuLyoqXG4gKiBPdXRwdXQgY29uZGl0aW9uYWwgc3R5bGVzIGZvciB0aGUgcG9zc2libGUgdGhlbWVzXG4gKlxuICogQHBhcmFtICRwcm9wZXJ0eVxuICogIFRoZSBDU1MgcHJvcGVydHkgdGhhdCBzaG91bGQgYmUgY29sb3JlZC4gRGVmYXVsdDogJ2JhY2tncm91bmQtY29sb3InXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIHRoZW1lLWNvbG9yO1xuICogIEBpbmNsdWRlIHRoZW1lLWNvbG9yKCdjb2xvcicpO1xuICovXG4vKipcbiAqIERlZmluZSB0aGUgbWF0ZXJpYWwgYmFzZWQgcHJpbWFyeSBtYXBcbiAqL1xuLyoqXG4gKiBEZWZpbmUgdGhlIG1hdGVyaWFsIGJhc2VkIGFjY2VudCBtYXBcbiAqL1xuLyoqXG4gKiBEZWZpbmUgdGhlIG1hdGVyaWFsIGJhc2VkIHdhcm4gbWFwXG4gKi9cbi8qKlxuICogU3R5bGVzIHRvIG1ha2Ugc2Nyb2xsYmFycyBhbHdheXMgdmlzaWJsZSBvbiB3ZWJraXQgYnJvd3NlcnNcbiAqXG4gKiBAcGFyYW0gY29sb3IgLSBUaGUgY29sb3IgZm9yIHRoZSBib3JkZXIgYW5kIGJhY2tncm91bmQgKGNhbm5vdCBiZSB0cmFuc3BhcmVudClcbiAqL1xuLyoqXG4gKiBCb3ggU2hhZG93IHZhbHVlcyBmcm9tIE1hdGVyaWFsIFNoYWRvdyBJbnRlcnBvbGF0b3JcbiAqXG4gKiAtIEV4aXN0aW5nIGxpYnJhcnkgcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vcHJlc3RvcGFzdG8vU0NTUy1NYXRlcmlhbC1TaGFkb3dzXG4gKiAtIEFuZ3VsYXIgTWF0ZXJpYWwgZGVzaWduIG5vdGVzIGhlcmU6IGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMVczTkdTTHFEWnpqYkJCTFcyQzZ5XzZOVXh0dmRaQVZhSnZnNThMWTNRMEUvcHJldmlld1xuICogLSBSZWZlcmVuY2UgQ29kZVBlbjogaHR0cHM6Ly9jb2RlcGVuLmlvL3NoeW5kbWFuL3Blbi9vanhtZFk/ZWRpdG9ycz0wMDFcbiAqL1xuLyoqXG4gKiBTaGFkb3cgY29sb3JzLlxuICogaHR0cDovL2NvZGVwZW4uaW8vc2h5bmRtYW4vcGVuL29qeG1kWVxuICpcbiAqIC0gVU1CUkE6IFwiQSBjb25pY2FsIHNoYWRvdyBleGNsdWRpbmcgYWxsIGxpZ2h0IGZyb20gYSBnaXZlbiBzb3VyY2U7IF9zcGVjaWZpY2FsbHlfOiB0aGUgY29uaWNhbFxuICogcGFydCBvZiB0aGUgc2hhZG93IG9mIGEgY2VsZXN0aWFsIGJvZHkgZXhjbHVkaW5nIGFsbCBsaWdodCBmcm9tIHRoZSBwcmltYXJ5IHNvdXJjZVwiXG4gKiAtIFBFTlVNQlJBOiBcIkEgc3BhY2Ugb2YgcGFydGlhbCBpbGx1bWluYXRpb24gKGFzIGluIGFuIGVjbGlwc2UpIGJldHdlZW4gdGhlIHBlcmZlY3Qgc2hhZG93IG9uIGFsbFxuICogc2lkZXMgYW5kIHRoZSBmdWxsIGxpZ2h0XCJcbiAqXG4gKiBAbnVjbGlkZSBTaGFkb3ctQ29sb3JzXG4gKiBAc2VjdGlvbiBDb25maWcgPiBTaGFkb3dzXG4gKi9cbi8qKlxuICogSGFuZC1kZXNpZ25lZCByZWZlcmVuY2Ugc2hhZG93IHNldHNcbiAqXG4gKiBTb3VyY2U6IGh0dHA6Ly9jb2RlcGVuLmlvL3NoeW5kbWFuL3Blbi9vanhtZFlcbiAqXG4gKiBAbnVjbGlkZSBTaGFkb3ctU2V0c1xuICogQHNlY3Rpb24gQ29uZmlnID4gU2hhZG93c1xuICovXG4vKipcbiAqIEFuaW1hdGlvbiBkdXJhdGlvbnNcbiAqXG4gKiBAbnVjbGlkZSBTaGFkb3ctQW5pbWF0aW9uLUR1cmF0aW9uc1xuICogQHNlY3Rpb24gQ29uZmlnID4gU2hhZG93c1xuICovXG4vKipcbiAqIE1hdGVyaWFsIERlc2lnbiBlbGVtZW50IGVsZXZhdGlvbnNcbiAqXG4gKiBTb3VyY2U6IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tYXRlcmlhbC1kZXNpZ24vZWxldmF0aW9uLXNoYWRvd3MuaHRtbCNlbGV2YXRpb24tc2hhZG93cy1lbGV2YXRpb24tYW5kcm9pZFxuICpcbiAqIEBudWNsaWRlIFNoYWRvdy1FbGVtZW50cy1NYXBcbiAqIEBzZWN0aW9uIENvbmZpZyA+IFNoYWRvd3NcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB0d28gcmVmZXJlbmNlIHNoYWRvd3Mgd2hvc2UgZWxldmF0aW9ucyBib3VuZCB0aGUgc3BlY2lmaWVkIGVsZXZhdGlvblxuICpcbiAqIEluIHRoZSBjYXNlIHdoZXJlIHRoZSBzdXBwbGllZCBlbGV2YXRpb24gZXhjZWVkcyB0aGUgbWF4aW11bSByZWZlcmVuY2UgZWxldmF0aW9uLCB0aGUgbGFzdCB0d29cbiAqIHJlZmVyZW5jZSBzaGFkb3dzIGFyZSByZXR1cm5lZC5cbiAqXG4gKiBAbWl4aW4gZmluZC1ib3VuZGluZy1zaGFkb3ctc2V0c1xuICogQHNlY3Rpb24gU2hhZG93LUZ1bmN0aW9uc1xuICogQHBhcmFtICRlbGV2YXRpb25cbiAqICBUaGUgZWxldmF0aW9uXG4gKiBAZXhhbXBsZVxuICogICRmb28gPSBmaW5kLWJvdW5kaW5nLXNoYWRvdy1zZXRzKDIpO1xuICovXG4vKipcbiAqIFBlcmZvcm1zIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdmFsdWVzIGEgYW5kIGJcbiAqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBiZXR3ZWVuIGEgYW5kIGIgcHJvcG9ydGlvbmFsIHRvIHggKHdoZW4geCBpcyBiZXR3ZWVuIDAgYW5kIDEuIFdoZW4geCBpcyBvdXRzaWRlXG4gKiB0aGlzIHJhbmdlLCB0aGUgcmV0dXJuIHZhbHVlIGlzIGEgbGluZWFyIGV4dHJhcG9sYXRpb24pXG4gKlxuICogQG1peGluIGxlcnBcbiAqIEBzZWN0aW9uIFNoYWRvdy1GdW5jdGlvbnNcbiAqIEBwYXJhbSAkeFxuICogIFRoZSBwcm9wb3J0aW9uYWwgY29udHJvbFxuICogQHBhcmFtICRhXG4gKiAgVGhlIHN0YXJ0aW5nIHZhbHVlXG4gKiBAcGFyYW0gJGJcbiAqICBUaGUgZW5kaW5nIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogICRmb28gPSBsZXJwKC4yLCAzLCA2KTtcbiAqL1xuLyoqXG4gKiBQZXJmb3JtcyBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHNoYWRvd3MgYnkgaW50ZXJwb2xhdGluZyBlYWNoIHByb3BlcnR5IGluZGl2aWR1YWxseVxuICpcbiAqIFJldHVybnMgdGhlIHZhbHVlIGJldHdlZW4gc2hhZG93MSBhbmQgc2hhZG93MiBwcm9wb3J0aW9uYWwgdG8geCAod2hlbiB4IGlzIGJldHdlZW4gMCBhbmQgMS4gV2hlblxuICogeCBpcyBvdXRzaWRlIHRoaXMgcmFuZ2UsIHRoZSByZXR1cm4gdmFsdWUgaXMgYSBsaW5lYXIgZXh0cmFwb2xhdGlvbikuXG4gKlxuICogQG1peGluIGxlcnAtc2hhZG93XG4gKiBAc2VjdGlvbiBTaGFkb3ctRnVuY3Rpb25zXG4gKiBAcGFyYW0gJHhcbiAqICBUaGUgcHJvcG9ydGlvbmFsIGNvbnRyb2xcbiAqIEBwYXJhbSAkc2hhZG93MVxuICogIFRoZSBzdGFydGluZyBzaGFkb3dcbiAqIEBwYXJhbSAkc2hhZG93MlxuICogIFRoZSBlbmRpbmcgc2hhZG93XG4gKi9cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc2V0IG9mIHNoYWRvd3MgYXQgYSBnaXZlbiBlbGV2YXRpb25cbiAqXG4gKiBAbWl4aW4gY2FsY3VsYXRlLXNoYWRvdy1zZXQtYXQtZGVwdGhcbiAqIEBzZWN0aW9uIFNoYWRvdy1GdW5jdGlvbnNcbiAqIEBwYXJhbSAkZWxldmF0aW9uXG4gKiAgVGhlIGRlc2lyZWQgZWxldmF0aW9uXG4gKiBAZXhhbXBsZVxuICogICRmb28gPSBjYWxjdWxhdGUtc2hhZG93LXNldC1hdC1kZXB0aCgyKTtcbiAqL1xuLyoqXG4gKiBHZW5lcmF0ZXMgdGhlIHRyYW5zaXRpb24gZm9yIGEgY2hhbmdlIGJldHdlZW4gMiBlbGV2YXRpb25zXG4gKlxuICogVGhlIGxhcmdlciB0aGUgZWxldmF0aW9uIGNoYW5nZSB0aGUgbG9uZ2VyIHRoZSBhbmltYXRpb24gdGFrZXNcbiAqXG4gKiBAbWl4aW4gZWxldmF0aW9uLXRyYW5zaXRpb25cbiAqIEBzZWN0aW9uIFNoYWRvdy1NaXhpbnNcbiAqIEBwYXJhbSAkZWxldmF0aW9uLWNoYW5nZVxuICogIFRoZSBlbGV2YXRpb24gY2hhbmdlIGFtb3VudFxuICogQHBhcmFtICRlYXNpbmdcbiAqICBUaGUgZWFzaW5nIGZ1bmN0aW9uIG9yIG5hbWVcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgZWxldmF0aW9uLXRyYW5zaXRpb24oZGlhbG9nKTtcbiAqL1xuLyoqXG4gKiBHZW5lcmF0ZXMgYm94LXNoYWRvdyBhbmQgdGhlIHRyYW5zaXRpb24gZm9yIGEgZ2l2ZW4gZWxldmF0aW9uXG4gKlxuICogLSBBIHNpbmdsZSBlbGV2YXRpb24gd2lsbCBnZW5lcmF0ZSBhIHNpbmdsZSBib3gtc2hhZG93IHNldFxuICogLSBUd28gZWxldmF0aW9ucyBhbmQgYSBzdGF0ZSB3aWxsIGdlbmVyYXRlIGEgZGVmYXVsdCBib3gtc2hhZG93IHNldCBhbmQgYW5vdGhlciBzZXQgdGhhdCBpc1xuICogYWN0aXZhdGVkIGJ5IHRoZSBzdGF0ZSB0ZXN0ZWQgd2l0aCA6aG92ZXIgYW5kIDphY3RpdmVcbiAqXG4gKiBAbWl4aW4gZWxldmF0aW9uXG4gKiBAc2VjdGlvbiBTaGFkb3ctTWl4aW5zXG4gKiBAcGFyYW0gJGVsZXZhdGlvbjFcbiAqICBUaGUgc3RhcnRpbmcgZWxldmF0aW9uXG4gKiBAcGFyYW0gJGVsZXZhdGlvbjJcbiAqICBUaGUgZGVzdGluYXRpb24gZWxldmF0aW9uXG4gKiBAcGFyYW0gJHN0YXRlXG4gKiAgaG92ZXIsIGZvY3VzLCBhY3RpdmVcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgZWxldmF0aW9uKDIsIDgsIGFjdGl2ZSk7XG4gKi9cbi8qKlxuICogUmV0dXJucyBib3gtc2hhZG93IGFuZCB0cmFuc2l0aW9uIHByb3BlcnRpZXMgZm9yIHNwZWNpZmljIGVsZW1lbnRzLiBTZWUgJG1hdGVyaWFsLWVsZW1lbnRzLlxuICpcbiAqIEBtaXhpbiBlbGV2YXRpb24tZWxlbWVudFxuICogQHNlY3Rpb24gU2hhZG93LU1peGluc1xuICogQHBhcmFtICRlbGVtZW50LW5hbWVcbiAqICBUaGUgZWxlbWVudCB0byBhZGQgYSBzaGFkb3cgdG9cbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgZWxldmF0aW9uLWVsZW1lbnQoZGlhbG9nKTtcbiAqL1xuLyoqXG4gKiBUaGUgc3BhY2luZyBkZWZhdWx0XG4gKlxuICogQHNlY3Rpb24gU3BhY2luZ1xuICovXG4vKipcbiAqIFRoZSBtYXAgb2YgbGF5b3V0IHNwYWNpbmdzXG4gKlxuICogU21hbGw6IDEyLCA4LCA0XG4gKiBCYXNlOiAxNlxuICogTGFyZ2U6IDI0LCAzMiwgNDAsIDQ4LCA1NiwgNzIsIDk2XG4gKlxuICogQHNlY3Rpb24gU3BhY2luZ1xuICovXG4vKipcbiAqIFJldHJpZXZlIGEgc3BhY2UgZnJvbSB0aGUgJGctc3BhY2luZ3MgbWFwXG4gKlxuICogQHBhcmFtICR0eXBlXG4gKiAgVGhlIHNwYWNpbmcgbWFwIHRvIHVzZS4gRGVmYXVsdDogZGVmYXVsdFxuICogQHBhcmFtICRzaXplXG4gKiAgVGhlIHZhbHVlIGRlc2lyZWQgZnJvbSB0aGUgbWFwLiBEZWZhdWx0OiAwXG4gKiBAZXhhbXBsZVxuICogIHBhZGRpbmc6IHNwYWNpbmcoZGVmYXVsdCk7XG4gKiAgcGFkZGluZzogc3BhY2luZyhsYXJnZSk7XG4gKiAgcGFkZGluZzogc3BhY2luZyhsYXJnZSwgNCk7XG4gKi9cbi8qKlxuICogQ2VudGVyIGNoaWxkIGNvbnRlbnQgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5XG4gKlxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSBjZW50ZXItY29udGVudDtcbiAqL1xuLyoqXG4gKiBSZXR1cm4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiBvZiBlYWNoIGRpcmVjdGlvbiBpbiBhIGxpc3RcbiAqXG4gKiBAcGFyYW0gJGRpcmVjdGlvbnNcbiAqICBMaXN0IG9mIGluaXRpYWwgZGlyZWN0aW9uc1xuICogQGV4YW1wbGVcbiAqICBvcHBvc2l0ZS1kaXJlY3Rpb24odG9wKTtcbiAqICBvcHBvc2l0ZS1kaXJlY3Rpb24obGVmdCwgYm90dG9tKTtcbiAqL1xuLyoqXG4gKiBQc2V1ZG8gZWxlbWVudCBiYXNlIHN0eWxlc1xuICpcbiAqIEBwYXJhbSAkZGlzcGxheVxuICogIFRoZSBkaXNwbGF5IHZhbHVlIChibG9jay9pbmxpbmUvZXRjKVxuICogQHBhcmFtICRwb3NpdGlvblxuICogIFRoZSBwb3NpdGlvbiBzdHlsZSAoYWJzb2x1dGUvc3RhdGljL2V0YylcbiAqIEBwYXJhbSAkY29udGVudFxuICogIFRoZSBjb250ZW50IHZhbHVlXG4gKi9cbi8qKlxuICogQ29udHJvbCB0aGUgcmF0aW8gZm9yIHJlc3BvbnNpdmUgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0gJHhcbiAqICBUaGUgeCByYXRpb1xuICogQHBhcmFtICR5XG4gKiAgVGhlIHkgcmF0aW9cbiAqIEBwYXJhbSAkcHNldWRvXG4gKiAgRGV0ZXJtaW5lIGlmIGEgcHNldWRvIGVsZW1lbnQgc2hvdWxkIGJlIHVzZWQgdG8gY29udHJvbCB0aGUgcmF0aW8uIERlZmF1bHQ6IHRydWVcbiAqIEBwYXJhbSAkaW1hZ2VcbiAqICBUaGUgaW1hZ2Ugc291cmNlLiBEZWZhdWx0OiBudWxsXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIHJlc3BvbnNpdmUtcmF0aW8oMywgNCk7XG4gKiAgQGluY2x1ZGUgcmVzcG9uc2l2ZS1yYXRpbygyMCwgOSwgdHJ1ZSwgdXJsKCcvaW1hZ2VzL2xhbmRpbmctaGVyby5qcGcnKSk7XG4gKi9cbi8qKlxuICogRmlsbCB0aGUgcGFyZW50IGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0gJG1hcmdpblxuICogIFRoZSBhbW91bnQgb2Ygc3BhY2UgYmV0d2VlbiB0aGUgZWRnZSBvZiB0aGUgcGFyZW50LiBEZWZhdWx0OiAwXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIGZpbGwtcGFyZW50O1xuICogIEBpbmNsdWRlIGZpbGwtcGFyZW50KDFlbSk7XG4gKi9cbi8qKlxuICogTWFrZSBjb250ZW50IHZpc3VhbGx5IGhpZGRlblxuICpcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgdmlzdWFsbHktaGlkZGVuO1xuICovXG4vKipcbiAqIFRoZSBsaXN0IG9mIHBvc3NpYmxlIHotaW5kZXggdmFsdWVzXG4gKlxuICogKGl0ZW1zIGF0IHRoZSB0b3AgaGF2ZSBhIGhpZ2hlciB2YWx1ZSlcbiAqXG4gKiBAc2VjdGlvbiBDb25maWdcbiAqL1xuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgY29ycmVjdCB6LWluZGV4IHZhbHVlIGJ5IHBhc3NpbmcgaW4gdGhlIGl0ZW0gbmFtZVxuICpcbiAqIEBwYXJhbSAkbmFtZVxuICogIFRoZSBuYW1lIG9mIHRoZSBpdGVtIHRoYXQgc2hvdWxkIGhhdmUgYW4gYXNzb2NpYXRlZCB6LWluZGV4XG4gKiBAZXhhbXBsZVxuICogIHoodG9vbHRpcCk7XG4gKiAgeihhdHRhY2hlZC1wYW5lbC1vdmVybGF5KTtcbiAqL1xuLyoqXG4gKiBDcmVhdGUgYSB0cmlhbmdsZSBzaGFwZSB1c2luZyBDU1NcbiAqXG4gKiBAbWl4aW4gdHJpYW5nbGVcbiAqIEBzZWN0aW9uIFN0eWxlIEhlbHBlcnNcbiAqIEBwYXJhbSAkZGlyZWN0aW9uXG4gKiAgVHJpYW5nbGUgZGlyZWN0aW9uLCBlaXRoZXIgYHRvcGAsIGByaWdodGAsIGBib3R0b21gIG9yIGBsZWZ0YC5cbiAqIEBwYXJhbSAkY29sb3JcbiAqICBUcmlhbmdsZSBjb2xvci4gRGVmYXVsdDogY3VycmVudGNvbG9yXG4gKiBAcGFyYW0gJHNpemVcbiAqICBUcmlhbmdsZSBzaXplLiBEZWZhdWx0OiAxZW1cbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgdHJpYW5nbGUodG9wKTtcbiAqICBAaW5jbHVkZSB0cmlhbmdsZShsZWZ0LCByZWQsIDJlbSk7XG4gKi9cbi8qKlxuICogVGhlIGJhc2UgdHlwZWZhY2VcbiAqL1xuLyoqXG4gKiBUaGUgbW9ub3NwYWNlZCB0eXBlZmFjZSBmYW1pbHlcbiAqL1xuLyoqXG4gKiBUaGUgYXZhaWxhYmxlIHR5cGVmYWNlc1xuICovXG4vKipcbiAqIFRoZSBiYXNlIHR5cG9ncmFwaHkgc2l6ZVxuICovXG4vKipcbiAqIFRoZSBiYXNlIHR5cG9ncmFwaHkgd2VpZ2h0XG4gKi9cbi8qKlxuICogVGhlIGF2YWlsYWJsZSB0eXBvZ3JhcGh5IGZvcm1hdHNcbiAqL1xuLyoqXG4gKiBUaGUgYXZhaWxhYmxlIHR5cG9ncmFwaHkgbGV2ZWxzIGZvciB0aGUgYGRpc3BsYXlgIGZvcm1hdFxuICovXG4vKipcbiAqIFRoZSBhdmFpbGFibGUgdHlwb2dyYXBoeSBsZXZlbHMgZm9yIHRoZSBgYm9keWAgZm9ybWF0XG4gKi9cbi8qKlxuICogUmV0dXJuIHR5cG9ncmFwaHkgc3R5bGVzIGJhc2VkIG9uIHRoZSBmb3JtYXQgYW5kIGxldmVsXG4gKlxuICogQHBhcmFtICRmb3JtYXRcbiAqICBPbmUgb2YgdGhlIGF2YWlsYWJsZSBmb3JtYXRzIGRlZmluZWQgd2l0aGluICR0eXBvZ3JhcGh5LWZvcm1hdHMuIERlZmF1bHQ6ICdib2R5Jy5cbiAqIEBwYXJhbSAkbGV2ZWxcbiAqICBPbmUgb2YgdGhlIGFjY2VwdGVkIGxldmVscyBmb3IgdGhlIHBhc3NlZCBpbiBmb3JtYXQuIERlZmF1bHQ6IDFcbiAqIEBwYXJhbSAkdHlwZWZhY2VcbiAqICBPbmUgb2YgdGhlIGF2YWlsYWJsZSB0eXBlZmFjZXMgZGVmaW5lZCBpbiAkdHlwb2dyYXBoeS10eXBlZmFjZXMuIERlZmF1bHQ6ICdwcmltYXJ5J1xuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSB0eXBvZ3JhcGh5O1xuICogIEBpbmNsdWRlIHR5cG9ncmFwaHkoZGlzcGxheSwgNCk7XG4gKi9cbi8qKlxuICogVHJ1bmNhdGUgb3ZlcmZsb3dpbmcgdGV4dCB3aXRoIGFuIGVsbGlwc2lzXG4gKlxuICogQG1peGluIHR5cG9ncmFwaHlcbiAqIEBzZWN0aW9uIFN0eWxlIEhlbHBlcnNcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgdHJ1bmNhdGUtb3ZlcmZsb3c7XG4gKi9cbi8qKlxuICogQ2VudGVyIGNoaWxkIGNvbnRlbnQgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5XG4gKlxuICogQGV4YW1wbGVcbiAqICBAaW5jbHVkZSBjZW50ZXItY29udGVudDtcbiAqL1xuLyoqXG4gKiBSZXR1cm4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiBvZiBlYWNoIGRpcmVjdGlvbiBpbiBhIGxpc3RcbiAqXG4gKiBAcGFyYW0gJGRpcmVjdGlvbnNcbiAqICBMaXN0IG9mIGluaXRpYWwgZGlyZWN0aW9uc1xuICogQGV4YW1wbGVcbiAqICBvcHBvc2l0ZS1kaXJlY3Rpb24odG9wKTtcbiAqICBvcHBvc2l0ZS1kaXJlY3Rpb24obGVmdCwgYm90dG9tKTtcbiAqL1xuLyoqXG4gKiBQc2V1ZG8gZWxlbWVudCBiYXNlIHN0eWxlc1xuICpcbiAqIEBwYXJhbSAkZGlzcGxheVxuICogIFRoZSBkaXNwbGF5IHZhbHVlIChibG9jay9pbmxpbmUvZXRjKVxuICogQHBhcmFtICRwb3NpdGlvblxuICogIFRoZSBwb3NpdGlvbiBzdHlsZSAoYWJzb2x1dGUvc3RhdGljL2V0YylcbiAqIEBwYXJhbSAkY29udGVudFxuICogIFRoZSBjb250ZW50IHZhbHVlXG4gKi9cbi8qKlxuICogQ29udHJvbCB0aGUgcmF0aW8gZm9yIHJlc3BvbnNpdmUgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0gJHhcbiAqICBUaGUgeCByYXRpb1xuICogQHBhcmFtICR5XG4gKiAgVGhlIHkgcmF0aW9cbiAqIEBwYXJhbSAkcHNldWRvXG4gKiAgRGV0ZXJtaW5lIGlmIGEgcHNldWRvIGVsZW1lbnQgc2hvdWxkIGJlIHVzZWQgdG8gY29udHJvbCB0aGUgcmF0aW8uIERlZmF1bHQ6IHRydWVcbiAqIEBwYXJhbSAkaW1hZ2VcbiAqICBUaGUgaW1hZ2Ugc291cmNlLiBEZWZhdWx0OiBudWxsXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIHJlc3BvbnNpdmUtcmF0aW8oMywgNCk7XG4gKiAgQGluY2x1ZGUgcmVzcG9uc2l2ZS1yYXRpbygyMCwgOSwgdHJ1ZSwgdXJsKCcvaW1hZ2VzL2xhbmRpbmctaGVyby5qcGcnKSk7XG4gKi9cbi8qKlxuICogRmlsbCB0aGUgcGFyZW50IGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0gJG1hcmdpblxuICogIFRoZSBhbW91bnQgb2Ygc3BhY2UgYmV0d2VlbiB0aGUgZWRnZSBvZiB0aGUgcGFyZW50LiBEZWZhdWx0OiAwXG4gKiBAZXhhbXBsZVxuICogIEBpbmNsdWRlIGZpbGwtcGFyZW50O1xuICogIEBpbmNsdWRlIGZpbGwtcGFyZW50KDFlbSk7XG4gKi9cbi8qKlxuICogTWFrZSBjb250ZW50IHZpc3VhbGx5IGhpZGRlblxuICpcbiAqIEBleGFtcGxlXG4gKiAgQGluY2x1ZGUgdmlzdWFsbHktaGlkZGVuO1xuICovXG4vKipcbiAqIFV0aWxpdHkgY2xhc3MgdG8gaGlkZSBhbiBlbGVtZW50XG4gKi9cbi51LXZpc3VhbGx5LWhpZGRlbiB7XG4gIGJvcmRlcjogMDtcbiAgY2xpcC1wYXRoOiByZWN0KDAsIDAsIDAsIDApO1xuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxcHg7XG4gIG1hcmdpbjogLTFweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcGFkZGluZzogMDtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB3aWR0aDogMXB4O1xufVxuXG4vKipcbiAqIFRoZSBsaXN0IG9mIHBvc3NpYmxlIHotaW5kZXggdmFsdWVzXG4gKlxuICogKGl0ZW1zIGF0IHRoZSB0b3AgaGF2ZSBhIGhpZ2hlciB2YWx1ZSlcbiAqXG4gKiBAc2VjdGlvbiBDb25maWdcbiAqL1xuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgY29ycmVjdCB6LWluZGV4IHZhbHVlIGJ5IHBhc3NpbmcgaW4gdGhlIGl0ZW0gbmFtZVxuICpcbiAqIEBwYXJhbSAkbmFtZVxuICogIFRoZSBuYW1lIG9mIHRoZSBpdGVtIHRoYXQgc2hvdWxkIGhhdmUgYW4gYXNzb2NpYXRlZCB6LWluZGV4XG4gKiBAZXhhbXBsZVxuICogIHoodG9vbHRpcCk7XG4gKiAgeihhdHRhY2hlZC1wYW5lbC1vdmVybGF5KTtcbiAqL1xuLmV4YW1wbGUge1xuICBmb250LWZhbWlseTogUm9ib3RvLCBIZWx2ZXRpY2EgTmV1ZSwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsZXR0ZXItc3BhY2luZzogLjAxZW07XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGNvbG9yOiAjZTc0YzNjO1xuICB0cmFuc2l0aW9uOiBjb2xvciAyMDBtcyBlYXNlO1xuICB3aWxsLWNoYW5nZTogY29sb3I7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA1OTlweCkge1xuICAuZXhhbXBsZSB7XG4gICAgY29sb3I6ICMyN2FlNjA7XG4gIH1cbn1cblxuQG1lZGlhIChtaW4td2lkdGg6IDYwMHB4KSB7XG4gIC5leGFtcGxlIHtcbiAgICBjb2xvcjogIzI5ODBiOTtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogNjAwcHgpIGFuZCAobWF4LXdpZHRoOiA5NTlweCkge1xuICAuZXhhbXBsZSB7XG4gICAgY29sb3I6ICM3ZjhjOGQ7XG4gIH1cbn1cblxuQG1lZGlhIChtaW4td2lkdGg6IDk2MHB4KSB7XG4gIC5leGFtcGxlIHtcbiAgICBjb2xvcjogIzliNTliNjtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogOTYwcHgpIGFuZCAobWF4LXdpZHRoOiAxMjc5cHgpIHtcbiAgLmV4YW1wbGUge1xuICAgIGNvbG9yOiAjZjM5YzEyO1xuICB9XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxMjgwcHgpIHtcbiAgLmV4YW1wbGUge1xuICAgIGNvbG9yOiAjMzQ0OTVlO1xuICB9XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxMjgwcHgpIGFuZCAobWF4LXdpZHRoOiAxOTE5cHgpIHtcbiAgLmV4YW1wbGUge1xuICAgIGNvbG9yOiAjMzQ5OGRiO1xuICB9XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxOTIwcHgpIHtcbiAgLmV4YW1wbGUge1xuICAgIGNvbG9yOiAjN2Y4YzhkO1xuICB9XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxOTIwcHgpIHtcbiAgLmV4YW1wbGUge1xuICAgIGNvbG9yOiAjOGU0NGFkO1xuICB9XG59XG4iLCJAaW1wb3J0ICd+QHRlcm1pbnVzL3VpLXN0eWxlcy9oZWxwZXJzJztcblxuJGNvbG9yMTogI2U3NGMzYztcbiRjb2xvcjI6ICMyN2FlNjA7XG4kY29sb3IzOiAjMjk4MGI5O1xuJGNvbG9yNDogIzdmOGM4ZDtcbiRjb2xvcjU6ICM5YjU5YjY7XG4kY29sb3I2OiAjZjM5YzEyO1xuJGNvbG9yNzogIzM0NDk1ZTtcbiRjb2xvcjg6ICMzNDk4ZGI7XG4kY29sb3I5OiAjN2Y4YzhkO1xuJGNvbG9yMTA6ICM4ZTQ0YWQ7XG5cblxuLmV4YW1wbGUge1xuICBAaW5jbHVkZSB0eXBvZ3JhcGh5KGJvZHksIDIpO1xuICBAaW5jbHVkZSBicChsYXlvdXQteHMpIHtcbiAgICBjb2xvcjogJGNvbG9yMjtcbiAgfVxuXG4gIEBpbmNsdWRlIGJwKGxheW91dC1ndC14cykge1xuICAgIGNvbG9yOiAkY29sb3IzO1xuICB9XG5cbiAgQGluY2x1ZGUgYnAobGF5b3V0LXNtKSB7XG4gICAgY29sb3I6ICRjb2xvcjQ7XG4gIH1cblxuICBAaW5jbHVkZSBicChsYXlvdXQtZ3Qtc20pIHtcbiAgICBjb2xvcjogJGNvbG9yNTtcbiAgfVxuXG4gIEBpbmNsdWRlIGJwKGxheW91dC1tYXQpIHtcbiAgICBjb2xvcjogJGNvbG9yNjtcbiAgfVxuXG4gIEBpbmNsdWRlIGJwKGxheW91dC1ndC1tYXQpIHtcbiAgICBjb2xvcjogJGNvbG9yNztcbiAgfVxuXG4gIEBpbmNsdWRlIGJwKGxheW91dC1sZykge1xuICAgIGNvbG9yOiAkY29sb3I4O1xuICB9XG5cbiAgQGluY2x1ZGUgYnAobGF5b3V0LWd0LWxnKSB7XG4gICAgY29sb3I6ICRjb2xvcjk7XG4gIH1cblxuICBAaW5jbHVkZSBicChsYXlvdXQteGwpIHtcbiAgICBjb2xvcjogJGNvbG9yMTA7XG4gIH1cblxuICBjb2xvcjogJGNvbG9yMTtcbiAgdHJhbnNpdGlvbjogY29sb3IgMjAwbXMgZWFzZTtcbiAgd2lsbC1jaGFuZ2U6IGNvbG9yO1xufVxuXG4iXX0= */"];



/***/ }),

/***/ "./src/app/components/breakpoints/breakpoints.component.ts":
/*!*****************************************************************!*\
  !*** ./src/app/components/breakpoints/breakpoints.component.ts ***!
  \*****************************************************************/
/*! exports provided: BreakpointsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreakpointsComponent", function() { return BreakpointsComponent; });
class BreakpointsComponent {
}


/***/ }),

/***/ "./src/app/components/breakpoints/breakpoints.module.ngfactory.js":
/*!************************************************************************!*\
  !*** ./src/app/components/breakpoints/breakpoints.module.ngfactory.js ***!
  \************************************************************************/
/*! exports provided: BreakpointsModuleNgFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreakpointsModuleNgFactory", function() { return BreakpointsModuleNgFactory; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _breakpoints_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./breakpoints.module */ "./src/app/components/breakpoints/breakpoints.module.ts");
/* harmony import */ var _node_modules_angular_router_router_ngfactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../node_modules/@angular/router/router.ngfactory */ "../../node_modules/@angular/router/router.ngfactory.js");
/* harmony import */ var _breakpoints_component_ngfactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./breakpoints.component.ngfactory */ "./src/app/components/breakpoints/breakpoints.component.ngfactory.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ "../../node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _breakpoints_routing_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./breakpoints-routing.module */ "./src/app/components/breakpoints/breakpoints-routing.module.ts");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/bidi */ "../../node_modules/@angular/cdk/fesm2015/bidi.js");
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/core */ "../../node_modules/@angular/material/fesm2015/core.js");
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/a11y */ "../../node_modules/@angular/cdk/fesm2015/a11y.js");
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/platform */ "../../node_modules/@angular/cdk/fesm2015/platform.js");
/* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/icon */ "../../node_modules/@angular/material/fesm2015/icon.js");
/* harmony import */ var _terminus_ui_icon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @terminus/ui-icon */ "../../dist/libs/ui/icon/fesm2015/terminus-ui-icon.js");
/* harmony import */ var _terminus_ui_card__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @terminus/ui-card */ "../../dist/libs/ui/card/fesm2015/terminus-ui-card.js");
/* harmony import */ var _breakpoints_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./breakpoints.component */ "./src/app/components/breakpoints/breakpoints.component.ts");
/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes,extraRequire}
 * tslint:disable
 */ 















var BreakpointsModuleNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcmf"](_breakpoints_module__WEBPACK_IMPORTED_MODULE_1__["BreakpointsModule"], [], function (_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmod"]([_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](512, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵCodegenComponentFactoryResolver"], [[8, [_node_modules_angular_router_router_ngfactory__WEBPACK_IMPORTED_MODULE_2__["ɵangular_packages_router_router_lNgFactory"], _breakpoints_component_ngfactory__WEBPACK_IMPORTED_MODULE_3__["BreakpointsComponentNgFactory"]]], [3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_common__WEBPACK_IMPORTED_MODULE_4__["NgLocalization"], _angular_common__WEBPACK_IMPORTED_MODULE_4__["NgLocaleLocalization"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_router__WEBPACK_IMPORTED_MODULE_5__["RouterModule"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["RouterModule"], [[2, _angular_router__WEBPACK_IMPORTED_MODULE_5__["ɵangular_packages_router_router_a"]], [2, _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _breakpoints_routing_module__WEBPACK_IMPORTED_MODULE_6__["BreakpointsRoutingModule"], _breakpoints_routing_module__WEBPACK_IMPORTED_MODULE_6__["BreakpointsRoutingModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["BidiModule"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["BidiModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatCommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatCommonModule"], [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_9__["HighContrastModeDetector"], [2, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MATERIAL_SANITY_CHECKS"]], [2, _angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_10__["PlatformModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_10__["PlatformModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatRippleModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatRippleModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_icon__WEBPACK_IMPORTED_MODULE_11__["MatIconModule"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_11__["MatIconModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _terminus_ui_icon__WEBPACK_IMPORTED_MODULE_12__["TsIconModule"], _terminus_ui_icon__WEBPACK_IMPORTED_MODULE_12__["TsIconModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _terminus_ui_card__WEBPACK_IMPORTED_MODULE_13__["TsCardModule"], _terminus_ui_card__WEBPACK_IMPORTED_MODULE_13__["TsCardModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _breakpoints_module__WEBPACK_IMPORTED_MODULE_1__["BreakpointsModule"], _breakpoints_module__WEBPACK_IMPORTED_MODULE_1__["BreakpointsModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1024, _angular_router__WEBPACK_IMPORTED_MODULE_5__["ROUTES"], function () { return [[{ path: "", component: _breakpoints_component__WEBPACK_IMPORTED_MODULE_14__["BreakpointsComponent"] }]]; }, [])]); });



/***/ }),

/***/ "./src/app/components/breakpoints/breakpoints.module.ts":
/*!**************************************************************!*\
  !*** ./src/app/components/breakpoints/breakpoints.module.ts ***!
  \**************************************************************/
/*! exports provided: BreakpointsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreakpointsModule", function() { return BreakpointsModule; });
class BreakpointsModule {
}


/***/ })

}]);
//# sourceMappingURL=breakpoints-breakpoints-module-ngfactory-es2015.js.map