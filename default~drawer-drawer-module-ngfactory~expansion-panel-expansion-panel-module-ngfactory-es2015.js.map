{"version":3,"sources":["/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/fesm2015/terminus-ui-expansion-panel.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/terminus-ui-expansion-panel.d.ts.TsExpansionPanelComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/terminus-ui-expansion-panel.d.ts.TsExpansionPanelActionRowComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/terminus-ui-expansion-panel.d.ts.TsExpansionPanelTriggerComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/terminus-ui-expansion-panel.d.ts.TsExpansionPanelTriggerTitleComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/terminus-ui-expansion-panel.d.ts.TsExpansionPanelTriggerDescriptionComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/terminus-ui-expansion-panel.d.ts.TsAccordionComponent.html","/home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/cdk/fesm2015/accordion.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACoC;AACzB;AACpB;AAC8P;AAC3O;AACd;AACG;AACV;AACkC;AACP;AACqC;AACxC;AACQ;AACb;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B,QAAQ,kEAAK,oBAAoB,kEAAK,EAAE,4BAA4B;AACpE,QAAQ,kEAAK,aAAa,kEAAK,EAAE,8BAA8B;AAC/D,QAAQ,uEAAU,8CAA8C,oEAAO;AACvE;AACA;AACA;AACA;AACA,4BAA4B,oEAAO;AACnC,QAAQ,kEAAK,oBAAoB,kEAAK,EAAE,YAAY,iBAAiB,GAAG,IAAI,UAAU,0BAA0B,EAAE;AAClH,QAAQ,kEAAK,aAAa,kEAAK,EAAE,YAAY,gBAAgB,GAAG,IAAI,UAAU,yBAAyB,EAAE;AACzG,QAAQ,uEAAU,8CAA8C,kEAAK;AACrE,YAAY,kEAAK,qBAAqB,yEAAY,KAAK,iBAAiB;AACxE,YAAY,oEAAO;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB,oEAAO;AAC1B,QAAQ,kEAAK,oBAAoB,kEAAK;AACtC;AACA;AACA,SAAS;AACT,QAAQ,kEAAK,aAAa,kEAAK;AAC/B;AACA;AACA,SAAS;AACT,QAAQ,uEAAU,8CAA8C,oEAAO;AACvE;AACA;;AAEA;AACA,4BAA4B,2BAA2B,KAAK,gCAAgC;AAC5F;AACA;AACA;AACA,yBAAyB,4DAAc;;AAEvC;AACA,IAAI,gCAAgC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,yDAAW;AACvB;AACA,mCAAmC,wDAAU;AAC7C,IAAI,+DAAS,EAAE,mDAAmD;AAClE,IAAI,wDAAU,uBAAuB,yDAAW;AAChD;;AAEA;AACA;AACA;AACA,+CAA+C,4DAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,uEAAgB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAO;AAC5C;AACA;AACA;AACA,uDAAuD,eAAe;AACtE;AACA;AACA;AACA,gCAAgC,4CAAO;AACvC;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA,iCAAiC,0DAAY;AAC7C;AACA;AACA;AACA,oCAAoC,8FAAuB,QAAQ,2EAAoB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAS,QAAQ,6DAAM,uCAAuC,2DAAI;AAC9E,kCAAkC,kEAAc;AAChD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KA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yC,cAAc,YAAY,sCAAsC,mBAAmB,yBAAyB,WAAW,WAAW,qBAAqB,YAAY,wBAAwB,sBAAsB,yXAAyX,mBAAmB;AACtlG,KAAK;AACL,IAAI,qDAAO,IAAI,0DAAI;AACnB,IAAI,qDAAO,IAAI,4DAAM,uCAAuC,qDAAO,IAAI,8DAAQ;AAC/E,IAAI,wDAAU;AACd,QAAQ,wDAAU;AAClB,QAAQ,8DAAY;AACpB,QAAQ,+DAAiB;AACzB;;AAEA;AACA;AACA,gCAAgC,gCAAgC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,mEAAY;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iEAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,qBAAqB,iEAAI;AACzB;AACA;AACA;AACA,0BAA0B,iEAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,qEAAe,oCAAoC,oBAAoB;AAC3E,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU,gBAAgB,0DAAY;AAC1C;AACA,gDAAgD,wDAAU;AAC1D,IAAI,+DAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,eAAe,wBAAwB;AACvC,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA,KAAK;AACL;;AAEA;AACA,IAAI,gCAAgC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wDAAU;AAC/C,IAAI,+DAAS;AACb;AACA;AACA,eAAe,0CAA0C;AACzD,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA,KAAK;AACL;;AAEA;AACA;AACA,8CAA8C,wDAAU;AACxD,IAAI,+DAAS;AACb;AACA;AACA,eAAe,mDAAmD;AAClE,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA,KAAK;AACL;;AAEA;AACA;AACA,wCAAwC,wDAAU;AAClD,IAAI,+DAAS;AACb;AACA;AACA,eAAe,6CAA6C;AAC5D,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA,KAAK;AACL;;AAEA;AACA;AACA,yBAAyB,wDAAU;AACnC,IAAI,8DAAQ;AACZ;AACA,YAAY,4DAAY;AACxB,YAAY,yEAAkB;AAC9B,YAAY,gEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEsY;AACtY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kMC1vBA,0DAAgD,IAEhD,kWASC,YALC;;wBAAsD;MAJxD,wBASC,KACC,4JAAsC,IACpC,0DAAY,IACZ,6eAAwC,GAG1C,0DAAmD,iDAHpC,mBAA0B,SAAvC,YAAwC,EAA3B,SAA0B,mDATzC,mBAAuC,uBAEvC,mBAAkC,YAClC,oBAA8B,WAC9B,mBAAS,KAPX,YASC,EANC,SAAuC,EAEvC,SAAkC,EAClC,SAA8B,EAC9B,SAAS;;;;;;;uHCTX,0DAAY;;;;;;;sHCSZ,2LAIC,wDAFC,mBAA8C,4BAFhD,YAIC,EAFC,SAA8C;sHAXhD,4LAGC,IACC,0DAAsD,GACtD,0DAA4D,GAC5D,0DAAY,IAGd,yZAIC,iDADC,mBAAwB,mBAH1B,YAIC,EADC,SAAwB;;;;;;;;;;;;;0HCZ1B,0DAAY;;;;;;;gICAZ,0DAAY;;;;;;;yGCAZ,0DAAY;;;;;;;;;;;;;;;;ACAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwH;AACnD;AACP;AACjB;;AAE7C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA,wCAAwC,4CAAO;AAC/C;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,oBAAoB;AACrC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,eAAe,mFAAqB,QAAQ;AAClE;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa,OAAO,mDAAK,EAAE;AAC3B;AACA,WAAW,EAuBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iDAAY;AACrD;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA;AACA;AACA,kCAAkC,0DAAY;AAC9C;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,mFAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,4BAA4B,kBAAkB,mFAAqB,WAAW;AAC9E;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB,sCAAsC;AAC3D;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,mCAAmC,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE,GAAG;AAChF,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,kFAAyB;AACrC;AACA;AACA,cAAc,OAAO,oDAAM,EAAE;AAC7B,cAAc,OAAO,oDAAM,EAAE;AAC7B,iBAAiB,OAAO,oDAAM,EAAE;AAChC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA,WAAW,EAkEV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAE8D;AAC9D","file":"default~drawer-drawer-module-ngfactory~expansion-panel-expansion-panel-module-ngfactory-es2015.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, TemplateRef, Directive, EventEmitter, ChangeDetectorRef, ViewContainerRef, Optional, SkipSelf, Inject, ContentChild, ViewChild, ElementRef, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Host, ContentChildren, QueryList, NgModule } from '@angular/core';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { KEYS } from '@terminus/ngx-tools/keycodes';\nimport { hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, EMPTY, merge } from 'rxjs';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\nimport { trigger, state, style, transition, animate, group, query, animateChild } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { TsDocumentService } from '@terminus/ngx-tools/browser';\n\n/**\n * Time and timing curve for expansion panel animation\n */\nconst TS_EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead to a situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n */\nconst tsExpansionPanelAnimations = {\n    /**\n     * Animation that rotates the indicator arrow\n     */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(TS_EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /**\n     * Animation that expands and collapses the panel trigger height\n     */\n    expansionTriggerHeight: trigger('expansionHeight', [\n        state('collapsed, void', style({ height: '{{collapsedHeight}}' }), { params: { collapsedHeight: '48px' } }),\n        state('expanded', style({ height: '{{expandedHeight}}' }), { params: { expandedHeight: '64px' } }),\n        transition('expanded <=> collapsed, void => collapsed', group([\n            query('@indicatorRotate', animateChild(), { optional: true }),\n            animate(TS_EXPANSION_PANEL_ANIMATION_TIMING),\n        ])),\n    ]),\n    /**\n     * Animation that expands and collapses the panel content\n     */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({\n            height: '0px',\n            visibility: 'hidden',\n        })),\n        state('expanded', style({\n            height: '*',\n            visibility: 'visible',\n        })),\n        transition('expanded <=> collapsed, void => collapsed', animate(TS_EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n};\n\n/**\n * Token used to provide a {@link TsAccordionComponent} to {@link TsExpansionPanelComponent}.\n *\n * Used primarily to avoid circular imports between `TsAccordionComponent` and `TsExpansionPanelComponent`.\n */\nconst TS_ACCORDION = new InjectionToken('TS_ACCORDION');\n\n/**\n * {@link TsExpansionPanelComponent} content that will be rendered lazily when the panel is opened for the first time.\n *\n * @example\n * <ts-expansion-panel>\n *               <ts-expansion-panel-trigger>\n *                 Panel trigger\n *               </ts-expansion-panel-trigger>\n *\n *               <ng-template tsExpansionPanelContent>\n *                 Panel content\n *               </ng-template>\n * </ts-expansion-panel>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/expansion-panel</example-url>\n */\n// eslint-disable-next-line @angular-eslint/directive-selector\nlet TsExpansionPanelContentDirective = class TsExpansionPanelContentDirective {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(template) {\n        this.template = template;\n    }\n};\nTsExpansionPanelContentDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\nTsExpansionPanelContentDirective = __decorate([\n    Directive({ selector: 'ng-template[tsExpansionPanelContent]' }),\n    __metadata(\"design:paramtypes\", [TemplateRef])\n], TsExpansionPanelContentDirective);\n\n/**\n * Injection token that can be used to configure the defalt options for the expansion panel component.\n */\nconst TS_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('TS_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * Unique ID for each panel trigger ID\n */\nlet nextUniqueId = 0;\nconst ɵ0 = undefined;\n/**\n * An expansion panel component to show/hide content\n *\n * @example\n * <ts-expansion-panel\n *               [hideToggle]=\"true\"\n *               [isExpanded]=\"true\"\n *               [isDisabled]=\"true\"\n *               [transparentMode]=\"false\"\n *               (opened)=\"panelOpened()\"\n *               (closed)=\"panelClosed()\"\n *               (expandedChange)=\"panelStateChanged($event)\"\n *               (destroyed)=\"componentDestroyed()\"\n *               (afterCollapse)=\"collapseAnimationDone\"\n *               (afterExpand)=\"expandAnimationDone()\"\n * >\n *               <ts-expansion-panel-trigger>\n *                 Panel trigger\n *               </ts-expansion-panel-trigger>\n *\n *               Panel content\n * </ts-expansion-panel>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/expansion-panel</example-url>\n */\nlet TsExpansionPanelComponent = class TsExpansionPanelComponent extends CdkAccordionItem {\n    constructor(_changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, documentService, accordion, animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._uniqueSelectionDispatcher = _uniqueSelectionDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this.documentService = documentService;\n        this.animationMode = animationMode;\n        /**\n         * Stream of body animation done events\n         */\n        this.bodyAnimationDone = new Subject();\n        /**\n         * The ID for the associated trigger element. Used for a11y labelling.\n         */\n        this.triggerId = `ts-expansion-panel-trigger-${nextUniqueId++}`;\n        /**\n         * Stream that emits for changes in `@Input` properties\n         */\n        this.inputChanges = new Subject();\n        this._hideToggle = false;\n        this._transparentMode = false;\n        /**\n         * The event emitted after the panel body's expansion animation finishes\n         */\n        this.afterExpand = new EventEmitter();\n        /**\n         * The event emitted after the panel body's collapse animation finishes\n         */\n        this.afterCollapse = new EventEmitter();\n        this.accordion = accordion;\n        // We need a Subject with distinctUntilChanged, because the `done` event fires twice on some browsers.\n        // See https://github.com/angular/angular/issues/24084\n        this.bodyAnimationDone.pipe(untilComponentDestroyed(this), distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState)).subscribe(event => {\n            // istanbul ignore else\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /**\n     * Get the current expanded state\n     */\n    get currentExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /**\n     * Determine whether the expansion panel's content contains the currently-focused element\n     */\n    get contentContainsFocus() {\n        if (this.panelBody && this.documentService.document) {\n            const focusedElement = this.documentService.document.activeElement;\n            const bodyElement = this.panelBody.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n    /**\n     * Determine if the toggle indicator should be hidden\n     *\n     * @param value\n     */\n    set hideToggle(value) {\n        this._hideToggle = value;\n    }\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    /**\n     * Define if the panel should be disabled\n     *\n     * NOTE: CdkAccordionItem defines an input called `disabled`.\n     * This alias is to conform to our existing naming convention.\n     *\n     * @param value\n     */\n    set isDisabled(value) {\n        this.disabled = value;\n    }\n    get isDisabled() {\n        return this.disabled;\n    }\n    /**\n     * Define if the panel should be open\n     *\n     * NOTE: CdkAccordionItem defines an input called `expanded`.\n     * This alias is to conform to our existing naming convention.\n     *\n     * @param value\n     */\n    set isExpanded(value) {\n        this.expanded = value;\n    }\n    get isExpanded() {\n        return this.expanded;\n    }\n    /**\n     * Support for transparent mode. Default set to false\n     *\n     * @param value\n     */\n    set transparentMode(value) {\n        this._transparentMode = value;\n    }\n    get transparentMode() {\n        return this._transparentMode;\n    }\n    /**\n     * If a lazy-loaded template exists, inject it after the panel is opened\n     */\n    ngAfterContentInit() {\n        // istanbul ignore else\n        if (this.lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened.pipe(\n            // eslint-disable-next-line deprecation/deprecation\n            startWith(null), filter(() => this.expanded && !this.portal), take(1)).subscribe(() => {\n                this.portal = new TemplatePortal(this.lazyContent.template, this._viewContainerRef);\n            });\n        }\n    }\n    /**\n     * Send any input changes through the Subject stream\n     *\n     * @param changes\n     */\n    ngOnChanges(changes) {\n        this.inputChanges.next(changes);\n    }\n    /**\n     * Destroy the parent and finalize any subscriptions\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this.inputChanges.complete();\n    }\n};\nTsExpansionPanelComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher },\n    { type: ViewContainerRef },\n    { type: TsDocumentService },\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [TS_ACCORDION,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TS_EXPANSION_PANEL_DEFAULT_OPTIONS,] }] }\n];\n__decorate([\n    ContentChild(TsExpansionPanelContentDirective),\n    __metadata(\"design:type\", TsExpansionPanelContentDirective)\n], TsExpansionPanelComponent.prototype, \"lazyContent\", void 0);\n__decorate([\n    ViewChild('panelBody', { static: true }),\n    __metadata(\"design:type\", ElementRef)\n], TsExpansionPanelComponent.prototype, \"panelBody\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsExpansionPanelComponent.prototype, \"hideToggle\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsExpansionPanelComponent.prototype, \"isDisabled\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsExpansionPanelComponent.prototype, \"isExpanded\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsExpansionPanelComponent.prototype, \"transparentMode\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsExpansionPanelComponent.prototype, \"afterExpand\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsExpansionPanelComponent.prototype, \"afterCollapse\", void 0);\nTsExpansionPanelComponent = __decorate([\n    Component({\n        selector: 'ts-expansion-panel',\n        template: \"<ng-content select=\\\"ts-expansion-panel-trigger\\\"></ng-content>\\n\\n<div\\n  class=\\\"ts-expansion-panel__content\\\"\\n  role=\\\"region\\\"\\n  [@bodyExpansion]=\\\"currentExpandedState\\\"\\n  (@bodyExpansion.done)=\\\"bodyAnimationDone.next($event)\\\"\\n  [attr.aria-labelledby]=\\\"triggerId\\\"\\n  [attr.aria-hidden]=\\\"!expanded\\\"\\n  [id]=\\\"id\\\"\\n  #panelBody\\n>\\n  <div class=\\\"ts-expansion-panel__body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"portal\\\"></ng-template>\\n  </div>\\n\\n  <ng-content select=\\\"ts-expansion-panel-action-row\\\"></ng-content>\\n</div>\\n\",\n        // NOTE: @Outputs are defined here rather than using decorators since we are extending the @Outputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-outputs-metadata-property\n        outputs: [\n            'opened',\n            'closed',\n            'expandedChange',\n            'destroyed',\n        ],\n        animations: [tsExpansionPanelAnimations.bodyExpansion],\n        host: {\n            'class': 'ts-expansion-panel',\n            '[class.ts-expansion-panel--shadow]': '!transparentMode',\n            '[class.ts-expansion-panel--expanded]': 'expanded',\n            '[class.ts-expansion-panel--animation-noopable]': 'animationMode === \"NoopAnimations\"',\n        },\n        providers: [\n            // Provide TsAccordionComponent as undefined to prevent nested expansion panels from registering to the same accordion.\n            {\n                provide: TS_ACCORDION,\n                useValue: ɵ0,\n            },\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsExpansionPanel',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-expansion-panel{background:#fafafa;border-radius:4px;box-sizing:content-box;color:#302d35;display:block;margin:0;overflow:hidden}@media screen and (-ms-high-contrast:active){.ts-expansion-panel{outline:solid 1px}}.ts-expansion-panel.ts-expansion-panel--shadow{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.ts-accordion .ts-expansion-panel{border-radius:0}.ts-accordion .ts-expansion-panel:first-of-type{border-top-left-radius:4px;border-top-right-radius:4px}.ts-accordion .ts-expansion-panel:last-of-type{border-bottom-left-radius:4px;border-bottom-right-radius:4px}.ng-animate-disabled .ts-expansion-panel,.ts-expansion-panel.ng-animate-disabled,.ts-expansion-panel.ts-expansion-panel--animation-noopable{transition:none}.ts-expansion-panel .ts-expansion-panel__body{padding:0}.ts-expansion-panel--shadow .ts-expansion-panel__body{padding:0 24px 16px}.ts-expansion-panel__content{display:flex;flex-direction:column;overflow:visible}.ts-expansion-panel__action-row{border-top:1px solid #cecdd1;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.ts-expansion-panel__action-row .ts-button{margin-left:8px}\"]\n    }),\n    __param(4, Optional()), __param(4, SkipSelf()), __param(4, Inject(TS_ACCORDION)),\n    __param(5, Optional()), __param(5, Inject(ANIMATION_MODULE_TYPE)),\n    __param(6, Optional()), __param(6, Inject(TS_EXPANSION_PANEL_DEFAULT_OPTIONS)),\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef,\n        UniqueSelectionDispatcher,\n        ViewContainerRef,\n        TsDocumentService, Object, String, Object])\n], TsExpansionPanelComponent);\n\n/**\n * Trigger to open/close a {@link TsExpansionPanelComponent}\n *\n * @example\n * <ts-expansion-panel>\n *               <ts-expansion-panel-trigger\n *                 collapsedHeight=\"100px\"\n *                 expandedHeight=\"150px\"\n *               >\n *                 Panel trigger\n *               </ts-expansion-panel-trigger>\n *\n *               Panel content\n * </ts-expansion-panel>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/expansion-panel</example-url>\n */\nlet TsExpansionPanelTriggerComponent = class TsExpansionPanelTriggerComponent {\n    constructor(panel, elementRef, focusMonitor, changeDetectorRef, defaultOptions) {\n        this.panel = panel;\n        this.elementRef = elementRef;\n        this.focusMonitor = focusMonitor;\n        this.changeDetectorRef = changeDetectorRef;\n        const accordionHideToggleChange = panel.accordion\n            // NOTE: Underscore naming controlled by Material\n            // eslint-disable-next-line no-underscore-dangle\n            ? panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle))\n            : EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we need to subscribe and trigger change detection manually.\n        // eslint-disable-next-line deprecation/deprecation\n        merge(panel.opened, panel.closed, accordionHideToggleChange, panel.inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))).pipe(untilComponentDestroyed(this))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n        // Avoid focus being lost if the panel contained the focused element and was closed.\n        panel.closed.pipe(filter(() => panel.contentContainsFocus), untilComponentDestroyed(this)).subscribe(() => focusMonitor.focusVia(elementRef, 'program'));\n        // Subscribe to trigger focus events\n        focusMonitor.monitor(elementRef).subscribe(origin => {\n            if (origin && panel.accordion) {\n                panel.accordion.handleTriggerFocus(this);\n            }\n        });\n        // Set the default options if they exist\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Determine the current expanded state string of the panel\n     */\n    get currentPanelExpandedState() {\n        return this.panel.currentExpandedState;\n    }\n    /**\n     * Determine if the panel is currently expanded\n     */\n    get isExpanded() {\n        return this.panel.expanded;\n    }\n    /**\n     * Determine if current mode is transparent\n     */\n    get isTransparent() {\n        return this.panel.transparentMode;\n    }\n    /**\n     * Whether the associated panel is disabled.\n     *\n     * Implemented as a part of `FocusableOption`.\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    get shouldShowToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Stop monitoring focus events\n     */\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef);\n    }\n    /**\n     * Focuses the panel trigger.\n     *\n     * Implemented as a part of `FocusableOption`.\n     *\n     * @param origin - Origin of the action that triggered the focus.\n     */\n    focus(origin = 'program') {\n        this.focusMonitor.focusVia(this.elementRef, origin);\n    }\n    /**\n     * Toggle the expanded state of the panel\n     */\n    toggle() {\n        this.panel.toggle();\n    }\n    /**\n     * Handle keydown event calling to toggle() if appropriate\n     *\n     * @param event\n     */\n    keydown(event) {\n        const { code } = event;\n        const isSelectionKey = (code === KEYS.SPACE.code) || (code === KEYS.ENTER.code);\n        if (isSelectionKey) {\n            // istanbul ignore else\n            if (!hasModifierKey(event)) {\n                event.preventDefault();\n                this.toggle();\n            }\n        }\n        else if (this.panel.accordion) {\n            this.panel.accordion.handleTriggerKeydown(event);\n        }\n    }\n};\nTsExpansionPanelTriggerComponent.ctorParameters = () => [\n    { type: TsExpansionPanelComponent, decorators: [{ type: Host }] },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [TS_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsExpansionPanelTriggerComponent.prototype, \"collapsedHeight\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsExpansionPanelTriggerComponent.prototype, \"expandedHeight\", void 0);\nTsExpansionPanelTriggerComponent = __decorate([\n    Component({\n        animations: [\n            tsExpansionPanelAnimations.indicatorRotate,\n            tsExpansionPanelAnimations.expansionTriggerHeight,\n        ],\n        selector: 'ts-expansion-panel-trigger',\n        template: \"<span\\n  class=\\\"ts-expansion-panel__trigger-content\\\"\\n  role=\\\"button\\\"\\n>\\n  <ng-content select=\\\"ts-expansion-panel-trigger-title\\\"></ng-content>\\n  <ng-content select=\\\"ts-expansion-panel-trigger-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n\\n<span\\n  class=\\\"ts-expansion-panel__indicator\\\"\\n  [@indicatorRotate]=\\\"currentPanelExpandedState\\\"\\n  *ngIf=\\\"shouldShowToggle\\\"\\n></span>\\n\",\n        host: {\n            'class': 'ts-expansion-panel__trigger',\n            'role': 'button',\n            '[attr.id]': 'panel.triggerId',\n            '[attr.tabindex]': 'disabled ? -1 : 0',\n            '[attr.aria-controls]': 'panel.id',\n            '[attr.aria-expanded]': 'isExpanded',\n            '[attr.aria-disabled]': 'panel.disabled',\n            '[class.ts-expansion-panel__trigger--expanded]': 'isExpanded',\n            '[class.ts-expansion-panel__trigger--transparent]': 'isTransparent',\n            '(click)': 'toggle()',\n            '(keydown)': 'keydown($event)',\n            '[@expansionHeight]': `{\n      value: currentPanelExpandedState,\n      params: {\n        collapsedHeight: collapsedHeight,\n        expandedHeight: expandedHeight\n      }\n    }`,\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsExpansionPanelTrigger',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-expansion-panel__trigger{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:400;align-items:center;border-radius:inherit;display:flex;flex-direction:row;padding:0 24px}.ts-expansion-panel__trigger:not(.c-button):not(.c-input):not(.c-select):not(.ts-checkbox){line-height:20px}.ts-expansion-panel__trigger.ts-expansion-panel__trigger--transparent{padding:0}.ts-expansion-panel__trigger:focus,.ts-expansion-panel__trigger:hover{outline:0}.ts-expansion-panel__trigger.ts-expansion-panel__trigger--expanded:focus,.ts-expansion-panel__trigger.ts-expansion-panel__trigger--expanded:hover{background:inherit}.ts-expansion-panel__trigger[aria-disabled=true]{color:#cecdd1}.ts-expansion-panel__trigger[aria-disabled=true] .ts-expansion-panel__trigger-description,.ts-expansion-panel__trigger[aria-disabled=true] .ts-expansion-panel__trigger-title{color:inherit}.ts-expansion-panel__trigger:not([aria-disabled=true]){cursor:pointer}@media (hover:none){.ts-expansion-panel:not(.ts-expansion-panel--expanded):not([aria-disabled=true]) .ts-expansion-panel__trigger:hover{background:#fafafa}}.ts-expansion-panel__trigger-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.ts-expansion-panel__trigger-description,.ts-expansion-panel__trigger-title{display:flex;flex-grow:0;margin-right:32px}.ts-expansion-panel__trigger-description{color:#757575;flex-grow:2}.ts-expansion-panel__indicator::after{border-style:solid;border-width:0 2px 2px 0;color:#999;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.ts-expansion-panel:not(.ts-expansion-panel--expanded) .ts-expansion-panel__trigger:not([aria-disabled=true]).cdk-keyboard-focused,.ts-expansion-panel:not(.ts-expansion-panel--expanded) .ts-expansion-panel__trigger:not([aria-disabled=true]).cdk-program-focused,.ts-expansion-panel:not(.ts-expansion-panel--expanded) .ts-expansion-panel__trigger:not([aria-disabled=true]):hover{background:#f2f0f7}\"]\n    }),\n    __param(0, Host()),\n    __param(4, Inject(TS_EXPANSION_PANEL_DEFAULT_OPTIONS)), __param(4, Optional()),\n    __metadata(\"design:paramtypes\", [TsExpansionPanelComponent,\n        ElementRef,\n        FocusMonitor,\n        ChangeDetectorRef, Object])\n], TsExpansionPanelTriggerComponent);\n\nvar TsAccordionComponent_1;\n/**\n * Component to allow multiple {@link TsExpansionPanelComponent}'s to function as an accordion.\n *\n * @example\n * <ts-accordion\n *               [multi]=\"true\"\n *               [hideToggle]=\"true\"\n *               (destroyed)=\"accordionDestroyed()\"\n * >\n *               <ts-expansion-panel>\n *                 ...\n *               </ts-expansion-panel>\n *\n *               <ts-expansion-panel>\n *                 ...\n *               </ts-expansion-panel>\n *\n *               <ts-expansion-panel>\n *                 ...\n *               </ts-expansion-panel>\n * </ts-accordion>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/expansion-panel</example-url>\n */\nlet TsAccordionComponent = TsAccordionComponent_1 = class TsAccordionComponent extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        this._hideToggle = false;\n        /**\n         * The event emitted as the accordion is destroyed\n         */\n        this.destroyed = new EventEmitter();\n    }\n    /**\n     * Determine if the toggle indicator should be hidden\n     *\n     * @param value\n     */\n    set hideToggle(value) {\n        this._hideToggle = value;\n    }\n    get hideToggle() {\n        return this._hideToggle;\n    }\n    /**\n     * Initialize the key manager\n     */\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager(this.triggers).withWrap();\n    }\n    /**\n     * Alert consumers when the accordion is destroyed\n     */\n    ngOnDestroy() {\n        this.destroyed.emit();\n    }\n    /**\n     * Handle keyboard events coming in from the panel triggers\n     *\n     * @param event\n     */\n    handleTriggerKeydown(event) {\n        const { code } = event;\n        const manager = this.keyManager;\n        if (code === KEYS.HOME.code) {\n            manager.setFirstItemActive();\n            event.preventDefault();\n        }\n        else if (code === KEYS.END.code) {\n            manager.setLastItemActive();\n            event.preventDefault();\n        }\n        else {\n            this.keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Handle focus events for the trigger\n     *\n     * @param trigger - The trigger component that is receiving focus\n     */\n    handleTriggerFocus(trigger) {\n        this.keyManager.updateActiveItem(trigger);\n    }\n};\n__decorate([\n    ContentChildren(TsExpansionPanelTriggerComponent, { descendants: true }),\n    __metadata(\"design:type\", QueryList)\n], TsAccordionComponent.prototype, \"triggers\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsAccordionComponent.prototype, \"hideToggle\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsAccordionComponent.prototype, \"destroyed\", void 0);\nTsAccordionComponent = TsAccordionComponent_1 = __decorate([\n    Component({\n        selector: 'ts-accordion',\n        template: `<ng-content></ng-content>`,\n        // NOTE: @Inputs are defined here rather than using decorators since we are extending the @Inputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n        inputs: ['multi'],\n        providers: [\n            {\n                provide: TS_ACCORDION,\n                useExisting: TsAccordionComponent_1,\n            },\n        ],\n        host: { class: 'ts-accordion' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsAccordion'\n    })\n], TsAccordionComponent);\n\n/**\n * {@link TsExpansionPanelComponent} action row that will be rendered at the bottom of the panel.\n *\n * @example\n * <ts-expansion-panel>\n *               <ts-expansion-panel-trigger>\n *                 Panel trigger\n *               </ts-expansion-panel-trigger>\n *\n *               Panel content\n *\n *               <ts-expansion-panel-action-row>\n *                 <button>Next</button>\n *               </ts-expansion-panel-action-row>\n * </ts-expansion-panel>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/expansion-panel</example-url>\n */\nlet TsExpansionPanelActionRowComponent = class TsExpansionPanelActionRowComponent {\n};\nTsExpansionPanelActionRowComponent = __decorate([\n    Component({\n        selector: 'ts-expansion-panel-action-row',\n        template: `<ng-content></ng-content>`,\n        host: { class: 'ts-expansion-panel__action-row' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsExpansionPanelActionRow'\n    })\n], TsExpansionPanelActionRowComponent);\n\nlet TsExpansionPanelTriggerDescriptionComponent = class TsExpansionPanelTriggerDescriptionComponent {\n};\nTsExpansionPanelTriggerDescriptionComponent = __decorate([\n    Component({\n        selector: 'ts-expansion-panel-trigger-description',\n        template: `<ng-content></ng-content>`,\n        host: { class: 'ts-expansion-panel__trigger-description' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsExpansionPanelTriggerDescription'\n    })\n], TsExpansionPanelTriggerDescriptionComponent);\n\nlet TsExpansionPanelTriggerTitleComponent = class TsExpansionPanelTriggerTitleComponent {\n};\nTsExpansionPanelTriggerTitleComponent = __decorate([\n    Component({\n        selector: 'ts-expansion-panel-trigger-title',\n        template: `<ng-content></ng-content>`,\n        host: { class: 'ts-expansion-panel__trigger-title' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsExpansionPanelTriggerTitle'\n    })\n], TsExpansionPanelTriggerTitleComponent);\n\nlet TsExpansionPanelModule = class TsExpansionPanelModule {\n};\nTsExpansionPanelModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            CdkAccordionModule,\n            PortalModule,\n        ],\n        declarations: [\n            TsExpansionPanelComponent,\n            TsExpansionPanelTriggerComponent,\n            TsExpansionPanelTriggerTitleComponent,\n            TsExpansionPanelTriggerDescriptionComponent,\n            TsExpansionPanelContentDirective,\n            TsExpansionPanelActionRowComponent,\n            TsAccordionComponent,\n        ],\n        exports: [\n            TsExpansionPanelComponent,\n            TsExpansionPanelTriggerComponent,\n            TsExpansionPanelTriggerTitleComponent,\n            TsExpansionPanelTriggerDescriptionComponent,\n            TsExpansionPanelContentDirective,\n            TsExpansionPanelActionRowComponent,\n            TsAccordionComponent,\n        ],\n    })\n], TsExpansionPanelModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TS_ACCORDION, TS_EXPANSION_PANEL_ANIMATION_TIMING, TS_EXPANSION_PANEL_DEFAULT_OPTIONS, TsAccordionComponent, TsExpansionPanelActionRowComponent, TsExpansionPanelComponent, TsExpansionPanelContentDirective, TsExpansionPanelModule, TsExpansionPanelTriggerComponent, TsExpansionPanelTriggerDescriptionComponent, TsExpansionPanelTriggerTitleComponent, tsExpansionPanelAnimations, ɵ0 };\n//# sourceMappingURL=terminus-ui-expansion-panel.js.map\n","<ng-content select=\"ts-expansion-panel-trigger\"></ng-content>\n\n<div\n  class=\"ts-expansion-panel__content\"\n  role=\"region\"\n  [@bodyExpansion]=\"currentExpandedState\"\n  (@bodyExpansion.done)=\"bodyAnimationDone.next($event)\"\n  [attr.aria-labelledby]=\"triggerId\"\n  [attr.aria-hidden]=\"!expanded\"\n  [id]=\"id\"\n  #panelBody\n>\n  <div class=\"ts-expansion-panel__body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"portal\"></ng-template>\n  </div>\n\n  <ng-content select=\"ts-expansion-panel-action-row\"></ng-content>\n</div>\n","<ng-content></ng-content>","<span\n  class=\"ts-expansion-panel__trigger-content\"\n  role=\"button\"\n>\n  <ng-content select=\"ts-expansion-panel-trigger-title\"></ng-content>\n  <ng-content select=\"ts-expansion-panel-trigger-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n\n<span\n  class=\"ts-expansion-panel__indicator\"\n  [@indicatorRotate]=\"currentPanelExpandedState\"\n  *ngIf=\"shouldShowToggle\"\n></span>\n","<ng-content></ng-content>","<ng-content></ng-content>","<ng-content></ng-content>","import { Directive, Input, EventEmitter, Optional, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/accordion.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion.\n * @type {?}\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /**\n         * Emits when the state of the accordion changes\n         */\n        this._stateChanges = new Subject();\n        /**\n         * Stream that emits true/false when openAll/closeAll is triggered.\n         */\n        this._openCloseAllActions = new Subject();\n        /**\n         * A readonly id value to use for unique selection coordination.\n         */\n        this.id = `cdk-accordion-${nextId++}`;\n        this._multi = false;\n    }\n    /**\n     * Whether the accordion should allow multiple expanded accordion items simultaneously.\n     * @return {?}\n     */\n    get multi() { return this._multi; }\n    /**\n     * @param {?} multi\n     * @return {?}\n     */\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n    /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    openAll() {\n        this._openCloseAll(true);\n    }\n    /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    closeAll() {\n        this._openCloseAll(false);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /**\n     * @private\n     * @param {?} expanded\n     * @return {?}\n     */\n    _openCloseAll(expanded) {\n        if (this.multi) {\n            this._openCloseAllActions.next(expanded);\n        }\n    }\n}\nCdkAccordion.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion',\n            },] }\n];\nCdkAccordion.propDecorators = {\n    multi: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CdkAccordion.ngAcceptInputType_multi;\n    /**\n     * Emits when the state of the accordion changes\n     * @type {?}\n     */\n    CdkAccordion.prototype._stateChanges;\n    /**\n     * Stream that emits true/false when openAll/closeAll is triggered.\n     * @type {?}\n     */\n    CdkAccordion.prototype._openCloseAllActions;\n    /**\n     * A readonly id value to use for unique selection coordination.\n     * @type {?}\n     */\n    CdkAccordion.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAccordion.prototype._multi;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/accordion-item.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion item.\n * @type {?}\n */\nlet nextId$1 = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _expansionDispatcher\n     */\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /**\n         * Subscription to openAll/closeAll events.\n         */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /**\n         * Event emitted every time the AccordionItem is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted every time the AccordionItem is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event emitted when the AccordionItem is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * \\@docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /**\n         * The unique AccordionItem id.\n         */\n        this.id = `cdk-accordion-child-${nextId$1++}`;\n        this._expanded = false;\n        this._disabled = false;\n        /**\n         * Unregister function for _expansionDispatcher.\n         */\n        this._removeUniqueSelectionListener = (/**\n         * @return {?}\n         */\n        () => { });\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen((/**\n             * @param {?} id\n             * @param {?} accordionId\n             * @return {?}\n             */\n            (id, accordionId) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            }));\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /**\n     * Whether the AccordionItem is expanded.\n     * @return {?}\n     */\n    get expanded() { return this._expanded; }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    set expanded(expanded) {\n        expanded = coerceBooleanProperty(expanded);\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 * @type {?}\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the AccordionItem is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe((/**\n         * @param {?} expanded\n         * @return {?}\n         */\n        expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        }));\n    }\n}\nCdkAccordionItem.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                    // to the same accordion.\n                    { provide: CdkAccordion, useValue: ɵ0 },\n                ],\n            },] }\n];\n/** @nocollapse */\nCdkAccordionItem.ctorParameters = () => [\n    { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher }\n];\nCdkAccordionItem.propDecorators = {\n    closed: [{ type: Output }],\n    opened: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    expandedChange: [{ type: Output }],\n    expanded: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CdkAccordionItem.ngAcceptInputType_expanded;\n    /** @type {?} */\n    CdkAccordionItem.ngAcceptInputType_disabled;\n    /**\n     * Subscription to openAll/closeAll events.\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._openCloseAllSubscription;\n    /**\n     * Event emitted every time the AccordionItem is closed.\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.closed;\n    /**\n     * Event emitted every time the AccordionItem is opened.\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.opened;\n    /**\n     * Event emitted when the AccordionItem is destroyed.\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.destroyed;\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.expandedChange;\n    /**\n     * The unique AccordionItem id.\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._expanded;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._disabled;\n    /**\n     * Unregister function for _expansionDispatcher.\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._removeUniqueSelectionListener;\n    /** @type {?} */\n    CdkAccordionItem.prototype.accordion;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkAccordionItem.prototype._expansionDispatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/accordion-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkAccordionModule {\n}\nCdkAccordionModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n//# sourceMappingURL=accordion.js.map\n"],"sourceRoot":"webpack:///"}