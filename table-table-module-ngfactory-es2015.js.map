{"version":3,"sources":["/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/sort/fesm2015/terminus-ui-sort.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/sort/terminus-ui-sort.d.ts.TsSortHeaderComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/table/fesm2015/terminus-ui-table.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/table/terminus-ui-table.d.ts.TsHeaderRowComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/table/terminus-ui-table.d.ts.TsRowComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/table/terminus-ui-table.d.ts.TsFooterRowComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/table/terminus-ui-table.d.ts.TsTableComponent.html","/home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/cdk/fesm2015/drag-drop.js","/home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/cdk/fesm2015/table.js","./src/app/components/table/table-routing.module.ts","./src/app/components/table/table.component.html","./src/app/components/table/table.component.ts","./src/app/components/table/table.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACT;AACuJ;AACrJ;AACX;AACY;AACmB;AACY;AACT;AACoB;AACf;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA;AACA,6DAA6D,GAAG;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,GAAG,GAAG,iDAAiD;AAC3H;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,gEAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAQ,QAAQ,sDAAQ;AACxC;AACA;;AAEA,uGAAuG,GAAG;AAC1G;AACA;AACA,6DAA6D,UAAU;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAAS;AACrC;AACA;AACA,+CAA+C,+DAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,8EAAM,2BAA2B,mFAAW;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,kBAAkB,wDAAU;AAC5B,IAAI,+DAAS;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,0EAAkB,UAAU,GAAG,uEAAe,gBAAgB;AACnG;AACA;AACA;AACA;AACA;AACA,eAAe,mEAAO;AACtB,QAAQ,iEAAK,QAAQ,iEAAK,EAAE,+BAA+B;AAC3D;AACA,QAAQ,iEAAK,SAAS,iEAAK,EAAE,gCAAgC;AAC7D,QAAQ,sEAAU,iBAAiB,mEAAO;AAC1C;AACA;AACA;AACA;AACA,iBAAiB,mEAAO;AACxB,QAAQ,iEAAK,QAAQ,iEAAK,EAAE,8BAA8B;AAC1D,QAAQ,iEAAK,SAAS,iEAAK,EAAE,6BAA6B;AAC1D,QAAQ,sEAAU,iBAAiB,mEAAO;AAC1C;AACA;AACA;AACA;AACA,kBAAkB,mEAAO;AACzB,QAAQ,iEAAK,QAAQ,iEAAK,EAAE,6BAA6B;AACzD,QAAQ,iEAAK,SAAS,iEAAK,EAAE,8BAA8B;AAC3D,QAAQ,sEAAU,iBAAiB,mEAAO;AAC1C;AACA;AACA;AACA;AACA,qBAAqB,mEAAO;AAC5B,QAAQ,sEAAU,gBAAgB,mEAAO,4BAA4B,qEAAS;AAC9E,YAAY,iEAAK;AACjB;AACA;AACA,aAAa;AACb,YAAY,iEAAK;AACjB;AACA;AACA,aAAa;AACb;AACA,QAAQ,sEAAU,gBAAgB,mEAAO,4BAA4B,qEAAS;AAC9E,YAAY,iEAAK;AACjB;AACA;AACA,aAAa;AACb,YAAY,iEAAK;AACjB;AACA;AACA,aAAa;AACb;AACA,QAAQ,sEAAU,iBAAiB,mEAAO,4BAA4B,qEAAS;AAC/E,YAAY,iEAAK;AACjB;AACA;AACA,aAAa;AACb,YAAY,iEAAK;AACjB;AACA;AACA,aAAa;AACb;AACA,QAAQ,sEAAU,iBAAiB,mEAAO,4BAA4B,qEAAS;AAC/E,YAAY,iEAAK;AACjB;AACA;AACA,aAAa;AACb,YAAY,iEAAK;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+DAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iFAAS,oBAAoB,+DAAS;AACnD;AACA;AACA;AACA;AACA,6BAA6B,0FAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAK;AACb,kBAAkB,6FAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yBAAyB;AAC9B,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,sCAAsC,OAAO,sDAAQ,EAAE,GAAG;AAC/D,KAAK,OAAO,+DAAY,gBAAgB,OAAO,sDAAQ,EAAE;AACzD;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wBAAwB,wDAAU;AAClC,IAAI,+DAAS;AACb;AACA;AACA;AACA;AACA,kpCAAkpC,mDAAmD;AACrsC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA,wBAAwB,gEAAgE,+DAA+D,+DAA+D,8DAA8D,UAAU,kBAAkB,qCAAqC,kDAAkD,2BAA2B,cAAc,iBAAiB,kBAAkB,UAAU,2BAA2B,8GAA8G,yBAAyB,yBAAyB,gBAAgB,oBAAoB,uCAAuC,iBAAiB,sBAAsB,kBAAkB,sBAAsB,0BAA0B,qCAAqC,iBAAiB,kDAAkD,mBAAmB,SAAS,gCAAgC,wBAAwB,cAAc,WAAW,YAAY,gBAAgB,UAAU,oBAAoB,kBAAkB,kBAAkB,UAAU,0BAA0B,mBAAmB,aAAa,kBAAkB,mDAAmD,eAAe,gCAAgC,UAAU,kBAAkB,QAAQ,QAAQ,8BAA8B,oCAAoC,wCAAwC,UAAU,oCAAoC,gCAAgC,2BAA2B,uBAAuB,mBAAmB,eAAe,YAAY,mBAAmB,eAAe,cAAc,aAAa,UAAU,gBAAgB,oBAAoB,kBAAkB,uBAAuB,oNAAoN,UAAU,sBAAsB,aAAa,YAAY,oBAAoB,eAAe,kBAAkB,QAAQ,QAAQ,2BAA2B,WAAW,sDAAsD,iBAAiB,qBAAqB,mBAAmB,wBAAwB,aAAa,YAAY,YAAY,UAAU,0BAA0B,mBAAmB,aAAa,WAAW,OAAO,kBAAkB,MAAM,yCAAyC,WAAW,+BAA+B,wBAAwB,WAAW,YAAY,wBAAwB,UAAU,2DAA2D,wBAAwB,WAAW,kBAAkB,MAAM,yCAAyC,UAAU,6BAA6B,OAAO,uBAAuB,8BAA8B,QAAQ,sBAAsB;AACr2F,KAAK;AACL,IAAI,qDAAO,IAAI,8DAAQ;AACvB,IAAI,qDAAO,IAAI,8DAAQ;AACvB,IAAI,wDAAU;AACd,QAAQ,+DAAiB;AACzB;AACA,QAAQ,+DAAY;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,8DAAQ;AACZ;AACA,YAAY,4DAAY;AACxB,YAAY,8DAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEwK;AACxK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2GC5dI,iLAIC,KACC,uJAAiC,KAEjC,+KAAsE,KACpE,oLAA0E,KAC1E,sLAA4E,KAC5E,iKAA2C,wDAP7C,mBAAoC,kBAHtC,YAIC,EADC,SAAoC,GAIE,mBAA8B,kBAApE,YAAsE,EAAhC,SAA8B,GACzB,mBAAgC,kBAAzE,YAA0E,EAAjC,SAAgC,GAC/B,mBAAiC,kBAA3E,YAA4E,EAAlC,SAAiC;2GAOnF,wJAAsD,sPAEtD;2GApCA,qMAGC,KACC,0QAMC,YADC;;wBAAwB;MAL1B,wBAMC,IACC,0DAAY,IAEZ,20BAGC,kFAAS,MAEV,8YAIC,IAYL,8YAAsD,iDAdhD,mBAAmB,cAFrB,YAIC,EAFC,SAAmB,GAcS,oBAAmB,cAArD,YAAsD,EAApB,UAAmB,mDAhCnD,8CAAkE,GAFpE,YAGC,EADC,SAAkE,GAKhE,6CAA6C,MAC7C,0CAAuC,GAJzC,YAMC,EAHC,SAA6C,EAC7C,SAAuC,GAOrC,mBAA4D,cAF9D,mdAGC,EADC,SAA4D,EAF9D,qDAGC;;;;;;;;;;;;;;;;AChBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACkO;AACjO;AACsN;AACpN;AACV;AACwB;AACN;AACc;AACC;AACxB;AACP;AACF;AACM;;AAEvD;AACA;AACA,4BAA4B,6BAA6B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uBAAuB;AACrD;AACA;AACA;AACA,uFAAuF,+DAAY;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,gDAAgD,wDAAU;AAC1D,IAAI,+DAAS;AACb;AACA;AACA;AACA,yBAAyB,+DAAY;AACrC;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,+DAAS;AACvF,sBAAsB,wEAAgB,sBAAsB,iBAAiB;AAC7E;AACA;AACA,sEAAsE,iBAAiB;AACvF;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA,iFAAiF,6DAAU;AAC3F;AACA,4CAA4C,wDAAU;AACtD,IAAI,+DAAS;AACb;AACA;AACA,yBAAyB,6DAAU;AACnC;AACA,aAAa;AACb,KAAK;AACL;AACA;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA,mGAAmG,mEAAgB;AACnH;AACA,wDAAwD,wDAAU;AAClE,IAAI,+DAAS;AACb;AACA;AACA,yBAAyB,mEAAgB;AACzC;AACA,aAAa;AACb,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,gEAAa;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,kBAAkB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,iCAAiC;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,kBAAkB,IAAI,oCAAoC;AACjG;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAS;AACrB,sBAAsB,6FAAuB;AAC7C;AACA;AACA;AACA,YAAY,sDAAS;AACrB,sBAAsB,6FAAuB;AAC7C;AACA;AACA;AACA,YAAY,sDAAS;AACrB,sBAAsB,6FAAuB;AAC7C;AACA;AACA;AACA,YAAY,sDAAS;AACrB,sBAAsB,6FAAuB;AAC7C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAS;AACjB,kBAAkB,6FAAuB,QAAQ,gEAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,sDAAS;AACjB,kBAAkB,6FAAuB,QAAQ,2DAAI;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,MAAM;AAChF,wBAAwB,MAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,+DAAY,EAAE;AAC1B,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,uDAAS,EAAE;AACvB,KAAK,OAAO,6EAAiB,EAAE;AAC/B,KAAK,OAAO,oDAAM;AAClB;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,kDAAkD,wDAAU;AAC5D,IAAI,+DAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,IAAI,wDAAU,uBAAuB,+DAAY;AACjD,QAAQ,wDAAU;AAClB,QAAQ,uDAAS;AACjB,QAAQ,6EAAiB;AACzB,QAAQ,oDAAM;AACd;AACA;AACA;AACA;AACA,oDAAoD,0DAAO;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,iCAAiC;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,+DAAY,EAAE;AAC1B,KAAK,OAAO,uDAAS;AACrB;AACA,kBAAkB,wDAAU;AAC5B,IAAI,+DAAS;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C,QAAQ,+DAAY;AACpB,QAAQ,uDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG,mEAAgB;AACnH;AACA,wDAAwD,wDAAU;AAClE,IAAI,+DAAS;AACb;AACA;AACA,yBAAyB,mEAAgB;AACzC;AACA,aAAa;AACb,KAAK;AACL;AACA;AACA;AACA;AACA,gEAAgE,gEAAa;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,iCAAiC;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,+DAAY,EAAE;AAC1B,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,uDAAS;AACrB;AACA,wBAAwB,wDAAU;AAClC,IAAI,+DAAS;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,IAAI,wDAAU,uBAAuB,+DAAY;AACjD,QAAQ,wDAAU;AAClB,QAAQ,uDAAS;AACjB;;AAEA;AACA;AACA;AACA;AACA,8DAA8D,+DAAY;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,uBAAuB,wDAAU;AACjC,IAAI,+DAAS;AACb;AACA,kBAAkB,mEAAgB;AAClC;AACA;AACA;AACA,SAAS;AACT,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA;AACA,KAAK;AACL,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C;AACA;AACA;AACA;AACA,kDAAkD,yDAAM;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,iBAAiB,wDAAU;AAC3B,IAAI,+DAAS;AACb;AACA,kBAAkB,mEAAgB;AAClC;AACA;AACA;AACA,SAAS;AACT,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA;AACA,KAAK;AACL,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C;AACA;AACA,kCAAkC,uBAAuB;AACzD;AACA;AACA;AACA,gGAAgG,kEAAe;AAC/G;AACA,sDAAsD,wDAAU;AAChE,IAAI,+DAAS;AACb;AACA;AACA;AACA,yBAAyB,kEAAe;AACxC;AACA,aAAa;AACb;AACA,yBAAyB,+DAAY;AACrC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kCAAkC,uBAAuB;AACzD;AACA;AACA;AACA,gGAAgG,kEAAe;AAC/G;AACA,sDAAsD,wDAAU;AAChE,IAAI,+DAAS;AACb;AACA;AACA,yBAAyB,kEAAe;AACxC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uFAAuF,+DAAY;AACnG;AACA,gDAAgD,wDAAU;AAC1D,IAAI,+DAAS;AACb;AACA,kBAAkB,mEAAgB;AAClC;AACA;AACA;AACA,SAAS;AACT;AACA,yBAAyB,+DAAY;AACrC;AACA,aAAa;AACb;AACA;AACA,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA,KAAK;AACL;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA,8EAA8E,4DAAS;AACvF;AACA,0CAA0C,wDAAU;AACpD,IAAI,+DAAS;AACb;AACA;AACA;AACA,yBAAyB,4DAAS;AAClC;AACA,aAAa;AACb;AACA,yBAAyB,yDAAM;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA,4CAA4C,8BAA8B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2DAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kDAAK;AACzC;AACA;AACA;AACA,uBAAuB,kDAAK,qDAAqD,4DAAK,cAAc,6FAAuB;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAAI,KAAK,gEAAS;AACxC,SAAS;AACT;AACA;AACA;AACA,2CAA2C,8EAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAY;AAC7C;AACA;AACA;AACA;AACA,gBAAgB,8BAA8B,MAAM,wBAAwB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,6FAAuB;AACxG,kCAAkC,6FAAuB;AACzD;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6FAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,+DAAQ,EAAE;AACtB,KAAK,OAAO,uDAAS,EAAE;AACvB,KAAK,OAAO,6DAAe,EAAE;AAC7B,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,6BAA6B,OAAO,uDAAS,mBAAmB,GAAG;AACxE,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC1E,KAAK,OAAO,iEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC9D,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,2EAAe,EAAE;AAC7B,KAAK,OAAO,qEAAa;AACzB;AACA,wDAAU;AACV,IAAI,qEAAe,yBAAyB,oBAAoB;AAChE,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,wDAAU;AACV,IAAI,qEAAe;AACnB,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wCAAwC,wDAAU;AAClD,IAAI,+DAAS;AACb;AACA,kBAAkB,qEAAkB;AACpC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,yBAAyB,2DAAQ;AACjC;AACA,aAAa;AACb,uBAAuB,+DAAiB;AACxC,yBAAyB,qEAAuB;AAChD;AACA,wBAAwB,gEAAgE,+DAA+D,+DAA+D,8DAA8D,UAAU,kBAAkB,qCAAqC,kDAAkD,2BAA2B,cAAc,iBAAiB,kBAAkB,UAAU,2BAA2B,8GAA8G,yBAAyB,yBAAyB,gBAAgB,oBAAoB,uCAAuC,iBAAiB,sBAAsB,kBAAkB,sBAAsB,0BAA0B,qCAAqC,iBAAiB,kDAAkD,mBAAmB,SAAS,gCAAgC,wBAAwB,cAAc,WAAW,YAAY,gBAAgB,UAAU,oBAAoB,kBAAkB,kBAAkB,UAAU,UAAU,mBAAmB,oBAAoB,4BAA4B,uBAAuB,2BAA2B,kBAAkB,yBAAyB,kEAAkE,oEAAoE,oBAAoB,kBAAkB,+BAA+B,6DAA6D,eAAe,qBAAqB,gBAAgB,yBAAyB,qBAAqB,gBAAgB,mBAAmB,WAAW,8CAA8C,sBAAsB,6EAA6E,aAAa,wEAAwE,iBAAiB,4BAA4B,mBAAmB,2CAA2C,oEAAoE,gBAAgB,6FAA6F,0BAA0B,yBAAyB,6DAA6D,eAAe,qBAAqB,kCAAkC,+BAA+B,gBAAgB,yCAAyC,gCAAgC,WAAW,cAAc,kBAAkB,4CAA4C,iCAAiC,gCAAgC,yBAAyB,WAAW,qBAAqB,mBAAmB,uEAAuE,mBAAmB,kBAAkB,gBAAgB,qBAAqB,8JAA8J,iDAAiD,2PAA2P,kDAAkD,6HAA6H,mBAAmB,8GAA8G,iBAAiB,4LAA4L,yBAAyB,2GAA2G,gBAAgB,iHAAiH,kBAAkB,6CAA6C,iCAAiC,gBAAgB,4BAA4B,uBAAuB,yCAAyC,mBAAmB,+FAA+F,iCAAiC,0BAA0B,kCAAkC,wCAAwC,4BAA4B,6CAA6C,kBAAkB,oDAAoD,4CAA4C,SAAS,WAAW,cAAc,sBAAsB,UAAU,kBAAkB,MAAM,gCAAgC,UAAU,oCAAoC,oHAAoH,UAAU,gDAAgD,cAAc,uCAAuC,qBAAqB,uCAAuC,qBAAqB,uCAAuC,qBAAqB,uCAAuC,qBAAqB,uCAAuC,qBAAqB,uCAAuC,qBAAqB,uCAAuC,qBAAqB,uCAAuC,qBAAqB,uCAAuC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,qBAAqB,wCAAwC,oBAAoB,wCAAwC,oBAAoB,wCAAwC,oBAAoB,wCAAwC,oBAAoB,wCAAwC,oBAAoB,wCAAwC,oBAAoB,wCAAwC,oBAAoB,wCAAwC,oBAAoB,wCAAwC,oBAAoB,wCAAwC,oBAAoB,uDAAuD,sCAAsC,qEAAqE,UAAU,6EAA6E,UAAU,mCAAmC,YAAY,kBAAkB,cAAc,UAAU,kBAAkB,QAAQ,SAAS,0BAA0B,gCAAgC,WAAW,+CAA+C,2CAA2C,yBAAyB,WAAW,WAAW,cAAc,SAAS,kBAAkB,MAAM,2BAA2B,8BAA8B,UAAU,0CAA0C,8BAA8B,cAAc,iBAAiB,cAAc,wCAAwC,YAAY,SAAS,kBAAkB,QAAQ,wEAAwE,sCAAsC;AAC54Q,KAAK;AACL;AACA;AACA,IAAI,qDAAO,IAAI,+DAAS;AACxB,IAAI,qDAAO,IAAI,4DAAM,CAAC,wDAAQ;AAC9B,IAAI,qDAAO,IAAI,8DAAQ;AACvB,IAAI,wDAAU,uBAAuB,+DAAQ;AAC7C,QAAQ,uDAAS;AACjB,QAAQ,6DAAe;AACvB,QAAQ,+DAAiB,kBAAkB,iEAAc;AACzD,QAAQ,wDAAU;AAClB,QAAQ,oDAAM;AACd,QAAQ,2EAAe;AACvB,QAAQ,qEAAa;AACrB;;AAEA;AACA;AACA,mBAAmB,sBAAsB,yBAAyB,2BAA2B;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oDAAe;AAC9C,yBAAyB,oDAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,8DAAQ;AACZ;AACA,YAAY,iEAAc;AAC1B,YAAY,4DAAY;AACxB,YAAY,wEAAiB;AAC7B,YAAY,8DAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEie;AACje;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0GCjqCA,yVAA4B;;;;;;;oGCA5B,yVAA4B;;;;;;;0GCA5B,yVAA4B;;;;;;;gXCC1B,0DAA6B,IAC7B,wZAA8B,IAC9B,sZAAwB,IACxB,wZAA8B;;;;;;;;;;;;;;;;ACJhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuR;AAC5O;AACmD;AACN;AACwB;AACb;AAClB;AAC9B;;AAEnD;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,WAAW,EAKV;AACD;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,2BAA2B;AACtC;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,0CAA0C;AACrD,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,iCAAiC,mDAAmD;AACpF;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,mCAAmC,EAAE;AACrC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC,mCAAmC,EAAE;AACrC;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,WAAW,EAgBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,WAAW,EAkBV;AACD;AACA;AACA,UAAU;AACV;AACA,oCAAoC,6FAA+B,EAAE,gBAAgB;AACrF;AACA;AACA,UAAU;AACV;AACA,mCAAmC,6FAA+B,EAAE,iBAAiB;AACrF;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,WAAW,EAOV;AACD;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA,kBAAkB;AAClB,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,+BAA+B,4CAAO;AACtC;AACA;AACA;AACA,wCAAwC,iDAAY;AACpD;AACA;AACA;AACA,sCAAsC,iDAAY;AAClD;AACA;AACA;AACA,mCAAmC,iDAAY;AAC/C;AACA;AACA;AACA,mCAAmC,iDAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA,4BAA4B,4CAAO;AACnC;AACA;AACA;AACA,yBAAyB,4CAAO;AAChC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,yFAAyF,EAAE;AAC3F,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,0DAA0D,kBAAkB,GAAG,kBAAkB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,kBAAkB,2EAAa;AAC/B,oBAAoB,EAAE;AACtB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,2EAAa;AACrC,oCAAoC,EAAE;AACtC,4BAA4B,EAAE;AAC9B,4BAA4B,EAAE,oDAAoD,EAAE;AACpF;AACA,wBAAwB,EAAE;AAC1B,wBAAwB;AACxB;AACA;AACA,kEAAkE,EAAE;AACpE,mEAAmE,EAAE;AACrE,aAAa;AACb,wBAAwB,EAAE;AAC1B,wBAAwB,EAAE;AAC1B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE,iDAAiD,2EAAa;AACpF,oBAAoB,EAAE;AACtB;AACA,wBAAwB,EAAE,8CAA8C,EAAE;AAC1E;AACA;AACA,wBAAwB;AACxB;AACA,8BAA8B,EAAE;AAChC;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,EAAE;AACjE;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,iCAAiC;AACjC,kCAAkC;AAClC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE,gCAAgC;AACtD,oBAAoB,EAAE;AACtB,oBAAoB,EAAE;AACtB,yBAAyB,EAAE;AAC3B,wBAAwB,EAAE;AAC1B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,EAAE;AACjE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,uCAAuC,EAAE;AACzC,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,wEAAwE,EAAE;AAC1E,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,0CAA0C,aAAa;AACvD;AACA,mBAAmB,EAAE;AACrB;AACA,uCAAuC;AACvC,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,0CAA0C,EAAE;AAC5C,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,yBAAyB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC,OAAO;AACvC;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,kCAAkC,oCAAoC,EAAE,4BAA4B;AACpG,4BAA4B,EAAE;AAC9B;AACA,kDAAkD,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE;AAC7C,8CAA8C,EAAE;AAChD,iBAAiB;AACjB,aAAa;AACb;AACA,oBAAoB,EAAE;AACtB,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B,4CAA4C,EAAE;AAC9C,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,uDAAuD,EAAE;AACzD;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,+CAA+C,EAAE,2FAA2F,EAAE;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,4CAA4C,EAAE;AAC9C,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,OAAO;AACtB,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,oBAAoB;AACpB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,WAAW,EAwVV;AACD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,0BAA0B,cAAc,MAAM,cAAc;AAC5D;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB,8BAA8B,EAAE;AAChC,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,+BAA+B;AACtD,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,4BAA4B,iBAAiB;AAC7C,6BAA6B,kBAAkB;AAC/C;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,WAAW,EAgBV;AACD,WAAW,OAAO;AAClB;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mBAAmB,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iDAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,YAAY,qDAAQ,IAAI,4DAAuB;AAC/C,sBAAsB,gEAAS;AAC/B;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,uBAAuB,2EAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,uBAAuB,2EAAa;AACpC;AACA;AACA;AACA;AACA;AACA,0EAA0E,EAAE;AAC5E,qBAAqB,EAAE;AACvB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,4BAA4B,2EAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAA+D;AAC1F;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,0CAA0C,EAAE;AAC5C,oBAAoB,EAAE;AACtB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,oDAAoD,EAAE;AACtD,wBAAwB,EAAE;AAC1B,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,2EAAa,aAAa,EAAE;AACpD;AACA;AACA,oBAAoB,EAAE;AACtB;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,2BAA2B;AAC5F;AACA;AACA;AACA,oEAAoE,2BAA2B;AAC/F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8GAA8G,EAAE;AAChH;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,gBAAgB;AACnC,uBAAuB,EAAE;AACzB,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,2EAAa;AACrC;AACA;AACA;AACA,uCAAuC,EAAE,iBAAiB,EAAE;AAC5D;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,oBAAoB;AACpB,SAAS;AACT,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,uBAAuB,2EAAa;AACpC,qBAAqB,EAAE;AACvB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,UAAU,mBAAmB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,8BAA8B,2EAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA,sBAAsB,aAAa;AACnC;AACA,qBAAqB;AACrB;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,2CAA2C,EAAE,KAAK,4EAAc,CAAC,2EAAa;AAC9E;AACA;AACA;AACA;AACA;AACA,WAAW,EAgNV;AACD;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,sBAAsB;AACjC,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,qBAAqB;AAChC,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA,oCAAoC,6FAA+B;AACnE;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAAO;AACtC;AACA;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,yDAAyD,EAAE;AAC3D;AACA,aAAa;AACb;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,uDAAuD,EAAE;AACzD;AACA,aAAa;AACb;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB;AACxB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,UAAU,qBAAqB;AACrD;AACA;AACA;AACA,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AACvE;AACA,4CAA4C,wEAAkB,EAAE,+CAA+C,6BAA6B,8DAAQ,CAAC,oDAAM,GAAG,8DAAQ,CAAC,wDAAQ,GAAG,EAAE,+CAA+C;AACnO,WAAW,EA2DV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,UAAU,qBAAqB;AACrD;AACA;AACA;AACA,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC1E,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,oEAAa,EAAE;AAC3B,KAAK;AACL;AACA,oCAAoC,wEAAkB,EAAE,uCAAuC,qBAAqB,8DAAQ,CAAC,wDAAQ,GAAG,8DAAQ,CAAC,oDAAM,GAAG,8DAAQ,CAAC,oEAAa,GAAG,8DAAQ,oBAAoB,EAAE,uCAAuC;AACxP,WAAW,EAqBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,WAAW,EAMV;AACD;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,WAAW,EAMV;AACD;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,WAAW,EAWV;AACD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,WAAW,EAgBV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,WAAW,EAWV;AACD;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,WAAW,EAoCV;AACD;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,WAAW,EA6BV;AACD;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,WAAW,EAqBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,4BAA4B,4DAAc;;AAE1C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,gCAAgC,OAAO,oDAAM,4BAA4B,GAAG,OAAO,sDAAQ,EAAE;AAClG;AACA;AACA,gBAAgB,OAAO,mDAAK,oCAAoC;AAChE;AACA,WAAW,EAoBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,yDAAW;AACvB;AACA;AACA,YAAY,OAAO,mDAAK,EAAE;AAC1B;AACA,WAAW,EAQV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,wBAAwB;AAC7C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,mBAAmB,mFAAqB,QAAQ;AAC1E;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,yDAAW;AACvB;AACA;AACA,YAAY,OAAO,mDAAK,EAAE;AAC1B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B;AACA,WAAW,EAeV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,4BAA4B,4DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,WAAW,EAuBV;AACD;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,0BAA0B,4DAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA,yBAAyB,+CAAU;AACnC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,0DAA0D,0DAAG;AAC7D,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAI,KAAK,gEAAS;AACpC;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uCAAuC,gEAAS;AAChD;AACA,YAAY,0DAAG;AACf,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,gEAAS;AACrB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,mCAAmC,EAAE,KAAK,kDAAK;AAC/C,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,mDAAmD,gEAAS;AAC5D,iBAAiB;AACjB,aAAa,IAAI,gEAAS;AAC1B,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,0CAA0C,qBAAqB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,2EAAa;AACrC,YAAY,+DAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,kFAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA,oBAAoB;AACpB;AACA;AACA,gCAAgC,eAAe;AAC/C,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,oHAAoH;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,6BAA6B,iDAAiD;AAC9E,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,gCAAgC,OAAO,oDAAM,0BAA0B,GAAG,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE,GAAG;AACvH,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC1E,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,4BAA4B,GAAG;AACrG,KAAK,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC9D,KAAK,iBAAiB;AACtB,KAAK,OAAO,+DAAiB;AAC7B;AACA;AACA,gBAAgB,OAAO,6DAAe,yBAAyB,oBAAoB,IAAI;AACvF,wBAAwB,OAAO,0DAAY,2BAA2B;AACtE,4BAA4B,OAAO,0DAAY,+BAA+B;AAC9E,YAAY,OAAO,mDAAK,0BAA0B;AAClD,gBAAgB,OAAO,mDAAK,8BAA8B;AAC1D,2BAA2B,OAAO,mDAAK,iCAAiC;AACxE,uBAAuB,OAAO,mDAAK,8BAA8B;AACjE,sBAAsB,OAAO,mDAAK,gCAAgC;AAClE,wBAAwB,OAAO,mDAAK,sCAAsC;AAC1E,gBAAgB,OAAO,mDAAK,8BAA8B;AAC1D,yBAAyB,OAAO,mDAAK,uCAAuC;AAC5E,oBAAoB,OAAO,mDAAK,kCAAkC;AAClE,eAAe,OAAO,oDAAM,6BAA6B;AACzD,gBAAgB,OAAO,oDAAM,8BAA8B;AAC3D,aAAa,OAAO,oDAAM,2BAA2B;AACrD,eAAe,OAAO,oDAAM,6BAA6B;AACzD,cAAc,OAAO,oDAAM,4BAA4B;AACvD,eAAe,OAAO,oDAAM,6BAA6B;AACzD,aAAa,OAAO,oDAAM,2BAA2B;AACrD;AACA,WAAW,EA0JV;AACD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,OAAO,mDAAK,uCAAuC;AACnE;AACA,WAAW,EAaV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mFAAqB;AAC3E;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,qHAAqH,aAAa;AAClI;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,sBAAsB,gEAAS,mBAAmB,gEAAS;AAC3D;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,6BAA6B,yEAAW;AACxC,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,gCAAgC,EAAE;AAClC,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mFAAqB;AACvD,qCAAqC,mFAAqB;AAC1D;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,uFAAuF;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,qBAAqB,0CAA0C;AAC/D,qBAAqB,mDAAmD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,iBAAiB;AACtB,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC9D,KAAK,uCAAuC,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE,GAAG;AACpF,KAAK,OAAO,uEAAgB,EAAE;AAC9B,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,4BAA4B;AAClG;AACA;AACA,mBAAmB,OAAO,mDAAK,qCAAqC;AACpE,YAAY,OAAO,mDAAK,8BAA8B;AACtD,mBAAmB,OAAO,mDAAK,qCAAqC;AACpE,UAAU,OAAO,mDAAK,EAAE;AACxB,gBAAgB,OAAO,mDAAK,kCAAkC;AAC9D,gBAAgB,OAAO,mDAAK,kCAAkC;AAC9D,uBAAuB,OAAO,mDAAK,yCAAyC;AAC5E,sBAAsB,OAAO,mDAAK,wCAAwC;AAC1E,0BAA0B,OAAO,mDAAK,4CAA4C;AAClF,eAAe,OAAO,oDAAM,iCAAiC;AAC7D,eAAe,OAAO,oDAAM,iCAAiC;AAC7D,cAAc,OAAO,oDAAM,gCAAgC;AAC3D,cAAc,OAAO,oDAAM,gCAAgC;AAC3D;AACA,WAAW,EAyIV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0EAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAEuV;AACvV;;;;;;;;;;;;;ACpoLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACW;AACN;AACF;AACL;AACN;AACyQ;AAClP;AACvB;;AAE3C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,WAAW,EAqBV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,mBAAmB,KAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,sBAAsB,qBAAqB;AAC3C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,2BAA2B,mFAAqB;AAChD;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,sBAAsB,4DAAc;AACpC;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,WAAW,EAYV;AACD;AACA;AACA,UAAU;AACV;AACA,gCAAgC,4DAAc;;AAE9C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS,UAAU,2BAA2B;AAC1D;AACA;AACA;AACA,KAAK,OAAO,yDAAW;AACvB;AACA,WAAW,EAMV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS,UAAU,iCAAiC;AAChE;AACA;AACA;AACA,KAAK,OAAO,yDAAW;AACvB;AACA,WAAW,EAMV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS,UAAU,iCAAiC;AAChE;AACA;AACA;AACA,KAAK,OAAO,yDAAW;AACvB;AACA,WAAW,EAMV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,0BAA0B,mFAAqB;AAC/C;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,6BAA6B,mEAAmE;AAChG,aAAa;AACb;AACA;AACA;AACA,KAAK,gCAAgC,OAAO,oDAAM,sBAAsB,GAAG,OAAO,sDAAQ,EAAE;AAC5F;AACA;AACA,YAAY,OAAO,mDAAK,2BAA2B;AACnD,iBAAiB,OAAO,mDAAK,wBAAwB;AACrD,YAAY,OAAO,0DAAY,uBAAuB;AACtD,kBAAkB,OAAO,0DAAY,6BAA6B;AAClE,kBAAkB,OAAO,0DAAY,6BAA6B;AAClE;AACA,WAAW,EAiCV;AACD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA,mBAAmB,EAAE;AACrB,8CAA8C,+BAA+B;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,KAAK,qBAAqB;AAC1B,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,KAAK,qBAAqB;AAC1B,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,KAAK,qBAAqB;AAC1B,KAAK,OAAO,wDAAU;AACtB;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA,KAAK,OAAO,yDAAW,EAAE;AACzB,KAAK,OAAO,6DAAe;AAC3B;AACA,WAAW,EAsBV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,yDAAW,EAAE;AACzB,KAAK,OAAO,6DAAe,EAAE;AAC7B,KAAK,gCAAgC,OAAO,oDAAM,sBAAsB,GAAG,OAAO,sDAAQ,EAAE;AAC5F;AACA,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,yDAAW,EAAE;AACzB,KAAK,OAAO,6DAAe,EAAE;AAC7B,KAAK,gCAAgC,OAAO,oDAAM,sBAAsB,GAAG,OAAO,sDAAQ,EAAE;AAC5F;AACA,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,yDAAW,EAAE;AACzB,KAAK,OAAO,6DAAe,EAAE;AAC7B,KAAK,gCAAgC,OAAO,oDAAM,sBAAsB,GAAG,OAAO,sDAAQ,EAAE;AAC5F;AACA,WAAW,EAWV;AACD;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,WAAW,EAoCV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,WAAW,EAyCV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS,UAAU,8BAA8B;AAC7D;AACA;AACA;AACA,KAAK,OAAO,8DAAgB;AAC5B;AACA,WAAW,EAsBV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iCAAiC,qEAAuB;AACxD,+BAA+B,+DAAiB;AAChD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iCAAiC,qEAAuB;AACxD,+BAA+B,+DAAiB;AAChD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iCAAiC,qEAAuB;AACxD,+BAA+B,+DAAiB;AAChD,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE,6DAA6D;AAC9E;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD,2BAA2B,EAAE;AAC7B,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,2BAA2B,cAAc;AACzC,2BAA2B,EAAE;AAC7B,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,+BAA+B,yBAAyB;AACxD,+BAA+B,EAAE;AACjC,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,kCAAkC,EAAE;AACpC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,gCAAgC,SAAS;AACzC,2DAA2D,kBAAkB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,0BAA0B;AACjD,uBAAuB,EAAE;AACzB,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAkBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mDAAmD,GAAG;AACtD;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,gEAAgE,KAAK;AACrE;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,8BAA8B,qBAAqB;AACnD;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS,UAAU,0BAA0B;AACzD;AACA;AACA;AACA,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,wDAAU;AACtB;AACA,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS,UAAU,gCAAgC;AAC/D;AACA;AACA;AACA,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,wDAAU;AACtB;AACA,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS,UAAU,gCAAgC;AAC/D;AACA;AACA;AACA,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,wDAAU;AACtB;AACA,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,6DAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAOV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oDAAe,EAAE,kCAAkC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,YAAY,+DAAS,4DAA4D,EAAE;AACnF,wBAAwB,EAAE;AAC1B,qEAAqE,mBAAmB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,sCAAsC,mFAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6EAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,yDAAyD,EAAE;AAC3D;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA,2BAA2B,EAAE;AAC7B,yCAAyC,EAAE,mCAAmC,EAAE;AAChF,+CAA+C,EAAE;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,wCAAwC,EAAE,mCAAmC,EAAE;AAC/E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,2BAA2B,8BAA8B;AACzD,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,0CAA0C,EAAE;AAC5C;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,gFAAgF,EAAE;AAClF;AACA,2BAA2B,EAAE;AAC7B,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,YAAY,6EAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,YAAY,6EAAY;AACxB;AACA;AACA,iBAAiB,yDAAY;AAC7B;AACA;AACA;AACA,yBAAyB,+CAAE;AAC3B;AACA;AACA;AACA;AACA,yDAAyD,gEAAS;AAClE,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,oCAAoC;AAC3D,uBAAuB,EAAE;AACzB,yCAAyC,EAAE,iBAAiB,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,+DAA+D,qBAAqB;AACpF,uBAAuB,EAAE;AACzB,wCAAwC,EAAE;AAC1C,uBAAuB,EAAE;AACzB,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,aAAa,8CAA8C;AAC3D,aAAa,wCAAwC;AACrD,aAAa,8CAA8C;AAC3D;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,wCAAwC,+CAAE;AAC1C,kBAAkB,gEAAS;AAC3B;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,+DAAiB;AAChD;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD,6BAA6B,4CAA4C;AACzE,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,6DAAe,EAAE;AAC7B,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,6BAA6B,OAAO,uDAAS,mBAAmB,GAAG;AACxE,KAAK,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC9D,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC1E,KAAK,OAAO,8DAAQ;AACpB;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,6BAA6B,OAAO,mDAAK,EAAE;AAC3C,kBAAkB,OAAO,uDAAS,yBAAyB,eAAe,IAAI;AAC9E,wBAAwB,OAAO,uDAAS,2BAA2B,eAAe,IAAI;AACtF,wBAAwB,OAAO,uDAAS,2BAA2B,eAAe,IAAI;AACtF,0BAA0B,OAAO,6DAAe,wBAAwB,oBAAoB,IAAI;AAChG,uBAAuB,OAAO,6DAAe,qBAAqB,oBAAoB,IAAI;AAC1F,6BAA6B,OAAO,6DAAe;AACnD;AACA,iBAAiB,IAAI;AACrB,6BAA6B,OAAO,6DAAe;AACnD;AACA,iBAAiB,IAAI;AACrB;AACA,WAAW,EAqOV;AACD;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,YAAY,+DAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,+BAA+B,+DAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD,aAAa;AACb;AACA;AACA;AACA,KAAK,+BAA+B,OAAO,sDAAQ,EAAE,GAAG;AACxD,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,gCAAgC;AACtG;AACA;AACA,YAAY,OAAO,mDAAK,EAAE;AAC1B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,eAAe,OAAO,mDAAK,EAAE;AAC7B,iBAAiB,OAAO,uDAAS,wBAAwB,eAAe,IAAI;AAC5E,YAAY,OAAO,uDAAS,sBAAsB,eAAe,IAAI;AACrE,kBAAkB,OAAO,uDAAS,4BAA4B,eAAe,IAAI;AACjF;AACA,WAAW,EAuDV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAE8b;AAC9b;;;;;;;;;;;;;ACx9FA;AAAA;AAAA;AAAA;AAGyB;AAE0B;AAGnD,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,+DAAc;KAC1B;CACF,CAAC;AAMK,MAAM,kBAAkB;CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oGCyCzB,uHAAyB;oGAnB7B,yHAAwD,KAGtD,4eAKC,EAHC;;wBAAkC;MAFpC,qtFAKC,KACC,sHAAM,mFAEN,MAGA,+WAGC,EADC;;wBAA6D;MAF/D,g1BAGC,uFAAc,MAEf,sUAAyB,yGAfzB,mBAA8B,4BAE9B,yBAAc,EAHhB,YAKC,EAJC,UAA8B,EAE9B,UAAc,GAFd,mBAA8B,4BADhC,YAKC,EAJC,UAA8B,2BADhC,y/BAKC,GACO,wEAEN,GAGA,0hBAGC;oGAvBP;;;;;wBAKC;MADC;;wBAA4C;MAJ9C,60DAKC,IACC,gdAAwD,iDAHxD,oBAAuB,EAHzB,YAKC,EAFC,UAAuB,GAFvB,oBAAyB,cAD3B,YAKC,EAJC,UAAyB,GAKX,oBAAyC,qBAAvD,YAAwD,EAA1C,UAAyC,2BANzD,0mCAKC;oGA0CC,+qBAAoC,iFAAK,2BAAzC,6IAAoC;oGACpC,igBAAkC,+EAAgB,2BAAlD,YAAkC,8FAAgB;oGAClD,qhBAAoC,+FAAmB,2BAAvD,YAAoC;oGAIpC,k7CAAmD,gFAAO,2BAAtB,kBAAc,EAAlD,YAAmD,EAAf,SAAc,GAAlD,mVAAmD;oGACnD,igBAAkC,2IAAwC,yBAA1E,YAAkC,+PAAwC;oGAC1E,qhBAAoC,6EAAC,2BAArC,YAAoC;qGAIpC,+qBAAoC,oFAAQ,2BAA5C,6IAAoC;qGACpC,igBAAkC,+EAAmB,2BAArD,YAAkC,iGAAmB;qGACrD,qhBAAqC,+EAAG,2BAAxC,YAAqC;qGAIrC,k7CAAmD,iFAAQ,2BAAvB,kBAAc,EAAlD,YAAmD,EAAf,SAAc,GAAlD,mVAAmD;qGACnD,igBAAkC,+EAAgB,2BAAlD,YAAkC,8FAAgB;qGAClD,qhBAAoC,6EAAC,2BAArC,YAAoC;qGAIpC,k7CAAmD,+EAAM,2BAArB,kBAAc,EAAlD,YAAmD,EAAf,SAAc,GAAlD,mVAAmD;qGACnD,igBAAkC,+EAAiB,2BAAnD,YAAkC,+FAAiB;qGACnD,qhBAAoC,6EAAC,2BAArC,YAAoC;qGAIpC,+qBAAoC,kFAAM,2BAA1C,6IAAoC;qGAElC,wHAAoC,oLAAa;qGADnD,igBAAkC,IAChC,idAAoC,yBADtC,YAAkC,GAC1B,kBAA6B,2BAAnC,YAAoC,EAA9B,SAA6B;qGAErC,qhBAAoC,6EAAC,2BAArC,YAAoC;qGAIpC,k7CAAmD,gFAAO,2BAAtB,kBAAc,EAAlD,YAAmD,EAAf,SAAc,GAAlD,mVAAmD;qGACnD,igBAAkC,2IAAwC,yBAA1E,YAAkC,+PAAwC;qGAC1E,qhBAAoC,+EAAwB,2BAA5D,YAAoC,kHAAwB;qGAI5D,+qBAAoC,kFAEpC,2BAFA,6IAAoC;qGAGpC,igBAAkC,IAChC,8JAAyD,0BAD3D,YAAkC,mDACT,+BAAiC,0BAAxD,YAAyD,EAAlC,SAAiC;qGAE1D,qhBAAoC,6EAAC,2BAArC,YAAoC;qGAIpC,+qBAAoC,iFAAK,2BAAzC,6IAAoC;qGACpC,igBAAkC,+EAAgB,2BAAlD,YAAkC,8FAAgB;qGAClD,qhBAAoC,6EAAC,2BAArC,YAAoC;qGAIpC,+qBAAoC,8EAAE,2BAAtC,6IAAoC;qGACpC,igBAAkC,+EAAa,2BAA/C,YAAkC,2FAAa;qGAC/C,qhBAAoC,6EAAC,2BAArC,YAAoC;qGAIpC,+qBAAoC,gFAAI,2BAAxC,6IAAoC;qGACpC,igBAAkC,IAChC,iIAA8B,KAC5B,2zBAAwB,oFAAW,2BAFvC,YAAkC,GAErB,wBAAc,EAAvB,YAAwB,EAAf,SAAc,2BADtB,yHAA0B,GAA7B,YAA8B,EAA3B,SAA0B,GAC3B,0gBAAwB;qGAG5B,qhBAAoC,6EAAC,2BAArC,YAAoC;qGAGtC,smBAAsE;qGACtE,2kBAA8D;qGAC9D,kwBAAsE;qgBAhK1E,86CAA2E,IACzE,qJAA8B,KAC5B,qHAAG,qJAED,6HAAI,sHAEN,MAEA,yHAAK,KACH,0JAAmC,+FAEjC;;;;;wBAAmD;MAA5B;;wBAA2B;MAAlD,otCAAmD,IAGrD,+KAAoC,YAA5B;;wBAA2B;MAAnC,wBAAoC,qGAAwB,MAG9D,yHAAK,KACH,2HAAO,6FAEL;;;;;wBAA0D;MAAtB;;wBAAqB;MAAzD,muCAA0D,IACxD,kzBAAsB,iFAAK,MAC3B,ozBAAwB,mFAAO,MAMvC,yqBAAa,IAEb,smBAAsD,IACpD,00BAAoC,IAAU,mFAEhD,MAEA,oHAAsB,KAkCxB,wJAA+B,KAC7B,kVAUC,YALC;;wBAAuC;MALzC,g0EAUC,MAEC,ggCAAyC,KACvC,wiBAAoC,KACpC,shBAAkC,KAClC,wiBAAoC,KAGtC,sgCAAsD,KACpD,wiBAAmD,KACnD,shBAAkC,KAClC,wiBAAoC,KAGtC,sgCAAuD,KACrD,0iBAAoC,KACpC,whBAAkC,KAClC,yGAAqC,KAGvC,2+BAAqC,KACnC,0iBAAmD,KACnD,whBAAkC,KAClC,0iBAAoC,KAGtC,wgCAAqD,KACnD,0iBAAmD,KACnD,whBAAkC,KAClC,0iBAAoC,KAGtC,2+BAAmC,KACjC,0iBAAoC,KACpC,whBAAkC,KAGlC,0iBAAoC,KAGtC,2+BAAoC,KAClC,0iBAAmD,KACnD,whBAAkC,KAClC,0iBAAoC,KAGtC,2+BAAiC,KAC/B,0iBAAoC,KAGpC,whBAAkC,KAGlC,0iBAAoC,KAGtC,2+BAAkC,KAChC,0iBAAoC,KACpC,whBAAkC,KAClC,0iBAAoC,KAGtC,wgCAAiD,KAC/C,0iBAAoC,KACpC,whBAAkC,KAClC,0iBAAoC,KAGtC,2+BAAqC,KACnC,0iBAAoC,KACpC,whBAAkC,KAKlC,0iBAAoC,KAGtC,46BAAsE,KACtE,u3BAA8D,KAC9D,ytBAAsE,KAI1E,ioCAA8C,IAC5C,kTAKC,YAFC;;wBAAmC;MACnC;;wBAA8C;MAJhD,2oBAKC,MAGH,yHAAK,KACH,gLAAwB,YAAhB;;wBAAe;MAAvB,wBAAwB,mGAAsB,mDA9K3C,qBAAc,EAAnB,YAA2E,EAAtE,SAAc,GAAC,sCAAoC,EAAxD,YAA2E,EAAvD,SAAoC,GAAC,kBAAiB,EAA1E,YAA2E,EAAlB,SAAiB,GAW3C,oBAA2B,gBAAlD,aAAmD,EAA5B,UAA2B,GAS1C,0BAAc,EAAc,oBAAqB,UAAzD,aAA0D,EAAlD,UAAc,EAAc,UAAqB,GAC/C,wBAAa,EAArB,aAAsB,EAAd,qCAAa,EAArB,aAAsB,EAAd,UAAa,GACb,0BAAe,EAAvB,aAAwB,EAAhB,uCAAe,EAAvB,aAAwB,EAAhB,UAAe,GAMzB,mBAAM,EAAZ,aAAa,EAAP,UAAM,GAEH,0EAA6B,GAAC,yBAAc,EAArD,aAAsD,EAA7C,UAA6B,EAAC,UAAc,GAC1C,mCAA0B,EAAnC,aAAoC,EAA3B,UAA0B,GA8CnC,mBAAiB,EAPnB,aAUC,EAHC,UAAiB,GACjB,oBAAmB,UALnB,oBAAyB,aACzB,oBAA0B,iBAF1B,oBAAmB,UAFrB,aAUC,EAFC,UAAmB,EALnB,UAAyB,EACzB,UAA0B,EAF1B,UAAmB,GAUL,wBAAmB,EAAC,mBAAM,EAAxC,aAAyC,EAA3B,UAAmB,EAAC,UAAM,GAM1B,0BAAqB,EAAC,wBAAiB,EAArD,aAAsD,EAAxC,UAAqB,EAAC,UAAiB,GAMvC,2BAAsB,EAAC,wBAAiB,EAAtD,aAAuD,EAAzC,UAAsB,EAAC,UAAiB,GAMxC,2BAAsB,EAApC,cAAqC,EAAvB,UAAsB,GAMtB,yBAAoB,EAAC,wBAAiB,EAApD,cAAqD,EAAvC,UAAoB,EAAC,UAAiB,GAMtC,yBAAoB,EAAlC,cAAmC,EAArB,UAAoB,GAQpB,0BAAqB,EAAnC,cAAoC,EAAtB,UAAqB,GAMrB,uBAAkB,EAAhC,cAAiC,EAAnB,UAAkB,GAUlB,wBAAmB,EAAjC,cAAkC,EAApB,UAAmB,GAMnB,qBAAgB,EAAC,wBAAiB,EAAhD,cAAiD,EAAnC,UAAgB,EAAC,UAAiB,GAMlC,2BAAsB,EAApC,cAAqC,EAAvB,UAAsB,GAUlB,8GAAmD,EAArE,cAAsE,EAApD,sBAAmD,GAC1D,0EAAkD,eAA7D,cAA8D,EAAnD,UAAkD,GAC3C,8GAAmD,EAArE,cAAsE,EAApD,sBAAmD,GAIpE,sBAAc,EAAnB,cAA8C,EAAzC,UAAc,GAAC,4BAAyB,EAA7C,cAA8C,EAA1B,UAAyB,GAEzC,oBAA8B,gBAC9B,8CAAuD,EAFzD,cAKC,EAJC,UAA8B,EAC9B,UAAuD,2BA5JnD,stBAAmD,GASnD,ouBAA0D,GAUhE,iHAAsD,GACpD,0hBAAoC,GAuCtC,yUAUC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGgC;AACkB;AAQ3B;AAIC;AAIW;AAKrB;AAMU;AAEgD;AAIxC;AACoB;AAOxB;AAiC5B;;GAEG;AACI,MAAM,cAAc;IACzB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAEjC,aAAa,CAAC,IAAY,EAAE,KAAa,EAAE,IAAY,EAAE,OAAe;QAC7E,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,MAAM,IAAI,GAAG,sCAAsC,CAAC;QACpD,MAAM,UAAU,GAAG,GAAG,IAAI,iCAAiC,CAAC;QAC5D,MAAM,aAAa,GAAG,SAAS,IAAI,UAAU,KAAK,SAAS,IAAI,GAAG,CAAC,aAAa,OAAO,EAAE,CAAC;QAC1F,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAY,GAAG,UAAU,GAAG,aAAa,EAAE,CAAC,CAAC;IACnE,CAAC;CACF;AAQM,MAAM,cAAc;IA2FzB,YACU,YAA0B,EAC1B,IAAgB,EAChB,WAAwB,EACxB,iBAAoC;QAHpC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,SAAI,GAAJ,IAAI,CAAY;QAChB,gBAAW,GAAX,WAAW,CAAa;QACxB,sBAAiB,GAAjB,iBAAiB,CAAmB;QA9F7B,kBAAa,GAAmB;YAC/C;gBACE,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,GAAG;gBACV,OAAO,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC;aAC/B;YACD;gBACE,OAAO,EAAE,UAAU;gBACnB,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,GAAG;gBACV,OAAO,EAAE,IAAI,0DAAW,CAAC,KAAK,CAAC;aAChC;YACD;gBACE,OAAO,EAAE,QAAQ;gBACjB,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,GAAG;gBACV,OAAO,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC;aAC/B;YACD;gBACE,OAAO,EAAE,SAAS;gBAClB,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,GAAG;gBACV,OAAO,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC;aAC/B;YACD;gBACE,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,GAAG;gBACV,OAAO,EAAE,IAAI,0DAAW,CAAC,KAAK,CAAC;aAChC;YACD;gBACE,OAAO,EAAE,QAAQ;gBACjB,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,GAAG;gBACV,OAAO,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC;aAC/B;YACD,IAAI;YACJ,qBAAqB;YACrB,kBAAkB;YAClB,oBAAoB;YACpB,oCAAoC;YACpC,KAAK;YACL;gBACE,OAAO,EAAE,UAAU;gBACnB,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,GAAG;gBACV,OAAO,EAAE,IAAI,0DAAW,CAAC,KAAK,CAAC;aAChC;YACD;gBACE,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,GAAG;gBACV,OAAO,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC;aAC/B;YACD;gBACE,OAAO,EAAE,SAAS;gBAClB,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,GAAG;gBACV,OAAO,EAAE,IAAI,0DAAW,CAAC,KAAK,CAAC;aAChC;YACD;gBACE,OAAO,EAAE,MAAM;gBACf,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,GAAG;gBACV,OAAO,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC;aAC/B;SACF,CAAC;QACK,kBAAa,GAAqB,IAAI,CAAC;QACvC,kBAAa,GAAG,IAAI,CAAC;QACrB,uBAAkB,GAAmB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAChE,gBAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAEzC,eAAU,GAAG,IAAI,qEAAiB,EAAe,CAAC;QAClD,kBAAa,GAAG,CAAC,CAAC;QAClB,YAAO,GAAmB,OAAO,CAAC;QAClC,mBAAc,GAAe,EAAE,CAAC;QAChC,2BAAsB,GAAG,kDAAK,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;QACzG,uBAAkB,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAiB/C,CAAC;IAEG,QAAQ;QACb,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAEM,eAAe;QACpB,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,6FAAuB,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YACjF,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,2CAA2C;IACpC,WAAW,KAAU,CAAC;IAEtB,iBAAiB;QACtB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACxF,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9D,CAAC;IAED;;OAEG;IACI,UAAU;QACf,IAAI,CAAC,eAAe,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAErD,oEAAoE;QACpE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE;YAClC,IAAI,CAAC,SAAS,CAAC,gBAAgB,GAAG,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,4FAA4F;QAC5F,kBAAkB;QAClB,kDAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC;aACxF,IAAI,CACH,gEAAS,CAAC,EAAE,CAAC,EACb,gEAAS,CAAC,GAAG,EAAE;YACb,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE;gBACxE,OAAO,+CAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC/B;YAED,OAAO,IAAI,CAAC,eAAe,CAAC,aAAa,CACvC,IAAI,CAAC,IAAI,CAAC,MAAM,EAChB,IAAI,CAAC,IAAI,CAAC,SAAS,EACnB,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAC/B,IAAI,CAAC,SAAS,CAAC,cAAc,CAC9B,CAAC;QACJ,CAAC,CAAC,EACF,0DAAG,CAAC,IAAI,CAAC,EAAE;YACT,6CAA6C;YAC7C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC;YAEtC,OAAO,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC,CAAC,EACF,iEAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;YACxD,OAAO,+CAAE,CAAC,EAAE,CAAC,CAAC;QAChB,CAAC,CAAC,CACH,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACjB,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;QAC9B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,eAAe;QACpB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACI,QAAQ,CAAC,OAAO;QACrB,OAAO,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACI,aAAa,CAAC,KAA4B;QAC/C,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;QAChD,8EAAe,CAAC,OAAO,EAAE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;QAElE,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC;QAClC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;IACzC,CAAC;IAEM,OAAO,CAAC,KAAa,EAAE,IAAiB;QAC7C,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAGD,kCAAkC;IAE3B,aAAa,CAAC,CAAS;QAC5B,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,CAAC,CAAC,CAAC;IACrD,CAAC;IAEM,YAAY,CAAC,CAAsB;QACxC,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC;IAC1C,CAAC;IAEM,aAAa,CAAC,CAA4B;QAC/C,iFAAiF;QACjF,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC;IAC3C,CAAC;IAEM,GAAG;QACR,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;CAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1QD;AAAA;AAAO,MAAM,WAAW;CAAG","file":"table-table-module-ngfactory-es2015.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { Injectable, Optional, SkipSelf, EventEmitter, isDevMode, Input, Output, Directive, ChangeDetectorRef, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { Subject, merge } from 'rxjs';\nimport { CdkColumnDef } from '@angular/cdk/table';\nimport { coerceBooleanProperty } from '@terminus/ngx-tools/coercion';\nimport { isNull, isUndefined, isBoolean } from '@terminus/ngx-tools/type-guards';\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\nimport { AnimationDurations, AnimationCurves } from '@angular/material/core';\n\n/**\n * To modify the labels and text displayed, create a new instance of TsSortHeaderIntl and\n * include it in a custom provider.\n */\nlet TsSortHeaderIntl = class TsSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * ARIA label for the sorting button\n         *\n         * @param id\n         */\n        this.sortButtonLabel = (id) => `Change sorting for ${id}`;\n        /**\n         * A label to describe the current sort (visible only to screenreaders)\n         *\n         * @param id\n         * @param direction\n         */\n        this.sortDescriptionLabel = (id, direction) => `Sorted by ${id} ${direction === 'asc' ? 'ascending' : 'descending'}`;\n    }\n};\nTsSortHeaderIntl = __decorate([\n    Injectable()\n], TsSortHeaderIntl);\n/**\n * Factory to return an instance of TsSortHeaderIntl\n *\n * @param parentIntl\n */\nconst TS_SORT_HEADER_INTL_PROVIDER_FACTORY = (parentIntl) => parentIntl || new TsSortHeaderIntl();\n/**\n * TsSortHeaderIntl provider declaration\n */\nconst TS_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an TsSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: TsSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), TsSortHeaderIntl]],\n    useFactory: TS_SORT_HEADER_INTL_PROVIDER_FACTORY,\n};\n\nconst getSortDuplicateSortableIdError = (id) => Error(`Cannot have two TsSortables with the same id (${id}).`);\nconst getSortHeaderNotContainedWithinSortError = () => Error(`TsSortHeader must be placed within a parent element with the TsSort directive.`);\nconst getSortHeaderMissingIdError = () => Error(`TsSortHeader must be provided with a unique id.`);\nconst getSortInvalidDirectionError = (direction) => Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n\n/**\n * Container for TsSortables to manage the sort state and provide default sort parameters\n *\n * @example\n *\n * <ts-table [dataSource]=\"dataSource\" tsSort>\n *   ...\n * </ts-table>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/table</example-url>\n */\nlet TsSortDirective = class TsSortDirective {\n    constructor() {\n        /**\n         * Store the disabled flag\n         */\n        this.disabled = false;\n        /**\n         * Collection of all registered sortables that this directive manages\n         */\n        this.sortables = new Map();\n        /**\n         * Used to notify any child components listening to state changes\n         */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an TsSortable is initially sorted.\n         *\n         * May be overridden by the TsSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /**\n         * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n         *\n         * May be overridden by the TsSortable's disable clear input.\n         */\n        this.disableClear = false;\n        /**\n         * Event emitted when the user changes either the active sort or sort direction\n         */\n        // eslint-disable-next-line @angular-eslint/no-output-rename\n        this.sortChange = new EventEmitter();\n    }\n    /**\n     * The sort direction of the currently active TsSortable\n     *\n     * @param direction\n     */\n    set direction(direction) {\n        if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    get direction() {\n        return this._direction;\n    }\n    /**\n     * Trigger next on all changes\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    /**\n     * Complete the observable on destroy\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /**\n     * Register function to be used by the contained TsSortables. Adds the TsSortable to the\n     * collection of TsSortables.\n     *\n     * @param sortable\n     */\n    register(sortable) {\n        if (!sortable.id && isDevMode()) {\n            throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id) && isDevMode()) {\n            throw getSortDuplicateSortableIdError(sortable.id);\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained TsSortables. Removes the TsSortable from the\n     * collection of contained TsSortables.\n     *\n     * @param sortable\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction\n     *\n     * @param sortable\n     */\n    sort(sortable) {\n        if (this.active === sortable.id) {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        else {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        this.sortChange.next({\n            active: this.active,\n            direction: this.direction,\n        });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides\n     *\n     * @param sortable\n     */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        const disableClearDoesntExist = isNull(sortable.disableClear) || isUndefined(sortable.disableClear);\n        const disableClear = disableClearDoesntExist ? this.disableClear : sortable.disableClear;\n        const sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n};\n__decorate([\n    Input('tsSortActive'),\n    __metadata(\"design:type\", String)\n], TsSortDirective.prototype, \"active\", void 0);\n__decorate([\n    Input('tsSortStart'),\n    __metadata(\"design:type\", String)\n], TsSortDirective.prototype, \"start\", void 0);\n__decorate([\n    Input('tsSortDirection'),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsSortDirective.prototype, \"direction\", null);\n__decorate([\n    Input('tsSortDisableClear'),\n    __metadata(\"design:type\", Object)\n], TsSortDirective.prototype, \"disableClear\", void 0);\n__decorate([\n    Output('tsSortChange'),\n    __metadata(\"design:type\", Object)\n], TsSortDirective.prototype, \"sortChange\", void 0);\nTsSortDirective = __decorate([\n    Directive({\n        selector: '[tsSort]',\n        exportAs: 'tsSort',\n        // NOTE: @Inputs are defined here rather than using decorators since we are extending the @Inputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n        inputs: ['disabled: tsSortDisabled'],\n    })\n], TsSortDirective);\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear\n *\n * @param start\n * @param disableClear\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    const sortOrder = ['asc', 'desc'];\n    if (start === 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\nconst SORT_ANIMATION_TRANSITION = `${AnimationDurations.ENTERING} ${AnimationCurves.STANDARD_CURVE}`;\n/** Animations used by TsSort. */\nconst tsSortAnimations = {\n    /**\n     * Animation that moves the sort indicator\n     */\n    indicator: trigger('indicator', [\n        state('asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('desc', style({ transform: 'translateY(10px)' })),\n        transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation that rotates the left pointer of the indicator based on the sorting direction\n     */\n    leftPointer: trigger('leftPointer', [\n        state('asc', style({ transform: 'rotate(-45deg)' })),\n        state('desc', style({ transform: 'rotate(45deg)' })),\n        transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation that rotates the right pointer of the indicator based on the sorting direction\n     */\n    rightPointer: trigger('rightPointer', [\n        state('asc', style({ transform: 'rotate(45deg)' })),\n        state('desc', style({ transform: 'rotate(-45deg)' })),\n        transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation that moves the indicator in and out of view when sorting is enabled/disabled\n     */\n    indicatorToggle: trigger('indicatorToggle', [\n        transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({\n                transform: 'translateY(25%)',\n                opacity: 0,\n            }),\n            style({\n                transform: 'none',\n                opacity: 1,\n            }),\n        ]))),\n        transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({\n                transform: 'none',\n                opacity: 1,\n            }),\n            style({\n                transform: 'translateY(-25%)',\n                opacity: 0,\n            }),\n        ]))),\n        transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({\n                transform: 'translateY(-25%)',\n                opacity: 0,\n            }),\n            style({\n                transform: 'none',\n                opacity: 1,\n            }),\n        ]))),\n        transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({\n                transform: 'none',\n                opacity: 1,\n            }),\n            style({\n                transform: 'translateY(25%)',\n                opacity: 0,\n            }),\n        ]))),\n    ]),\n};\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent TsSortDirective.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n *\n * @example\n * <ts-header-cell *tsHeaderCellDef ts-sort-header>\n *              Created\n * </ts-header-cell>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/table</example-url>\n */\nlet TsSortHeaderComponent = class TsSortHeaderComponent {\n    constructor(_intl, changeDetectorRef, _sort, _cdkColumnDef) {\n        this._intl = _intl;\n        this.changeDetectorRef = changeDetectorRef;\n        this._sort = _sort;\n        this._cdkColumnDef = _cdkColumnDef;\n        this.disabled = false;\n        /**\n         * Sets the position of the arrow that displays when sorted\n         */\n        this.arrowPosition = 'after';\n        if (!_sort && isDevMode()) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n    }\n    /**\n     * Overrides the disable clear value of the containing TsSort for this TsSortable\n     *\n     * @param value\n     */\n    set disableClear(value) {\n        /* istanbul ignore if */\n        if (!isBoolean(value) && value && isDevMode()) {\n            // eslint-disable-next-line no-console\n            console.warn(`TsSortHeaderComponent: \"disableClear\" value is not a boolean. `\n                + `String values of 'true' and 'false' will no longer be coerced to a true boolean with the next release.`);\n        }\n        this._disableClear = coerceBooleanProperty(value);\n    }\n    get disableClear() {\n        return this._disableClear;\n    }\n    /**\n     * Default to cdk column name\n     */\n    ngOnInit() {\n        // Mark directive for change detection after any of these changes\n        // eslint-disable-next-line deprecation/deprecation\n        merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes)\n            .pipe(untilComponentDestroyed(this))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n        if (!this.id && this._cdkColumnDef) {\n            this.id = this._cdkColumnDef.name;\n        }\n        this._sort.register(this);\n    }\n    /**\n     * Deregister sort and unsubscribe from observables\n     */\n    ngOnDestroy() {\n        this._sort.deregister(this);\n    }\n    /**\n     * Handles click events on the header\n     */\n    _handleClick() {\n        if (!this._isDisabled()) {\n            this._sort.sort(this);\n        }\n    }\n    /**\n     * Whether this TsSortHeader is currently sorted in either ascending or descending order\n     */\n    _isSorted() {\n        return this._sort.active === this.id\n            && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * Whether this TsSortHeader is disabled\n     */\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n};\nTsSortHeaderComponent.ctorParameters = () => [\n    { type: TsSortHeaderIntl },\n    { type: ChangeDetectorRef },\n    { type: TsSortDirective, decorators: [{ type: Optional }] },\n    { type: CdkColumnDef, decorators: [{ type: Optional }] }\n];\n__decorate([\n    Input('ts-sort-header'),\n    __metadata(\"design:type\", String)\n], TsSortHeaderComponent.prototype, \"id\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsSortHeaderComponent.prototype, \"arrowPosition\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsSortHeaderComponent.prototype, \"start\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsSortHeaderComponent.prototype, \"disableClear\", null);\nTsSortHeaderComponent = __decorate([\n    Component({\n        // NOTE: This component needs to be added to another component so we need a non-element selector\n        // eslint-disable-next-line @angular-eslint/component-selector\n        selector: '[ts-sort-header]',\n        // tslint:enable: component-selector\n        template: \"<div\\n  class=\\\"ts-sort-header-container\\\"\\n  [class.ts-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n>\\n  <button\\n    class=\\\"ts-sort-header-button\\\"\\n    type=\\\"button\\\"\\n    [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\"\\n    [attr.disabled]=\\\"_isDisabled() || null\\\"\\n    (click)=\\\"_handleClick()\\\"\\n  >\\n    <ng-content></ng-content>\\n\\n    <ts-icon\\n      class=\\\"ts-sort-header-container__icon\\\"\\n      [class.ts-sort-header-container__icon--hidden]=\\\"_isSorted()\\\"\\n    >swap_vert</ts-icon>\\n\\n    <div\\n      class=\\\"ts-sort-header-arrow\\\"\\n      *ngIf=\\\"_isSorted()\\\"\\n      [@indicatorToggle]=\\\"_sort.direction\\\"\\n    >\\n      <div class=\\\"ts-sort-header-stem\\\"></div>\\n\\n      <div class=\\\"ts-sort-header-indicator\\\" [@indicator]=\\\"_sort.direction\\\" >\\n        <div class=\\\"ts-sort-header-pointer-left\\\" [@leftPointer]=\\\"_sort.direction\\\"></div>\\n        <div class=\\\"ts-sort-header-pointer-right\\\" [@rightPointer]=\\\"_sort.direction\\\"></div>\\n        <div class=\\\"ts-sort-header-pointer-middle\\\"></div>\\n      </div>\\n    </div>\\n  </button>\\n</div>\\n\\n<span class=\\\"cdk-visually-hidden\\\" *ngIf=\\\"_isSorted()\\\">\\n  &nbsp;{{ _intl.sortDescriptionLabel(id, _sort.direction) }}\\n</span>\\n\",\n        host: {\n            'class': 'ts-sortable',\n            '[class.ts-sort-header-sorted]': '_isSorted()',\n            '[class.ts-sort-header-disabled]': '_isDisabled()',\n        },\n        preserveWhitespaces: false,\n        // NOTE: @Inputs are defined here rather than using decorators since we are extending the @Inputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n        inputs: ['disabled'],\n        animations: [\n            tsSortAnimations.indicator,\n            tsSortAnimations.leftPointer,\n            tsSortAnimations.rightPointer,\n            tsSortAnimations.indicatorToggle,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsSortHeader',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-sort-header-container{align-items:center;display:flex;position:relative}.ts-sort-header-disabled .ts-sort-header-container{cursor:default}.ts-sort-header-container__icon{opacity:0;position:absolute;right:0;top:50%;transform:translate(22%,-42%);transition:opacity .2s ease-out .2s}.ts-sort-header-container__icon--hidden{opacity:0;transition:opacity .1s ease-out .1s}.ts-sort-header-position-before{flex-direction:row-reverse}.ts-sort-header-button{align-items:center;background:0 0;border:none;color:currentColor;cursor:pointer;display:block;font:inherit;outline:0;overflow:hidden;padding:0 1.4em 0 0;position:relative;text-overflow:ellipsis}.ts-sort-header-button:focus .ts-sort-header-container__icon:not(.ts-sort-header-container__icon--hidden),.ts-sort-header-button:hover .ts-sort-header-container__icon:not(.ts-sort-header-container__icon--hidden){opacity:1}.ts-sort-header-arrow{display:flex;height:12px;margin:-2px 0 0 6px;min-width:12px;position:absolute;right:0;top:50%;transform:translateY(-50%);width:12px}.ts-sort-header-position-before .ts-sort-header-arrow{margin:0 6px 0 0}.ts-sort-header-stem{align-items:center;background:currentColor;display:flex;height:10px;margin:auto;width:2px}.ts-sort-header-indicator{align-items:center;display:flex;height:2px;left:0;position:absolute;top:0;transition:225ms cubic-bezier(.4,0,.2,1);width:100%}.ts-sort-header-pointer-middle{background:currentColor;height:2px;margin:auto;transform:rotate(45deg);width:2px}.ts-sort-header-pointer-left,.ts-sort-header-pointer-right{background:currentColor;height:2px;position:absolute;top:0;transition:225ms cubic-bezier(.4,0,.2,1);width:6px}.ts-sort-header-pointer-left{left:0;transform-origin:right}.ts-sort-header-pointer-right{right:0;transform-origin:left}\"]\n    }),\n    __param(2, Optional()),\n    __param(3, Optional()),\n    __metadata(\"design:paramtypes\", [TsSortHeaderIntl,\n        ChangeDetectorRef,\n        TsSortDirective,\n        CdkColumnDef])\n], TsSortHeaderComponent);\n\n/**\n * Much of this was lifted directly from Angular Material. I highly recommend checking out their\n * source code: https://github.com/angular/material2/tree/master/src/lib/sort\n */\nlet TsSortModule = class TsSortModule {\n};\nTsSortModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            TsIconModule,\n        ],\n        providers: [TS_SORT_HEADER_INTL_PROVIDER],\n        declarations: [\n            TsSortDirective,\n            TsSortHeaderComponent,\n        ],\n        exports: [\n            TsSortDirective,\n            TsSortHeaderComponent,\n        ],\n    })\n], TsSortModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TS_SORT_HEADER_INTL_PROVIDER, TS_SORT_HEADER_INTL_PROVIDER_FACTORY, TsSortDirective, TsSortHeaderComponent, TsSortHeaderIntl, TsSortModule, tsSortAnimations };\n//# sourceMappingURL=terminus-ui-sort.js.map\n","<div\n  class=\"ts-sort-header-container\"\n  [class.ts-sort-header-position-before]=\"arrowPosition == 'before'\"\n>\n  <button\n    class=\"ts-sort-header-button\"\n    type=\"button\"\n    [attr.aria-label]=\"_intl.sortButtonLabel(id)\"\n    [attr.disabled]=\"_isDisabled() || null\"\n    (click)=\"_handleClick()\"\n  >\n    <ng-content></ng-content>\n\n    <ts-icon\n      class=\"ts-sort-header-container__icon\"\n      [class.ts-sort-header-container__icon--hidden]=\"_isSorted()\"\n    >swap_vert</ts-icon>\n\n    <div\n      class=\"ts-sort-header-arrow\"\n      *ngIf=\"_isSorted()\"\n      [@indicatorToggle]=\"_sort.direction\"\n    >\n      <div class=\"ts-sort-header-stem\"></div>\n\n      <div class=\"ts-sort-header-indicator\" [@indicator]=\"_sort.direction\" >\n        <div class=\"ts-sort-header-pointer-left\" [@leftPointer]=\"_sort.direction\"></div>\n        <div class=\"ts-sort-header-pointer-right\" [@rightPointer]=\"_sort.direction\"></div>\n        <div class=\"ts-sort-header-pointer-middle\"></div>\n      </div>\n    </div>\n  </button>\n</div>\n\n<span class=\"cdk-visually-hidden\" *ngIf=\"_isSorted()\">\n  &nbsp;{{ _intl.sortDescriptionLabel(id, _sort.direction) }}\n</span>\n","import { __decorate, __metadata, __param } from 'tslib';\nimport { CdkColumnDef, CdkCellDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkFooterCellDef, CdkFooterCell, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkRow, CdkHeaderRowDef, CdkFooterRowDef, CdkFooterRow, CdkRowDef, CdkTable, CDK_TABLE_TEMPLATE, CdkTableModule } from '@angular/cdk/table';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ElementRef, Input, Directive, isDevMode, EventEmitter, Renderer2, NgZone, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, IterableDiffers, ChangeDetectorRef, Attribute, Inject, Optional, ContentChildren, QueryList, NgModule } from '@angular/core';\nimport { TsPaginatorModule } from '@terminus/ui-paginator';\nimport { TsSortModule } from '@terminus/ui-sort';\nimport { Subject, fromEvent, defer, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, take, pluck, switchMap } from 'rxjs/operators';\nimport { TsDocumentService, TsWindowService } from '@terminus/ngx-tools/browser';\nimport { untilComponentDestroyed, debounce } from '@terminus/ngx-tools/utilities';\nimport { TsUILibraryError } from '@terminus/ui-utilities';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nvar TsColumnDefDirective_1;\n/**\n * An array of the allowed {@link TsTableColumnAlignment} for checking values\n */\nconst tsTableColumnAlignmentTypesArray = [\n    'left',\n    'center',\n    'right',\n];\n/**\n * Column definition for the {@link TsTableComponent}.\n *\n * Defines a set of cells available for a table column.\n */\nlet TsColumnDefDirective = TsColumnDefDirective_1 = class TsColumnDefDirective extends CdkColumnDef {\n    constructor(elementRef) {\n        super();\n        this.elementRef = elementRef;\n        /**\n         * Define if the column should stick to the start\n         */\n        this.sticky = false;\n        /**\n         * Define if a column should stick to the end\n         */\n        this.stickyEnd = false;\n    }\n};\nTsColumnDefDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\n__decorate([\n    Input('tsColumnDef'),\n    __metadata(\"design:type\", String)\n], TsColumnDefDirective.prototype, \"name\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsColumnDefDirective.prototype, \"alignment\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsColumnDefDirective.prototype, \"sticky\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsColumnDefDirective.prototype, \"stickyEnd\", void 0);\nTsColumnDefDirective = TsColumnDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsColumnDef]',\n        providers: [\n            {\n                provide: CdkColumnDef,\n                useExisting: TsColumnDefDirective_1,\n            },\n            {\n                provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n                useExisting: TsColumnDefDirective_1,\n            },\n        ],\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef])\n], TsColumnDefDirective);\n\nvar TsCellDefDirective_1, TsHeaderCellDefDirective_1, TsHeaderCellDirective_1, TsFooterCellDefDirective_1;\n/**\n * The minimum width for columns\n */\nconst TS_TABLE_MIN_COLUMN_WIDTH = 70;\n// Unique ID for each instance\nlet cellNextUniqueId = 0;\nlet headerNextUniqueId = 0;\n/**\n * Set the column alignment styles\n *\n * @param column - The column definition\n * @param renderer - The Renderer2\n * @param elementRef - The element ref to add the class to\n */\nfunction setColumnAlignment(column, renderer, elementRef) {\n    if (column.alignment) {\n        // Verify the alignment value is allowed\n        if (tsTableColumnAlignmentTypesArray.indexOf(column.alignment) < 0 && isDevMode()) {\n            throw new TsUILibraryError(`TsCellDirective: \"${column.alignment}\" is not an allowed alignment.`\n                + `See \"TsTableColumnAlignment\" type for available options.`);\n        }\n        renderer.addClass(elementRef.nativeElement, `ts-cell--align-${column.alignment}`);\n    }\n}\n/**\n * Cell definition for the {@link TsTableComponent}.\n *\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nlet TsCellDefDirective = TsCellDefDirective_1 = class TsCellDefDirective extends CdkCellDef {\n};\nTsCellDefDirective = TsCellDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsCellDef]',\n        providers: [{\n                provide: CdkCellDef,\n                useExisting: TsCellDefDirective_1,\n            }],\n    })\n], TsCellDefDirective);\n/**\n * Header cell definition for the {@link TsTableComponent}.\n *\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nlet TsHeaderCellDefDirective = TsHeaderCellDefDirective_1 = class TsHeaderCellDefDirective extends CdkHeaderCellDef {\n};\nTsHeaderCellDefDirective = TsHeaderCellDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsHeaderCellDef]',\n        providers: [{\n                provide: CdkHeaderCellDef,\n                useExisting: TsHeaderCellDefDirective_1,\n            }],\n    })\n], TsHeaderCellDefDirective);\n/**\n * Define the event object for header cell resize events\n */\nclass TsHeaderCellResizeEvent {\n    constructor(\n    // The header cell instance that originated the event\n    instance, \n    // The new width\n    width) {\n        this.instance = instance;\n        this.width = width;\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nlet TsHeaderCellDirective = TsHeaderCellDirective_1 = class TsHeaderCellDirective extends CdkHeaderCell {\n    constructor(columnDef, elementRef, renderer, documentService, ngZone) {\n        super(columnDef, elementRef);\n        this.columnDef = columnDef;\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.documentService = documentService;\n        this.ngZone = ngZone;\n        /**\n         * Stream used inside takeUntil pipes\n         */\n        this.killStream$ = new Subject();\n        /**\n         * Define the class for the resizable element\n         */\n        this.resizerClass = 'ts-header-cell__resizer';\n        /**\n         * Store the starting offset when a resize event begins\n         */\n        this.startOffsetX = 0;\n        /**\n         * Store the starting width of a cell before resizing\n         */\n        this.startWidth = 0;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-table-header-cell-${headerNextUniqueId++}`;\n        /**\n         * Store the current cell width\n         */\n        this.width = 'auto';\n        /**\n         * Event emitted when the cell is resized\n         */\n        this.resized = new EventEmitter();\n    }\n    /**\n     * Return the current set width\n     */\n    get cellWidth() {\n        return parseInt(this.width, 0);\n    }\n    /**\n     * Return a reference to the resize element\n     */\n    get resizeElement() {\n        return this.elementRef.nativeElement.querySelector(`.${this.resizerClass}`);\n    }\n    /**\n     * Initial setup\n     */\n    ngOnInit() {\n        this.column = this.columnDef;\n        this.elementRef.nativeElement.classList.add(`ts-column-${this.column.cssClassFriendlyName}`);\n        // eslint-disable-next-line no-underscore-dangle\n        if (this.column._stickyEnd) {\n            this.elementRef.nativeElement.classList.add(`ts-table__column--sticky-end`);\n        }\n        if (this.column.sticky) {\n            this.elementRef.nativeElement.classList.add(`ts-table__column--sticky`);\n        }\n        setColumnAlignment(this.column, this.renderer, this.elementRef);\n    }\n    /**\n     * Remove all event listeners when destroyed\n     */\n    ngOnDestroy() {\n        this.killStream$.complete();\n    }\n    /**\n     * Inject the resize 'grabber' element.\n     *\n     * Called by {@link TsTableComponent}\n     */\n    injectResizeElement() {\n        // If the element has been injected before, remove it\n        if (this.resizeElement) {\n            this.renderer.removeChild(this.elementRef.nativeElement, this.resizeElement);\n        }\n        const resizeElement = this.renderer.createElement('span');\n        resizeElement.classList.add(this.resizerClass);\n        resizeElement.classList.add(`${this.resizerClass}--${this.columnDef.cssClassFriendlyName}`);\n        resizeElement.title = 'Drag to resize column.';\n        this.renderer.appendChild(this.elementRef.nativeElement, resizeElement);\n        this.ngZone.runOutsideAngular(() => {\n            // TODO: Refactor deprecation\n            // eslint-disable-next-line deprecation/deprecation\n            fromEvent(resizeElement, 'mousedown')\n                .pipe(untilComponentDestroyed(this))\n                .subscribe(e => this.onResizeColumn(e));\n            // TODO: Refactor deprecation\n            // eslint-disable-next-line deprecation/deprecation\n            fromEvent(resizeElement, 'click')\n                .pipe(untilComponentDestroyed(this))\n                .subscribe(e => e.stopPropagation());\n            // TODO: Refactor deprecation\n            // eslint-disable-next-line deprecation/deprecation\n            fromEvent(resizeElement, 'mouseenter')\n                .pipe(untilComponentDestroyed(this))\n                .subscribe(() => this.syncHoverClass(true));\n            // TODO: Refactor deprecation\n            // eslint-disable-next-line deprecation/deprecation\n            fromEvent(resizeElement, 'mouseleave')\n                .pipe(untilComponentDestroyed(this))\n                .subscribe(() => this.syncHoverClass(false));\n        });\n    }\n    /**\n     * Return the new width if above the minimum width\n     *\n     * @param start - The starting width\n     * @param difference - The amount moved\n     * @returns The final column width\n     */\n    static determineWidth(start, difference) {\n        const total = start + difference;\n        return (total >= TS_TABLE_MIN_COLUMN_WIDTH) ? total : TS_TABLE_MIN_COLUMN_WIDTH;\n    }\n    /**\n     * Save initial width and offset, bind to more events\n     *\n     * @param event - The mouse event\n     */\n    onResizeColumn(event) {\n        this.startOffsetX = event.clientX;\n        this.startWidth = this.cellWidth;\n        // TODO: Refactor deprecation\n        // eslint-disable-next-line deprecation/deprecation\n        fromEvent(this.documentService.document, 'mousemove')\n            .pipe(untilComponentDestroyed(this), takeUntil(this.killStream$)).subscribe(e => {\n            const diff = e.clientX - this.startOffsetX;\n            const newWidth = TsHeaderCellDirective_1.determineWidth(this.startWidth, diff);\n            // istanbul ignore else\n            if (newWidth) {\n                this.setColumnWidth(newWidth);\n            }\n        });\n        // TODO: Refactor deprecation\n        // eslint-disable-next-line deprecation/deprecation\n        fromEvent(this.documentService.document, 'mouseup')\n            .pipe(untilComponentDestroyed(this), take(1)).subscribe(() => {\n            this.startOffsetX = 0;\n            this.startWidth = 0;\n            this.killStream$.next(void 0);\n            this.resized.emit(new TsHeaderCellResizeEvent(this, this.elementRef.nativeElement.offsetWidth));\n        });\n    }\n    /**\n     * Set the column width style and save the width\n     *\n     * @param width - The width to set\n     */\n    setColumnWidth(width) {\n        this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${width}px`);\n        this.width = `${width}px`;\n    }\n    /**\n     * Sync the hovered class\n     *\n     * @param isHovered - Whether the resize element is currently hovered\n     */\n    syncHoverClass(isHovered) {\n        isHovered\n            ? this.renderer.addClass(this.elementRef.nativeElement, 'ts-cell--resizing')\n            : this.renderer.removeClass(this.elementRef.nativeElement, 'ts-cell--resizing');\n    }\n};\nTsHeaderCellDirective.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: TsDocumentService },\n    { type: NgZone }\n];\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsHeaderCellDirective.prototype, \"resized\", void 0);\nTsHeaderCellDirective = TsHeaderCellDirective_1 = __decorate([\n    Directive({\n        // eslint-disable-next-line @angular-eslint/directive-selector\n        selector: 'ts-header-cell, th[ts-header-cell]',\n        host: {\n            'class': 'ts-header-cell',\n            'role': 'columnheader',\n            '[id]': 'uid',\n        },\n        exportAs: 'tsHeaderCell',\n    }),\n    __metadata(\"design:paramtypes\", [CdkColumnDef,\n        ElementRef,\n        Renderer2,\n        TsDocumentService,\n        NgZone])\n], TsHeaderCellDirective);\n/**\n * Cell template container that adds the right classes and role.\n */\nlet TsCellDirective = class TsCellDirective extends CdkCell {\n    constructor(elementRef, columnDef, renderer) {\n        super(columnDef, elementRef);\n        this.elementRef = elementRef;\n        this.columnDef = columnDef;\n        this.renderer = renderer;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-table-cell-${cellNextUniqueId++}`;\n    }\n    /**\n     * Initial setup\n     */\n    ngOnInit() {\n        // HACK: Changing the type in the constructor from `CdkColumnDef` to `TsColumnDefDirective` doesn't seem to play well with the CDK.\n        // Coercing the type here is a hack, but allows us to reference properties that do not exist on the underlying `CdkColumnDef`.\n        this.column = this.columnDef;\n        // Set a custom class for each column\n        this.elementRef.nativeElement.classList.add(`ts-column-${this.column.cssClassFriendlyName}`);\n        setColumnAlignment(this.column, this.renderer, this.elementRef);\n        // eslint-disable-next-line no-underscore-dangle\n        if (this.column._stickyEnd) {\n            this.elementRef.nativeElement.classList.add(`ts-table__column--sticky-end`);\n        }\n        if (this.column.sticky) {\n            this.elementRef.nativeElement.classList.add(`ts-table__column--sticky`);\n        }\n    }\n};\nTsCellDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkColumnDef },\n    { type: Renderer2 }\n];\nTsCellDirective = __decorate([\n    Directive({\n        // eslint-disable-next-line @angular-eslint/directive-selector\n        selector: 'ts-cell, td[ts-cell]',\n        host: {\n            class: 'ts-cell',\n            role: 'gridcell',\n        },\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        CdkColumnDef,\n        Renderer2])\n], TsCellDirective);\n/**\n * Footer cell definition for the mat-table.\n *\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nlet TsFooterCellDefDirective = TsFooterCellDefDirective_1 = class TsFooterCellDefDirective extends CdkFooterCellDef {\n};\nTsFooterCellDefDirective = TsFooterCellDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsFooterCellDef]',\n        providers: [{\n                provide: CdkFooterCellDef,\n                useExisting: TsFooterCellDefDirective_1,\n            }],\n    })\n], TsFooterCellDefDirective);\n/**\n * Footer cell template container that adds the right classes and role.\n */\nlet TsFooterCellDirective = class TsFooterCellDirective extends CdkFooterCell {\n    constructor(columnDef, elementRef, renderer) {\n        super(columnDef, elementRef);\n        this.columnDef = columnDef;\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n    }\n    /**\n     * Initial setup\n     */\n    ngOnInit() {\n        // HACK: Changing the type in the constructor from `CdkColumnDef` to `TsColumnDefDirective` doesn't seem to play well with the CDK.\n        // Coercing the type here is a hack, but allows us to reference properties that do not exist on the underlying `CdkColumnDef`.\n        this.column = this.columnDef;\n        // Set a custom class for each column\n        this.elementRef.nativeElement.classList.add(`ts-column-${this.column.cssClassFriendlyName}`);\n        setColumnAlignment(this.column, this.renderer, this.elementRef);\n        // eslint-disable-next-line no-underscore-dangle\n        if (this.column._stickyEnd) {\n            this.elementRef.nativeElement.classList.add(`ts-table__column--sticky-end`);\n        }\n        if (this.column.sticky) {\n            this.elementRef.nativeElement.classList.add(`ts-table__column--sticky`);\n        }\n    }\n};\nTsFooterCellDirective.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nTsFooterCellDirective = __decorate([\n    Directive({\n        // eslint-disable-next-line @angular-eslint/directive-selector\n        selector: 'ts-footer-cell, td[ts-footer-cell]',\n        host: {\n            class: 'ts-footer-cell',\n            role: 'gridcell',\n        },\n    }),\n    __metadata(\"design:paramtypes\", [CdkColumnDef,\n        ElementRef,\n        Renderer2])\n], TsFooterCellDirective);\n\nvar TsHeaderRowDefDirective_1, TsFooterRowDefDirective_1, TsFooterRowComponent_1, TsRowDefDirective_1;\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nlet TsHeaderRowComponent = class TsHeaderRowComponent extends CdkHeaderRow {\n    constructor(elementRef) {\n        super();\n        this.elementRef = elementRef;\n    }\n};\nTsHeaderRowComponent.ctorParameters = () => [\n    { type: ElementRef }\n];\nTsHeaderRowComponent = __decorate([\n    Component({\n        selector: 'ts-header-row, tr[ts-header-row]',\n        template: CDK_ROW_TEMPLATE,\n        host: {\n            class: 'ts-header-row',\n            role: 'row',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsHeaderRow',\n        preserveWhitespaces: false\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef])\n], TsHeaderRowComponent);\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nlet TsRowComponent = class TsRowComponent extends CdkRow {\n    constructor(elementRef) {\n        super();\n        this.elementRef = elementRef;\n    }\n};\nTsRowComponent.ctorParameters = () => [\n    { type: ElementRef }\n];\nTsRowComponent = __decorate([\n    Component({\n        selector: 'ts-row, tr[ts-row]',\n        template: CDK_ROW_TEMPLATE,\n        host: {\n            class: 'ts-row',\n            role: 'row',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsRow',\n        preserveWhitespaces: false\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef])\n], TsRowComponent);\n/**\n * Header row definition for the {@link TsTableComponent}.\n *\n * Captures the header row's template and other header properties such as the columns to display.\n */\nlet TsHeaderRowDefDirective = TsHeaderRowDefDirective_1 = class TsHeaderRowDefDirective extends CdkHeaderRowDef {\n};\nTsHeaderRowDefDirective = TsHeaderRowDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsHeaderRowDef]',\n        providers: [\n            {\n                provide: CdkHeaderRowDef,\n                useExisting: TsHeaderRowDefDirective_1,\n            },\n            {\n                provide: CdkHeaderRow,\n                useExisting: TsHeaderRowComponent,\n            },\n        ],\n        // NOTE: @Inputs are defined here rather than using decorators since we are extending the @Inputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n        inputs: [\n            'columns: tsHeaderRowDef',\n            'sticky: tsHeaderRowDefSticky',\n        ],\n    })\n], TsHeaderRowDefDirective);\n/**\n * Footer row definition for the {@link TsTableComponent}.\n *\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nlet TsFooterRowDefDirective = TsFooterRowDefDirective_1 = class TsFooterRowDefDirective extends CdkFooterRowDef {\n};\nTsFooterRowDefDirective = TsFooterRowDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsFooterRowDef]',\n        providers: [{\n                provide: CdkFooterRowDef,\n                useExisting: TsFooterRowDefDirective_1,\n            }],\n        // NOTE: @Inputs are defined here rather than using decorators since we are extending the @Inputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n        inputs: [\n            'columns: tsFooterRowDef',\n            'sticky: tsFooterRowDefSticky',\n        ],\n    })\n], TsFooterRowDefDirective);\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nlet TsFooterRowComponent = TsFooterRowComponent_1 = class TsFooterRowComponent extends CdkFooterRow {\n};\nTsFooterRowComponent = TsFooterRowComponent_1 = __decorate([\n    Component({\n        selector: 'ts-footer-row, tr[ts-footer-row]',\n        template: CDK_ROW_TEMPLATE,\n        host: {\n            class: 'ts-footer-row',\n            role: 'row',\n        },\n        providers: [{\n                provide: CdkFooterRow,\n                useExisting: TsFooterRowComponent_1,\n            }],\n        // See note on CdkTable for explanation on why this uses the default change detection strategy.\n        // eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection\n        changeDetection: ChangeDetectionStrategy.Default,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsFooterRow'\n    })\n], TsFooterRowComponent);\n/**\n * Data row definition for the {@link TsTableComponent}.\n *\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nlet TsRowDefDirective = TsRowDefDirective_1 = class TsRowDefDirective extends CdkRowDef {\n};\nTsRowDefDirective = TsRowDefDirective_1 = __decorate([\n    Directive({\n        selector: '[tsRowDef]',\n        providers: [\n            {\n                provide: CdkRowDef,\n                useExisting: TsRowDefDirective_1,\n            },\n            {\n                provide: CdkRow,\n                useExisting: TsRowComponent,\n            },\n        ],\n        // NOTE: @Inputs are defined here rather than using decorators since we are extending the @Inputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n        inputs: [\n            'columns: tsRowDefColumns',\n            'when: tsRowDefWhen',\n        ],\n    })\n], TsRowDefDirective);\n\nvar TsTableComponent_1;\n/**\n * The default debounce delay for column sizing update calls\n */\nconst COLUMN_DEBOUNCE_DELAY = 100;\nconst VIEWPORT_DEBOUNCE = 500;\n/**\n * The payload for a columns change event\n */\nclass TsTableColumnsChangeEvent {\n    constructor(\n    // The table instance that originated the event\n    table, \n    // The updated array of columns\n    columns) {\n        this.table = table;\n        this.columns = columns;\n    }\n}\n// Unique ID for each instance\nlet nextUniqueId = 0;\n/**\n * The primary data table implementation\n *\n * @example\n *  <ts-table\n *               [columns]=\"myColumns\"\n *               [dataSource]=\"dataSource\"\n *               [multiTemplateDataRows]=\"false\"\n *               [trackBy]=\"myTrackByFn\"\n *               (columnsChange)=\"columnsWereUpdated($event)\n *               #myTable=\"tsTable\"\n *  >\n *               <ng-container tsColumnDef=\"title\">\n *                 <ts-header-cell *tsHeaderCellDef>\n *                   Title\n *                 </ts-header-cell>\n *                 <ts-cell *tsCellDef=\"let item\">\n *                   {{ item.title }}\n *                 </ts-cell>\n *               </ng-container>\n *\n *               <ng-container tsColumnDef=\"id\">\n *                 <ts-header-cell *tsHeaderCellDef>\n *                   ID\n *                 </ts-header-cell>\n *                 <ts-cell *tsCellDef=\"let item\">\n *                   {{ item.id }},\n *                 </ts-cell>\n *               </ng-container>\n *\n *               <ts-header-row *tsHeaderRowDef=\"myTable.columnNames\"></ts-header-row>\n *               <ts-row *tsRowDef=\"let row; columns: myTable.columnNames;\"></ts-row>\n *  </ts-table>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/table</example-url>\n */\nlet TsTableComponent = TsTableComponent_1 = \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass TsTableComponent extends CdkTable {\n    constructor(platform, renderer, differs, changeDetectorRef, role, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    document, dir, elementRef, ngZone, windowService, viewportRuler) {\n        super(differs, changeDetectorRef, elementRef, role, dir, document, platform);\n        this.platform = platform;\n        this.renderer = renderer;\n        this.differs = differs;\n        this.changeDetectorRef = changeDetectorRef;\n        this.document = document;\n        this.dir = dir;\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n        this.windowService = windowService;\n        this.viewportRuler = viewportRuler;\n        /**\n         * Combined stream of all of the columns resized events\n         */\n        this.columnResizeChanges$ = defer(() => {\n            if (this.headerCells && this.headerCells.length) {\n                // TODO: Refactor deprecation\n                // eslint-disable-next-line deprecation/deprecation\n                return merge(...this.headerCells.map(cell => cell.resized)).pipe(pluck('instance'), untilComponentDestroyed(this));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // In that case, return a stream that we'll replace with the real one once everything is in place.\n            return this.ngZone.onStable\n                .asObservable()\n                // TODO: Refactor deprecation\n                // eslint-disable-next-line deprecation/deprecation\n                .pipe(take(1), switchMap(() => this.columnResizeChanges$));\n        });\n        /**\n         * Create a debounced function to update CDK sticky styles\n         */\n        this.debouncedStickyColumnUpdate = debounce(this.updateStickyColumnStyles, COLUMN_DEBOUNCE_DELAY);\n        /**\n         * Store a mutable array of internal column definitions\n         */\n        this.columnsInternal = [];\n        /**\n         * Override the sticky CSS class set by the `CdkTable`\n         */\n        this.stickyCssClass = 'ts-table--sticky';\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-table-${nextUniqueId++}`;\n        this._columns = [];\n        /**\n         * Define the density of the cells\n         */\n        this.density = 'comfy';\n        this._id = this.uid;\n        /**\n         * Emit when a column is resized\n         *\n         * NOTE: This output is not debounce or throttled and may be called repeatedly\n         */\n        this.columnsChange = new EventEmitter();\n    }\n    /**\n     * Return a simple array of column names\n     *\n     * Used by {@link TsHeaderRowDefDirective} and {@link TsRowDefDirective}.\n     */\n    get columnNames() {\n        return this.columns.map(c => c.name);\n    }\n    /**\n     * Build array of columns to emit out to the consumer\n     */\n    get columnsToSendToConsumer() {\n        const internalColumns = this.getFreshColumnsCopy(this.columnsInternal);\n        const userColumns = this.getFreshColumnsCopy();\n        const lastIndex = internalColumns.length - 1;\n        // Reset the last column width to the consumer defined width\n        internalColumns[lastIndex].width = userColumns[lastIndex].width;\n        return internalColumns;\n    }\n    /**\n     * Return the width of the element wrapping the table\n     */\n    get containerWidth() {\n        return this.parentElement.offsetWidth;\n    }\n    /**\n     * Determine if the container around the table has overflow (ie the table is scrollable)\n     */\n    get hasOverflowX() {\n        return this.parentElement.scrollWidth > this.tableWidth;\n    }\n    /**\n     * Return the parent HTMLElement\n     */\n    get parentElement() {\n        return this.elementRef.nativeElement.parentNode;\n    }\n    /**\n     * Determine the remaining space in the table after the columns take up their needed width\n     */\n    get remainingTableSpace() {\n        // NOTE: The outer borders take up 2px so we subtract them here to avoid a 2px overflow.\n        const borderOffset = 2;\n        const remainingWidth = (this.containerWidth - this.totalWidthOfColumns) - borderOffset;\n        return (remainingWidth > 0) ? remainingWidth : 0;\n    }\n    /**\n     * Return the width of the table\n     */\n    get tableWidth() {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n    /**\n     * Return the total width of all visible columns\n     */\n    get totalWidthOfColumns() {\n        const currentWidths = this.headerCells.map(hc => hc.cellWidth);\n        const userWidths = this.columns.map(v => v.width);\n        const columnsToReduce = currentWidths.slice();\n        // NOTE: Since the last column is never resized by the user, we should use the original size for the last column and the current\n        // size for all other columns.\n        const lastIndex = userWidths.length - 1;\n        columnsToReduce[lastIndex] = this.columns[lastIndex].width;\n        return columnsToReduce.reduce((a, b) => a + b, 0);\n    }\n    /**\n     * Define the array of columns\n     *\n     * @param value\n     */\n    set columns(value) {\n        // istanbul ignore else\n        if (value && (value.length > 0)) {\n            this._columns = this.getFreshColumnsCopy(value);\n            this.columnsInternal = this.getFreshColumnsCopy(value);\n        }\n    }\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * Define a custom ID\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Subscribe to viewport changes\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        this.viewportChange$ = this.viewportRuler.change(VIEWPORT_DEBOUNCE).pipe(untilComponentDestroyed(this));\n        this.viewportChange$.pipe(untilComponentDestroyed(this)).subscribe(() => {\n            this.windowService.nativeWindow.requestAnimationFrame(() => {\n                this.updateInternalColumns(this.getFreshColumnsCopy());\n                this.columnsChange.emit(new TsTableColumnsChangeEvent(this, this.columnsToSendToConsumer));\n            });\n        });\n    }\n    /**\n     * Set up header cell changes subscription\n     */\n    ngAfterViewChecked() {\n        this.subscribeToHeaderCellChanges();\n    }\n    /**\n     * Subscribe to column resize events\n     */\n    ngAfterContentInit() {\n        this.columnResizeChanges$\n            .subscribe(v => {\n            this.updateLastColumnWidth();\n            // Update the recorded width for the changed column\n            const found = this.columnsInternal.find(column => column.name === v.columnDef.name);\n            // istanbul ignore else\n            if (found) {\n                found.width = v.cellWidth;\n            }\n            this.columnsChange.emit(new TsTableColumnsChangeEvent(this, this.columnsToSendToConsumer));\n        });\n    }\n    /**\n     * NOTE: Must be present for `untilComponentDestroyed`\n     */\n    ngOnDestroy() {\n        // istanbul ignore else\n        if (this.headerCellSubscription) {\n            this.headerCellSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Adjusts the last column of the array to fill any remaining space inside the table\n     *\n     * NOTE: Due to issues during testing, we have not made this function static.\n     *\n     * @param columns - The array of columns to adjust\n     * @param remainingWidth - The remaining table width to be added to the last column\n     * @returns The adjusted array of columns\n     */\n    addRemainingSpaceToLastColumn(columns, remainingWidth) {\n        const lastColumn = columns[columns.length - 1];\n        lastColumn.width = lastColumn.width + remainingWidth;\n        return columns;\n    }\n    /**\n     * Return a fresh clone of the passed in array of columns\n     *\n     * @param columns - The array of columns to clone\n     * @returns The array of fresh columns\n     */\n    getFreshColumnsCopy(columns = this.columns) {\n        return columns.slice().map(c => (Object.assign({}, c)));\n    }\n    /**\n     * Set the column widths for all columns passed in\n     *\n     * @param columns - The array of columns\n     */\n    setAllColumnsToDefinedWidths(columns) {\n        for (const column of columns) {\n            this.setColumnWidthStyle(column.name, column.width, false);\n        }\n        this.updateStickyCellsIfNeeded();\n    }\n    /**\n     * Set the width for a specific column\n     *\n     * @param columnName - The name of the column that needs it's width updated\n     * @param width - The width to set\n     * @param updateStickCells - Whether the sticky cells should be updated\n     */\n    setColumnWidthStyle(columnName, width, updateStickCells = true) {\n        // eslint-disable-next-line no-underscore-dangle\n        const columnDirective = this.headerCells.find(cell => cell.columnDef._name === columnName);\n        // istanbul ignore else\n        if (columnDirective) {\n            columnDirective.setColumnWidth(width);\n            // istanbul ignore else\n            if (updateStickCells) {\n                this.updateStickyCellsIfNeeded();\n            }\n        }\n    }\n    /**\n     * Set up subscription to header cell changes\n     */\n    subscribeToHeaderCellChanges() {\n        if (this.headerCellSubscription) {\n            this.headerCellSubscription.unsubscribe();\n        }\n        this.headerCellSubscription = this.headerCells.changes\n            .pipe(untilComponentDestroyed(this))\n            .subscribe(() => {\n            // 1. Set user widths\n            this.setAllColumnsToDefinedWidths(this.getFreshColumnsCopy());\n            // 2. Add space to last column as needed\n            this.updateLastColumnWidth();\n            // 3. Set all widths to internal columns\n            this.setAllColumnsToDefinedWidths(this.getFreshColumnsCopy(this.columnsInternal));\n            // 4. Alert the consumer\n            this.columnsChange.emit(new TsTableColumnsChangeEvent(this, this.columnsToSendToConsumer));\n            // Inject the header cell resize element in every cell except the last (last column is not resizable)\n            this.headerCells.forEach((headerCellDirective, i) => {\n                if (i !== this.headerCells.length - 1) {\n                    headerCellDirective.injectResizeElement();\n                }\n            });\n        });\n    }\n    /**\n     * Update the internal columns array and set widths\n     *\n     * @param columns - The array of columns to update\n     */\n    updateInternalColumns(columns) {\n        // If there is space left over, add all remaining space to the last column\n        if (!this.hasOverflowX) {\n            columns = this.addRemainingSpaceToLastColumn(columns, this.remainingTableSpace);\n        }\n        this.columnsInternal = columns;\n        this.setAllColumnsToDefinedWidths(this.columnsInternal);\n    }\n    /**\n     * Update the last column's width and update the internal columns\n     */\n    updateLastColumnWidth() {\n        // 1. Determine last column width\n        const columns = this.getFreshColumnsCopy();\n        const lastIndex = columns.length - 1;\n        const lastColumn = columns[lastIndex];\n        let newWidth = lastColumn.width;\n        if (!this.hasOverflowX) {\n            newWidth = lastColumn.width + this.remainingTableSpace;\n        }\n        // 2. Set the width\n        this.setColumnWidthStyle(lastColumn.name, newWidth);\n        // 3. Update internal columns\n        this.columnsInternal[lastIndex].width = newWidth;\n    }\n    /**\n     * Trigger an update on sticky cells if they exist\n     */\n    updateStickyCellsIfNeeded() {\n        // NOTE: To lessen the thrashing, only call the sticky column updater if there are defined sticky columns\n        const stickyCells = this.headerCells.toArray().filter(c => c.columnDef.sticky || c.columnDef.stickyEnd);\n        // istanbul ignore else\n        if (stickyCells.length) {\n            this.debouncedStickyColumnUpdate();\n        }\n    }\n};\nTsTableComponent.ctorParameters = () => [\n    { type: Platform },\n    { type: Renderer2 },\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: TsWindowService },\n    { type: ViewportRuler }\n];\n__decorate([\n    ContentChildren(TsHeaderCellDirective, { descendants: true }),\n    __metadata(\"design:type\", QueryList)\n], TsTableComponent.prototype, \"headerCells\", void 0);\n__decorate([\n    ContentChildren(TsRowComponent),\n    __metadata(\"design:type\", QueryList)\n], TsTableComponent.prototype, \"rows\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array),\n    __metadata(\"design:paramtypes\", [Array])\n], TsTableComponent.prototype, \"columns\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsTableComponent.prototype, \"density\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsTableComponent.prototype, \"id\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsTableComponent.prototype, \"columnsChange\", void 0);\nTsTableComponent = TsTableComponent_1 = __decorate([\n    Component({\n        selector: 'ts-table, table[ts-table]',\n        template: CDK_TABLE_TEMPLATE,\n        host: {\n            'class': 'ts-table',\n            '[class.ts-table--comfy]': 'density === \"comfy\"',\n            '[class.ts-table--compact]': 'density === \"compact\"',\n            '[id]': 'id',\n        },\n        providers: [{\n                provide: CdkTable,\n                useExisting: TsTableComponent_1,\n            }],\n        encapsulation: ViewEncapsulation.None,\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        exportAs: 'tsTable',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-table{--table-bg:#fafafa;--header-bg:#cecdd1;--header-text-color:#302d35;--border-color:#cecdd1;--header-border-color:#999;--drop-bg:#e8eef3;--z-index-base-context:2;--z-index-resize-background:calc(var(--z-index-base-context) + 1);--z-index-resize-grabber:calc(var(--z-index-resize-background) + 1);--cell-padding:16px;--sticky-end-z:50;--grip-vertical-adjustment:50%;font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:400;border-collapse:separate;border-spacing:unset;max-height:100%;table-layout:fixed;width:100%}.ts-table :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-table h1,.ts-table h2,.ts-table h3,.ts-table h4,.ts-table h5,.ts-table p{margin:unset}.ts-table:not(.c-button):not(.c-input):not(.c-select):not(.ts-checkbox){line-height:20px}.ts-table.ts-table--compact{--cell-padding:4px;--grip-vertical-adjustment:calc(50% - 4px)}.ts-table .ts-table__column--sticky-end:last-of-type.ts-header-cell{overflow:hidden}.ts-table .ts-table__column--sticky-end:last-of-type.ts-header-cell .ts-header-cell__resizer{transform:translateX(40%)}.ts-table .ts-header-row{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;background-color:var(--header-bg);color:var(--header-text-color);font-weight:700;transition:background-color .2s ease-out}.ts-table .ts-header-row::after{content:'';display:block}.ts-table .ts-row{border-bottom:1px solid var(--border-color)}.ts-table .ts-row:hover .ts-cell{background-color:var(--drop-bg)}.ts-table .ts-row::after{content:'';display:inline-block;min-height:inherit}.ts-table .ts-cell,.ts-table .ts-footer-cell,.ts-table .ts-header-cell{min-height:inherit;position:relative;text-align:left;word-wrap:break-word}.ts-table .ts-cell.ts-table__column--sticky-end,.ts-table .ts-footer-cell.ts-table__column--sticky-end,.ts-table .ts-header-cell.ts-table__column--sticky-end{border-left:2px solid var(--header-border-color)}.ts-table .ts-cell.ts-table__column--sticky:not(.ts-table__column--sticky-end),.ts-table .ts-footer-cell.ts-table__column--sticky:not(.ts-table__column--sticky-end),.ts-table .ts-header-cell.ts-table__column--sticky:not(.ts-table__column--sticky-end){border-right:2px solid var(--header-border-color)}.ts-table .ts-cell.ts-column-no-wrap,.ts-table .ts-footer-cell.ts-column-no-wrap,.ts-table .ts-header-cell.ts-column-no-wrap{white-space:nowrap}.ts-table .ts-cell--align-right,.ts-table .ts-footer-cell--align-right,.ts-table .ts-header-cell--align-right{text-align:right}.ts-table .ts-cell--align-right .ts-sort-header-container,.ts-table .ts-footer-cell--align-right .ts-sort-header-container,.ts-table .ts-header-cell--align-right .ts-sort-header-container{justify-content:flex-end}.ts-table .ts-cell--align-left,.ts-table .ts-footer-cell--align-left,.ts-table .ts-header-cell--align-left{text-align:left}.ts-table .ts-cell--align-center,.ts-table .ts-footer-cell--align-center,.ts-table .ts-header-cell--align-center{text-align:center}.ts-table .ts-cell,.ts-table .ts-footer-cell{background-color:var(--table-bg);overflow:hidden;padding:var(--cell-padding);text-overflow:ellipsis;transition:background-color .2s ease-out;white-space:nowrap}.ts-table .ts-cell.ts-table__column--sticky,.ts-table .ts-footer-cell.ts-table__column--sticky{background-color:var(--table-bg)}.ts-table .ts-header-cell{background-color:var(--header-bg);border-color:var(--header-border-color);padding:var(--cell-padding)}.ts-table .ts-header-cell:not(:last-of-type){position:relative}.ts-table .ts-header-cell:not(:last-of-type)::after{background-color:var(--header-border-color);bottom:0;content:'';display:block;left:calc(100% - 1px);opacity:0;position:absolute;top:0;transition:opacity .2s ease-out;width:1px;z-index:var(--z-index-base-context)}.ts-table .ts-header-cell:not(:last-of-type):focus::after,.ts-table .ts-header-cell:not(:last-of-type):hover::after{opacity:1}.ts-table .ts-header-cell.ts-sort-header-sorted{color:#2f854d}.ts-table .ts-header-cell:nth-child(1){z-index:39!important}.ts-table .ts-header-cell:nth-child(2){z-index:38!important}.ts-table .ts-header-cell:nth-child(3){z-index:37!important}.ts-table .ts-header-cell:nth-child(4){z-index:36!important}.ts-table .ts-header-cell:nth-child(5){z-index:35!important}.ts-table .ts-header-cell:nth-child(6){z-index:34!important}.ts-table .ts-header-cell:nth-child(7){z-index:33!important}.ts-table .ts-header-cell:nth-child(8){z-index:32!important}.ts-table .ts-header-cell:nth-child(9){z-index:31!important}.ts-table .ts-header-cell:nth-child(10){z-index:30!important}.ts-table .ts-header-cell:nth-child(11){z-index:29!important}.ts-table .ts-header-cell:nth-child(12){z-index:28!important}.ts-table .ts-header-cell:nth-child(13){z-index:27!important}.ts-table .ts-header-cell:nth-child(14){z-index:26!important}.ts-table .ts-header-cell:nth-child(15){z-index:25!important}.ts-table .ts-header-cell:nth-child(16){z-index:24!important}.ts-table .ts-header-cell:nth-child(17){z-index:23!important}.ts-table .ts-header-cell:nth-child(18){z-index:22!important}.ts-table .ts-header-cell:nth-child(19){z-index:21!important}.ts-table .ts-header-cell:nth-child(20){z-index:20!important}.ts-table .ts-header-cell:nth-child(21){z-index:19!important}.ts-table .ts-header-cell:nth-child(22){z-index:18!important}.ts-table .ts-header-cell:nth-child(23){z-index:17!important}.ts-table .ts-header-cell:nth-child(24){z-index:16!important}.ts-table .ts-header-cell:nth-child(25){z-index:15!important}.ts-table .ts-header-cell:nth-child(26){z-index:14!important}.ts-table .ts-header-cell:nth-child(27){z-index:13!important}.ts-table .ts-header-cell:nth-child(28){z-index:12!important}.ts-table .ts-header-cell:nth-child(29){z-index:11!important}.ts-table .ts-header-cell:nth-child(30){z-index:10!important}.ts-table .ts-header-cell:nth-child(31){z-index:9!important}.ts-table .ts-header-cell:nth-child(32){z-index:8!important}.ts-table .ts-header-cell:nth-child(33){z-index:7!important}.ts-table .ts-header-cell:nth-child(34){z-index:6!important}.ts-table .ts-header-cell:nth-child(35){z-index:5!important}.ts-table .ts-header-cell:nth-child(36){z-index:4!important}.ts-table .ts-header-cell:nth-child(37){z-index:3!important}.ts-table .ts-header-cell:nth-child(38){z-index:2!important}.ts-table .ts-header-cell:nth-child(39){z-index:1!important}.ts-table .ts-header-cell:nth-child(40){z-index:0!important}.ts-table .ts-header-cell.ts-table__column--sticky-end{z-index:var(--sticky-end-z)!important}.ts-table .ts-header-cell.ts-cell--resizing .ts-header-cell__resizer{opacity:1}.ts-table .ts-header-cell.ts-cell--resizing .ts-header-cell__resizer::before{width:7px}.ts-table .ts-header-cell__resizer{bottom:-1px;cursor:col-resize;display:block;opacity:0;position:absolute;right:0;top:-1px;transform:translateX(50%);transition:opacity .2s ease-out;width:24px;z-index:calc(var(--z-index-resize-background))}.ts-table .ts-header-cell__resizer::before{background-color:#00538a;bottom:1px;content:'';display:block;left:50%;position:absolute;top:0;transform:translateX(-50%);transition:width .1s ease-out;width:1px}.ts-table .ts-header-cell__resizer::after{--grabber-icon-font-size:14px;color:#f2f0f7;content:'\\\\2026';display:block;font-size:var(--grabber-icon-font-size);height:11px;left:50%;position:absolute;top:30%;transform:rotate(90deg) translate(var(--grip-vertical-adjustment),-3px);z-index:var(--z-index-resize-grabber)}\"]\n    })\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ,\n    __param(4, Attribute('role')),\n    __param(5, Inject(DOCUMENT)),\n    __param(6, Optional()),\n    __metadata(\"design:paramtypes\", [Platform,\n        Renderer2,\n        IterableDiffers,\n        ChangeDetectorRef, String, Object, Directionality,\n        ElementRef,\n        NgZone,\n        TsWindowService,\n        ViewportRuler])\n], TsTableComponent);\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using {@link TsSortDirective}), and paginator (using {@link TsPaginatorComponent}).\n */\nclass TsTableDataSource {\n    /**\n     * Set up data and change subscriptions\n     *\n     * @param initialData\n     */\n    constructor(initialData = []) {\n        /**\n         * Stream emitting render data to the table (depends on ordered data changes).\n         */\n        this._renderData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Array of data that should be rendered by the table, where each object represents one row.\n     *\n     * @param data\n     */\n    set data(data) {\n        this._data.next(data);\n    }\n    get data() {\n        return this._data.value;\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with the\n     * provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        if (this._renderChangesSubscription) {\n            this._renderChangesSubscription.unsubscribe();\n        }\n        // Watch for base data or filter changes to provide a filtered set of data.\n        this._renderChangesSubscription = this._data\n            // Watched for paged data changes and send the result to the table to render.\n            .subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Used by the {@link TsTableComponent}. Called when it connects to the data source.\n     */\n    connect() {\n        return this._renderData;\n    }\n    /**\n     * Used by the {@link TsTableComponent}. Called when it is destroyed. No-op.\n     */\n    disconnect() { }\n}\n\n// NOTE: Moving declarations/exports items into shared array breaks documentation generation.\nlet TsTableModule = class TsTableModule {\n};\nTsTableModule = __decorate([\n    NgModule({\n        imports: [\n            CdkTableModule,\n            CommonModule,\n            TsPaginatorModule,\n            TsSortModule,\n        ],\n        declarations: [\n            // Table\n            TsTableComponent,\n            // Template definitions\n            TsHeaderCellDefDirective,\n            TsHeaderRowDefDirective,\n            TsColumnDefDirective,\n            TsCellDefDirective,\n            TsRowDefDirective,\n            TsFooterCellDefDirective,\n            TsFooterRowDefDirective,\n            // Cell directives\n            TsHeaderCellDirective,\n            TsCellDirective,\n            TsFooterCellDirective,\n            // Row directives\n            TsHeaderRowComponent,\n            TsRowComponent,\n            TsFooterRowComponent,\n        ],\n        exports: [\n            // Table\n            TsTableComponent,\n            // Template definitions\n            TsHeaderCellDefDirective,\n            TsHeaderRowDefDirective,\n            TsColumnDefDirective,\n            TsCellDefDirective,\n            TsRowDefDirective,\n            TsFooterCellDefDirective,\n            TsFooterRowDefDirective,\n            // Cell directives\n            TsHeaderCellDirective,\n            TsCellDirective,\n            TsFooterCellDirective,\n            // Row directives\n            TsHeaderRowComponent,\n            TsRowComponent,\n            TsFooterRowComponent,\n        ],\n    })\n], TsTableModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TS_TABLE_MIN_COLUMN_WIDTH, TsCellDefDirective, TsCellDirective, TsColumnDefDirective, TsFooterCellDefDirective, TsFooterCellDirective, TsFooterRowComponent, TsFooterRowDefDirective, TsHeaderCellDefDirective, TsHeaderCellDirective, TsHeaderCellResizeEvent, TsHeaderRowComponent, TsHeaderRowDefDirective, TsRowComponent, TsRowDefDirective, TsTableColumnsChangeEvent, TsTableComponent, TsTableDataSource, TsTableModule, setColumnAlignment, tsTableColumnAlignmentTypesArray };\n//# sourceMappingURL=terminus-ui-table.js.map\n","<ng-container cdkCellOutlet></ng-container>","<ng-container cdkCellOutlet></ng-container>","<ng-container cdkCellOutlet></ng-container>","\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n","import { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-styling.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n * @record\n */\nfunction DragCSSStyleDeclaration() { }\nif (false) {\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.webkitUserDrag;\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.MozUserSelect;\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = (/** @type {?} */ (source[key]));\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/transition-duration.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    const computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    const property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => prop === 'transform' || prop === 'all'));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    const propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/client-rect.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets a mutable version of an element's bounding `ClientRect`.\n * @param {?} element\n * @return {?}\n */\nfunction getMutableClientRect(element) {\n    /** @type {?} */\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param {?} rect ClientRect to check against.\n * @param {?} threshold Threshold around the ClientRect.\n * @param {?} pointerX Coordinates along the X axis.\n * @param {?} pointerY Coordinates along the Y axis.\n * @return {?}\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    /** @type {?} */\n    const xThreshold = width * threshold;\n    /** @type {?} */\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/parent-position-tracker.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object holding the scroll position of something.\n * @record\n */\nfunction ScrollPosition() { }\nif (false) {\n    /** @type {?} */\n    ScrollPosition.prototype.top;\n    /** @type {?} */\n    ScrollPosition.prototype.left;\n}\n/**\n * Keeps track of the scroll position and dimensions of the parents of an element.\n */\nclass ParentPositionTracker {\n    /**\n     * @param {?} _document\n     * @param {?} _viewportRuler\n     */\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Cached positions of the scrollable parent elements.\n         */\n        this.positions = new Map();\n    }\n    /**\n     * Clears the cached positions.\n     * @return {?}\n     */\n    clear() {\n        this.positions.clear();\n    }\n    /**\n     * Caches the positions. Should be called at the beginning of a drag sequence.\n     * @param {?} elements\n     * @return {?}\n     */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach((/**\n         * @param {?} element\n         * @return {?}\n         */\n        element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        }));\n    }\n    /**\n     * Handles scrolling while a drag is taking place.\n     * @param {?} event\n     * @return {?}\n     */\n    handleScroll(event) {\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        /** @type {?} */\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        /** @type {?} */\n        const scrollPosition = cachedPosition.scrollPosition;\n        /** @type {?} */\n        let newTop;\n        /** @type {?} */\n        let newLeft;\n        if (target === this._document) {\n            /** @type {?} */\n            const viewportScrollPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = ((/** @type {?} */ (target))).scrollTop;\n            newLeft = ((/** @type {?} */ (target))).scrollLeft;\n        }\n        /** @type {?} */\n        const topDifference = scrollPosition.top - newTop;\n        /** @type {?} */\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((/**\n         * @param {?} position\n         * @param {?} node\n         * @return {?}\n         */\n        (position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        }));\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\nif (false) {\n    /**\n     * Cached positions of the scrollable parent elements.\n     * @type {?}\n     */\n    ParentPositionTracker.prototype.positions;\n    /**\n     * @type {?}\n     * @private\n     */\n    ParentPositionTracker.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    ParentPositionTracker.prototype._viewportRuler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object that can be used to configure the behavior of DragRef.\n * @record\n */\nfunction DragRefConfig() { }\nif (false) {\n    /**\n     * Minimum amount of pixels that the user should\n     * drag, before the CDK initiates a drag sequence.\n     * @type {?}\n     */\n    DragRefConfig.prototype.dragStartThreshold;\n    /**\n     * Amount the pixels the user should drag before the CDK\n     * considers them to have changed the drag direction.\n     * @type {?}\n     */\n    DragRefConfig.prototype.pointerDirectionChangeThreshold;\n    /**\n     * `z-index` for the absolutely-positioned elements that are created by the drag item.\n     * @type {?|undefined}\n     */\n    DragRefConfig.prototype.zIndex;\n}\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * \\@docs-private\n * @record\n */\nfunction DragRefInternal() { }\n/**\n * Template that can be used to create a drag helper element (e.g. a preview or a placeholder).\n * @record\n * @template T\n */\nfunction DragHelperTemplate() { }\nif (false) {\n    /** @type {?} */\n    DragHelperTemplate.prototype.template;\n    /** @type {?} */\n    DragHelperTemplate.prototype.viewContainer;\n    /** @type {?} */\n    DragHelperTemplate.prototype.context;\n}\n/**\n * Template that can be used to create a drag preview element.\n * @record\n * @template T\n */\nfunction DragPreviewTemplate() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragPreviewTemplate.prototype.matchSize;\n}\n/**\n * Point on the page or within an element.\n * @record\n */\nfunction Point() { }\nif (false) {\n    /** @type {?} */\n    Point.prototype.x;\n    /** @type {?} */\n    Point.prototype.y;\n}\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @template T\n */\nclass DragRef {\n    /**\n     * @param {?} element\n     * @param {?} _config\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being scrolled.\n         */\n        this._scrollSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being resized.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                /** @type {?} */\n                const targetHandle = this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => {\n                    /** @type {?} */\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                /** @type {?} */\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                /** @type {?} */\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                /** @type {?} */\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    /** @type {?} */\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._startDragSequence(event)));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this._endDragSequence(event);\n        });\n        this.withRootElement(element);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     * @return {?}\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    withHandles(handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => coerceElement(handle)));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => toggleNativeDragInteractions(handle, false)));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    withPreviewTemplate(template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    withPlaceholderTemplate(template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    withRootElement(rootElement) {\n        /** @type {?} */\n        const element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            (/** @type {?} */ (this))._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            }));\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    withBoundaryElement(boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        (/** @type {?} */ (this))._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            (/** @type {?} */ (this))._resizeSubscription = (/** @type {?} */ (this))._viewportRuler\n                .change(10)\n                .subscribe((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (this))._containInsideBoundaryOnResize()));\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = (/** @type {?} */ (null));\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        /** @type {?} */\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    setFreeDragPosition(value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the item's sort order based on the last-known pointer position.\n     * @return {?}\n     */\n    _sortFromLastPointerPosition() {\n        /** @type {?} */\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position));\n        }\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @private\n     * @param {?} event Browser event object that ended the sequence.\n     * @return {?}\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            () => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }));\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            }));\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _startDragSequence(event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        /** @type {?} */\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const parent = (/** @type {?} */ (element.parentNode));\n            /** @type {?} */\n            const preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            /** @type {?} */\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this._initialContainer = this._initialIndex = (/** @type {?} */ (undefined));\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        const isDragging = this.isDragging();\n        /** @type {?} */\n        const isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        const rootElement = this._rootElement;\n        /** @type {?} */\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @param {?} scrollEvent\n         * @return {?}\n         */\n        scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        }));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        /** @type {?} */\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        (/** @type {?} */ (this._anchor.parentNode)).replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = (/** @type {?} */ (this._dropContainer));\n            /** @type {?} */\n            const currentIndex = container.getItemIndex(this);\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        }));\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\n                (/** @type {?} */ (this._dropContainer)).exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = (/** @type {?} */ (newContainer));\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    _createPreviewElement() {\n        /** @type {?} */\n        const previewConfig = this._previewTemplate;\n        /** @type {?} */\n        const previewClass = this.previewClass;\n        /** @type {?} */\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            /** @type {?} */\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            /** @type {?} */\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, (/** @type {?} */ (rootRect)));\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            /** @type {?} */\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach((/**\n                 * @param {?} className\n                 * @return {?}\n                 */\n                className => preview.classList.add(className)));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                /** @type {?} */\n                const handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    _createPlaceholderElement() {\n        /** @type {?} */\n        const placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        const scrollPosition = this._getViewportScrollPosition();\n        /** @type {?} */\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        /** @type {?} */\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getPointerPositionOnPage(event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        /** @type {?} */\n        const scrollPosition = this._getViewportScrollPosition();\n        return {\n            x: point.pageX - scrollPosition.left,\n            y: point.pageY - scrollPosition.top\n        };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} point\n     * @return {?}\n     */\n    _getConstrainedPointerPosition(point) {\n        /** @type {?} */\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        /** @type {?} */\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            /** @type {?} */\n            const boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            const previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            const minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            const minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        /** @type {?} */\n        const delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    _applyRootElementTransform(x, y) {\n        /** @type {?} */\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    _getDragDistance(currentPosition) {\n        /** @type {?} */\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /**\n     * Cleans up any cached element dimensions that we don't need after dragging has stopped.\n     * @private\n     * @return {?}\n     */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     * @private\n     * @return {?}\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        /** @type {?} */\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        /** @type {?} */\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        /** @type {?} */\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        /** @type {?} */\n        const topOverflow = boundaryRect.top - elementRect.top;\n        /** @type {?} */\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /**\n     * Gets the drag start delay, based on the event type.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getDragStartDelay(event) {\n        /** @type {?} */\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /**\n     * Updates the internal state of the draggable element when scrolling has occurred.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _updateOnScroll(event) {\n        /** @type {?} */\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        // ClientRect dimensions are based on the page's scroll position so\n        // we have to update the cached boundary ClientRect if the user has scrolled.\n        if (this._boundaryRect && scrollDifference) {\n            adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n        }\n    }\n    /**\n     * Gets the scroll position of the viewport.\n     * @private\n     * @return {?}\n     */\n    _getViewportScrollPosition() {\n        /** @type {?} */\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n}\nif (false) {\n    /**\n     * Element displayed next to the user's pointer while the element is dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._preview;\n    /**\n     * Reference to the view of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRef;\n    /**\n     * Reference to the view of the placeholder element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderRef;\n    /**\n     * Element that is rendered instead of the draggable item while it is being sorted.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholder;\n    /**\n     * Coordinates within the element at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionInElement;\n    /**\n     * Coordinates on the page at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._passiveTransform;\n    /**\n     * CSS `transform` that is applied to the element while it's being dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._activeTransform;\n    /**\n     * Inline `transform` value that the element had before the first dragging sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasStartedDragging;\n    /**\n     * Whether the element has moved since the user started dragging it.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasMoved;\n    /**\n     * Drop container in which the DragRef resided when dragging began.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialContainer;\n    /**\n     * Index at which the item started in its initial container.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialIndex;\n    /**\n     * Cached positions of scrollable parent elements.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._parentPositions;\n    /**\n     * Emits when the item is being moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._moveEvents;\n    /**\n     * Keeps track of the direction in which the user is dragging along each axis.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDirectionDelta;\n    /**\n     * Pointer position at which the last change in the delta occurred.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerPositionAtLastDirectionChange;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElementTapHighlight;\n    /**\n     * Subscription to pointer movement events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMoveSubscription;\n    /**\n     * Subscription to the event that is dispatched when the user lifts their pointer.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUpSubscription;\n    /**\n     * Subscription to the viewport being scrolled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollSubscription;\n    /**\n     * Subscription to the viewport being resized.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._resizeSubscription;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._lastTouchEventTime;\n    /**\n     * Time at which the last dragging sequence was started.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragStartTime;\n    /**\n     * Cached reference to the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryElement;\n    /**\n     * Whether the native dragging interactions have been enabled on the root element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._nativeInteractionsEnabled;\n    /**\n     * Cached dimensions of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRect;\n    /**\n     * Cached dimensions of the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryRect;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderTemplate;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._handles;\n    /**\n     * Registered handles that are currently disabled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabledHandles;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dropContainer;\n    /**\n     * Layout direction of the item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._direction;\n    /**\n     * Axis along which dragging is locked.\n     * @type {?}\n     */\n    DragRef.prototype.lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    DragRef.prototype.dragStartDelay;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    DragRef.prototype.previewClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabled;\n    /**\n     * Emits as the drag sequence is being prepared.\n     * @type {?}\n     */\n    DragRef.prototype.beforeStarted;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    DragRef.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    DragRef.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    DragRef.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    DragRef.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    DragRef.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    DragRef.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    DragRef.prototype.moved;\n    /**\n     * Arbitrary data that can be attached to the drag item.\n     * @type {?}\n     */\n    DragRef.prototype.data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    DragRef.prototype.constrainPosition;\n    /**\n     * Handler for the `mousedown`/`touchstart` events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDown;\n    /**\n     * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMove;\n    /**\n     * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUp;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragDropRegistry;\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param {?} node Node to be removed.\n * @return {?}\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n * @param {?} viewRef\n * @param {?} _document\n * @return {?}\n */\nfunction getRootNode(viewRef, _document) {\n    /** @type {?} */\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return (/** @type {?} */ (rootNodes[0]));\n    }\n    /** @type {?} */\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach((/**\n     * @param {?} node\n     * @return {?}\n     */\n    node => wrapper.appendChild(node)));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param {?} target Element that needs to be resized.\n * @param {?} sourceRect Dimensions of the source element.\n * @return {?}\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    const from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    const target = array[from];\n    /** @type {?} */\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drop-list-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Entry in the position cache for draggable items.\n * \\@docs-private\n * @record\n */\nfunction CachedItemPosition() { }\nif (false) {\n    /**\n     * Instance of the drag item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.drag;\n    /**\n     * Dimensions of the item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.clientRect;\n    /**\n     * Amount by which the item has been moved since dragging started.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.offset;\n}\n/** @enum {number} */\nconst AutoScrollVerticalDirection = {\n    NONE: 0, UP: 1, DOWN: 2,\n};\n/** @enum {number} */\nconst AutoScrollHorizontalDirection = {\n    NONE: 0, LEFT: 1, RIGHT: 2,\n};\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * \\@docs-private\n * @record\n */\nfunction DropListRefInternal() { }\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @template T\n */\nclass DropListRef {\n    /**\n     * @param {?} element\n     * @param {?} _dragDropRegistry\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     */\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        /**\n         * Subscription to the window being scrolled.\n         */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /**\n         * Vertical direction in which the list is currently scrolling.\n         */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /**\n         * Horizontal direction in which the list is currently scrolling.\n         */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /**\n         * Used to signal to the current auto-scroll sequence when to stop.\n         */\n        this._stopScrollTimers = new Subject();\n        /**\n         * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n         */\n        this._cachedShadowRoot = null;\n        /**\n         * Starts the interval that'll auto-scroll the element.\n         */\n        this._startScrollInterval = (/**\n         * @return {?}\n         */\n        () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            }));\n        });\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = (/** @type {?} */ (null));\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        /** @type {?} */\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || ((/** @type {?} */ (styles))).scrollSnapType || '';\n        ((/** @type {?} */ (styles))).scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._startReceiving(this)));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?=} index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        /** @type {?} */\n        const activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        const currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        const placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            const element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n                element.insertBefore(placeholder, activeDraggables[0].getRootElement());\n                activeDraggables.unshift(item);\n            }\n            else {\n                element.appendChild(placeholder);\n                activeDraggables.push(item);\n            }\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * \\@breaking-change 11.0.0 `previousIndex` parameter to become required.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?} distance Distance the user has dragged since the start of the dragging sequence.\n     * @param {?=} previousIndex Index of the item when dragging started.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    withItems(items) {\n        /** @type {?} */\n        const previousItems = (/** @type {?} */ (this))._draggables;\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._withDropContainer((/** @type {?} */ (this)))));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            /** @type {?} */\n            const draggedItems = previousItems.filter((/**\n             * @param {?} item\n             * @return {?}\n             */\n            item => item.isDragging()));\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every((/**\n             * @param {?} item\n             * @return {?}\n             */\n            item => items.indexOf(item) === -1))) {\n                (/** @type {?} */ (this))._reset();\n            }\n            else {\n                (/** @type {?} */ (this))._cacheItems();\n            }\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    connectedTo(connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    withOrientation(orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} elements Elements that can be scrolled.\n     * @return {THIS}\n     */\n    withScrollableParents(elements) {\n        /** @type {?} */\n        const element = coerceElement((/** @type {?} */ (this)).element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        (/** @type {?} */ (this))._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the scrollable parents that are registered with this drop container.\n     * @return {?}\n     */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        const siblings = this._itemPositions;\n        /** @type {?} */\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n        /** @type {?} */\n        const siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        const delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        (sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            const isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param {?} pointerX User's pointer position along the x axis.\n     * @param {?} pointerY User's pointer position along the y axis.\n     * @return {?}\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        /** @type {?} */\n        let scrollNode;\n        /** @type {?} */\n        let verticalScrollDirection = 0 /* NONE */;\n        /** @type {?} */\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((/**\n         * @param {?} position\n         * @param {?} element\n         * @return {?}\n         */\n        (position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections((/** @type {?} */ (element)), position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = (/** @type {?} */ (element));\n                }\n            }\n        }));\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /**\n     * Stops any currently-running auto-scroll sequences.\n     * @return {?}\n     */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /**\n     * Caches the positions of the configured scrollable parents.\n     * @private\n     * @return {?}\n     */\n    _cacheParentPositions() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = (/** @type {?} */ ((/** @type {?} */ (this._parentPositions.positions.get(element))).clientRect));\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    _cacheItemPositions() {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        drag => {\n            /** @type {?} */\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    _reset() {\n        this._isDragging = false;\n        /** @type {?} */\n        const styles = coerceElement(this.element).style;\n        ((/** @type {?} */ (styles))).scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => {\n            /** @type {?} */\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        }));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._stopReceiving(this)));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            const start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @private\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @return {?}\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        /** @type {?} */\n        const itemPositions = this._itemPositions;\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        /** @type {?} */\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            /** @type {?} */\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            /** @type {?} */\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        }));\n    }\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._canReceive(item, x, y)));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        /** @type {?} */\n        const elementFromPoint = (/** @type {?} */ (this._getShadowRoot().elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    _startReceiving(sibling) {\n        /** @type {?} */\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     * @private\n     * @return {?}\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (this.isDragging()) {\n                /** @type {?} */\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach((/**\n                     * @param {?} __0\n                     * @return {?}\n                     */\n                    ({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    }));\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach((/**\n                     * @param {?} __0\n                     * @return {?}\n                     */\n                    ({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    }));\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        }));\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     * @private\n     * @return {?}\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            /** @type {?} */\n            const shadowRoot = (/** @type {?} */ (_getShadowRoot(coerceElement(this.element))));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\nif (false) {\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    DropListRef.prototype.element;\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.disabled;\n    /**\n     * Whether sorting items within the list is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.sortingDisabled;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    DropListRef.prototype.lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.autoScrollDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    DropListRef.prototype.enterPredicate;\n    /**\n     * Emits right before dragging has started.\n     * @type {?}\n     */\n    DropListRef.prototype.beforeStarted;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    DropListRef.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    DropListRef.prototype.exited;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    DropListRef.prototype.dropped;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    DropListRef.prototype.sorted;\n    /**\n     * Arbitrary data that can be attached to the drop list.\n     * @type {?}\n     */\n    DropListRef.prototype.data;\n    /**\n     * Whether an item in the list is being dragged.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._isDragging;\n    /**\n     * Cache of the dimensions of all the items inside the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._itemPositions;\n    /**\n     * Keeps track of the positions of any parent scrollable elements.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._parentPositions;\n    /**\n     * Cached `ClientRect` of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._clientRect;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * from `_draggables`, as well as any items that have been dragged in, but haven't\n     * been dropped yet.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeDraggables;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as\n     * well as what direction the pointer was moving in when the swap occured.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._previousSwap;\n    /**\n     * Draggable items in the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._draggables;\n    /**\n     * Drop lists that are connected to the current one.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._siblings;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._orientation;\n    /**\n     * Connected siblings that currently have a dragged item.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeSiblings;\n    /**\n     * Layout direction of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._direction;\n    /**\n     * Subscription to the window being scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportScrollSubscription;\n    /**\n     * Vertical direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._verticalScrollDirection;\n    /**\n     * Horizontal direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._horizontalScrollDirection;\n    /**\n     * Node that is being auto-scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollNode;\n    /**\n     * Used to signal to the current auto-scroll sequence when to stop.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._stopScrollTimers;\n    /**\n     * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._cachedShadowRoot;\n    /**\n     * Reference to the document.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._document;\n    /**\n     * Elements that can be scrolled while the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollableElements;\n    /**\n     * Initial value for the element's `scroll-snap-type` style.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._initialScrollSnap;\n    /**\n     * Starts the interval that'll auto-scroll the element.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._startScrollInterval;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._dragDropRegistry;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportRuler;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    /** @type {?} */\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @return {?}\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    /** @type {?} */\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param {?} element Element for which we should calculate the scroll direction.\n * @param {?} clientRect Bounding client rectangle of the element.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    /** @type {?} */\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    /** @type {?} */\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    /** @type {?} */\n    let verticalScrollDirection = 0 /* NONE */;\n    /** @type {?} */\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        /** @type {?} */\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        /** @type {?} */\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            const isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\n                options: true\n            })\n                .set('scroll', {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.scroll.next(e)),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDragItem(instance)));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDropContainer(instance)));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        (config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ DragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._document;\n    /**\n     * Registered drop container instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dropInstances;\n    /**\n     * Registered drag item instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dragInstances;\n    /**\n     * Drag item instances that are currently being dragged.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._activeDragInstances;\n    /**\n     * Keeps track of the event listeners that we've bound to the `document`.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._globalListeners;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerMove;\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerUp;\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.scroll;\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * \\@param event Event whose default action should be prevented.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._preventDefaultWhileDragging;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/** @nocollapse */ DragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._dragDropRegistry;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-events.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Event emitted when the user starts dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragStart() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragStart.prototype.source;\n}\n/**\n * Event emitted when the user releases an item, before any animations have started.\n * @record\n * @template T\n */\nfunction CdkDragRelease() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragRelease.prototype.source;\n}\n/**\n * Event emitted when the user stops dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragEnd() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.source;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.distance;\n}\n/**\n * Event emitted when the user moves an item into a new drop container.\n * @record\n * @template T, I\n */\nfunction CdkDragEnter() { }\nif (false) {\n    /**\n     * Container into which the user has moved the item.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.container;\n    /**\n     * Item that was moved into the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.item;\n    /**\n     * Index at which the item has entered the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.currentIndex;\n}\n/**\n * Event emitted when the user removes an item from a\n * drop container by moving it into another one.\n * @record\n * @template T, I\n */\nfunction CdkDragExit() { }\nif (false) {\n    /**\n     * Container from which the user has a removed an item.\n     * @type {?}\n     */\n    CdkDragExit.prototype.container;\n    /**\n     * Item that was removed from the container.\n     * @type {?}\n     */\n    CdkDragExit.prototype.item;\n}\n/**\n * Event emitted when the user drops a draggable item inside a drop container.\n * @record\n * @template T, O\n */\nfunction CdkDragDrop() { }\nif (false) {\n    /**\n     * Index of the item when it was picked up.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousIndex;\n    /**\n     * Current index of the item.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.currentIndex;\n    /**\n     * Item that is being dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.item;\n    /**\n     * Container in which the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.container;\n    /**\n     * Container from which the item was picked up. Can be the same as the `container`.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousContainer;\n    /**\n     * Whether the user's pointer was over the container when the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.isPointerOverContainer;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.distance;\n}\n/**\n * Event emitted as the user is dragging a draggable item.\n * @record\n * @template T\n */\nfunction CdkDragMove() { }\nif (false) {\n    /**\n     * Item that is being dragged.\n     * @type {?}\n     */\n    CdkDragMove.prototype.source;\n    /**\n     * Position of the user's pointer on the page.\n     * @type {?}\n     */\n    CdkDragMove.prototype.pointerPosition;\n    /**\n     * Native event that is causing the dragging.\n     * @type {?}\n     */\n    CdkDragMove.prototype.event;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragMove.prototype.distance;\n    /**\n     * Indicates the direction in which the user is dragging the element along each axis.\n     * `1` means that the position is increasing (e.g. the user is moving to the right or downwards),\n     * whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means\n     * that the position hasn't changed.\n     * @type {?}\n     */\n    CdkDragMove.prototype.delta;\n}\n/**\n * Event emitted when the user swaps the position of two drag items.\n * @record\n * @template T, I\n */\nfunction CdkDragSortEvent() { }\nif (false) {\n    /**\n     * Index from which the item was sorted previously.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.previousIndex;\n    /**\n     * Index that the item is currently in.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.currentIndex;\n    /**\n     * Container that the item belongs to.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.container;\n    /**\n     * Item that is being sorted.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.item;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-parent.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-handle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nclass CdkDragHandle {\n    /**\n     * @param {?} element\n     * @param {?=} parentDrag\n     */\n    constructor(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /**\n     * Whether starting to drag through this handle is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            },] }\n];\n/** @nocollapse */\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkDragHandle.ngAcceptInputType_disabled;\n    /**\n     * Closest parent draggable instance.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._parentDrag;\n    /**\n     * Emits when the state of the handle has changed.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._stateChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragHandle.prototype._disabled;\n    /** @type {?} */\n    CdkDragHandle.prototype.element;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-placeholder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nclass CdkDragPlaceholder {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            },] }\n];\n/** @nocollapse */\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Context data to be added to the placeholder template instance.\n     * @type {?}\n     */\n    CdkDragPlaceholder.prototype.data;\n    /** @type {?} */\n    CdkDragPlaceholder.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-preview.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nclass CdkDragPreview {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /**\n     * Whether the preview should preserve the same size as the item that is being dragged.\n     * @return {?}\n     */\n    get matchSize() { return this._matchSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            },] }\n];\n/** @nocollapse */\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CdkDragPreview.ngAcceptInputType_matchSize;\n    /**\n     * Context data to be added to the preview template instance.\n     * @type {?}\n     */\n    CdkDragPreview.prototype.data;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragPreview.prototype._matchSize;\n    /** @type {?} */\n    CdkDragPreview.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n * @type {?}\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n/**\n * Object that can be used to configure the drag\n * items and drop lists within a module or a component.\n * @record\n */\nfunction DragDropConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.lockAxis;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.dragStartDelay;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.constrainPosition;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.previewClass;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.boundaryElement;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.rootElementSelector;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.draggingDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.sortingDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.listAutoScrollDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.listOrientation;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.zIndex;\n}\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nclass CdkDrag {\n    /**\n     * @param {?} element\n     * @param {?} dropContainer\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} config\n     * @param {?} _dir\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     */\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            })))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                /** @type {?} */\n                const childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle._parentDrag === this))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle.element));\n                this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                return (/** @type {?} */ (merge(...handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                item => {\n                    return item._stateChanges.pipe(startWith(item));\n                })))));\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                const dragRef = this._dragRef;\n                /** @type {?} */\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    _updateRootElement() {\n        /** @type {?} */\n        const element = this.element.nativeElement;\n        /** @type {?} */\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    _getBoundaryElement() {\n        /** @type {?} */\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                const dir = this._dir;\n                /** @type {?} */\n                const dragStartDelay = this.dragStartDelay;\n                /** @type {?} */\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.released.emit({ source: this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        }));\n    }\n    /**\n     * Assigns the default input values based on a provided config object.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            },] }\n];\n/** @nocollapse */\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkDrag.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._destroyed;\n    /**\n     * Reference to the underlying drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype._dragRef;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     */\n    CdkDrag.prototype._handles;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     */\n    CdkDrag.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     */\n    CdkDrag.prototype._placeholderTemplate;\n    /**\n     * Arbitrary data to attach to this drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype.data;\n    /**\n     * Locks the position of the dragged element along the specified axis.\n     * @type {?}\n     */\n    CdkDrag.prototype.lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     * @type {?}\n     */\n    CdkDrag.prototype.rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     * @type {?}\n     */\n    CdkDrag.prototype.boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    CdkDrag.prototype.dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     * @type {?}\n     */\n    CdkDrag.prototype.freeDragPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    CdkDrag.prototype.constrainPosition;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    CdkDrag.prototype.previewClass;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    CdkDrag.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    CdkDrag.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    CdkDrag.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    CdkDrag.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    CdkDrag.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    CdkDrag.prototype.moved;\n    /**\n     * Element that the draggable is attached to.\n     * @type {?}\n     */\n    CdkDrag.prototype.element;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._changeDetectorRef;\n}\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    let currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list-group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nclass CdkDropListGroup {\n    constructor() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /**\n     * Whether starting a dragging sequence from inside this group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n            },] }\n];\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkDropListGroup.ngAcceptInputType_disabled;\n    /**\n     * Drop lists registered inside the group.\n     * @type {?}\n     */\n    CdkDropListGroup.prototype._items;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropListGroup.prototype._disabled;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * \\@docs-private\n * @record\n */\nfunction CdkDropListInternal() { }\nconst ɵ0 = undefined;\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nclass CdkDropList {\n    /**\n     * @param {?} element\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     * @param {?=} _dir\n     * @param {?=} _group\n     * @param {?=} _scrollDispatcher\n     * @param {?=} config\n     */\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group, _scrollDispatcher, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        });\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Registers an items with the drop list.\n     * @param {?} item\n     * @return {?}\n     */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /**\n     * Removes an item from the drop list.\n     * @param {?} item\n     * @return {?}\n     */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /**\n     * Gets the registered items in the list, sorted by their position in the DOM.\n     * @return {?}\n     */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            /** @type {?} */\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @return {?}\n     */\n    start() {\n        this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => ref.withDirection(value)));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const siblings = coerceArray(this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    list => list.id === drop)))) : drop;\n            }));\n            if (this._group) {\n                this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n            if (!this._scrollableParentsResolved && this._scrollDispatcher) {\n                /** @type {?} */\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map((/**\n                 * @param {?} scrollable\n                 * @return {?}\n                 */\n                scrollable => scrollable.getElementRef().nativeElement));\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => drop && drop !== this)).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            list => list._dropListRef)))\n                .withOrientation(this.orientation);\n        }));\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * Assigns the default input values based on a provided config object.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /**\n     * Syncs up the registered drag items with underlying drop list ref.\n     * @private\n     * @return {?}\n     */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._dragRef)));\n    }\n}\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\nCdkDropList._dropLists = [];\nCdkDropList.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                }\n            },] }\n];\n/** @nocollapse */\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ScrollDispatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\nif (false) {\n    /**\n     * Keeps track of the drop lists that are currently on the page.\n     * @type {?}\n     * @private\n     */\n    CdkDropList._dropLists;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_sortingDisabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_autoScrollDisabled;\n    /**\n     * Emits when the list has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._destroyed;\n    /**\n     * Whether the element's scrollable parents have been resolved.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._scrollableParentsResolved;\n    /**\n     * Reference to the underlying drop list instance.\n     * @type {?}\n     */\n    CdkDropList.prototype._dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     * @type {?}\n     */\n    CdkDropList.prototype.connectedTo;\n    /**\n     * Arbitrary data to attach to this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.data;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     */\n    CdkDropList.prototype.orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     * @type {?}\n     */\n    CdkDropList.prototype.id;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    CdkDropList.prototype.lockAxis;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._disabled;\n    /**\n     * Whether sorting within this drop list is disabled.\n     * @type {?}\n     */\n    CdkDropList.prototype.sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    CdkDropList.prototype.enterPredicate;\n    /**\n     * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n     * @type {?}\n     */\n    CdkDropList.prototype.autoScrollDisabled;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    CdkDropList.prototype.dropped;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    CdkDropList.prototype.exited;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    CdkDropList.prototype.sorted;\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._unsortedItems;\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    CdkDropList.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._group;\n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * \\@breaking-change 11.0.0\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._scrollDispatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DragDropModule {\n}\nDragDropModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_CONFIG_FACTORY, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\n//# sourceMappingURL=drag-drop.js.map\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { isDataSource } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, isDevMode, ChangeDetectorRef, Attribute, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/can-stick.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interface for a mixin to provide a directive with a function that checks if the sticky input has\n * been changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @record\n */\nfunction CanStick() { }\nif (false) {\n    /**\n     * Whether sticky positioning should be applied.\n     * @type {?}\n     */\n    CanStick.prototype.sticky;\n    /**\n     * Whether the sticky input has changed since it was last checked.\n     * @type {?}\n     */\n    CanStick.prototype._hasStickyChanged;\n    /**\n     * Whether the sticky value has changed since this was last called.\n     * @return {?}\n     */\n    CanStick.prototype.hasStickyChanged = function () { };\n    /**\n     * Resets the dirty check for cases where the sticky state has been used without checking.\n     * @return {?}\n     */\n    CanStick.prototype.resetStickyChanged = function () { };\n}\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            this._hasStickyChanged = false;\n        }\n        /**\n         * Whether sticky positioning should be applied.\n         * @return {?}\n         */\n        get sticky() { return this._sticky; }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set sticky(v) {\n            /** @type {?} */\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        hasStickyChanged() {\n            /** @type {?} */\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/tokens.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/**\n * Configurable options for `CdkTextColumn`.\n * @record\n * @template T\n */\nfunction TextColumnOptions() { }\nif (false) {\n    /**\n     * Default function that provides the header text based on the column name if a header\n     * text is not provided.\n     * @type {?|undefined}\n     */\n    TextColumnOptions.prototype.defaultHeaderTextTransform;\n    /**\n     * Default data accessor to use if one is not provided.\n     * @type {?|undefined}\n     */\n    TextColumnOptions.prototype.defaultDataAccessor;\n}\n/**\n * Injection token that can be used to specify the text column options.\n * @type {?}\n */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/cell.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base interface for a cell definition. Captures a column's cell template definition.\n * @record\n */\nfunction CellDef() { }\nif (false) {\n    /** @type {?} */\n    CellDef.prototype.template;\n}\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellDef]' },] }\n];\n/** @nocollapse */\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkCellDef.prototype.template;\n}\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkHeaderCellDef]' },] }\n];\n/** @nocollapse */\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkHeaderCellDef.prototype.template;\n}\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkFooterCellDef]' },] }\n];\n/** @nocollapse */\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkFooterCellDef.prototype.template;\n}\n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nclass CdkColumnDefBase {\n}\n/** @type {?} */\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    /**\n     * @param {?=} _table\n     */\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /**\n     * Unique name for this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (name) {\n            this._name = name;\n            this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n        }\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     * @return {?}\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set stickyEnd(v) {\n        /** @type {?} */\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n}\nCdkColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n            },] }\n];\n/** @nocollapse */\nCdkColumnDef.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkColumnDef.ngAcceptInputType_sticky;\n    /** @type {?} */\n    CdkColumnDef.ngAcceptInputType_stickyEnd;\n    /** @type {?} */\n    CdkColumnDef.prototype._name;\n    /** @type {?} */\n    CdkColumnDef.prototype._stickyEnd;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkColumnDef.prototype.cell;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkColumnDef.prototype.headerCell;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkColumnDef.prototype.footerCell;\n    /**\n     * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n     * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n     * do not match are replaced by the '-' character.\n     * @type {?}\n     */\n    CdkColumnDef.prototype.cssClassFriendlyName;\n    /** @type {?} */\n    CdkColumnDef.prototype._table;\n}\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nclass BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        /** @type {?} */\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass CdkHeaderCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader',\n                },\n            },] }\n];\n/** @nocollapse */\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass CdkFooterCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] }\n];\n/** @nocollapse */\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass CdkCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell',\n                },\n            },] }\n];\n/** @nocollapse */\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/row.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @type {?}\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nclass BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.decorators = [\n    { type: Directive }\n];\n/** @nocollapse */\nBaseRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\nif (false) {\n    /**\n     * The columns to be displayed on this row.\n     * @type {?}\n     */\n    BaseRowDef.prototype.columns;\n    /**\n     * Differ used to check if any changes were made to the columns.\n     * @type {?}\n     * @protected\n     */\n    BaseRowDef.prototype._columnsDiffer;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    BaseRowDef.prototype.template;\n    /**\n     * @type {?}\n     * @protected\n     */\n    BaseRowDef.prototype._differs;\n}\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     * @param {?=} _table\n     */\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n            },] }\n];\n/** @nocollapse */\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nif (false) {\n    /** @type {?} */\n    CdkHeaderRowDef.ngAcceptInputType_sticky;\n    /** @type {?} */\n    CdkHeaderRowDef.prototype._table;\n}\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     * @param {?=} _table\n     */\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n            },] }\n];\n/** @nocollapse */\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nif (false) {\n    /** @type {?} */\n    CdkFooterRowDef.ngAcceptInputType_sticky;\n    /** @type {?} */\n    CdkFooterRowDef.prototype._table;\n}\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     * @param {?=} _table\n     */\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n}\nCdkRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n            },] }\n];\n/** @nocollapse */\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nif (false) {\n    /**\n     * Function that should return true if this row template should be used for the provided index\n     * and row data. If left undefined, this row will be considered the default row template to use\n     * when no other when functions return true for the data.\n     * For every row, there must be at least one when function that passes or an undefined to default.\n     * @type {?}\n     */\n    CdkRowDef.prototype.when;\n    /** @type {?} */\n    CdkRowDef.prototype._table;\n}\n/**\n * Context provided to the row cells when `multiTemplateDataRows` is false\n * @record\n * @template T\n */\nfunction CdkCellOutletRowContext() { }\nif (false) {\n    /**\n     * Data for the row that this cell is located within.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.$implicit;\n    /**\n     * Index of the data object in the provided data array.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.index;\n    /**\n     * Length of the number of total rows.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.count;\n    /**\n     * True if this cell is contained in the first row.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.first;\n    /**\n     * True if this cell is contained in the last row.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.last;\n    /**\n     * True if this cell is contained in a row with an even-numbered index.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.even;\n    /**\n     * True if this cell is contained in a row with an odd-numbered index.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.odd;\n}\n/**\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\n * `renderIndex`.\n * @record\n * @template T\n */\nfunction CdkCellOutletMultiRowContext() { }\nif (false) {\n    /**\n     * Data for the row that this cell is located within.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.$implicit;\n    /**\n     * Index of the data object in the provided data array.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.dataIndex;\n    /**\n     * Index location of the rendered row that this cell is located within.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.renderIndex;\n    /**\n     * Length of the number of total rows.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.count;\n    /**\n     * True if this cell is contained in the first row.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.first;\n    /**\n     * True if this cell is contained in the last row.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.last;\n    /**\n     * True if this cell is contained in a row with an even-numbered index.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.even;\n    /**\n     * True if this cell is contained in a row with an odd-numbered index.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.odd;\n}\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * @param {?} _viewContainer\n     */\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellOutlet]' },] }\n];\n/** @nocollapse */\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\nif (false) {\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     * @type {?}\n     */\n    CdkCellOutlet.mostRecentCellOutlet;\n    /**\n     * The ordered list of cells to render within this outlet's view container\n     * @type {?}\n     */\n    CdkCellOutlet.prototype.cells;\n    /**\n     * The data context to be provided to each cell\n     * @type {?}\n     */\n    CdkCellOutlet.prototype.context;\n    /** @type {?} */\n    CdkCellOutlet.prototype._viewContainer;\n}\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }] }\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkFooterRow {\n}\nCdkFooterRow.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }] }\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkRow {\n}\nCdkRow.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/sticky-styler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n * @type {?}\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nclass StickyStyler {\n    /**\n     * @param {?} _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param {?} _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser = true) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (let i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        const hasStickyColumns = stickyStartStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state)) || stickyEndStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state));\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const firstRow = rows[0];\n        /** @type {?} */\n        const numCells = firstRow.children.length;\n        /** @type {?} */\n        const cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        const isRtl = this.direction === 'rtl';\n        for (const row of rows) {\n            for (let i = 0; i < numCells; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on.\n        /** @type {?} */\n        const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        let stickyHeight = 0;\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            const row = rows[rowIndex];\n            if (this._isNativeHtmlTable) {\n                for (let j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    const cell = (/** @type {?} */ (row.children[j]));\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        const tfoot = (/** @type {?} */ (tableElement.querySelector('tfoot')));\n        if (stickyStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => !state))) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        /** @type {?} */\n        const hasDirection = STICKY_DIRECTIONS.some((/**\n         * @param {?} dir\n         * @return {?}\n         */\n        dir => !!element.style[dir]));\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this._stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    _getCalculatedZIndex(element) {\n        /** @type {?} */\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of (/** @type {?} */ (STICKY_DIRECTIONS))) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    _getCellWidths(row) {\n        /** @type {?} */\n        const cellWidths = [];\n        /** @type {?} */\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            let cell = (/** @type {?} */ (firstRowCells[i]));\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    StickyStyler.prototype._isNativeHtmlTable;\n    /**\n     * @type {?}\n     * @private\n     */\n    StickyStyler.prototype._stickCellCss;\n    /** @type {?} */\n    StickyStyler.prototype.direction;\n    /**\n     * @type {?}\n     * @private\n     */\n    StickyStyler.prototype._isBrowser;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/table-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/table.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interface used to provide an outlet for rows to be inserted into.\n * @record\n */\nfunction RowOutlet() { }\nif (false) {\n    /** @type {?} */\n    RowOutlet.prototype.viewContainer;\n}\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nclass DataRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[rowOutlet]' },] }\n];\n/** @nocollapse */\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\nif (false) {\n    /** @type {?} */\n    DataRowOutlet.prototype.viewContainer;\n    /** @type {?} */\n    DataRowOutlet.prototype.elementRef;\n}\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nclass HeaderRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[headerRowOutlet]' },] }\n];\n/** @nocollapse */\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\nif (false) {\n    /** @type {?} */\n    HeaderRowOutlet.prototype.viewContainer;\n    /** @type {?} */\n    HeaderRowOutlet.prototype.elementRef;\n}\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nclass FooterRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[footerRowOutlet]' },] }\n];\n/** @nocollapse */\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\nif (false) {\n    /** @type {?} */\n    FooterRowOutlet.prototype.viewContainer;\n    /** @type {?} */\n    FooterRowOutlet.prototype.elementRef;\n}\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Interface used to conveniently type the possible context interfaces for the render row.\n * \\@docs-private\n * @record\n * @template T\n */\nfunction RowContext() { }\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * \\@docs-private\n * @abstract\n * @template T\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * Set of properties that represents the identity of a single rendered row.\n *\n * When the table needs to determine the list of rows to render, it will do so by iterating through\n * each data object and evaluating its list of row templates to display (when multiTemplateDataRows\n * is false, there is only one template per data object). For each pair of data object and row\n * template, a `RenderRow` is added to the list of rows to render. If the data object and row\n * template pair has already been rendered, the previously used `RenderRow` is added; else a new\n * `RenderRow` is * created. Once the list is complete and all data objects have been itereated\n * through, a diff is performed to determine the changes that need to be made to the rendered rows.\n *\n * \\@docs-private\n * @record\n * @template T\n */\nfunction RenderRow() { }\nif (false) {\n    /** @type {?} */\n    RenderRow.prototype.data;\n    /** @type {?} */\n    RenderRow.prototype.dataIndex;\n    /** @type {?} */\n    RenderRow.prototype.rowDef;\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nclass CdkTable {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} role\n     * @param {?} _dir\n     * @param {?} _document\n     * @param {?} _platform\n     */\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * \\@docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @return {?}\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set trackBy(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function' && (/** @type {?} */ (console)) &&\n            (/** @type {?} */ (console.warn))) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     * @return {?}\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     * @return {?}\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((/**\n         * @param {?} _i\n         * @param {?} dataRow\n         * @return {?}\n         */\n        (_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} prevIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, prevIndex, currentIndex) => {\n            if (record.previousIndex == null) {\n                this._insertRow(record.item, (/** @type {?} */ (currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                const view = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (prevIndex)))));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const rowView = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (record.currentIndex)))));\n            rowView.context.$implicit = record.item.data;\n        }));\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    setHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    setFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyHeaderRowStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._headerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyFooterRowStyles() {\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._footerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    updateStickyColumnStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((/**\n         * @param {?} headerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        }));\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            // Collect all the rows rendered with this row definition.\n            /** @type {?} */\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        }));\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((/**\n         * @param {?} footerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        }));\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    _getAllRenderRows() {\n        /** @type {?} */\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        /** @type {?} */\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            let data = this._data[i];\n            /** @type {?} */\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                let renderRow = renderRowsForData[j];\n                /** @type {?} */\n                const cache = (/** @type {?} */ (this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    (/** @type {?} */ (cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        /** @type {?} */\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            /** @type {?} */\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? (/** @type {?} */ (cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                const dataRow = (/** @type {?} */ (cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        }));\n    }\n    /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => {\n            if (this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        }));\n    }\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        /** @type {?} */\n        const defaultRowDefs = this._rowDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    _renderUpdatedColumns() {\n        /** @type {?} */\n        const columnsDiffReducer = (/**\n         * @param {?} acc\n         * @param {?} def\n         * @return {?}\n         */\n        (acc, def) => acc || !!def.getColumnsDiff());\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data || [];\n            this.renderRows();\n        }));\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._headerRowOutlet, def, i)));\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._footerRowOutlet, def, i)));\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _addStickyColumnStyles(rows, rowDef) {\n        /** @type {?} */\n        const columnDefs = Array.from(rowDef.columns || []).map((/**\n         * @param {?} columnName\n         * @return {?}\n         */\n        columnName => {\n            /** @type {?} */\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return (/** @type {?} */ (columnDef));\n        }));\n        /** @type {?} */\n        const stickyStartStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.sticky));\n        /** @type {?} */\n        const stickyEndStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.stickyEnd));\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    _getRenderedRows(rowOutlet) {\n        /** @type {?} */\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            const viewRef = ((/** @type {?} */ ((/** @type {?} */ (rowOutlet.viewContainer.get(i))))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => !def.when || def.when(dataIndex, data)));\n        }\n        else {\n            /** @type {?} */\n            let rowDef = this._rowDefs.find((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => def.when && def.when(dataIndex, data))) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    _insertRow(renderRow, renderIndex) {\n        /** @type {?} */\n        const rowDef = renderRow.rowDef;\n        /** @type {?} */\n        const context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    _updateRowIndexContext() {\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (viewContainer.get(renderIndex)));\n            /** @type {?} */\n            const context = (/** @type {?} */ (viewRef.context));\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, (/**\n         * @param {?} columnId\n         * @return {?}\n         */\n        columnId => {\n            /** @type {?} */\n            const column = this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        }));\n    }\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    _applyNativeTableSections() {\n        /** @type {?} */\n        const documentFragment = this._document.createDocumentFragment();\n        /** @type {?} */\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (const section of sections) {\n            /** @type {?} */\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    _checkStickyStates() {\n        /** @type {?} */\n        const stickyCheckReducer = (/**\n         * @param {?} acc\n         * @param {?} d\n         * @return {?}\n         */\n        (acc, d) => {\n            return acc || d.hasStickyChanged();\n        });\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    _setupStickyStyler() {\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        }));\n    }\n    /**\n     * Filters definitions that belong to this table from a QueryList.\n     * @private\n     * @template I\n     * @param {?} items\n     * @return {?}\n     */\n    _getOwnDefs(items) {\n        return items.filter((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => !item._table || item._table === this));\n    }\n}\nCdkTable.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table',\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CDK_TABLE, useExisting: CdkTable }]\n            }] }\n];\n/** @nocollapse */\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef, { descendants: true },] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef, {\n                    descendants: true\n                },] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef, {\n                    descendants: true\n                },] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkTable.ngAcceptInputType_multiTemplateDataRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._document;\n    /**\n     * Latest data provided by the data source.\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._data;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._onDestroy;\n    /**\n     * List of the rendered rows as identified by their `RenderRow` object.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._renderRows;\n    /**\n     * Subscription that listens for the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._renderChangeSubscription;\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._columnDefsByName;\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._rowDefs;\n    /**\n     * Set of all header row definitions that can be used by this table. Populated by the rows\n     * gathered by using `ContentChildren` as well as any custom row definitions added to\n     * `_customHeaderRowDefs`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._headerRowDefs;\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to\n     * `_customFooterRowDefs`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._footerRowDefs;\n    /**\n     * Differ used to find the changes in the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._dataDiffer;\n    /**\n     * Stores the row definition that does not have a when predicate.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._defaultRowDef;\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._customColumnDefs;\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._customRowDefs;\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._customHeaderRowDefs;\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._customFooterRowDefs;\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._headerRowDefChanged;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._footerRowDefChanged;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._cachedRenderRowsMap;\n    /**\n     * Whether the table is applied to a native `<table>`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._isNativeHtmlTable;\n    /**\n     * Utility class that is responsible for applying the appropriate sticky positioning styles to\n     * the table's rows and cells.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._stickyStyler;\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n     * table subclasses.\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype.stickyCssClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._trackByFn;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._dataSource;\n    /** @type {?} */\n    CdkTable.prototype._multiTemplateDataRows;\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkTable.prototype.viewChange;\n    /** @type {?} */\n    CdkTable.prototype._rowOutlet;\n    /** @type {?} */\n    CdkTable.prototype._headerRowOutlet;\n    /** @type {?} */\n    CdkTable.prototype._footerRowOutlet;\n    /**\n     * The column definitions provided by the user that contain what the header, data, and footer\n     * cells should render for each column.\n     * @type {?}\n     */\n    CdkTable.prototype._contentColumnDefs;\n    /**\n     * Set of data row definitions that were provided to the table as content children.\n     * @type {?}\n     */\n    CdkTable.prototype._contentRowDefs;\n    /**\n     * Set of header row definitions that were provided to the table as content children.\n     * @type {?}\n     */\n    CdkTable.prototype._contentHeaderRowDefs;\n    /**\n     * Set of footer row definitions that were provided to the table as content children.\n     * @type {?}\n     */\n    CdkTable.prototype._contentFooterRowDefs;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._differs;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._platform;\n}\n/**\n * Utility function that gets a merged list of the entries in an array and values of a Set.\n * @template T\n * @param {?} array\n * @param {?} set\n * @return {?}\n */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/text-column.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass CdkTextColumn {\n    /**\n     * @param {?} _table\n     * @param {?} _options\n     */\n    constructor(_table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /**\n         * Alignment of the cell values.\n         */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /**\n     * Column name that should be used to reference this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((/**\n                 * @param {?} data\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (data, name) => ((/** @type {?} */ (data)))[name]));\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     * @return {?}\n     */\n    _createDefaultHeaderText() {\n        /** @type {?} */\n        const name = this.name;\n        if (isDevMode() && !name) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /**\n     * Synchronizes the column definition name with the text column name.\n     * @private\n     * @return {?}\n     */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }] }\n];\n/** @nocollapse */\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkTextColumn.prototype._name;\n    /**\n     * Text label that should be used for the column header. If this property is not\n     * set, the header text will default to the column name with its first letter capitalized.\n     * @type {?}\n     */\n    CdkTextColumn.prototype.headerText;\n    /**\n     * Accessor function to retrieve the data rendered for each cell. If this\n     * property is not set, the data cells will render the value found in the data's property matching\n     * the column's name. For example, if the column is named `id`, then the rendered value will be\n     * value defined by the data's `id` property.\n     * @type {?}\n     */\n    CdkTextColumn.prototype.dataAccessor;\n    /**\n     * Alignment of the cell values.\n     * @type {?}\n     */\n    CdkTextColumn.prototype.justify;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkTextColumn.prototype.columnDef;\n    /**\n     * The column cell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkTextColumn.prototype.cell;\n    /**\n     * The column headerCell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkTextColumn.prototype.headerCell;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextColumn.prototype._table;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextColumn.prototype._options;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/table-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n];\nclass CdkTableModule {\n}\nCdkTableModule.decorators = [\n    { type: NgModule, args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, STICKY_DIRECTIONS, StickyStyler, TEXT_COLUMN_OPTIONS, mixinHasStickyInput };\n//# sourceMappingURL=table.js.map\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { TableComponent } from './table.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TableComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TableRoutingModule { }\n","<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" tsVerticalSpacing>\n  <div style=\"font-size: 12px;\">\n    <p>\n      To get around GitHub rate limiting, we cache response data by default.\n      <br>\n      Clear cached data and/or disable below.\n    </p>\n\n    <div>\n      <label style=\"margin-right: 1rem;\">\n        Use cached data:\n        <input type=\"checkbox\" [(ngModel)]=\"useCachedData\">\n      </label>\n\n      <button (click)=\"clearCachedData()\">Clear cached GitHub data</button>\n    </div>\n\n    <div>\n      <label>\n        Table density:\n        <select name=\"density\" id=\"density\" [(ngModel)]=\"density\">\n          <option value=\"comfy\">Comfy</option>\n          <option value=\"compact\">Compact</option>\n        </select>\n      </label>\n    </div>\n  </div>\n\n  <span fxFlex></span>\n\n  <ts-menu [menuItemsTemplate]=\"columns\" theme=\"accent\">\n    <ts-icon svgIcon=\"table_large_plus\"></ts-icon>\n    Edit Columns\n  </ts-menu>\n\n  <ng-template #columns>\n    <form\n      [formGroup]=\"columnsForm\"\n      cdkDropList\n      cdkDropListLockAxis=\"y\"\n      (cdkDropListDropped)=\"columnDropped($event)\"\n    >\n      <ng-container *ngFor=\"let column of allPossibleColumns\">\n        <!-- The menu normally closes after each interaction, so we need to stop propagation here to\n        support multiple selections while open -->\n        <ts-checkbox\n          [formControl]=\"column.control\"\n          (click)=\"$event.stopPropagation()\"\n          theme=\"accent\"\n          cdkDrag\n        >\n          <span>\n            {{ column.display }}\n          </span>\n\n          <!-- Stop drag interactions from affecting the checkbox status -->\n          <ts-icon\n            cdkDragHandle\n            (click)=\"$event.preventDefault() && $event.stopPropagation()\"\n          >drag_indicator</ts-icon>\n\n          <div *cdkDragPlaceholder></div>\n        </ts-checkbox>\n      </ng-container>\n    </form>\n  </ng-template>\n</div>\n\n\n<div class=\"example-container\">\n  <table\n    ts-table\n    [density]=\"density\"\n    [dataSource]=\"dataSource\"\n    [columns]=\"visibleColumns\"\n    (columnsChange)=\"columnsChange($event)\"\n    tsSort\n    tsVerticalSpacing\n    [trackBy]=\"trackBy\"\n    #myTable=\"tsTable\"\n  >\n\n    <ng-container tsColumnDef=\"title\" sticky>\n      <th ts-header-cell *tsHeaderCellDef>Title</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.title }}</td>\n      <td ts-footer-cell *tsFooterCellDef>TEST footer content</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"updated\" alignment=\"right\">\n      <th ts-header-cell *tsHeaderCellDef ts-sort-header>Updated</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.updated_at | date:\"shortDate\" }}</td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"comments\" alignment=\"right\">\n      <th ts-header-cell *tsHeaderCellDef>Comments</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.comments }}</td>\n      <td ts-footer-cell *matfootercelldef>427</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"assignee\">\n      <th ts-header-cell *tsHeaderCellDef ts-sort-header>Assignee</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.login }}</td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"number\" alignment=\"right\">\n      <th ts-header-cell *tsHeaderCellDef ts-sort-header>Number</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.number }}</td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"labels\">\n      <th ts-header-cell *tsHeaderCellDef>Labels</th>\n      <td ts-cell *tsCellDef=\"let item\">\n        <span *ngFor=\"let l of item.labels\">{{ l.name }},</span>\n      </td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"created\">\n      <th ts-header-cell *tsHeaderCellDef ts-sort-header>Created</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.created_at | date:\"shortDate\" }}</td>\n      <td ts-footer-cell *tsFooterCellDef>{{ latestCreationDate }}</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"body\">\n      <th ts-header-cell *tsHeaderCellDef>\n        Body\n      </th>\n      <td ts-cell *tsCellDef=\"let item\">\n        <span class=\"truncate\" [innerHTML]=\"sanitize(item.body)\"></span>\n      </td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"state\">\n      <th ts-header-cell *tsHeaderCellDef>State</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.state }}</td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"id\" alignment=\"right\">\n      <th ts-header-cell *tsHeaderCellDef>ID</th>\n      <td ts-cell *tsCellDef=\"let item\">{{ item.id }}</td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <ng-container tsColumnDef=\"html_url\">\n      <th ts-header-cell *tsHeaderCellDef>View</th>\n      <td ts-cell *tsCellDef=\"let item\">\n        <a href=\"{{ item.html_url }}\">\n          <ts-icon theme=\"accent\">open_in_new</ts-icon>\n        </a>\n      </td>\n      <td ts-footer-cell *tsFooterCellDef>-</td>\n    </ng-container>\n\n    <tr ts-header-row *tsHeaderRowDef=\"myTable.columnNames; sticky: true\"></tr>\n    <tr ts-row *tsRowDef=\"let row; columns: myTable.columnNames;\"></tr>\n    <tr ts-footer-row *tsFooterRowDef=\"myTable.columnNames; sticky: true\"></tr>\n  </table>\n</div>\n\n<div fxLayout=\"row\" fxLayoutAlign=\"end start\">\n  <ts-paginator\n    [totalRecords]=\"resultsLength\"\n    recordCountTooHighMessage=\"Please refine your filters.\"\n    (pageSelect)=\"onPageSelect($event)\"\n    (recordsPerPageChange)=\"perPageChange($event)\"\n  ></ts-paginator>\n</div>\n\n<div>\n  <button (click)=\"log()\">Log column definitions</button>\n</div>\n","import {\n  CdkDragDrop,\n  moveItemInArray,\n} from '@angular/cdk/drag-drop';\nimport { HttpClient } from '@angular/common/http';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n} from '@angular/forms';\nimport {\n  DomSanitizer,\n  SafeHtml,\n} from '@angular/platform-browser';\nimport {\n  merge,\n  Observable,\n  of,\n} from 'rxjs';\nimport {\n  catchError,\n  map,\n  startWith,\n  switchMap,\n} from 'rxjs/operators';\n\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\nimport {\n  TsPaginatorComponent,\n  TsPaginatorMenuItem,\n} from '@terminus/ui-paginator';\nimport { TsSortDirective } from '@terminus/ui-sort';\nimport {\n  TsColumn,\n  TsTableColumnsChangeEvent,\n  TsTableComponent,\n  TsTableDataSource,\n  TsTableDensity,\n} from '@terminus/ui-table';\n\n/**\n * Extend the TsColumn interface with properties our component needs\n */\nexport interface CustomColumn extends TsColumn {\n  // The UI text for the column dropdown\n  display: string;\n  // The associated FormControl\n  control: FormControl;\n  // The column name\n  name: string;\n  // The column width\n  width: number;\n}\n\nexport interface GithubApi {\n  items: GithubIssue[];\n  // NOTE: Format controlled by GitHub\n  // eslint-disable-next-line camelcase\n  total_count: number;\n}\n\nexport interface GithubIssue {\n  // NOTE: Format controlled by GitHub\n  // eslint-disable-next-line camelcase\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n  comments: string;\n}\n\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleHttpDao {\n  constructor(private http: HttpClient) {}\n\n  public getRepoIssues(sort: string, order: string, page: number, perPage: number): Observable<GithubApi> {\n    console.log('Hitting the GitHub API');\n    const href = `https://api.github.com/search/issues`;\n    const requestUrl = `${href}?q=repo:GetTerminus/terminus-ui`;\n    const requestParams = `&sort=${sort}&order=${order}&page=${page + 1}&per_page=${perPage}`;\n    return this.http.get<GithubApi>(`${requestUrl}${requestParams}`);\n  }\n}\n\n\n@Component({\n  selector: 'demo-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n})\nexport class TableComponent implements OnInit, AfterViewInit, OnDestroy {\n  private readonly columnsSource: CustomColumn[] = [\n    {\n      display: 'Title',\n      name: 'title',\n      width: 300,\n      control: new FormControl(true),\n    },\n    {\n      display: 'Comments',\n      name: 'comments',\n      width: 100,\n      control: new FormControl(false),\n    },\n    {\n      display: 'Number',\n      name: 'number',\n      width: 100,\n      control: new FormControl(true),\n    },\n    {\n      display: 'Updated',\n      name: 'updated',\n      width: 200,\n      control: new FormControl(true),\n    },\n    {\n      display: 'State',\n      name: 'state',\n      width: 100,\n      control: new FormControl(false),\n    },\n    {\n      display: 'Labels',\n      name: 'labels',\n      width: 200,\n      control: new FormControl(true),\n    },\n    // {\n    //   display: 'Body',\n    //   name: 'body',\n    //   width: '260px',\n    //   control: new FormControl(true),\n    // },\n    {\n      display: 'Assignee',\n      name: 'assignee',\n      width: 200,\n      control: new FormControl(false),\n    },\n    {\n      display: 'ID',\n      name: 'id',\n      width: 100,\n      control: new FormControl(true),\n    },\n    {\n      display: 'Created',\n      name: 'created',\n      width: 100,\n      control: new FormControl(false),\n    },\n    {\n      display: 'View',\n      name: 'html_url',\n      width: 100,\n      control: new FormControl(true),\n    },\n  ];\n  public savedResponse: GithubApi | null = null;\n  public useCachedData = true;\n  public allPossibleColumns: CustomColumn[] = this.columnsSource.slice();\n  public columnsForm = this.formBuilder.group({});\n  public exampleDatabase!: ExampleHttpDao;\n  public dataSource = new TsTableDataSource<GithubIssue>();\n  public resultsLength = 0;\n  public density: TsTableDensity = 'comfy';\n  public visibleColumns: TsColumn[] = [];\n  public allFormControlChanges$ = merge(...this.allPossibleColumns.map(c => c.control && c.control.valueChanges));\n  public latestCreationDate = new Date(2020, 2, 23);\n\n  @ViewChild(TsSortDirective, { static: true })\n  public sort!: TsSortDirective;\n\n  @ViewChild(TsPaginatorComponent, { static: true })\n  public readonly paginator!: TsPaginatorComponent;\n\n  @ViewChild('myTable', { static: false })\n  public readonly myTable!: TsTableComponent;\n\n\n  constructor(\n    private domSanitizer: DomSanitizer,\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private changeDetectorRef: ChangeDetectorRef,\n  ) {}\n\n  public ngOnInit(): void {\n    this.setVisibleColumns();\n  }\n\n  public ngAfterViewInit(): void {\n    this.setUpTable();\n\n    this.allFormControlChanges$.pipe(untilComponentDestroyed(this)).subscribe(change => {\n      this.setVisibleColumns();\n    });\n  }\n\n  // NOTE: Needed for untilComponentDestroyed\n  public ngOnDestroy(): void {}\n\n  public setVisibleColumns(): void {\n    this.visibleColumns = this.allPossibleColumns.filter(c => c.control && c.control.value);\n    console.log('DEMO: setVisibleColumns', this.visibleColumns);\n  }\n\n  /**\n   * Set up the database, sorting and API calls\n   */\n  public setUpTable(): void {\n    this.exampleDatabase = new ExampleHttpDao(this.http);\n\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => {\n      this.paginator.currentPageIndex = 0;\n    });\n\n    // Fetch new data anytime the sort is changed, the page is changed, or the records shown per\n    // page is changed\n    merge(this.sort.sortChange, this.paginator.pageSelect, this.paginator.recordsPerPageChange)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          if (this.useCachedData && this.savedResponse && this.savedResponse.items) {\n            return of(this.savedResponse);\n          }\n\n          return this.exampleDatabase.getRepoIssues(\n            this.sort.active,\n            this.sort.direction,\n            this.paginator.currentPageIndex,\n            this.paginator.recordsPerPage,\n          );\n        }),\n        map(data => {\n          // console.log('Demo: fetched data: ', data);\n          this.savedResponse = data;\n          this.resultsLength = data.total_count;\n\n          return data.items;\n        }),\n        catchError(() => {\n          console.warn('GitHub API rate limit has been reached!');\n          return of([]);\n        }),\n      ).subscribe(data => {\n        this.dataSource.data = data;\n      });\n  }\n\n  public clearCachedData(): void {\n    this.savedResponse = null;\n  }\n\n  /**\n   * Sanitize HTML content before injecting it\n   *\n   * @param content - The HTML to sanitize\n   * @returns The safe HTML\n   */\n  public sanitize(content): SafeHtml {\n    return this.domSanitizer.bypassSecurityTrustHtml(content);\n  }\n\n  /**\n   * Reorder columns list when a list item is dropped\n   *\n   * @param event - The drop event\n   */\n  public columnDropped(event: CdkDragDrop<string[]>): void {\n    const columns = this.allPossibleColumns.slice();\n    moveItemInArray(columns, event.previousIndex, event.currentIndex);\n\n    this.allPossibleColumns = columns;\n    this.setVisibleColumns();\n    this.changeDetectorRef.detectChanges();\n  }\n\n  public trackBy(index: number, item: GithubIssue): string {\n    return item.number;\n  }\n\n\n  // Log functions for Demo purposes\n\n  public perPageChange(e: number): void {\n    console.log('DEMO: Records per page changed: ', e);\n  }\n\n  public onPageSelect(e: TsPaginatorMenuItem): void {\n    console.log('DEMO: Page selected: ', e);\n  }\n\n  public columnsChange(e: TsTableColumnsChangeEvent): void {\n    // NOTE: Commented out due to the volume - uncomment as needed for demo purposes.\n    console.log('DEMO: Columns change: ', e);\n  }\n\n  public log() {\n    console.log('Demo: columns: ', this.myTable.columns);\n  }\n\n}\n","import { DragDropModule } from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsCheckboxModule } from '@terminus/ui-checkbox';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { TsMenuModule } from '@terminus/ui-menu';\nimport { TsOptionModule } from '@terminus/ui-option';\nimport { TsPaginatorModule } from '@terminus/ui-paginator';\nimport { TsSelectModule } from '@terminus/ui-select';\nimport { TsSortModule } from '@terminus/ui-sort';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\nimport { TsTableModule } from '@terminus/ui-table';\n\nimport { TableRoutingModule } from './table-routing.module';\nimport { TableComponent } from './table.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DragDropModule,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TableRoutingModule,\n    TsCardModule,\n    TsCheckboxModule,\n    TsIconModule,\n    TsMenuModule,\n    TsOptionModule,\n    TsPaginatorModule,\n    TsSelectModule,\n    TsSortModule,\n    TsSpacingModule,\n    TsTableModule,\n  ],\n  declarations: [\n    TableComponent,\n  ],\n})\nexport class TableModule {}\n"],"sourceRoot":"webpack:///"}