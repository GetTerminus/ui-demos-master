{"version":3,"sources":["webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/loading-overlay/fesm2015/terminus-ui-loading-overlay.js","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/loading-overlay/terminus-ui-loading-overlay.d.ts.TsLoadingOverlayComponent.html","webpack:///src/app/components/loading-overlay/loading-overlay-routing.module.ts","webpack:///src/app/components/loading-overlay/loading-overlay.component.html","webpack:///src/app/components/loading-overlay/loading-overlay.component.ts","webpack:///src/app/components/loading-overlay/loading-overlay.module.ts"],"names":["TsLoadingOverlayComponent","selector","host","template","changeDetection","OnPush","encapsulation","None","exportAs","styles","TsLoadingOverlayDirective","elementRef","windowService","componentFactoryResolver","appRef","injector","bodyPortalHost","nativeElement","loadingOverlayPortal","position","nativeWindow","getComputedStyle","getPropertyValue","determinePosition","dispose","value","shouldSet","hasAttached","attach","detach","ctorParameters","type","Boolean","prototype","String","TsLoadingOverlayModule","imports","declarations","entryComponents","exports","routes","path","component","LoadingOverlayRoutingModule","LoadingOverlayComponent","isLoading","LoadingOverlayModule"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAMA;;;;;;;;AAMA,QAAIA,yBAAyB;AAAA;AAAA,KAA7B;;AAEAA,6BAAyB,GAAG,yDAAW,CACnC,gEAAU;AACNC,cAAQ,EAAE,oBADJ;AAENC,UAAI,EAAE;AAAE,iBAAO;AAAT,OAFA;AAGNC,cAAQ,EAAE,maAHJ;AAINC,qBAAe,EAAE,sEAAwBC,MAJnC;AAKNC,mBAAa,EAAE,gEAAkBC,IAL3B;AAMNC,cAAQ,EAAE,kBANJ;AAONC,YAAM,EAAE,CAAC,+3EAAD;AAPF,KAAV,CADmC,CAAX,EAUzBT,yBAVyB,CAA5B;AAYA;;;;;;;;;;AASA,QAAIU,yBAAyB;AACzB,yCAAYC,UAAZ,EAAwBC,aAAxB,EAAuCC,wBAAvC,EAAiEC,MAAjE,EAAyEC,QAAzE,EAAmF;AAAA;;AAC/E,aAAKJ,UAAL,GAAkBA,UAAlB;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,wBAAL,GAAgCA,wBAAhC;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,QAAL,GAAgBA,QAAhB,CAL+E,CAM/E;;AACA,aAAKC,cAAL,GAAsB,IAAI,mEAAJ,CAAoB,KAAKL,UAAL,CAAgBM,aAApC,EAAmD,KAAKJ,wBAAxD,EAAkF,KAAKC,MAAvF,EAA+F,KAAKC,QAApG,CAAtB,CAP+E,CAQ/E;;AACA,aAAKG,oBAAL,GAA4B,IAAI,mEAAJ,CAAoBlB,yBAApB,CAA5B;AACH;AACD;;;;;;;AAZyB;AAAA;;AA0BzB;;;AA1ByB,mCA6Bd;AACP;AACA,cAAMmB,QAAQ,GAAG,KAAKP,aAAL,CAAmBQ,YAAnB,CAAgCC,gBAAhC,CAAiD,KAAKV,UAAL,CAAgBM,aAAjE,EAAgFK,gBAAhF,CAAiG,UAAjG,CAAjB;AACA,eAAKH,QAAL,GAAgB,KAAKI,iBAAL,CAAuBJ,QAAvB,CAAhB;AACH;AACD;;;;AAlCyB;AAAA;AAAA,sCAqCX;AACV,cAAI,KAAKH,cAAT,EAAyB;AACrB,iBAAKA,cAAL,CAAoBQ,OAApB;AACH;AACJ;AACD;;;;;;;AA1CyB;AAAA;AAAA,0CAgDPL,QAhDO,EAgDG;AACxB,iBAAQA,QAAQ,KAAK,UAAb,IAA2BA,QAAQ,KAAK,UAAzC,GAAuDA,QAAvD,GAAkE,UAAzE;AACH;AAlDwB;AAAA;AAAA,0BAiBJM,KAjBI,EAiBG;AACxB,cAAMC,SAAS,GAAGD,KAAK,IAAK,KAAKT,cAAL,IAAuB,CAAC,KAAKA,cAAL,CAAoBW,WAApB,EAApD;;AACA,cAAID,SAAJ,EAAe;AACX,iBAAKV,cAAL,CAAoBY,MAApB,CAA2B,KAAKV,oBAAhC;AACH,WAFD,MAGK;AACD,iBAAKF,cAAL,CAAoBa,MAApB;AACH;AACJ;AAzBwB;;AAAA;AAAA,OAA7B;;AAoDAnB,6BAAyB,CAACoB,cAA1B,GAA2C;AAAA,aAAM,CAC7C;AAAEC,YAAI,EAAE;AAAR,OAD6C,EAE7C;AAAEA,YAAI,EAAE;AAAR,OAF6C,EAG7C;AAAEA,YAAI,EAAE;AAAR,OAH6C,EAI7C;AAAEA,YAAI,EAAE;AAAR,OAJ6C,EAK7C;AAAEA,YAAI,EAAE;AAAR,OAL6C,CAAN;AAAA,KAA3C;;AAOA,6DAAW,CACP,6DADO,EAEP,yDAAW,aAAX,EAA0BC,OAA1B,CAFO,EAGP,yDAAW,mBAAX,EAAgC,CAACA,OAAD,CAAhC,CAHO,CAAX,EAIGtB,yBAAyB,CAACuB,SAJ7B,EAIwC,kBAJxC,EAI4D,IAJ5D;AAKA,6DAAW,CACP,kEAAY,gBAAZ,CADO,EAEP,yDAAW,aAAX,EAA0BC,MAA1B,CAFO,CAAX,EAGGxB,yBAAyB,CAACuB,SAH7B,EAGwC,UAHxC,EAGoD,KAAK,CAHzD;AAIAvB,6BAAyB,GAAG,yDAAW,CACnC,gEAAU;AAAET,cAAQ,EAAE;AAAZ,KAAV,CADmC,EAEnC,yDAAW,mBAAX,EAAgC,CAAC,wDAAD,EAC5B,2EAD4B,EAE5B,sEAF4B,EAG5B,4DAH4B,EAI5B,sDAJ4B,CAAhC,CAFmC,CAAX,EAOzBS,yBAPyB,CAA5B;;AASA,QAAIyB,sBAAsB;AAAA;AAAA,KAA1B;;AAEAA,0BAAsB,GAAG,yDAAW,CAChC,+DAAS;AACLC,aAAO,EAAE,CAAC,4DAAD,CADJ;AAELC,kBAAY,EAAE,CACVrC,yBADU,EAEVU,yBAFU,CAFT;AAML4B,qBAAe,EAAE,CAACtC,yBAAD,CANZ;AAOLuC,aAAO,EAAE,CAAC7B,yBAAD;AAPJ,KAAT,CADgC,CAAX,EAUtByB,sBAVsB,CAAzB;AAYA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qECnIA,yK,IACE,8Q,IAOE,gQ,IAQC,I,EAAA,I;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACfL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAQA,QAAMK,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE;AAFb,KADqB,CAAvB;;QAWaC,2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qECpBb,gX,GAAA,wJ,EAAA;AAAA;AAAA,c,GACE,mL,GAAA,mO,EAAA;AAAA;AAAA,c,GAAkC,yF,IAIlC,uH,IAAO,iG,IAEL;AAAA;AAAA;;AAAA;;;;;;;;;;AAAuB;;;;;AAAvB;AAAA,oB,GAAA,oR,EAAA;AAAA;AAAA,uF,EAAA;AAAA;AAAA;AAAA;AAAA,Q,EAAA,wL,EAAA,mN,GAKJ,gM,GAAA;AAAA;AAAA,c,GACE,uH,IAAG,wQ,IAKH,uH,IAAG,qO,IAKH,uH,IAAG,wQ,IAKH,uH,IAAG,qO,IAGH;AAAA;AA/BO;;AAAT,sBAAS,SAAT;;AACkB;;AAAhB,sBAAgB,SAAhB;;AAMyB,4BAAuB,UAAvB;;AAAvB,uBAAuB,UAAvB;;AAKC,4BAA8B,UAA9B;;AAAL,uBAAK,UAAL;AAAmC,O,EAAA;AAXjC;;AAAA;;AAME;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAKJ;;AAAA;AAAoF,O;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACLpF;AAAA;;;AAAA;AAAA;AAAA;;QAAaC,uB,GAJb;AAAA;;AAKE,WAAAC,SAAA,GAAY,IAAZ;AACD,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACMD;AAAA;;;AAAA;AAAA;AAAA;;QAAaC,oB","file":"loading-overlay-loading-overlay-module-ngfactory-es5.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, ComponentFactoryResolver, ApplicationRef, Injector, Input, HostBinding, Directive, NgModule } from '@angular/core';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { TsWindowService } from '@terminus/ngx-tools/browser';\n\n/**\n * The loading overlay component. Implemented by {@link TsLoadingOverlayDirective}\n *\n * @example\n * See {@link TsLoadingOverlayDirective}\n */\nlet TsLoadingOverlayComponent = class TsLoadingOverlayComponent {\n};\nTsLoadingOverlayComponent = __decorate([\n    Component({\n        selector: 'ts-loading-overlay',\n        host: { class: 'ts-loading-overlay' },\n        template: \"<div class=\\\"c-loading-overlay qa-loading-overlay\\\">\\n  <svg\\n    class=\\\"c-loading-overlay__spinner\\\"\\n    width=\\\"65px\\\"\\n    height=\\\"65px\\\"\\n    viewBox=\\\"0 0 66 66\\\"\\n    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n  >\\n    <circle\\n      class=\\\"path\\\"\\n      fill=\\\"none\\\"\\n      stroke-width=\\\"6\\\"\\n      stroke-linecap=\\\"round\\\"\\n      cx=\\\"33\\\"\\n      cy=\\\"33\\\"\\n      r=\\\"30\\\"\\n    ></circle>\\n  </svg>\\n</div>\\n\",\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsLoadingOverlay',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}@-webkit-keyframes rotator{0%{transform:rotate(0)}100%{transform:rotate(270deg)}}@keyframes rotator{0%{transform:rotate(0)}100%{transform:rotate(270deg)}}@-webkit-keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;transform:rotate(135deg)}100%{stroke-dashoffset:187;transform:rotate(450deg)}}@keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;transform:rotate(135deg)}100%{stroke-dashoffset:187;transform:rotate(450deg)}}.ts-loading-overlay :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-loading-overlay h1,.ts-loading-overlay h2,.ts-loading-overlay h3,.ts-loading-overlay h4,.ts-loading-overlay h5,.ts-loading-overlay p{margin:unset}.ts-loading-overlay .c-loading-overlay{align-content:center;align-items:center;background-color:rgba(250,250,250,.8);bottom:0;display:flex;justify-content:center;left:0;position:absolute;right:0;top:0;will-change:opacity;z-index:502}.c-loading-overlay--hidden{opacity:0;transition:opacity .2s}.c-loading-overlay__spinner{-webkit-animation:1.4s linear infinite rotator;animation:1.4s linear infinite rotator}.c-loading-overlay .path{-webkit-animation:1.4s ease-in-out infinite dash;animation:1.4s ease-in-out infinite dash;stroke:#00538a;stroke-dasharray:187;stroke-dashoffset:0;transform-origin:center}\"]\n    })\n], TsLoadingOverlayComponent);\n\n/**\n * The tsLoadingOverlay UI Directive.\n * Provides a spinner overlay to demonstrate loading for async data.\n *\n * @example\n * <div [tsLoadingOverlay]=\"true\"></div>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/loading-overlay</example-url>\n */\nlet TsLoadingOverlayDirective = class TsLoadingOverlayDirective {\n    constructor(elementRef, windowService, componentFactoryResolver, appRef, injector) {\n        this.elementRef = elementRef;\n        this.windowService = windowService;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.appRef = appRef;\n        this.injector = injector;\n        // Create the body portal host\n        this.bodyPortalHost = new DomPortalOutlet(this.elementRef.nativeElement, this.componentFactoryResolver, this.appRef, this.injector);\n        // Create the component portal\n        this.loadingOverlayPortal = new ComponentPortal(TsLoadingOverlayComponent);\n    }\n    /**\n     * Define a setter to show/hide the loading overlay\n     *\n     * @param value\n     */\n    set tsLoadingOverlay(value) {\n        const shouldSet = value && (this.bodyPortalHost && !this.bodyPortalHost.hasAttached());\n        if (shouldSet) {\n            this.bodyPortalHost.attach(this.loadingOverlayPortal);\n        }\n        else {\n            this.bodyPortalHost.detach();\n        }\n    }\n    /**\n     * Determine and set the needed position\n     */\n    ngOnInit() {\n        // Determine the CSS position of the element\n        const position = this.windowService.nativeWindow.getComputedStyle(this.elementRef.nativeElement).getPropertyValue('position');\n        this.position = this.determinePosition(position);\n    }\n    /**\n     * Destroy the portal host if it exists\n     */\n    ngOnDestroy() {\n        if (this.bodyPortalHost) {\n            this.bodyPortalHost.dispose();\n        }\n    }\n    /**\n     * Return the correct position\n     *\n     * @param position - The current position value\n     * @returns The correct position value\n     */\n    determinePosition(position) {\n        return (position === 'relative' || position === 'absolute') ? position : 'relative';\n    }\n};\nTsLoadingOverlayDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: TsWindowService },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationRef },\n    { type: Injector }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsLoadingOverlayDirective.prototype, \"tsLoadingOverlay\", null);\n__decorate([\n    HostBinding('style.position'),\n    __metadata(\"design:type\", String)\n], TsLoadingOverlayDirective.prototype, \"position\", void 0);\nTsLoadingOverlayDirective = __decorate([\n    Directive({ selector: '[tsLoadingOverlay]' }),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        TsWindowService,\n        ComponentFactoryResolver,\n        ApplicationRef,\n        Injector])\n], TsLoadingOverlayDirective);\n\nlet TsLoadingOverlayModule = class TsLoadingOverlayModule {\n};\nTsLoadingOverlayModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        declarations: [\n            TsLoadingOverlayComponent,\n            TsLoadingOverlayDirective,\n        ],\n        entryComponents: [TsLoadingOverlayComponent],\n        exports: [TsLoadingOverlayDirective],\n    })\n], TsLoadingOverlayModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsLoadingOverlayComponent, TsLoadingOverlayDirective, TsLoadingOverlayModule };\n//# sourceMappingURL=terminus-ui-loading-overlay.js.map\n","<div class=\"c-loading-overlay qa-loading-overlay\">\n  <svg\n    class=\"c-loading-overlay__spinner\"\n    width=\"65px\"\n    height=\"65px\"\n    viewBox=\"0 0 66 66\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle\n      class=\"path\"\n      fill=\"none\"\n      stroke-width=\"6\"\n      stroke-linecap=\"round\"\n      cx=\"33\"\n      cy=\"33\"\n      r=\"30\"\n    ></circle>\n  </svg>\n</div>\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { LoadingOverlayComponent } from './loading-overlay.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoadingOverlayComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoadingOverlayRoutingModule { }\n","<ts-card tsVerticalSpacing>\n  <h3 tsCardTitle tsVerticalSpacing>\n    Demo Controls\n  </h3>\n\n  <label>\n    Show loading overlay:\n    <input type=\"checkbox\" [(ngModel)]=\"isLoading\">\n  </label>\n</ts-card>\n\n\n<div [tsLoadingOverlay]=\"isLoading\" style=\"border:1px solid lightblue;padding:8px;\">\n  <p>\n    Sed ducimus natus iure quas. Perferendis animi rem dolores nihil. Ut est aliquid maxime quia.\n    Laborum itaque maxime eveniet eveniet minima. Nihil odit repellendus labore sed sed assumenda.\n  </p>\n\n  <p>\n    Odio ut maxime architecto harum. Est voluptas cum ipsum omnis quidem.\n    Molestias provident non veniam id non cumque ut. Qui atque veritatis quia voluptas.\n  </p>\n\n  <p>\n    Sed ducimus natus iure quas. Perferendis animi rem dolores nihil. Ut est aliquid maxime quia.\n    Laborum itaque maxime eveniet eveniet minima. Nihil odit repellendus labore sed sed assumenda.\n  </p>\n\n  <p>\n    Odio ut maxime architecto harum. Est voluptas cum ipsum omnis quidem.\n    Molestias provident non veniam id non cumque ut. Qui atque veritatis quia voluptas.\n  </p>\n</div>\n","import { Component } from '@angular/core';\n\n\n@Component({\n  selector: 'demo-loading-overlay',\n  templateUrl: './loading-overlay.component.html',\n})\nexport class LoadingOverlayComponent {\n  isLoading = true;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsLoadingOverlayModule } from '@terminus/ui-loading-overlay';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\n\nimport { LoadingOverlayRoutingModule } from './loading-overlay-routing.module';\nimport { LoadingOverlayComponent } from './loading-overlay.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, LoadingOverlayRoutingModule, TsCardModule, TsLoadingOverlayModule, TsSpacingModule],\n  declarations: [LoadingOverlayComponent],\n})\nexport class LoadingOverlayModule {}\n"]}