{"version":3,"sources":["/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/login-form/fesm2015/terminus-ui-login-form.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/login-form/terminus-ui-login-form.d.ts.TsLoginFormComponent.html","./src/app/components/login-form/login-form-routing.module.ts","./src/app/components/login-form/login-form.component.html","./src/app/components/login-form/login-form.component.ts","./src/app/components/login-form/login-form.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACA;AACkH;AACzG;AACmC;AACtC;AACyB;AACT;AACpB;AACM;AACO;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0DAAW,MAAM,yDAAU;AAClD,0BAA0B,0DAAW,KAAK,yDAAU;AACpD,4BAA4B,0DAAW;AACvC,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,0DAAW,EAAE;AACzB,KAAK,OAAO,4EAAmB;AAC/B;AACA,wDAAU;AACV,IAAI,kEAAY,CAAC,mEAAgB;AACjC,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,wDAAU;AACV,IAAI,+DAAS,CAAC,yEAAmB,GAAG,eAAe;AACnD,IAAI,wDAAU,gBAAgB,yEAAmB;AACjD;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;A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","file":"login-form-login-form-module-ngfactory-es2015.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, ViewChildren, QueryList, ViewChild, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormControl, Validators, FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { TsButtonModule } from '@terminus/ui-button';\nimport { TsCheckboxComponent, TsCheckboxModule } from '@terminus/ui-checkbox';\nimport { TsInputComponent, TsInputModule } from '@terminus/ui-input';\nimport { TsLinkModule } from '@terminus/ui-link';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\nimport { TsValidatorsService } from '@terminus/ui-validators';\n\n/**\n * This is the login-form UI Component\n *\n * @example\n * <ts-login-form\n *              [inProgress]=\"true\"\n *              [forgotPasswordLink]=\"['my/', 'path']\"\n *              [loginCTA]=\" 'Sign In' \"\n *              [forgotPasswordText]=\" 'Forget something?' \"\n *              (submission)=\"myMethod($event)\"\n * ></ts-login-form>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/login-form</example-url>\n */\nlet TsLoginFormComponent = class TsLoginFormComponent {\n    constructor(formBuilder, validatorsService) {\n        this.formBuilder = formBuilder;\n        this.validatorsService = validatorsService;\n        /**\n         * Define the link to the 'forgot password' view\n         */\n        this.forgotPasswordLink = ['/forgot'];\n        /**\n         * Define the text for the 'forgot password' link\n         */\n        this.forgotPasswordText = 'Forgot your password?';\n        /**\n         * Define if the form button is showing progress\n         */\n        this.inProgress = false;\n        /**\n         * Define if the user has successfully logged in and is being redirected\n         */\n        this.isRedirecting = false;\n        /**\n         * Define the login call to action\n         */\n        this.loginCTA = 'Log In';\n        /**\n         * Allow a consumer to reset the form via an @Input()\n         *\n         * @deprecated Please use the public method `resetForm()`\n         */\n        this.triggerFormReset = false;\n        /**\n         * Emit an event on form submission\n         */\n        this.submission = new EventEmitter();\n        this.loginForm = this.createForm();\n    }\n    /**\n     * Access the email form control\n     */\n    get emailControl() {\n        return this.loginForm.get('email');\n    }\n    /**\n     * Access the password form control\n     */\n    get passwordControl() {\n        return this.loginForm.get('password');\n    }\n    /**\n     * Access the rememberMe form control\n     */\n    get rememberMeControl() {\n        return this.loginForm.get('rememberMe');\n    }\n    /**\n     * Trigger a form reset if `triggerFormReset` is changed to TRUE\n     *\n     * @param changes - The inputs that have changed\n     */\n    ngOnChanges(changes) {\n        if (changes.hasOwnProperty('triggerFormReset') && changes.triggerFormReset.currentValue) {\n            this.resetForm();\n        }\n    }\n    /**\n     * Reset the form state\n     *\n     * HACK: Calling `reset` doesn't reset individual control validators so we also reinitialize the form.\n     */\n    resetForm() {\n        this.loginForm.reset();\n        this.loginForm = this.createForm();\n    }\n    /**\n     * Create the log in form\n     *\n     * @returns The log in FormGroup\n     */\n    createForm() {\n        return this.formBuilder.group({\n            email: new FormControl('', [Validators.required, this.validatorsService.email()]),\n            password: new FormControl('', Validators.required),\n            rememberMe: new FormControl(false),\n        });\n    }\n};\nTsLoginFormComponent.ctorParameters = () => [\n    { type: FormBuilder },\n    { type: TsValidatorsService }\n];\n__decorate([\n    ViewChildren(TsInputComponent),\n    __metadata(\"design:type\", QueryList)\n], TsLoginFormComponent.prototype, \"inputComponents\", void 0);\n__decorate([\n    ViewChild(TsCheckboxComponent, { static: true }),\n    __metadata(\"design:type\", TsCheckboxComponent)\n], TsLoginFormComponent.prototype, \"checkbox\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array)\n], TsLoginFormComponent.prototype, \"forgotPasswordLink\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsLoginFormComponent.prototype, \"forgotPasswordText\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsLoginFormComponent.prototype, \"inProgress\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsLoginFormComponent.prototype, \"isRedirecting\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsLoginFormComponent.prototype, \"loginCTA\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsLoginFormComponent.prototype, \"triggerFormReset\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsLoginFormComponent.prototype, \"submission\", void 0);\nTsLoginFormComponent = __decorate([\n    Component({\n        selector: 'ts-login-form',\n        template: \"<form\\n  class=\\\"c-login-form qa-login-form\\\"\\n  [formGroup]=\\\"loginForm\\\"\\n  fxLayout=\\\"column\\\"\\n  (keydown.enter)=\\\"loginForm?.valid && submission.emit(loginForm?.value)\\\"\\n>\\n\\n  <ts-input\\n    label=\\\"Email\\\"\\n    name=\\\"email\\\"\\n    type=\\\"email\\\"\\n    [formControl]=\\\"emailControl\\\"\\n    [isRequired]=\\\"true\\\"\\n    [spellcheck]=\\\"false\\\"\\n    [autocapitalize]=\\\"false\\\"\\n    autocomplete=\\\"email\\\"\\n    tabindex=\\\"-1\\\"\\n    tabIndex=\\\"1\\\"\\n  ></ts-input>\\n\\n  <ts-input\\n    label=\\\"Password\\\"\\n    name=\\\"password\\\"\\n    type=\\\"password\\\"\\n    [formControl]=\\\"passwordControl\\\"\\n    [isRequired]=\\\"true\\\"\\n    autocomplete=\\\"current-password\\\"\\n    [autocapitalize]=\\\"false\\\"\\n    [spellcheck]=\\\"false\\\"\\n    tabindex=\\\"-1\\\"\\n    tabIndex=\\\"2\\\"\\n  ></ts-input>\\n\\n  <ts-checkbox\\n    [formControl]=\\\"rememberMeControl\\\"\\n    tabindex=\\\"-1\\\"\\n    tabIndex=\\\"3\\\"\\n    tsVerticalSpacing\\n  >\\n    Remember me\\n  </ts-checkbox>\\n\\n  <ts-link\\n    [destination]=\\\"forgotPasswordLink\\\"\\n    tsVerticalSpacing\\n    tabindex=\\\"-1\\\"\\n    tabIndex=\\\"5\\\"\\n  >{{ forgotPasswordText }}</ts-link>\\n\\n  <div fxLayout=\\\"row\\\" fxFlexAlign=\\\"end\\\">\\n    <ts-button\\n      actionName=\\\"Submit\\\"\\n      buttonType=\\\"submit\\\"\\n      [showProgress]=\\\"inProgress || isRedirecting\\\"\\n      [isDisabled]=\\\"!loginForm?.valid\\\"\\n      (clicked)=\\\"submission.emit(loginForm?.value)\\\"\\n      tabindex=\\\"-1\\\"\\n      tabIndex=\\\"4\\\"\\n    >\\n      {{ loginCTA }}\\n    </ts-button>\\n  </div>\\n\\n</form>\\n\",\n        host: { class: 'ts-login-form' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsLoginForm',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-login-form{display:block;width:100%}.ts-login-form :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-login-form h1,.ts-login-form h2,.ts-login-form h3,.ts-login-form h4,.ts-login-form h5,.ts-login-form p{margin:unset}\"]\n    }),\n    __metadata(\"design:paramtypes\", [FormBuilder,\n        TsValidatorsService])\n], TsLoginFormComponent);\n\nlet TsLoginFormModule = class TsLoginFormModule {\n};\nTsLoginFormModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            ReactiveFormsModule,\n            TsButtonModule,\n            TsCheckboxModule,\n            TsInputModule,\n            TsLinkModule,\n            TsSpacingModule,\n        ],\n        providers: [TsValidatorsService],\n        exports: [TsLoginFormComponent],\n        declarations: [TsLoginFormComponent],\n    })\n], TsLoginFormModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsLoginFormComponent, TsLoginFormModule };\n//# sourceMappingURL=terminus-ui-login-form.js.map\n","<form\n  class=\"c-login-form qa-login-form\"\n  [formGroup]=\"loginForm\"\n  fxLayout=\"column\"\n  (keydown.enter)=\"loginForm?.valid && submission.emit(loginForm?.value)\"\n>\n\n  <ts-input\n    label=\"Email\"\n    name=\"email\"\n    type=\"email\"\n    [formControl]=\"emailControl\"\n    [isRequired]=\"true\"\n    [spellcheck]=\"false\"\n    [autocapitalize]=\"false\"\n    autocomplete=\"email\"\n    tabindex=\"-1\"\n    tabIndex=\"1\"\n  ></ts-input>\n\n  <ts-input\n    label=\"Password\"\n    name=\"password\"\n    type=\"password\"\n    [formControl]=\"passwordControl\"\n    [isRequired]=\"true\"\n    autocomplete=\"current-password\"\n    [autocapitalize]=\"false\"\n    [spellcheck]=\"false\"\n    tabindex=\"-1\"\n    tabIndex=\"2\"\n  ></ts-input>\n\n  <ts-checkbox\n    [formControl]=\"rememberMeControl\"\n    tabindex=\"-1\"\n    tabIndex=\"3\"\n    tsVerticalSpacing\n  >\n    Remember me\n  </ts-checkbox>\n\n  <ts-link\n    [destination]=\"forgotPasswordLink\"\n    tsVerticalSpacing\n    tabindex=\"-1\"\n    tabIndex=\"5\"\n  >{{ forgotPasswordText }}</ts-link>\n\n  <div fxLayout=\"row\" fxFlexAlign=\"end\">\n    <ts-button\n      actionName=\"Submit\"\n      buttonType=\"submit\"\n      [showProgress]=\"inProgress || isRedirecting\"\n      [isDisabled]=\"!loginForm?.valid\"\n      (clicked)=\"submission.emit(loginForm?.value)\"\n      tabindex=\"-1\"\n      tabIndex=\"4\"\n    >\n      {{ loginCTA }}\n    </ts-button>\n  </div>\n\n</form>\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { LoginFormComponent } from './login-form.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginFormComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginFormRoutingModule { }\n","<ts-card>\n  <div tsVerticalSpacing>\n    <button (click)=\"resetForm()\">Reset Form</button>\n    <br>\n    <button (click)=\"logForm()\">Log form to console</button>\n  </div>\n\n  <ts-login-form\n    [inProgress]=\"progress\"\n    (submission)=\"formSubmission($event)\"\n    tsVerticalSpacing\n  ></ts-login-form>\n</ts-card>\n","import {\n  Component,\n  ViewChild,\n} from '@angular/core';\n\nimport {\n  TsLoginFormResponse,\n  TsLoginFormComponent,\n} from '@terminus/ui-login-form';\n\n\n@Component({\n  selector: 'demo-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent {\n  public progress = false;\n  public link = '/reset';\n\n  @ViewChild(TsLoginFormComponent, { static: true })\n  loginFormComponent!: TsLoginFormComponent;\n\n  formSubmission(e: TsLoginFormResponse): void {\n    console.warn('DEMO: Form value: ', e);\n    this.progress = true;\n\n    setTimeout(() => {\n      this.resetForm();\n      this.progress = false;\n    }, 1000);\n  }\n\n  resetForm() {\n    console.log('DEMO: Reset form');\n    this.loginFormComponent.resetForm();\n  }\n\n  logForm(): void {\n    console.log('DEMO: Current form state: ', this.loginFormComponent.loginForm);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsLoginFormModule } from '@terminus/ui-login-form';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\n\nimport { LoginFormRoutingModule } from './login-form-routing.module';\nimport { LoginFormComponent } from './login-form.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginFormRoutingModule,\n    TsCardModule,\n    TsLoginFormModule,\n    TsSpacingModule,\n  ],\n  declarations: [\n    LoginFormComponent,\n  ],\n})\nexport class LoginFormModule {}\n"],"sourceRoot":"webpack:///"}