{"version":3,"sources":["webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/csv-entry/fesm2015/terminus-ui-csv-entry.js","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/csv-entry/terminus-ui-csv-entry.d.ts.TsCSVEntryComponent.html","webpack:///src/app/components/csv-entry/csv-entry-routing.module.ts","webpack:///src/app/components/csv-entry/csv-entry.component.html","webpack:///src/app/components/csv-entry/csv-entry.component.ts","webpack:///src/app/components/csv-entry/csv-entry.module.ts"],"names":["TsCSVEntryComponent_1","nextUniqueId","DEFAULT_ROW_COUNT","DEFAULT_COLUMN_COUNT","DEFAULT_MAX_ROWS","DEFAULT_VALIDATION_MESSAGES_MAX","TsCSVEntryComponent","formBuilder","changeDetectorRef","documentService","originalColumnCount","uid","fakeRowHeight","layoutGap","small","tooManyRowsMessage","records","recordsForm","group","headers","array","allErrors","_columnCount","_columnValidators","footerDirection","fullWidth","_id","_maxRows","outputFormat","_rowCount","blobGenerated","addRows","rowCount","columnCount","addHeaders","columnHeaders","valueChanges","pipe","subscribe","v","blob","generateBlob","emit","content","index","rows","length","maxRows","rowsThatDontFit","i","indexToInjectAt","undefined","c","createdRow","createRow","insert","push","row","get","controls","recordId","setValue","event","hasHeader","_a","eventContent","clipboardData","getData","isSingleCell","indexOf","pastedRowId","parseInt","target","id","split","splitContent","neededRows","clearAllRows","clearHeaderCells","pastedColumnCount","numberOfMissingColumns","addColumnsToRows","headerCells","deleteRow","updateAllRowIds","updateErrors","detectChanges","collectErrors","value","dir","deltaX","targetEl","borderSize","scrollRight","form","scrollWidth","offsetWidth","scrollLeft","stopRightScroll","stopLeftScroll","preventDefault","currentCellId","up","rowId","columnId","column","newId","input","document","querySelector","focus","selectCellInNextRow","previous","isFirstColumn","isLastColumn","newColumnNumber","newRowNumber","recordIndex","cellIndex","errors","getFormErrors","Object","keys","map","key","control","filter","el","arr","removeAt","result","getAllErrors","ctrl","grandparentControls","parent","errorKeys","j","errorKey","error","valid","setControl","headerCount","columns","createColumns","count","validator","columnValidators","prefix","join","replace","joined","JSON","stringify","Blob","type","_columnHeaders","messages","errorObj","name","message","maxItemLength","errorItem","actual","slice","columnsToAdd","k","hasHeaders","r","ctorParameters","Number","prototype","Array","String","selector","template","host","changeDetection","OnPush","encapsulation","None","exportAs","styles","TsCSVEntryModule","imports","declarations","exports","routes","path","component","CSVEntryRoutingModule","CSVEntryComponent","validatorsService","validators","required","url","console","log","myFile","File","saveFile","csvComponent","resetTable","filename","window","navigator","msSaveOrOpenBlob","a","createElement","body","appendChild","URL","createObjectURL","href","download","click","setTimeout","revokeObjectURL","removeChild","CSVEntryModule"],"mappings":"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","file":"csv-entry-csv-entry-module-ngfactory-es5.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, ChangeDetectorRef, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormControl, FormGroup, FormArray, FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { TsButtonModule } from '@terminus/ui-button';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { TsIconButtonModule } from '@terminus/ui-icon-button';\nimport { TsTooltipModule } from '@terminus/ui-tooltip';\nimport { debounceTime } from 'rxjs/operators';\nimport { TsDocumentService } from '@terminus/ngx-tools/browser';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@terminus/ngx-tools/coercion';\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\nimport { TS_SPACING } from '@terminus/ui-spacing';\nimport { stripControlCharacters } from '@terminus/ui-utilities';\n\nvar TsCSVEntryComponent_1;\n/**\n * Unique ID for each instance\n */\nlet nextUniqueId = 0;\nconst DEFAULT_ROW_COUNT = 4;\nconst DEFAULT_COLUMN_COUNT = 2;\nconst DEFAULT_MAX_ROWS = 2000;\nconst DEFAULT_VALIDATION_MESSAGES_MAX = 6;\n/**\n * This is the csv-entry UI Component\n *\n * @example\n * <ts-csv-entry\n *              columnCount=\"6\"\n *              [columnHeaders]=\"arrayOfHeaders\"\n *              [columnValidators]=\"arrayOfValidators\"\n *              [footerDirection]=\"ltr\"\n *              [fullWidth]=\"false\"\n *              id=\"my-id\"\n *              maxRows=\"1000\"\n *              rowCount=\"12\"\n *              outputFormat=\"csv\"\n *              (blobGenerated)=\"handleTheFileBlob($event)\"\n * ></ts-csv-entry>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/csv-entry</example-url>\n */\nlet TsCSVEntryComponent = TsCSVEntryComponent_1 = class TsCSVEntryComponent {\n    constructor(formBuilder, changeDetectorRef, documentService) {\n        this.formBuilder = formBuilder;\n        this.changeDetectorRef = changeDetectorRef;\n        this.documentService = documentService;\n        this.originalColumnCount = DEFAULT_COLUMN_COUNT;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-csv-entry-${nextUniqueId++}`;\n        /**\n         * Define the static height needed in the DOM for the external rows\n         */\n        this.fakeRowHeight = '35px';\n        /**\n         * Expose the flexbox layout gap\n         */\n        this.layoutGap = TS_SPACING.small[0];\n        /**\n         * Expose a validation message if too many rows are added\n         */\n        this.tooManyRowsMessage = null;\n        /**\n         * Store records (rows)\n         */\n        this.records = [];\n        /**\n         * Initialize the records form with an empty array\n         */\n        this.recordsForm = this.formBuilder.group({\n            headers: this.formBuilder.array([]),\n            records: this.formBuilder.array([]),\n        });\n        /**\n         * Store a reference to all existing errors\n         */\n        this.allErrors = null;\n        this._columnCount = DEFAULT_COLUMN_COUNT;\n        this._columnValidators = [];\n        /**\n         * Define the layout direction for the footer\n         */\n        this.footerDirection = 'ltr';\n        /**\n         * Allow full-width mode\n         */\n        this.fullWidth = false;\n        this._id = this.uid;\n        this._maxRows = DEFAULT_MAX_ROWS;\n        /**\n         * Define output to be CSV rather than TSV\n         */\n        this.outputFormat = 'tsv';\n        this._rowCount = DEFAULT_ROW_COUNT;\n        /**\n         * Emit the built file blob\n         */\n        this.blobGenerated = new EventEmitter();\n    }\n    /**\n     * Get header cells as a form array\n     */\n    get headerCells() {\n        return this.recordsForm.get('headers');\n    }\n    /**\n     * Get rows as a form array\n     */\n    get rows() {\n        return this.recordsForm.get('records');\n    }\n    /**\n     * Set the number of columns\n     *\n     * @param value\n     */\n    set columnCount(value) {\n        this._columnCount = coerceNumberProperty(value, DEFAULT_COLUMN_COUNT);\n    }\n    get columnCount() {\n        return this._columnCount;\n    }\n    /**\n     * Allow static headers to be set\n     *\n     * @param value\n     */\n    set columnHeaders(value) {\n        this._columnHeaders = value;\n        this.clearHeaderCells();\n        this.addHeaders(this.columnCount, this.columnHeaders);\n    }\n    get columnHeaders() {\n        return this._columnHeaders;\n    }\n    /**\n     * Define any column validators\n     *\n     * @param value\n     */\n    set columnValidators(value) {\n        if (!value) {\n            return;\n        }\n        this._columnValidators = value;\n    }\n    get columnValidators() {\n        return this._columnValidators;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Set the maximum number of allowed rows\n     *\n     * @param value\n     */\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value, DEFAULT_MAX_ROWS);\n    }\n    get maxRows() {\n        return this._maxRows;\n    }\n    /**\n     * Define the number of rows\n     *\n     * @param value\n     */\n    set rowCount(value) {\n        this._rowCount = coerceNumberProperty(value, DEFAULT_ROW_COUNT);\n    }\n    get rowCount() {\n        return this._rowCount;\n    }\n    /**\n     * Add columns to existing rows + header\n     *\n     * @param rows - The existing body rows\n     * @param headerCells - The array of header cells\n     * @param columnsToAdd - The number of columns to add\n     */\n    static addColumnsToRows(rows, headerCells, columnsToAdd) {\n        // Add columns to body rows\n        for (let i = 0; i < rows.length; i += 1) {\n            const row = rows.controls[i];\n            // istanbul ignore else\n            if (row) {\n                const columns = row.controls.columns;\n                for (let j = 0; j < columnsToAdd; j += 1) {\n                    columns.controls.push(new FormControl());\n                }\n            }\n        }\n        // Add columns to header\n        for (let k = 0; k < columnsToAdd; k += 1) {\n            headerCells.controls.push(new FormControl());\n        }\n    }\n    /**\n     * Split pasted data into headers, rows, and columns\n     *\n     * @param content - The event content\n     * @param hasHeaders - Whether the content has a header row\n     * @returns An object containing all data\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static splitContent(content, hasHeaders) {\n        const result = {\n            headers: undefined,\n            rows: undefined,\n        };\n        const rows = content.split('\\n');\n        if (hasHeaders) {\n            result.headers = rows[0].split('\\t');\n            result.rows = rows.slice(1, rows.length).map(r => r.split('\\t'));\n        }\n        else {\n            result.rows = rows.slice(0, rows.length).map(r => r.split('\\t'));\n        }\n        return result;\n    }\n    /**\n     * Initialize empty rows\n     */\n    ngOnInit() {\n        this.addRows(this.rowCount, this.columnCount);\n        this.addHeaders(this.columnCount, this.columnHeaders);\n        this.originalColumnCount = this.columnCount;\n        this.recordsForm.valueChanges.pipe(\n        // Let the form values 'settle' before we emit anything\n        debounceTime(1), untilComponentDestroyed(this)).subscribe(v => {\n            const blob = this.generateBlob(v);\n            this.blobGenerated.emit(blob);\n        });\n    }\n    /**\n     * Needed for `untilComponentDestroyed`\n     */\n    ngOnDestroy() { }\n    /**\n     * Add rows to the form\n     *\n     * @param rowCount - The number of rows to add\n     * @param columnCount - The number of columns each row should have\n     * @param content - The column content\n     * @param index - The row index\n     */\n    addRows(rowCount = 1, columnCount = this.columnCount, content, index) {\n        if ((this.rows.length + rowCount) > this.maxRows) {\n            // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n            const rowsThatDontFit = (rowCount === 1 ? 2 : rowCount) - ((this.rows.length + rowCount) - this.maxRows);\n            this.tooManyRowsMessage =\n                `Adding ${rowsThatDontFit} row${rowsThatDontFit > 1 ? 's' : ''} would exceed the maximum rows allowed (${this.maxRows}).`;\n            return;\n        }\n        if (this.tooManyRowsMessage) {\n            this.tooManyRowsMessage = null;\n        }\n        for (let i = 0; i < rowCount; i += 1) {\n            const indexToInjectAt = (index === undefined ? this.rowCount : index) + i;\n            const c = content ? content[i] : null;\n            const createdRow = this.createRow(this.rows.length, c);\n            if ((index !== undefined) && (index >= 0)) {\n                this.rows.insert(indexToInjectAt, createdRow);\n            }\n            else {\n                this.rows.push(createdRow);\n            }\n        }\n    }\n    /**\n     * Get the columns of a row\n     *\n     * @param row - The row\n     * @returns The array of columns\n     */\n    getColumns(row) {\n        return row.get('columns');\n    }\n    /**\n     * Update the form control for recordId on each row according to index.\n     */\n    updateAllRowIds() {\n        for (let i = 0; i < this.rows.length; i += 1) {\n            const row = this.rows.controls[i];\n            // istanbul ignore else\n            if (row) {\n                row.controls.recordId.setValue(i);\n            }\n        }\n    }\n    /**\n     * Handle paste event for standard content cell\n     *\n     * @param event - The paste event\n     * @param hasHeader - Whether the content has a header row\n     */\n    onPaste(event, hasHeader) {\n        var _a;\n        const eventContent = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('Text');\n        if (!eventContent) {\n            return;\n        }\n        // If the user is only pasting the content for a single cell - do nothing\n        const isSingleCell = (eventContent.indexOf('\\n') < 0) && (eventContent.indexOf('\\t') < 0);\n        if (isSingleCell) {\n            return;\n        }\n        hasHeader = coerceBooleanProperty(hasHeader);\n        const pastedRowId = parseInt(event.target.id.split('X')[0].split('_')[2], 10);\n        const content = TsCSVEntryComponent_1.splitContent(eventContent, hasHeader);\n        const neededRows = content.rows.length;\n        // If the paste was into a header cell, verify that header cell content doesn't already exist\n        if (hasHeader) {\n            this.clearAllRows();\n            this.clearHeaderCells();\n            this.addHeaders(content.headers.length, this.columnHeaders || content.headers);\n            this.columnCount = content.headers.length;\n            this.addRows(neededRows, content.headers.length, content.rows);\n        }\n        else {\n            // Else: the paste happened in a body cell\n            const pastedColumnCount = content.rows[0].length;\n            // If more columns were pasted than currently exist, increase the column count\n            if (pastedColumnCount > this.columnCount) {\n                const numberOfMissingColumns = pastedColumnCount - this.columnCount;\n                TsCSVEntryComponent_1.addColumnsToRows(this.rows, this.headerCells, numberOfMissingColumns);\n                this.columnCount = pastedColumnCount;\n            }\n            this.deleteRow(pastedRowId);\n            this.addRows(neededRows, content.rows.length, content.rows, pastedRowId);\n        }\n        this.updateAllRowIds();\n        this.updateErrors();\n        this.changeDetectorRef.detectChanges();\n    }\n    /**\n     * Expose ability to trigger error updates from the DOM\n     */\n    updateErrors() {\n        this.allErrors = this.collectErrors();\n    }\n    /**\n     * Helper to get the name (content) of a header cell for the title attribute\n     *\n     * @param index - The column index\n     * @returns The header cell content\n     */\n    getHeaderCellName(index) {\n        if (!this.headerCells || !this.headerCells.controls[index]) {\n            return '';\n        }\n        return this.headerCells.controls[index].value;\n    }\n    /**\n     * Stop accidental page navigation when scrolling to the edges of the CSV form\n     *\n     * @param event - The scroll wheel event\n     */\n    onScroll(event) {\n        if (!event) {\n            return;\n        }\n        const dir = (event.deltaX < 0) ? 'right' : 'left';\n        // NOTE: TypeScript doesn't believe `form` exists on `EventTarget`\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const targetEl = event.target;\n        if (!targetEl) {\n            return;\n        }\n        const borderSize = 2;\n        const scrollRight = targetEl.form.scrollWidth - (parseInt(targetEl.form.offsetWidth, 10) + borderSize) - targetEl.form.scrollLeft;\n        const scrollLeft = targetEl.form.scrollLeft;\n        const stopRightScroll = (dir === 'right') && (scrollLeft < 1);\n        const stopLeftScroll = (dir === 'left') && (scrollRight < 1);\n        // If scrolling horizontally and at either edge, stop the scroll event\n        if (event.deltaX !== 0 && (stopRightScroll || stopLeftScroll)) {\n            event.preventDefault();\n        }\n    }\n    /**\n     * Change focus to the cell below the current cell\n     *\n     * @param currentCellId - The ID of the currently focused cell\n     * @param up - The direction to move (up vs down)\n     */\n    selectCellInNextRow(currentCellId, up) {\n        if (!currentCellId) {\n            return;\n        }\n        const [rowId, columnId] = currentCellId.split('X');\n        const row = rowId.split('_')[2];\n        const column = columnId.split('_')[1];\n        const newId = `${this.uid}_r_${parseInt(row, 10) + (up ? -1 : 1)}Xc_${column}`;\n        const input = this.documentService.document.querySelector(`#${newId}`);\n        if (input) {\n            input.focus();\n        }\n        else {\n            // Else we must be on the last row so we add one more\n            this.addRows();\n            this.changeDetectorRef.detectChanges();\n            this.selectCellInNextRow(currentCellId);\n        }\n    }\n    /**\n     * Select the next cell or previous cell\n     *\n     * @param event - The KeyboardEvent\n     * @param currentCellId - The ID of the currently focused cell\n     * @param previous - If the movement is forward or backward\n     */\n    selectAdjacentCell(event, currentCellId, previous) {\n        // Prevent native tabindex functionality\n        event.preventDefault();\n        previous = coerceBooleanProperty(previous);\n        const [rowId, columnId] = currentCellId.split('X');\n        const row = parseInt(rowId.split('_')[2], 10);\n        const column = parseInt(columnId.split('_')[1], 10);\n        const isFirstColumn = column === 0;\n        const isLastColumn = column === (this.columnCount - 1);\n        let newColumnNumber;\n        let newRowNumber = row;\n        // If first column, move to last column of previous row\n        if (previous) {\n            // Backward\n            if (isFirstColumn) {\n                newColumnNumber = this.columnCount - 1;\n                newRowNumber += -1;\n            }\n            else {\n                newColumnNumber = column - 1;\n            }\n        }\n        else if (isLastColumn) {\n            // Forward\n            newColumnNumber = 0;\n            newRowNumber += 1;\n        }\n        else {\n            newColumnNumber = column + 1;\n        }\n        const newId = `${this.uid}_r_${newRowNumber}Xc_${newColumnNumber}`;\n        const input = this.documentService.document.querySelector(`#${newId}`);\n        // istanbul ignore else\n        if (input) {\n            input.focus();\n        }\n    }\n    /**\n     * Create an ID for a cell. Format: `ts-csv-entry-{number}_r_7Xc_2` would be the 2nd cell in the 7th row.\n     *\n     * @param recordIndex - The index of the record/row\n     * @param cellIndex - The index of the cell within the row\n     * @returns The ID\n     */\n    createId(recordIndex, cellIndex) {\n        return `${this.uid}_r_${recordIndex}Xc_${cellIndex}`;\n    }\n    /**\n     * Collect all errors from the recordsForm and set to allErrors\n     */\n    collectErrors() {\n        const group = this.recordsForm.get('records');\n        // istanbul ignore else\n        if (group) {\n            const errors = this.getFormErrors(group);\n            // istanbul ignore else\n            if (errors) {\n                return Object.keys(errors).map(key => ({\n                    control: key,\n                    // De-duplicate the errors array\n                    [key]: errors[key].filter((el, i, arr) => arr.indexOf(el) === i),\n                }));\n            }\n            return null;\n        }\n        return null;\n    }\n    /**\n     * Get all validation messages\n     *\n     * NOTE: Currently this only supports a custom error message for URL validation. Other messages can be added when the need arises.\n     * FIXME: Find a way to use the existing ValidationMessagesService\n     *\n     * @returns The array of validation messages\n     */\n    get validationMessages() {\n        if (!this.allErrors) {\n            return undefined;\n        }\n        const messages = [];\n        for (const errorObj of this.allErrors) {\n            const name = errorObj.control;\n            for (const error of errorObj[name]) {\n                let message = '';\n                // The ID is zero-based\n                message += `<b>Row ${parseInt(error.rowId, 10) + 1}:</b> `;\n                // istanbul ignore else\n                if (name === 'url') {\n                    const maxItemLength = 20;\n                    const errorItem = (error.actual.length > maxItemLength) ? `${error.actual.slice(0, maxItemLength)}...` : error.actual;\n                    message += `\"${errorItem}\" is not a valid URL.`;\n                }\n                // istanbul ignore else\n                if (name === 'required') {\n                    message += `Content is required.`;\n                }\n                messages.push(message);\n            }\n        }\n        // If more messages than allowed exist, truncate the list with a message\n        if (messages.length > DEFAULT_VALIDATION_MESSAGES_MAX) {\n            const count = messages.length - DEFAULT_VALIDATION_MESSAGES_MAX;\n            messages.length = DEFAULT_VALIDATION_MESSAGES_MAX;\n            messages.push(`and ${count} more errors...`);\n        }\n        return messages.length > 0 ? messages : undefined;\n    }\n    /**\n     * Delete a row\n     *\n     * @param index - The index of the row to delete\n     */\n    deleteRow(index) {\n        if (index === undefined || index === null || index < 0) {\n            return;\n        }\n        this.rows.removeAt(index);\n        this.updateAllRowIds();\n        this.updateErrors();\n    }\n    /**\n     * Reset the table to it's initial state\n     */\n    resetTable() {\n        this.clearAllRows();\n        this.clearHeaderCells();\n        this.columnCount = this.originalColumnCount;\n        this.addRows(this.rowCount, this.columnCount);\n        this.addHeaders(this.columnCount, this.columnHeaders);\n        this.allErrors = null;\n    }\n    /**\n     * Get all form errors from a FormGroup or FormArray\n     *\n     * NOTE: This external function and `result` object is needed since `getAllErrors` may be recursive\n     *\n     * @param form - The form\n     * @returns An object containing all errors\n     */\n    getFormErrors(form) {\n        const result = {};\n        this.getAllErrors(form, result);\n        return result;\n    }\n    /**\n     * Get all errors for the form\n     *\n     * @param form - The primary form group\n     * @param result - The collection of errors\n     * @param result.required\n     * @param result.url\n     * @returns An object containing all errors\n     */\n    getAllErrors(form, result) {\n        const keys = Object.keys(form.controls);\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for (let i = 0; i < keys.length; i += 1) {\n            const ctrl = form.get(keys[i]);\n            // istanbul ignore else\n            if (ctrl) {\n                const errors = (ctrl instanceof FormGroup || ctrl instanceof FormArray) ? this.getAllErrors(ctrl, result) : ctrl.errors;\n                // istanbul ignore else\n                if (errors) {\n                    // Get the record ID from the grandparent control\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    const grandparentControls = ctrl.parent.parent.controls;\n                    const rowId = grandparentControls.recordId\n                        ? grandparentControls.recordId.value /* istanbul ignore next - Unreachable */ : undefined;\n                    const errorKeys = Object.keys(errors);\n                    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n                    for (let j = 0; j < errorKeys.length; j += 1) {\n                        const errorKey = errorKeys[j];\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        let error = errors[errorKeys[j]];\n                        // Angular built in required validator only returns a boolean\n                        if (typeof error === 'boolean') {\n                            error = { valid: false };\n                        }\n                        // If the rowId exists, add it to the errors object\n                        // istanbul ignore else\n                        if (rowId !== undefined) {\n                            error.rowId = rowId;\n                        }\n                        // Add this error to the result object\n                        if (result[errorKey]) {\n                            result[errorKey].push(error);\n                        }\n                        else {\n                            result[errorKey] = [error];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Clear all rows\n     */\n    clearAllRows() {\n        this.recordsForm.setControl('records', this.formBuilder.array([]));\n    }\n    /**\n     * Clear header cells\n     */\n    clearHeaderCells() {\n        this.recordsForm.setControl('headers', this.formBuilder.array([]));\n    }\n    /**\n     * Add header content to the form\n     *\n     * @param headerCount - The number of header cells\n     * @param content - The cell's content\n     */\n    addHeaders(headerCount, content) {\n        for (let i = 0; i < headerCount; i += 1) {\n            const value = (content && content[i]) ? content[i] : null;\n            const ctrl = value ? new FormControl(value) : new FormControl();\n            this.headerCells.setControl(i, ctrl);\n        }\n    }\n    /**\n     * Create a row\n     *\n     * @param id - The row's ID\n     * @param content - The column's content\n     * @returns The FormGroup\n     */\n    createRow(id, content) {\n        return this.formBuilder.group({\n            recordId: new FormControl(id),\n            columns: this.formBuilder.array(this.createColumns(this.columnCount, content)),\n        });\n    }\n    /**\n     * Create an array of columns\n     *\n     * @param count - The number of columns to create\n     * @param content - An array of content to seed the columns with\n     * @returns The array of form controls\n     */\n    createColumns(count, content) {\n        const columns = [];\n        for (let i = 0; i < count; i += 1) {\n            let value = (content && content[i]) ? content[i] : null;\n            // Strip any control characters\n            if (value) {\n                value = stripControlCharacters(value);\n            }\n            const validator = this.columnValidators ? this.columnValidators[i] /* istanbul ignore next - Unreachable */ : null;\n            columns.push(new FormControl(value, validator));\n        }\n        return columns;\n    }\n    /**\n     * Generate a File blob from the form contents\n     *\n     * @param content - The recordForm content\n     * @returns The File blob\n     */\n    generateBlob(content) {\n        const prefix = 'data:text/csv;charset=utf-8,';\n        const headers = `${content.headers.join('\\t')}\\r\\n`;\n        // Encapsulate content with quotes and escape any existing quotes\n        const rows = `${content.records.map(v => v.columns.map(column => (column ? `\"${column.replace(/\"/g, '\"\"')}\"` : '')).join('\\t'))\n            .join('\\r\\n')}\\r\\n`;\n        let joined = prefix + headers + rows;\n        // istanbul ignore else\n        if (this.outputFormat === 'csv') {\n            joined = JSON.stringify(joined).replace(/\\\\t/g, ',');\n        }\n        return new Blob([joined], { type: 'text/csv' });\n    }\n};\nTsCSVEntryComponent.ctorParameters = () => [\n    { type: FormBuilder },\n    { type: ChangeDetectorRef },\n    { type: TsDocumentService }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsCSVEntryComponent.prototype, \"columnCount\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array),\n    __metadata(\"design:paramtypes\", [Array])\n], TsCSVEntryComponent.prototype, \"columnHeaders\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], TsCSVEntryComponent.prototype, \"columnValidators\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsCSVEntryComponent.prototype, \"footerDirection\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsCSVEntryComponent.prototype, \"fullWidth\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsCSVEntryComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsCSVEntryComponent.prototype, \"maxRows\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsCSVEntryComponent.prototype, \"outputFormat\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsCSVEntryComponent.prototype, \"rowCount\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsCSVEntryComponent.prototype, \"blobGenerated\", void 0);\nTsCSVEntryComponent = TsCSVEntryComponent_1 = __decorate([\n    Component({\n        selector: 'ts-csv-entry',\n        template: \"<div class=\\\"c-csv-entry qa-csv-entry\\\">\\n\\n  <div class=\\\"c-csv-entry__info qa-csv-entry-info\\\">\\n    {{ rows.length }} row{{ rows.length === 1 ? '' : 's' }}\\n    <br>\\n    {{ columnCount }} column{{ columnCount === 1 ? '' : 's' }}\\n  </div>\\n\\n  <div class=\\\"c-csv-entry__scroll\\\">\\n    <!-- NOTE: fxLayout cannot be defined on the scroll container -->\\n    <div fxLayout=\\\"row\\\">\\n\\n      <!-- Column for delete buttons -->\\n      <div fxLayout=\\\"column\\\">\\n        <!-- Fake row for header -->\\n        <div [style.height]=\\\"fakeRowHeight\\\" fxFlex=\\\"0 0 auto\\\"></div>\\n\\n        <div\\n          class=\\\"c-csv-entry__column-id\\\"\\n          [class.c-csv-entry__column-id--invalid]=\\\"row.invalid\\\"\\n          [attr.id]=\\\"'csv-row-id-' + (idIndex + 1)\\\"\\n          *ngFor=\\\"let row of rows?.controls; let idIndex = index\\\"\\n          fxFlex=\\\"0 0 auto\\\"\\n          fxLayout=\\\"row\\\"\\n          fxLayoutAlign=\\\"center center\\\"\\n        >\\n          <span fxFlex>\\n            {{ +row.controls?.recordId?.value + 1 }}\\n          </span>\\n        </div>\\n      </div>\\n\\n      <!-- Content -->\\n      <form\\n        class=\\\"c-csv-entry__form\\\"\\n        [formGroup]=\\\"recordsForm\\\"\\n        fxFlex\\n        #form\\n        (mousewheel)=\\\"onScroll($event)\\\"\\n      >\\n\\n        <!-- Header Cells -->\\n        <div\\n          class=\\\"c-csv-entry__row c-csv-entry__row--header qa-csv-entry-header-row\\\"\\n          formArrayName=\\\"headers\\\"\\n        >\\n          <input\\n            class=\\\"c-csv-entry__input c-csv-entry__input--header qa-csv-entry-header-cell\\\"\\n            type=\\\"text\\\"\\n            title=\\\"Header, Column: {{ getHeaderCellName(headerIndex) || headerIndex + 1 }}\\\"\\n            [readonly]=\\\"(columnHeaders && columnHeaders[headerIndex])\\\"\\n            *ngFor=\\\"let c of headerCells?.controls; let headerIndex = index\\\"\\n            [attr.id]=\\\"createId(-1, headerIndex)\\\"\\n            [formControlName]=\\\"headerIndex\\\"\\n            (paste)=\\\"onPaste($event, true)\\\"\\n            (keydown.enter)=\\\"selectCellInNextRow(createId(-1, headerIndex))\\\"\\n            (keydown.tab)=\\\"selectAdjacentCell($event, createId(-1, headerIndex))\\\"\\n            (keydown.shift.tab)=\\\"selectAdjacentCell($event, createId(-1, headerIndex), true)\\\"\\n          >\\n        </div>\\n\\n\\n        <!-- Body Rows -->\\n        <div formArrayName=\\\"records\\\">\\n          <div\\n            class=\\\"c-csv-entry__row qa-csv-entry-row\\\"\\n            *ngFor=\\\"let record of rows?.controls; let recordIndex = index\\\"\\n            [formGroupName]=\\\"recordIndex\\\"\\n          >\\n            <div\\n              formArrayName=\\\"columns\\\"\\n            >\\n              <input\\n                *ngFor=\\\"let c of getColumns(record)?.controls; let columnIndex = index\\\"\\n                class=\\\"c-csv-entry__input qa-csv-entry-cell\\\"\\n                [class.c-csv-entry__input--invalid]=\\\"c.invalid\\\"\\n                type=\\\"text\\\"\\n                title=\\\"Row: {{ record.controls?.recordId?.value + 1 }}, Column: {{ getHeaderCellName(columnIndex) || columnIndex + 1 }}\\\"\\n                [attr.id]=\\\"createId(recordIndex, columnIndex)\\\"\\n                [formControlName]=\\\"columnIndex\\\"\\n                (paste)=\\\"onPaste($event)\\\"\\n                (keydown.enter)=\\\"selectCellInNextRow(createId(recordIndex, columnIndex))\\\"\\n                (keydown.shift.enter)=\\\"selectCellInNextRow(createId(recordIndex, columnIndex), true)\\\"\\n                (keyup)=\\\"updateErrors()\\\"\\n                (keydown.tab)=\\\"selectAdjacentCell($event, createId(recordIndex, columnIndex))\\\"\\n                (keydown.shift.tab)=\\\"selectAdjacentCell($event, createId(recordIndex, columnIndex), true)\\\"\\n              >\\n            </div>\\n          </div>\\n        </div>\\n      </form>\\n\\n\\n      <!-- Column for delete buttons -->\\n      <div fxLayout=\\\"column\\\">\\n        <!-- Fake row for header -->\\n        <div [style.height]=\\\"fakeRowHeight\\\"  fxFlex=\\\"0 0 auto\\\"></div>\\n\\n        <ts-icon-button\\n          class=\\\"c-csv-entry__delete qa-csv-entry-delete\\\"\\n          [attr.id]=\\\"'csv-delete-' + (deleteIndex + 1)\\\"\\n          [attr.title]=\\\"'Delete row ' + (deleteIndex + 1)\\\"\\n          *ngFor=\\\"let row of rows?.controls; let deleteIndex = index;\\\"\\n          (click)=\\\"deleteRow(deleteIndex)\\\"\\n          fxFlex=\\\"noshrink\\\"\\n        >delete_forever</ts-icon-button>\\n      </div>\\n\\n    </div>\\n  </div>\\n\\n\\n  <!-- Validation messages -->\\n  <div\\n    class=\\\"c-csv-entry__messages\\\"\\n    fxLayout=\\\"column\\\"\\n    fxLayoutAlign=\\\"start stretch\\\"\\n    [fxLayoutGap]=\\\"layoutGap\\\"\\n  >\\n    <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center end\\\">\\n      <div\\n        class=\\\"c-csv-entry__message qa-csv-entry-message\\\"\\n        *ngFor=\\\"let message of validationMessages; let i = index\\\"\\n        [innerHTML]=\\\"message\\\"\\n      ></div>\\n      <div\\n        class=\\\"c-csv-entry__message qa-csv-entry-message\\\"\\n        *ngIf=\\\"tooManyRowsMessage\\\"\\n      >{{ tooManyRowsMessage }}</div>\\n    </div>\\n\\n    <div fxLayout=\\\"row\\\" [dir]=\\\"footerDirection\\\" fxLayoutAlign=\\\"space-between center\\\" [fxLayoutGap]=\\\"layoutGap\\\">\\n      <div dir=\\\"ltr\\\" fxLayoutGap=\\\"1em\\\">\\n        <ts-button\\n          id=\\\"ts-csv-reset\\\"\\n          class=\\\"qa-csv-entry-reset\\\"\\n          format=\\\"hollow\\\"\\n          theme=\\\"warn\\\"\\n          (clicked)=\\\"resetTable()\\\"\\n        >Reset Table</ts-button>\\n\\n        <ts-button\\n          id=\\\"ts-csv-add-row\\\"\\n          class=\\\"qa-csv-entry-add-row\\\"\\n          format=\\\"hollow\\\"\\n          (clicked)=\\\"addRows()\\\"\\n        >Add Row</ts-button>\\n      </div>\\n\\n      <span fxFlex></span>\\n\\n      <div>\\n        <ng-content></ng-content>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n        host: {\n            'class': 'ts-csv-entry',\n            '[class.c-csv-entry--full-width]': 'fullWidth',\n            '[attr.id]': 'id',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsCSVEntry',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-csv-entry{display:inline-block;font-size:16px;max-width:100%}.ts-csv-entry.c-csv-entry--full-width{display:block;width:100%}.ts-csv-entry.c-csv-entry--full-width .c-csv-entry__row{display:block}.ts-csv-entry.c-csv-entry--full-width .c-csv-entry__input{width:100%}.c-csv-entry{--csv-row-height:39px;--csv-cell-padding:8px;--csv-external-row-height:35px}.c-csv-entry .c-csv-entry__scroll{max-height:28.5em;overflow-x:-moz-hidden-unscrollable;overflow-y:auto}.c-csv-entry .c-csv-entry__info{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;line-height:1.2em;margin-bottom:4px;margin-right:40px;text-align:right}.c-csv-entry .c-csv-entry__form{border:1px solid #cecdd1;overflow-x:auto}.c-csv-entry .c-csv-entry__row{display:table-row;white-space:nowrap}.c-csv-entry .c-csv-entry__input{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;border:1px solid #cecdd1;display:table-cell;font-size:inherit;min-width:72px;padding:var(--csv-cell-padding)}.c-csv-entry .c-csv-entry__input+.c-csv-entry__input{border-left-width:0}.c-csv-entry .c-csv-entry__input:first-of-type{border-left:0}.c-csv-entry .c-csv-entry__input:last-of-type{border-right:0}.c-csv-entry .c-csv-entry__input:focus{background-color:#d3eaf9}.c-csv-entry .c-csv-entry__input--header{border-bottom-width:3px;border-top:0}.c-csv-entry .c-csv-entry__input--invalid{color:#c8604d}.c-csv-entry .c-csv-entry__delete{max-height:var(--csv-external-row-height)}.c-csv-entry .c-csv-entry__delete .ts-icon-button{color:#cecdd1}.c-csv-entry .c-csv-entry__column-id{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;color:#cecdd1;max-height:var(--csv-external-row-height);padding:var(--csv-cell-padding)}.c-csv-entry .c-csv-entry__column-id--invalid{color:#c8604d;font-weight:400}.c-csv-entry .c-csv-entry__messages{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:75%;font-weight:400;letter-spacing:.01em;color:#c8604d;line-height:1.2em;margin-left:15px;margin-right:40px;padding-top:4px}.c-csv-entry__row:not(.c-csv-entry__row--header):not(:last-child) .c-csv-entry__input{border-bottom-width:0}\"]\n    }),\n    __metadata(\"design:paramtypes\", [FormBuilder,\n        ChangeDetectorRef,\n        TsDocumentService])\n], TsCSVEntryComponent);\n\nlet TsCSVEntryModule = class TsCSVEntryModule {\n};\nTsCSVEntryModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            ReactiveFormsModule,\n            TsButtonModule,\n            TsIconButtonModule,\n            TsIconModule,\n            TsTooltipModule,\n        ],\n        declarations: [TsCSVEntryComponent],\n        exports: [TsCSVEntryComponent],\n    })\n], TsCSVEntryModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsCSVEntryComponent, TsCSVEntryModule };\n//# sourceMappingURL=terminus-ui-csv-entry.js.map\n","<div class=\"c-csv-entry qa-csv-entry\">\n\n  <div class=\"c-csv-entry__info qa-csv-entry-info\">\n    {{ rows.length }} row{{ rows.length === 1 ? '' : 's' }}\n    <br>\n    {{ columnCount }} column{{ columnCount === 1 ? '' : 's' }}\n  </div>\n\n  <div class=\"c-csv-entry__scroll\">\n    <!-- NOTE: fxLayout cannot be defined on the scroll container -->\n    <div fxLayout=\"row\">\n\n      <!-- Column for delete buttons -->\n      <div fxLayout=\"column\">\n        <!-- Fake row for header -->\n        <div [style.height]=\"fakeRowHeight\" fxFlex=\"0 0 auto\"></div>\n\n        <div\n          class=\"c-csv-entry__column-id\"\n          [class.c-csv-entry__column-id--invalid]=\"row.invalid\"\n          [attr.id]=\"'csv-row-id-' + (idIndex + 1)\"\n          *ngFor=\"let row of rows?.controls; let idIndex = index\"\n          fxFlex=\"0 0 auto\"\n          fxLayout=\"row\"\n          fxLayoutAlign=\"center center\"\n        >\n          <span fxFlex>\n            {{ +row.controls?.recordId?.value + 1 }}\n          </span>\n        </div>\n      </div>\n\n      <!-- Content -->\n      <form\n        class=\"c-csv-entry__form\"\n        [formGroup]=\"recordsForm\"\n        fxFlex\n        #form\n        (mousewheel)=\"onScroll($event)\"\n      >\n\n        <!-- Header Cells -->\n        <div\n          class=\"c-csv-entry__row c-csv-entry__row--header qa-csv-entry-header-row\"\n          formArrayName=\"headers\"\n        >\n          <input\n            class=\"c-csv-entry__input c-csv-entry__input--header qa-csv-entry-header-cell\"\n            type=\"text\"\n            title=\"Header, Column: {{ getHeaderCellName(headerIndex) || headerIndex + 1 }}\"\n            [readonly]=\"(columnHeaders && columnHeaders[headerIndex])\"\n            *ngFor=\"let c of headerCells?.controls; let headerIndex = index\"\n            [attr.id]=\"createId(-1, headerIndex)\"\n            [formControlName]=\"headerIndex\"\n            (paste)=\"onPaste($event, true)\"\n            (keydown.enter)=\"selectCellInNextRow(createId(-1, headerIndex))\"\n            (keydown.tab)=\"selectAdjacentCell($event, createId(-1, headerIndex))\"\n            (keydown.shift.tab)=\"selectAdjacentCell($event, createId(-1, headerIndex), true)\"\n          >\n        </div>\n\n\n        <!-- Body Rows -->\n        <div formArrayName=\"records\">\n          <div\n            class=\"c-csv-entry__row qa-csv-entry-row\"\n            *ngFor=\"let record of rows?.controls; let recordIndex = index\"\n            [formGroupName]=\"recordIndex\"\n          >\n            <div\n              formArrayName=\"columns\"\n            >\n              <input\n                *ngFor=\"let c of getColumns(record)?.controls; let columnIndex = index\"\n                class=\"c-csv-entry__input qa-csv-entry-cell\"\n                [class.c-csv-entry__input--invalid]=\"c.invalid\"\n                type=\"text\"\n                title=\"Row: {{ record.controls?.recordId?.value + 1 }}, Column: {{ getHeaderCellName(columnIndex) || columnIndex + 1 }}\"\n                [attr.id]=\"createId(recordIndex, columnIndex)\"\n                [formControlName]=\"columnIndex\"\n                (paste)=\"onPaste($event)\"\n                (keydown.enter)=\"selectCellInNextRow(createId(recordIndex, columnIndex))\"\n                (keydown.shift.enter)=\"selectCellInNextRow(createId(recordIndex, columnIndex), true)\"\n                (keyup)=\"updateErrors()\"\n                (keydown.tab)=\"selectAdjacentCell($event, createId(recordIndex, columnIndex))\"\n                (keydown.shift.tab)=\"selectAdjacentCell($event, createId(recordIndex, columnIndex), true)\"\n              >\n            </div>\n          </div>\n        </div>\n      </form>\n\n\n      <!-- Column for delete buttons -->\n      <div fxLayout=\"column\">\n        <!-- Fake row for header -->\n        <div [style.height]=\"fakeRowHeight\"  fxFlex=\"0 0 auto\"></div>\n\n        <ts-icon-button\n          class=\"c-csv-entry__delete qa-csv-entry-delete\"\n          [attr.id]=\"'csv-delete-' + (deleteIndex + 1)\"\n          [attr.title]=\"'Delete row ' + (deleteIndex + 1)\"\n          *ngFor=\"let row of rows?.controls; let deleteIndex = index;\"\n          (click)=\"deleteRow(deleteIndex)\"\n          fxFlex=\"noshrink\"\n        >delete_forever</ts-icon-button>\n      </div>\n\n    </div>\n  </div>\n\n\n  <!-- Validation messages -->\n  <div\n    class=\"c-csv-entry__messages\"\n    fxLayout=\"column\"\n    fxLayoutAlign=\"start stretch\"\n    [fxLayoutGap]=\"layoutGap\"\n  >\n    <div fxLayout=\"column\" fxLayoutAlign=\"center end\">\n      <div\n        class=\"c-csv-entry__message qa-csv-entry-message\"\n        *ngFor=\"let message of validationMessages; let i = index\"\n        [innerHTML]=\"message\"\n      ></div>\n      <div\n        class=\"c-csv-entry__message qa-csv-entry-message\"\n        *ngIf=\"tooManyRowsMessage\"\n      >{{ tooManyRowsMessage }}</div>\n    </div>\n\n    <div fxLayout=\"row\" [dir]=\"footerDirection\" fxLayoutAlign=\"space-between center\" [fxLayoutGap]=\"layoutGap\">\n      <div dir=\"ltr\" fxLayoutGap=\"1em\">\n        <ts-button\n          id=\"ts-csv-reset\"\n          class=\"qa-csv-entry-reset\"\n          format=\"hollow\"\n          theme=\"warn\"\n          (clicked)=\"resetTable()\"\n        >Reset Table</ts-button>\n\n        <ts-button\n          id=\"ts-csv-add-row\"\n          class=\"qa-csv-entry-add-row\"\n          format=\"hollow\"\n          (clicked)=\"addRows()\"\n        >Add Row</ts-button>\n      </div>\n\n      <span fxFlex></span>\n\n      <div>\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { CSVEntryComponent } from './csv-entry.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CSVEntryComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CSVEntryRoutingModule { }\n","<ts-card tsVerticalSpacing>\n  <h3 tsVerticalSpacing>CSV Entry</h3>\n\n  <div>\n    Footer direction:\n    <ul>\n      <li>\n        <label>\n          ltr\n          <input type=\"radio\" name=\"direction\" value=\"ltr\" [(ngModel)]=\"footerDirection\">\n        </label>\n      </li>\n      <li>\n        <label>\n          rtl\n          <input type=\"radio\" name=\"direction\" value=\"rtl\" [(ngModel)]=\"footerDirection\">\n        </label>\n      </li>\n    </ul>\n  </div>\n\n  <div style=\"max-width: 80%;\" tsVerticalSpacing>\n    <ts-csv-entry\n      [columnValidators]=\"validators\"\n      [columnHeaders]=\"['foo', 'bar']\"\n      [footerDirection]=\"footerDirection\"\n      (blobGenerated)=\"file($event)\"\n    >\n      <button>My Custom Content!</button>\n    </ts-csv-entry>\n  </div>\n\n  <button (click)=\"customReset()\">Custom table reset</button>\n  <br>\n  <button (click)=\"generateFile()\">Generate file & download</button>\n</ts-card>\n\n\n<ts-card tsVerticalSpacing>\n  <h3 tsVerticalSpacing>CSV Full Width Entry</h3>\n\n  <div fxLayout=\"row\">\n    <ts-csv-entry\n      [columnValidators]=\"validators\"\n      [columnHeaders]=\"['Full Width']\"\n      (blobGenerated)=\"file($event)\"\n      [fullWidth]=\"true\"\n      columnCount=1\n    ></ts-csv-entry>\n  </div>\n\n</ts-card>\n","import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { TsCSVEntryComponent } from '@terminus/ui-csv-entry';\nimport { TsValidatorsService } from '@terminus/ui-validators';\n\n\n@Component({\n  selector: 'demo-csv-entry',\n  templateUrl: './csv-entry.component.html',\n})\nexport class CSVEntryComponent {\n  public validators = [\n    Validators.required,\n    this.validatorsService.url(),\n  ];\n  public results: string | undefined;\n  public blob;\n  public myFile;\n  public footerDirection: 'ltr' | 'rtl' = 'ltr';\n\n  @ViewChild(TsCSVEntryComponent, {\n    static: true,\n    read: false,\n  })\n  public csvComponent!: TsCSVEntryComponent;\n\n  constructor(\n    private validatorsService: TsValidatorsService,\n  ) {}\n\n  public file(v: Blob): void {\n    console.log('DEMO: Got file from CSV entry: ', v);\n    this.blob = v;\n  }\n\n  public generateFile(): void {\n    this.myFile = new File([this.blob], 'testCsv');\n    saveFile(this.blob, 'test');\n  }\n\n  public customReset(): void {\n    this.csvComponent.resetTable();\n  }\n}\n\n\n// Helper function to generate a file download for testing purposes\n/**\n * @param blob\n * @param filename\n */\nfunction saveFile(blob: Blob, filename: string) {\n  if (window.navigator.msSaveOrOpenBlob) {\n    window.navigator.msSaveOrOpenBlob(blob, filename);\n  } else {\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    const url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = filename;\n    a.click();\n    setTimeout(() => {\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    }, 0);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsCSVEntryModule } from '@terminus/ui-csv-entry';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\nimport { TsValidatorsModule } from '@terminus/ui-validators';\n\nimport { CSVEntryRoutingModule } from './csv-entry-routing.module';\nimport { CSVEntryComponent } from './csv-entry.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CSVEntryRoutingModule,\n    FormsModule,\n    TsCardModule,\n    TsCSVEntryModule,\n    TsSpacingModule,\n    TsValidatorsModule,\n  ],\n  declarations: [\n    CSVEntryComponent,\n  ],\n})\nexport class CSVEntryModule {}\n"]}