{"version":3,"sources":["/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/loading-overlay/fesm2015/terminus-ui-loading-overlay.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/loading-overlay/terminus-ui-loading-overlay.d.ts.TsLoadingOverlayComponent.html","./src/app/components/loading-overlay/loading-overlay-routing.module.ts","./src/app/components/loading-overlay/loading-overlay.component.html","./src/app/components/loading-overlay/loading-overlay.component.ts","./src/app/components/loading-overlay/loading-overlay.module.ts"],"names":[],"mappings":"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","file":"loading-overlay-loading-overlay-module-ngfactory-es2015.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, ComponentFactoryResolver, ApplicationRef, Injector, Input, HostBinding, Directive, NgModule } from '@angular/core';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { TsWindowService } from '@terminus/ngx-tools/browser';\n\n/**\n * The loading overlay component. Implemented by {@link TsLoadingOverlayDirective}\n *\n * @example\n * See {@link TsLoadingOverlayDirective}\n */\nlet TsLoadingOverlayComponent = class TsLoadingOverlayComponent {\n};\nTsLoadingOverlayComponent = __decorate([\n    Component({\n        selector: 'ts-loading-overlay',\n        host: { class: 'ts-loading-overlay' },\n        template: \"<div class=\\\"c-loading-overlay qa-loading-overlay\\\">\\n  <svg\\n    class=\\\"c-loading-overlay__spinner\\\"\\n    width=\\\"65px\\\"\\n    height=\\\"65px\\\"\\n    viewBox=\\\"0 0 66 66\\\"\\n    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n  >\\n    <circle\\n      class=\\\"path\\\"\\n      fill=\\\"none\\\"\\n      stroke-width=\\\"6\\\"\\n      stroke-linecap=\\\"round\\\"\\n      cx=\\\"33\\\"\\n      cy=\\\"33\\\"\\n      r=\\\"30\\\"\\n    ></circle>\\n  </svg>\\n</div>\\n\",\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsLoadingOverlay',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}@-webkit-keyframes rotator{0%{transform:rotate(0)}100%{transform:rotate(270deg)}}@keyframes rotator{0%{transform:rotate(0)}100%{transform:rotate(270deg)}}@-webkit-keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;transform:rotate(135deg)}100%{stroke-dashoffset:187;transform:rotate(450deg)}}@keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;transform:rotate(135deg)}100%{stroke-dashoffset:187;transform:rotate(450deg)}}.ts-loading-overlay :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-loading-overlay h1,.ts-loading-overlay h2,.ts-loading-overlay h3,.ts-loading-overlay h4,.ts-loading-overlay h5,.ts-loading-overlay p{margin:unset}.ts-loading-overlay .c-loading-overlay{align-content:center;align-items:center;background-color:rgba(250,250,250,.8);bottom:0;display:flex;justify-content:center;left:0;position:absolute;right:0;top:0;will-change:opacity;z-index:502}.c-loading-overlay--hidden{opacity:0;transition:opacity .2s}.c-loading-overlay__spinner{-webkit-animation:1.4s linear infinite rotator;animation:1.4s linear infinite rotator}.c-loading-overlay .path{-webkit-animation:1.4s ease-in-out infinite dash;animation:1.4s ease-in-out infinite dash;stroke:#00538a;stroke-dasharray:187;stroke-dashoffset:0;transform-origin:center}\"]\n    })\n], TsLoadingOverlayComponent);\n\n/**\n * The tsLoadingOverlay UI Directive.\n * Provides a spinner overlay to demonstrate loading for async data.\n *\n * @example\n * <div [tsLoadingOverlay]=\"true\"></div>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/loading-overlay</example-url>\n */\nlet TsLoadingOverlayDirective = class TsLoadingOverlayDirective {\n    constructor(elementRef, windowService, componentFactoryResolver, appRef, injector) {\n        this.elementRef = elementRef;\n        this.windowService = windowService;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.appRef = appRef;\n        this.injector = injector;\n        // Create the body portal host\n        this.bodyPortalHost = new DomPortalOutlet(this.elementRef.nativeElement, this.componentFactoryResolver, this.appRef, this.injector);\n        // Create the component portal\n        this.loadingOverlayPortal = new ComponentPortal(TsLoadingOverlayComponent);\n    }\n    /**\n     * Define a setter to show/hide the loading overlay\n     *\n     * @param value\n     */\n    set tsLoadingOverlay(value) {\n        const shouldSet = value && (this.bodyPortalHost && !this.bodyPortalHost.hasAttached());\n        if (shouldSet) {\n            this.bodyPortalHost.attach(this.loadingOverlayPortal);\n        }\n        else {\n            this.bodyPortalHost.detach();\n        }\n    }\n    /**\n     * Determine and set the needed position\n     */\n    ngOnInit() {\n        // Determine the CSS position of the element\n        const position = this.windowService.nativeWindow.getComputedStyle(this.elementRef.nativeElement).getPropertyValue('position');\n        this.position = this.determinePosition(position);\n    }\n    /**\n     * Destroy the portal host if it exists\n     */\n    ngOnDestroy() {\n        if (this.bodyPortalHost) {\n            this.bodyPortalHost.dispose();\n        }\n    }\n    /**\n     * Return the correct position\n     *\n     * @param position - The current position value\n     * @returns The correct position value\n     */\n    determinePosition(position) {\n        return (position === 'relative' || position === 'absolute') ? position : 'relative';\n    }\n};\nTsLoadingOverlayDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: TsWindowService },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationRef },\n    { type: Injector }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsLoadingOverlayDirective.prototype, \"tsLoadingOverlay\", null);\n__decorate([\n    HostBinding('style.position'),\n    __metadata(\"design:type\", String)\n], TsLoadingOverlayDirective.prototype, \"position\", void 0);\nTsLoadingOverlayDirective = __decorate([\n    Directive({ selector: '[tsLoadingOverlay]' }),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        TsWindowService,\n        ComponentFactoryResolver,\n        ApplicationRef,\n        Injector])\n], TsLoadingOverlayDirective);\n\nlet TsLoadingOverlayModule = class TsLoadingOverlayModule {\n};\nTsLoadingOverlayModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        declarations: [\n            TsLoadingOverlayComponent,\n            TsLoadingOverlayDirective,\n        ],\n        entryComponents: [TsLoadingOverlayComponent],\n        exports: [TsLoadingOverlayDirective],\n    })\n], TsLoadingOverlayModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsLoadingOverlayComponent, TsLoadingOverlayDirective, TsLoadingOverlayModule };\n//# sourceMappingURL=terminus-ui-loading-overlay.js.map\n","<div class=\"c-loading-overlay qa-loading-overlay\">\n  <svg\n    class=\"c-loading-overlay__spinner\"\n    width=\"65px\"\n    height=\"65px\"\n    viewBox=\"0 0 66 66\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle\n      class=\"path\"\n      fill=\"none\"\n      stroke-width=\"6\"\n      stroke-linecap=\"round\"\n      cx=\"33\"\n      cy=\"33\"\n      r=\"30\"\n    ></circle>\n  </svg>\n</div>\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { LoadingOverlayComponent } from './loading-overlay.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoadingOverlayComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoadingOverlayRoutingModule { }\n","<ts-card tsVerticalSpacing>\n  <h3 tsCardTitle tsVerticalSpacing>\n    Demo Controls\n  </h3>\n\n  <label>\n    Show loading overlay:\n    <input type=\"checkbox\" [(ngModel)]=\"isLoading\">\n  </label>\n</ts-card>\n\n\n<div [tsLoadingOverlay]=\"isLoading\" style=\"border:1px solid lightblue;padding:8px;\">\n  <p>\n    Sed ducimus natus iure quas. Perferendis animi rem dolores nihil. Ut est aliquid maxime quia.\n    Laborum itaque maxime eveniet eveniet minima. Nihil odit repellendus labore sed sed assumenda.\n  </p>\n\n  <p>\n    Odio ut maxime architecto harum. Est voluptas cum ipsum omnis quidem.\n    Molestias provident non veniam id non cumque ut. Qui atque veritatis quia voluptas.\n  </p>\n\n  <p>\n    Sed ducimus natus iure quas. Perferendis animi rem dolores nihil. Ut est aliquid maxime quia.\n    Laborum itaque maxime eveniet eveniet minima. Nihil odit repellendus labore sed sed assumenda.\n  </p>\n\n  <p>\n    Odio ut maxime architecto harum. Est voluptas cum ipsum omnis quidem.\n    Molestias provident non veniam id non cumque ut. Qui atque veritatis quia voluptas.\n  </p>\n</div>\n","import { Component } from '@angular/core';\n\n\n@Component({\n  selector: 'demo-loading-overlay',\n  templateUrl: './loading-overlay.component.html',\n})\nexport class LoadingOverlayComponent {\n  isLoading = true;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsLoadingOverlayModule } from '@terminus/ui-loading-overlay';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\n\nimport { LoadingOverlayRoutingModule } from './loading-overlay-routing.module';\nimport { LoadingOverlayComponent } from './loading-overlay.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, LoadingOverlayRoutingModule, TsCardModule, TsLoadingOverlayModule, TsSpacingModule],\n  declarations: [LoadingOverlayComponent],\n})\nexport class LoadingOverlayModule {}\n"],"sourceRoot":"webpack:///"}