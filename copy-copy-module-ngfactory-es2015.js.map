{"version":3,"sources":["/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/copy/fesm2015/terminus-ui-copy.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/copy/terminus-ui-copy.d.ts.TsCopyComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/tooltip/terminus-ui-tooltip.d.ts.TsTooltipComponent.html","./src/app/components/copy/copy-routing.module.ts","./src/app/components/copy/copy.component.html","./src/app/components/copy/copy.component.ts","./src/app/components/copy/copy.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACA;AACmH;AAC1G;AACC;AACR;AAC0B;AACM;AACvB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+DAAS;AACzB,0BAA0B,uEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,6EAAiB,EAAE;AAC/B,KAAK,OAAO,2EAAe;AAC3B;AACA,wDAAU;AACV,IAAI,+DAAS,aAAa,eAAe;AACzC,IAAI,wDAAU,gBAAgB,wDAAU;AACxC;AACA,wDAAU;AACV,IAAI,kEAAY,CAAC,uEAAkB;AACnC,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAA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","file":"copy-copy-module-ngfactory-es2015.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { isDevMode, ViewChild, ElementRef, ViewChildren, QueryList, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatRippleModule } from '@angular/material/core';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { TsTooltipComponent, TsTooltipModule } from '@terminus/ui-tooltip';\nimport { TsDocumentService, TsWindowService } from '@terminus/ngx-tools/browser';\nimport { TsUILibraryError } from '@terminus/ui-utilities';\n\n/**\n * A component to facilitate the easy copying of text\n *\n * @example\n * <ts-copy\n *              [disableInitialSelection]=\"true\"\n *              [enableQuickCopy]=\"true\"\n *              [format]=\"icon\"\n *              theme=\"accent\"\n * >My text to copy!</ts-copy>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/copy</example-url>\n */\nlet TsCopyComponent = class TsCopyComponent {\n    /**\n     * Inject services\n     *\n     * @param documentService\n     * @param windowService\n     */\n    constructor(documentService, windowService) {\n        this.documentService = documentService;\n        this.windowService = windowService;\n        /**\n         * Store a reference to the document object\n         */\n        this.document = this.documentService.document;\n        /**\n         * Internal flag to track if the contents have been selected\n         */\n        this.hasSelected = false;\n        /**\n         * Define the copy icon\n         */\n        this.icon = 'content_copy';\n        /**\n         * Define the color of the material ripple\n         */\n        // TODO: This color should be coming from a config\n        // https://github.com/GetTerminus/terminus-ui/issues/1490\n        this.rippleColor = '#1a237e';\n        /**\n         * Store a reference to the window object\n         */\n        this.window = this.windowService.nativeWindow;\n        /**\n         * Define if the initial click should select the contents\n         */\n        this.disableInitialSelection = false;\n        /**\n         * Define if the copy to clipboard functionality is enabled\n         */\n        this.enableQuickCopy = true;\n        this._format = 'standard';\n        /**\n         * Define the component theme\n         */\n        this.theme = 'primary';\n    }\n    /**\n     * Define the UI style\n     *\n     * @param value\n     */\n    set format(value) {\n        this._format = value ? value : 'standard';\n        if (this.format === 'icon' && !this.enableQuickCopy) {\n            this.enableQuickCopy = true;\n            // istanbul ignore else\n            if (isDevMode()) {\n                throw new TsUILibraryError(`'enableQuickCopy' must be set to 'true' when using the icon only display mode`);\n            }\n        }\n    }\n    get format() {\n        return this._format;\n    }\n    /**\n     * Return the inner text content\n     *\n     * @returns The text content of the inner <ng-content>\n     */\n    get textContent() {\n        const hasInnerText = this.content && this.content.nativeElement && this.content.nativeElement.innerText;\n        return hasInnerText ? this.content.nativeElement.innerText : '';\n    }\n    /**\n     * Select the text content of the passed in element\n     *\n     * @param element - The element whose text should be selected\n     * @param hasSelected - The flag defining if the selection has already been made\n     * @param disabled - The flag defining if the selection functionality should be disabled\n     * @returns The value representing if the copy was successful\n     */\n    selectText(element, hasSelected, disabled) {\n        // If this functionality is disabled OR the text has already been selected,\n        // do not intercept any more clicks until the focus is reset\n        if (disabled || hasSelected) {\n            return false;\n        }\n        const selection = this.window.getSelection();\n        // NOTE: Adding the type of 'Range' to this causes an error with `range.selectNodeContents`\n        // `Argument of type ElementRef is not assignable to type 'Node'`\n        const range = this.document.createRange();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        range.selectNodeContents(element);\n        selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();\n        selection === null || selection === void 0 ? void 0 : selection.addRange(range);\n        this.hasSelected = true;\n        return true;\n    }\n    /**\n     * Reset the text selection\n     * NOTE: The containing div must have a `tabindex` set or no blur event will be fired\n     */\n    resetSelection() {\n        this.hasSelected = false;\n    }\n    /**\n     * Copy text to the user's clipboard\n     *\n     * @param text - The text to copy\n     */\n    copyToClipboard(text) {\n        // Create a hidden textarea to seed with text content\n        // FIXME: During the upgrade to TS 3.7.x 'createElement' is marked as deprecated but the signature for the deprecated and new methods\n        // are the same. So even when using the 'new' method, a deprecation error is still reported.\n        // I believe the new format should be `this.document.createElement<textarea>('textarea');`\n        // eslint-disable-next-line deprecation/deprecation\n        const target = this.document.createElement('textarea');\n        target.className = 'targetElement';\n        target.style.position = 'absolute';\n        target.style.left = '101%';\n        target.style.top = '0';\n        target.style.width = '1px';\n        target.style.height = '1px';\n        target.textContent = text;\n        // Add the textarea, focus and select the text\n        this.document.body.appendChild(target);\n        target.focus();\n        target.setSelectionRange(0, target.value.length);\n        // Copy the selection or fall back to prompt\n        try {\n            this.document.execCommand('copy');\n            target.remove();\n        }\n        catch (error) {\n            // Fall back to the native alert\n            this.window.prompt('Copy to clipboard: Ctrl+C, Enter', text);\n        }\n    }\n};\nTsCopyComponent.ctorParameters = () => [\n    { type: TsDocumentService },\n    { type: TsWindowService }\n];\n__decorate([\n    ViewChild('content', { static: true }),\n    __metadata(\"design:type\", ElementRef)\n], TsCopyComponent.prototype, \"content\", void 0);\n__decorate([\n    ViewChildren(TsTooltipComponent),\n    __metadata(\"design:type\", QueryList)\n], TsCopyComponent.prototype, \"tooltipCollection\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsCopyComponent.prototype, \"disableInitialSelection\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsCopyComponent.prototype, \"enableQuickCopy\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsCopyComponent.prototype, \"format\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsCopyComponent.prototype, \"theme\", void 0);\nTsCopyComponent = __decorate([\n    Component({\n        selector: 'ts-copy',\n        template: \"<div\\n  class=\\\"c-copy qa-copy\\\"\\n  fxLayout=\\\"row\\\"\\n  tabindex=\\\"0\\\"\\n  (click)=\\\"selectText(content, hasSelected, disableInitialSelection)\\\"\\n  (blur)=\\\"resetSelection()\\\"\\n>\\n    <div\\n      #content\\n      class=\\\"c-copy__content qa-copy-content\\\"\\n      fxFlex=\\\"auto\\\"\\n    >\\n      <ts-tooltip [tooltipValue]=\\\"textContent\\\">\\n        <ng-content></ng-content>\\n      </ts-tooltip>\\n    </div>\\n\\n  <div class=\\\"c-copy__tooltip\\\">\\n    <ts-tooltip tooltipValue=\\\"Copy to clipboard\\\" *ngIf=\\\"enableQuickCopy\\\">\\n      <div\\n        class=\\\"c-copy__icon qa-copy-icon\\\"\\n        (click)=\\\"copyToClipboard(textContent)\\\"\\n        mat-ripple\\n        [matRippleColor]=\\\"rippleColor\\\"\\n      >\\n        <ts-icon matSuffix fxFlex>\\n          {{ icon }}\\n        </ts-icon>\\n      </div>\\n    </ts-tooltip>\\n  </div>\\n</div>\\n\",\n        host: {\n            'class': 'ts-copy',\n            '[class.ts-copy--standard]': 'format === \"standard\"',\n            '[class.ts-copy--minimal]': 'format === \"minimal\"',\n            '[class.ts-copy--icon]': 'format === \"icon\"',\n            '[class.ts-copy--primary]': 'theme === \"primary\"',\n            '[class.ts-copy--accent]': 'theme === \"accent\"',\n            '[class.ts-copy--warn]': 'theme === \"warn\"',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsCopy',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-copy{display:block;max-width:100%}.ts-copy :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-copy h1,.ts-copy h2,.ts-copy h3,.ts-copy h4,.ts-copy h5,.ts-copy p{margin:unset}.ts-copy .c-copy{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:400;color:#757575;position:relative}.ts-copy .c-copy:not(.c-button):not(.c-input):not(.c-select):not(.ts-checkbox){line-height:20px}.ts-copy--primary .mat-ripple-element{background-color:rgba(0,52,87,.4)!important}.ts-copy--accent .c-copy .c-copy__icon{background-color:#2f854d}.ts-copy--accent .mat-ripple-element{background-color:rgba(34,95,55,.4)!important}.ts-copy--warn .c-copy .c-copy__icon{background-color:#c8604d}.ts-copy--warn .mat-ripple-element{background-color:rgba(173,72,53,.4)!important}.ts-copy--standard{background-color:#f2f0f7;border:1px solid #cecdd1;border-radius:3px;transition:border-color .2s ease-in-out 50ms}.ts-copy--standard:focus{border:1px solid #999;outline:0;transition-delay:0}.ts-copy--minimal .c-copy__content{line-height:24px;padding:.25em .3em .25em .4em}.ts-copy--minimal .c-copy .c-copy__tooltip{bottom:3px;top:3px}.ts-copy--icon{display:inline-block}.ts-copy--icon .c-copy__content{width:35px}.ts-copy--icon .c-copy .c-copy__tooltip{opacity:1;pointer-events:auto}.ts-copy:focus .c-copy__tooltip,.ts-copy:hover .c-copy__tooltip{opacity:1;pointer-events:auto;transition-delay:70ms}.c-copy .c-copy__content{align-items:center;justify-content:center;line-height:32px;min-width:35px;overflow:hidden;white-space:nowrap}.c-copy .c-copy__content::-webkit-scrollbar{-webkit-appearance:none}.c-copy .c-copy__content::-webkit-scrollbar:vertical{width:0}.c-copy .c-copy__content::-webkit-scrollbar:horizontal{height:0}.c-copy .c-copy__content::-webkit-scrollbar-thumb{background-color:transparent;border-color:transparent}.c-copy .c-copy__content::-webkit-scrollbar-track{background-color:transparent;border-color:transparent}.c-copy .c-copy__content::-webkit-scrollbar-corner{background-color:transparent}.c-copy .c-copy__content .ts-tooltip{display:block;max-width:100%}.c-copy .c-copy__content .c-tooltip{display:block;overflow:hidden;padding:.2em 0 .2em .4em;text-overflow:ellipsis}.c-copy .c-copy__tooltip{bottom:-1px;opacity:0;pointer-events:none;position:absolute;right:-1px;top:-1px;transition:opacity .2s ease-out}.c-copy .c-copy__tooltip .ts-tooltip{height:100%}.c-copy .c-copy__tooltip .ts-icon{align-items:center;display:flex}.c-copy .c-copy__icon{cursor:pointer;background-color:#00538a;border-radius:3px;bottom:0;color:#fafafa;height:100%;padding:.25em .3em .25em .4em;transition:background-color .2s ease-in}.c-copy .mat-icon{vertical-align:bottom}.ts-copy--standard .c-copy .c-copy__icon{border-radius:0 3px 3px 0}\"]\n    }),\n    __metadata(\"design:paramtypes\", [TsDocumentService,\n        TsWindowService])\n], TsCopyComponent);\n\nlet TsCopyModule = class TsCopyModule {\n};\nTsCopyModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            MatRippleModule,\n            TsIconModule,\n            TsTooltipModule,\n        ],\n        exports: [TsCopyComponent],\n        declarations: [TsCopyComponent],\n    })\n], TsCopyModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsCopyComponent, TsCopyModule };\n//# sourceMappingURL=terminus-ui-copy.js.map\n","<div\n  class=\"c-copy qa-copy\"\n  fxLayout=\"row\"\n  tabindex=\"0\"\n  (click)=\"selectText(content, hasSelected, disableInitialSelection)\"\n  (blur)=\"resetSelection()\"\n>\n    <div\n      #content\n      class=\"c-copy__content qa-copy-content\"\n      fxFlex=\"auto\"\n    >\n      <ts-tooltip [tooltipValue]=\"textContent\">\n        <ng-content></ng-content>\n      </ts-tooltip>\n    </div>\n\n  <div class=\"c-copy__tooltip\">\n    <ts-tooltip tooltipValue=\"Copy to clipboard\" *ngIf=\"enableQuickCopy\">\n      <div\n        class=\"c-copy__icon qa-copy-icon\"\n        (click)=\"copyToClipboard(textContent)\"\n        mat-ripple\n        [matRippleColor]=\"rippleColor\"\n      >\n        <ts-icon matSuffix fxFlex>\n          {{ icon }}\n        </ts-icon>\n      </div>\n    </ts-tooltip>\n  </div>\n</div>\n","<span #tooltip=\"matTooltip\"\n  class=\"c-tooltip qa-tooltip\"\n  [matTooltip]=\"tooltipValue\"\n  [matTooltipPosition]=\"tooltipPosition\"\n  [ngClass]=\"{'c-tooltip--underline': hasUnderline}\"\n>\n  <ng-content></ng-content>\n</span>\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { CopyComponent } from './copy.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CopyComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CopyRoutingModule { }\n","<ts-card tsVerticalSpacing>\n  <h3 tsCardTitle tsVerticalSpacing>\n    Demo Controls\n  </h3>\n\n  <label>\n    Enable quick copy:\n    <input type=\"checkbox\" [(ngModel)]=\"canCopy\">\n  </label>\n  <br>\n\n  <label>\n    Format:\n    <select [(ngModel)]=\"format\">\n      <option selected=\"selected\" value=\"standard\">Standard</option>\n      <option value=\"minimal\">Minimal</option>\n      <option value=\"icon\">Icon</option>\n    </select>\n  </label>\n  <br>\n\n  <label>\n    Theme:\n    <select [(ngModel)]=\"theme\">\n      <option value=\"{{ theme }}\" *ngFor=\"let theme of themes\">{{ theme | titlecase }}</option>\n    </select>\n  </label>\n</ts-card>\n\n<ts-card style=\"max-width: 22rem;\">\n  <ts-copy\n    [enableQuickCopy]=\"canCopy\"\n    [format]=\"format\"\n    [theme]=\"theme\"\n  >{{ fakeUrl }}</ts-copy>\n</ts-card>\n","import { Component } from '@angular/core';\n\nimport { TsStyleThemeTypes } from '@terminus/ui-utilities';\n\n\n@Component({\n  selector: 'demo-copy',\n  templateUrl: './copy.component.html',\n})\nexport class CopyComponent {\n  // eslint-disable-next-line max-len\n  public fakeUrl = 'https://github.com/foo/bar/baz/bing/bang/boom/foo/bar/baz/bing/bang/boom/foo/bar/baz/bing/bang/boom/foo/bar/baz/bing/bang/boom/foo/bar/baz/bing/bang/boom/foo/bar/baz/bing/bang/boom';\n  public canCopy = true;\n  public format = 'standard';\n  public theme: TsStyleThemeTypes = 'primary';\n  public themes: TsStyleThemeTypes[] = ['primary', 'accent', 'warn'];\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsCopyModule } from '@terminus/ui-copy';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\n\nimport { CopyRoutingModule } from './copy-routing.module';\nimport { CopyComponent } from './copy.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CopyRoutingModule,\n    FormsModule,\n    TsCardModule,\n    TsCopyModule,\n    TsSpacingModule,\n  ],\n  declarations: [\n    CopyComponent,\n  ],\n})\nexport class CopyModule {}\n"],"sourceRoot":"webpack:///"}