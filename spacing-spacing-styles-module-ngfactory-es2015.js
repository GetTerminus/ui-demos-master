(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["spacing-spacing-styles-module-ngfactory"],{

/***/ "./src/app/components/spacing/spacing-styles-routing.module.ts":
/*!*********************************************************************!*\
  !*** ./src/app/components/spacing/spacing-styles-routing.module.ts ***!
  \*********************************************************************/
/*! exports provided: SpacingStylesRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpacingStylesRoutingModule", function() { return SpacingStylesRoutingModule; });
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _spacing_styles_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./spacing-styles.component */ "./src/app/components/spacing/spacing-styles.component.ts");


const routes = [
    {
        path: '',
        component: _spacing_styles_component__WEBPACK_IMPORTED_MODULE_1__["SpacingStylesComponent"],
    },
];
class SpacingStylesRoutingModule {
}


/***/ }),

/***/ "./src/app/components/spacing/spacing-styles.component.ngfactory.js":
/*!**************************************************************************!*\
  !*** ./src/app/components/spacing/spacing-styles.component.ngfactory.js ***!
  \**************************************************************************/
/*! exports provided: RenderType_SpacingStylesComponent, View_SpacingStylesComponent_0, View_SpacingStylesComponent_Host_0, SpacingStylesComponentNgFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderType_SpacingStylesComponent", function() { return RenderType_SpacingStylesComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "View_SpacingStylesComponent_0", function() { return View_SpacingStylesComponent_0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "View_SpacingStylesComponent_Host_0", function() { return View_SpacingStylesComponent_Host_0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpacingStylesComponentNgFactory", function() { return SpacingStylesComponentNgFactory; });
/* harmony import */ var _spacing_styles_component_scss_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./spacing-styles.component.scss.shim.ngstyle */ "./src/app/components/spacing/spacing-styles.component.scss.shim.ngstyle.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _spacing_styles_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./spacing-styles.component */ "./src/app/components/spacing/spacing-styles.component.ts");
/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes,extraRequire}
 * tslint:disable
 */ 



var styles_SpacingStylesComponent = [_spacing_styles_component_scss_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__["styles"]];
var RenderType_SpacingStylesComponent = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵcrt"]({ encapsulation: 0, styles: styles_SpacingStylesComponent, data: {} });

function View_SpacingStylesComponent_0(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "p", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" Spacing added as 'padding' to each outlined div.\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](2, 0, null, null, 1, "div", [["class", "box box--small--2"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" padding: spacing(small, 2)\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](4, 0, null, null, 1, "div", [["class", "box box--small--1"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" padding: spacing(small, 1)\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](6, 0, null, null, 1, "div", [["class", "box box--small--0"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" padding: spacing(small)\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](8, 0, null, null, 1, "div", [["class", "box box--default--0"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" padding: spacing(default)\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](10, 0, null, null, 1, "div", [["class", "box box--large--0"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" padding: spacing(large)\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](12, 0, null, null, 1, "div", [["class", "box box--large--1"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" padding: spacing(large, 1)\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](14, 0, null, null, 1, "div", [["class", "box box--large--2"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" padding: spacing(large, 2)\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](16, 0, null, null, 1, "div", [["class", "box box--large--3"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" padding: spacing(large, 3)\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](18, 0, null, null, 1, "div", [["class", "box box--large--4"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" padding: spacing(large, 4)\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](20, 0, null, null, 1, "div", [["class", "box box--large--5"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" padding: spacing(large, 5)\n"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](22, 0, null, null, 1, "div", [["class", "box box--large--6"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" padding: spacing(large, 6)\n"]))], null, null); }
function View_SpacingStylesComponent_Host_0(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "demo-spacing-styles", [], null, null, null, View_SpacingStylesComponent_0, RenderType_SpacingStylesComponent)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 49152, null, 0, _spacing_styles_component__WEBPACK_IMPORTED_MODULE_2__["SpacingStylesComponent"], [], null, null)], null, null); }
var SpacingStylesComponentNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵccf"]("demo-spacing-styles", _spacing_styles_component__WEBPACK_IMPORTED_MODULE_2__["SpacingStylesComponent"], View_SpacingStylesComponent_Host_0, {}, {}, []);



/***/ }),

/***/ "./src/app/components/spacing/spacing-styles.component.scss.shim.ngstyle.js":
/*!**********************************************************************************!*\
  !*** ./src/app/components/spacing/spacing-styles.component.scss.shim.ngstyle.js ***!
  \**********************************************************************************/
/*! exports provided: styles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "styles", function() { return styles; });
/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes,extraRequire}
 * tslint:disable
 */ 
var styles = ["[_ngcontent-%COMP%]:root {\n  --swift-ease-out-duration: var(--ts-animation-time-duration-400);\n  --swift-ease-out-timing-function: cubic-bezier(.25, .8, .25, 1);\n  --swift-ease-in-duration: var(--ts-animation-time-duration-300);\n  --swift-ease-in-timing-function: cubic-bezier(.55, 0, .55, .2);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.cdk-drag[_ngcontent-%COMP%] {\n  position: relative;\n}\n.cdk-drag[_ngcontent-%COMP%]:not(.cdk-drag-placeholder) {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.cdk-drag[_ngcontent-%COMP%]   .cdk-drag-handle[_ngcontent-%COMP%] {\n  color: #cecdd1;\n  cursor: ns-resize;\n  position: absolute;\n  right: 8px;\n}\n.cdk-drag.cdk-drag-preview[_ngcontent-%COMP%] {\n  \n  --shadow:\n      0 5px 5px -3px rgba(0, 0, 0, .2),\n      0 8px 10px 1px rgba(0, 0, 0, .14),\n      0 3px 14px 2px rgba(0, 0, 0, .12);\n  background-color: #fafafa;\n  box-shadow: var(--shadow);\n  min-height: 50px;\n  \n  padding: 0 !important;\n}\n.cdk-drag.cdk-drag-preview[_ngcontent-%COMP%]   .c-checkbox[_ngcontent-%COMP%] {\n  margin-left: 16px;\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  --drop-bg: #cce8d5;\n  --drop-border: #7fd09c;\n  background: var(--drop-bg);\n  border: 2px dotted var(--drop-border);\n  cursor: ns-resize;\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.u-visually-hidden[_ngcontent-%COMP%] {\n  border: 0;\n  -webkit-clip-path: rect(0, 0, 0, 0);\n          clip-path: rect(0, 0, 0, 0);\n  display: block;\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  pointer-events: none;\n  position: absolute;\n  visibility: hidden;\n  width: 1px;\n}\n\n\n.box[_ngcontent-%COMP%] {\n  margin-bottom: 24px;\n  outline: 1px solid lightblue;\n}\n.box--small--2[_ngcontent-%COMP%] {\n  padding: 4px;\n}\n.box--small--1[_ngcontent-%COMP%] {\n  padding: 8px;\n}\n.box--small--0[_ngcontent-%COMP%] {\n  padding: 12px;\n}\n.box--default--0[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.box--large--0[_ngcontent-%COMP%] {\n  padding: 24px;\n}\n.box--large--1[_ngcontent-%COMP%] {\n  padding: 32px;\n}\n.box--large--2[_ngcontent-%COMP%] {\n  padding: 40px;\n}\n.box--large--3[_ngcontent-%COMP%] {\n  padding: 48px;\n}\n.box--large--4[_ngcontent-%COMP%] {\n  padding: 56px;\n}\n.box--large--5[_ngcontent-%COMP%] {\n  padding: 72px;\n}\n.box--large--6[_ngcontent-%COMP%] {\n  padding: 96px;\n}\n/*# sourceMappingURL=data:application/json;base64, */"];



/***/ }),

/***/ "./src/app/components/spacing/spacing-styles.component.ts":
/*!****************************************************************!*\
  !*** ./src/app/components/spacing/spacing-styles.component.ts ***!
  \****************************************************************/
/*! exports provided: SpacingStylesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpacingStylesComponent", function() { return SpacingStylesComponent; });
class SpacingStylesComponent {
}


/***/ }),

/***/ "./src/app/components/spacing/spacing-styles.module.ngfactory.js":
/*!***********************************************************************!*\
  !*** ./src/app/components/spacing/spacing-styles.module.ngfactory.js ***!
  \***********************************************************************/
/*! exports provided: SpacingStylesModuleNgFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpacingStylesModuleNgFactory", function() { return SpacingStylesModuleNgFactory; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _spacing_styles_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./spacing-styles.module */ "./src/app/components/spacing/spacing-styles.module.ts");
/* harmony import */ var _node_modules_angular_router_router_ngfactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../node_modules/@angular/router/router.ngfactory */ "../../node_modules/@angular/router/router.ngfactory.js");
/* harmony import */ var _spacing_styles_component_ngfactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./spacing-styles.component.ngfactory */ "./src/app/components/spacing/spacing-styles.component.ngfactory.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ "../../node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _spacing_styles_routing_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./spacing-styles-routing.module */ "./src/app/components/spacing/spacing-styles-routing.module.ts");
/* harmony import */ var _terminus_ui_spacing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @terminus/ui-spacing */ "../../dist/libs/ui/spacing/fesm2015/terminus-ui-spacing.js");
/* harmony import */ var _spacing_styles_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./spacing-styles.component */ "./src/app/components/spacing/spacing-styles.component.ts");
/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes,extraRequire}
 * tslint:disable
 */ 









var SpacingStylesModuleNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcmf"](_spacing_styles_module__WEBPACK_IMPORTED_MODULE_1__["SpacingStylesModule"], [], function (_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmod"]([_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](512, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵCodegenComponentFactoryResolver"], [[8, [_node_modules_angular_router_router_ngfactory__WEBPACK_IMPORTED_MODULE_2__["ɵangular_packages_router_router_lNgFactory"], _spacing_styles_component_ngfactory__WEBPACK_IMPORTED_MODULE_3__["SpacingStylesComponentNgFactory"]]], [3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_common__WEBPACK_IMPORTED_MODULE_4__["NgLocalization"], _angular_common__WEBPACK_IMPORTED_MODULE_4__["NgLocaleLocalization"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_router__WEBPACK_IMPORTED_MODULE_5__["RouterModule"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["RouterModule"], [[2, _angular_router__WEBPACK_IMPORTED_MODULE_5__["ɵangular_packages_router_router_a"]], [2, _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _spacing_styles_routing_module__WEBPACK_IMPORTED_MODULE_6__["SpacingStylesRoutingModule"], _spacing_styles_routing_module__WEBPACK_IMPORTED_MODULE_6__["SpacingStylesRoutingModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _terminus_ui_spacing__WEBPACK_IMPORTED_MODULE_7__["TsSpacingModule"], _terminus_ui_spacing__WEBPACK_IMPORTED_MODULE_7__["TsSpacingModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _spacing_styles_module__WEBPACK_IMPORTED_MODULE_1__["SpacingStylesModule"], _spacing_styles_module__WEBPACK_IMPORTED_MODULE_1__["SpacingStylesModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1024, _angular_router__WEBPACK_IMPORTED_MODULE_5__["ROUTES"], function () { return [[{ path: "", component: _spacing_styles_component__WEBPACK_IMPORTED_MODULE_8__["SpacingStylesComponent"] }]]; }, [])]); });



/***/ }),

/***/ "./src/app/components/spacing/spacing-styles.module.ts":
/*!*************************************************************!*\
  !*** ./src/app/components/spacing/spacing-styles.module.ts ***!
  \*************************************************************/
/*! exports provided: SpacingStylesModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpacingStylesModule", function() { return SpacingStylesModule; });
class SpacingStylesModule {
}


/***/ })

}]);
//# sourceMappingURL=spacing-spacing-styles-module-ngfactory-es2015.js.map