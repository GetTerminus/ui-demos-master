{"version":3,"sources":["webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/fesm2015/terminus-ui-expansion-panel.js","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/terminus-ui-expansion-panel.d.ts.TsExpansionPanelComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/terminus-ui-expansion-panel.d.ts.TsExpansionPanelActionRowComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/terminus-ui-expansion-panel.d.ts.TsExpansionPanelTriggerComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/terminus-ui-expansion-panel.d.ts.TsExpansionPanelTriggerTitleComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/terminus-ui-expansion-panel.d.ts.TsExpansionPanelTriggerDescriptionComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/expansion-panel/terminus-ui-expansion-panel.d.ts.TsAccordionComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/cdk/fesm2015/accordion.js"],"names":["TS_EXPANSION_PANEL_ANIMATION_TIMING","tsExpansionPanelAnimations","indicatorRotate","transform","expansionTriggerHeight","height","params","collapsedHeight","expandedHeight","optional","bodyExpansion","visibility","TS_ACCORDION","TsExpansionPanelContentDirective","template","ctorParameters","type","selector","TS_EXPANSION_PANEL_DEFAULT_OPTIONS","nextUniqueId","Éµ0","undefined","TsExpansionPanelComponent","_changeDetectorRef","_uniqueSelectionDispatcher","_viewContainerRef","documentService","accordion","animationMode","defaultOptions","bodyAnimationDone","triggerId","inputChanges","_hideToggle","_transparentMode","afterExpand","afterCollapse","pipe","x","y","fromState","toState","subscribe","event","emit","hideToggle","lazyContent","opened","expanded","portal","changes","next","complete","panelBody","document","focusedElement","activeElement","bodyElement","nativeElement","contains","value","disabled","decorators","args","String","prototype","Boolean","outputs","animations","host","providers","provide","useValue","changeDetection","OnPush","encapsulation","None","exportAs","styles","Object","TsExpansionPanelTriggerComponent","panel","elementRef","focusMonitor","changeDetectorRef","accordionHideToggleChange","_stateChanges","closed","markForCheck","contentContainsFocus","focusVia","monitor","origin","handleTriggerFocus","stopMonitoring","toggle","code","isSelectionKey","SPACE","ENTER","preventDefault","handleTriggerKeydown","currentExpandedState","transparentMode","TsAccordionComponent_1","TsAccordionComponent","arguments","destroyed","keyManager","triggers","withWrap","manager","HOME","setFirstItemActive","END","setLastItemActive","onKeydown","trigger","updateActiveItem","descendants","inputs","useExisting","TsExpansionPanelActionRowComponent","TsExpansionPanelTriggerDescriptionComponent","TsExpansionPanelTriggerTitleComponent","TsExpansionPanelModule","imports","declarations","exports","nextId","CdkAccordion","_openCloseAllActions","id","_multi","_openCloseAll","multi","propDecorators","nextId$1","CdkAccordionItem","_expansionDispatcher","_openCloseAllSubscription","EMPTY","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","unsubscribe","notify","CdkAccordionModule"],"mappings":"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","file":"default~drawer-drawer-module-ngfactory~expansion-panel-expansion-panel-module-ngfactory-es5.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, TemplateRef, Directive, EventEmitter, ChangeDetectorRef, ViewContainerRef, Optional, SkipSelf, Inject, ContentChild, ViewChild, ElementRef, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Host, ContentChildren, QueryList, NgModule } from '@angular/core';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { KEYS } from '@terminus/ngx-tools/keycodes';\nimport { hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, EMPTY, merge } from 'rxjs';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\nimport { trigger, state, style, transition, animate, group, query, animateChild } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { TsDocumentService } from '@terminus/ngx-tools/browser';\n\n/**\n * Time and timing curve for expansion panel animation\n */\nconst TS_EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead to a situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n */\nconst tsExpansionPanelAnimations = {\n    /**\n     * Animation that rotates the indicator arrow\n     */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(TS_EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /**\n     * Animation that expands and collapses the panel trigger height\n     */\n    expansionTriggerHeight: trigger('expansionHeight', [\n        state('collapsed, void', style({ height: '{{collapsedHeight}}' }), { params: { collapsedHeight: '48px' } }),\n        state('expanded', style({ height: '{{expandedHeight}}' }), { params: { expandedHeight: '64px' } }),\n        transition('expanded <=> collapsed, void => collapsed', group([\n            query('@indicatorRotate', animateChild(), { optional: true }),\n            animate(TS_EXPANSION_PANEL_ANIMATION_TIMING),\n        ])),\n    ]),\n    /**\n     * Animation that expands and collapses the panel content\n     */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({\n            height: '0px',\n            visibility: 'hidden',\n        })),\n        state('expanded', style({\n            height: '*',\n            visibility: 'visible',\n        })),\n        transition('expanded <=> collapsed, void => collapsed', animate(TS_EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n};\n\n/**\n * Token used to provide a {@link TsAccordionComponent} to {@link TsExpansionPanelComponent}.\n *\n * Used primarily to avoid circular imports between `TsAccordionComponent` and `TsExpansionPanelComponent`.\n */\nconst TS_ACCORDION = new InjectionToken('TS_ACCORDION');\n\n/**\n * {@link TsExpansionPanelComponent} content that will be rendered lazily when the panel is opened for the first time.\n *\n * @example\n * <ts-expansion-panel>\n *               <ts-expansion-panel-trigger>\n *                 Panel trigger\n *               </ts-expansion-panel-trigger>\n *\n *               <ng-template tsExpansionPanelContent>\n *                 Panel content\n *               </ng-template>\n * </ts-expansion-panel>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/expansion-panel</example-url>\n */\n// eslint-disable-next-line @angular-eslint/directive-selector\nlet TsExpansionPanelContentDirective = class TsExpansionPanelContentDirective {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(template) {\n        this.template = template;\n    }\n};\nTsExpansionPanelContentDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\nTsExpansionPanelContentDirective = __decorate([\n    Directive({ selector: 'ng-template[tsExpansionPanelContent]' }),\n    __metadata(\"design:paramtypes\", [TemplateRef])\n], TsExpansionPanelContentDirective);\n\n/**\n * Injection token that can be used to configure the defalt options for the expansion panel component.\n */\nconst TS_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('TS_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * Unique ID for each panel trigger ID\n */\nlet nextUniqueId = 0;\nconst Éµ0 = undefined;\n/**\n * An expansion panel component to show/hide content\n *\n * @example\n * <ts-expansion-panel\n *               [hideToggle]=\"true\"\n *               [isExpanded]=\"true\"\n *               [isDisabled]=\"true\"\n *               [transparentMode]=\"false\"\n *               (opened)=\"panelOpened()\"\n *               (closed)=\"panelClosed()\"\n *               (expandedChange)=\"panelStateChanged($event)\"\n *               (destroyed)=\"componentDestroyed()\"\n *               (afterCollapse)=\"collapseAnimationDone\"\n *               (afterExpand)=\"expandAnimationDone()\"\n * >\n *               <ts-expansion-panel-trigger>\n *                 Panel trigger\n *               </ts-expansion-panel-trigger>\n *\n *               Panel content\n * </ts-expansion-panel>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/expansion-panel</example-url>\n */\nlet TsExpansionPanelComponent = class TsExpansionPanelComponent extends CdkAccordionItem {\n    constructor(_changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, documentService, accordion, animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._uniqueSelectionDispatcher = _uniqueSelectionDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this.documentService = documentService;\n        this.animationMode = animationMode;\n        /**\n         * Stream of body animation done events\n         */\n        this.bodyAnimationDone = new Subject();\n        /**\n         * The ID for the associated trigger element. Used for a11y labelling.\n         */\n        this.triggerId = `ts-expansion-panel-trigger-${nextUniqueId++}`;\n        /**\n         * Stream that emits for changes in `@Input` properties\n         */\n        this.inputChanges = new Subject();\n        this._hideToggle = false;\n        this._transparentMode = false;\n        /**\n         * The event emitted after the panel body's expansion animation finishes\n         */\n        this.afterExpand = new EventEmitter();\n        /**\n         * The event emitted after the panel body's collapse animation finishes\n         */\n        this.afterCollapse = new EventEmitter();\n        this.accordion = accordion;\n        // We need a Subject with distinctUntilChanged, because the `done` event fires twice on some browsers.\n        // See https://github.com/angular/angular/issues/24084\n        this.bodyAnimationDone.pipe(untilComponentDestroyed(this), distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState)).subscribe(event => {\n            // istanbul ignore else\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /**\n     * Get the current expanded state\n     */\n    get currentExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /**\n     * Determine whether the expansion panel's content contains the currently-focused element\n     */\n    get contentContainsFocus() {\n        if (this.panelBody && this.documentService.document) {\n            const focusedElement = this.documentService.document.activeElement;\n            const bodyElement = this.panelBody.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n    /**\n     * Determine if the toggle indicator should be hidden\n     *\n     * @param value\n     */\n    set hideToggle(value) {\n        this._hideToggle = value;\n    }\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    /**\n     * Define if the panel should be disabled\n     *\n     * NOTE: CdkAccordionItem defines an input called `disabled`.\n     * This alias is to conform to our existing naming convention.\n     *\n     * @param value\n     */\n    set isDisabled(value) {\n        this.disabled = value;\n    }\n    get isDisabled() {\n        return this.disabled;\n    }\n    /**\n     * Define if the panel should be open\n     *\n     * NOTE: CdkAccordionItem defines an input called `expanded`.\n     * This alias is to conform to our existing naming convention.\n     *\n     * @param value\n     */\n    set isExpanded(value) {\n        this.expanded = value;\n    }\n    get isExpanded() {\n        return this.expanded;\n    }\n    /**\n     * Support for transparent mode. Default set to false\n     *\n     * @param value\n     */\n    set transparentMode(value) {\n        this._transparentMode = value;\n    }\n    get transparentMode() {\n        return this._transparentMode;\n    }\n    /**\n     * If a lazy-loaded template exists, inject it after the panel is opened\n     */\n    ngAfterContentInit() {\n        // istanbul ignore else\n        if (this.lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened.pipe(\n            // eslint-disable-next-line deprecation/deprecation\n            startWith(null), filter(() => this.expanded && !this.portal), take(1)).subscribe(() => {\n                this.portal = new TemplatePortal(this.lazyContent.template, this._viewContainerRef);\n            });\n        }\n    }\n    /**\n     * Send any input changes through the Subject stream\n     *\n     * @param changes\n     */\n    ngOnChanges(changes) {\n        this.inputChanges.next(changes);\n    }\n    /**\n     * Destroy the parent and finalize any subscriptions\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this.inputChanges.complete();\n    }\n};\nTsExpansionPanelComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher },\n    { type: ViewContainerRef },\n    { type: TsDocumentService },\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [TS_ACCORDION,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TS_EXPANSION_PANEL_DEFAULT_OPTIONS,] }] }\n];\n__decorate([\n    ContentChild(TsExpansionPanelContentDirective),\n    __metadata(\"design:type\", TsExpansionPanelContentDirective)\n], TsExpansionPanelComponent.prototype, \"lazyContent\", void 0);\n__decorate([\n    ViewChild('panelBody', { static: true }),\n    __metadata(\"design:type\", ElementRef)\n], TsExpansionPanelComponent.prototype, \"panelBody\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsExpansionPanelComponent.prototype, \"hideToggle\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsExpansionPanelComponent.prototype, \"isDisabled\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsExpansionPanelComponent.prototype, \"isExpanded\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsExpansionPanelComponent.prototype, \"transparentMode\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsExpansionPanelComponent.prototype, \"afterExpand\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsExpansionPanelComponent.prototype, \"afterCollapse\", void 0);\nTsExpansionPanelComponent = __decorate([\n    Component({\n        selector: 'ts-expansion-panel',\n        template: \"<ng-content select=\\\"ts-expansion-panel-trigger\\\"></ng-content>\\n\\n<div\\n  class=\\\"ts-expansion-panel__content\\\"\\n  role=\\\"region\\\"\\n  [@bodyExpansion]=\\\"currentExpandedState\\\"\\n  (@bodyExpansion.done)=\\\"bodyAnimationDone.next($event)\\\"\\n  [attr.aria-labelledby]=\\\"triggerId\\\"\\n  [attr.aria-hidden]=\\\"!expanded\\\"\\n  [id]=\\\"id\\\"\\n  #panelBody\\n>\\n  <div class=\\\"ts-expansion-panel__body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"portal\\\"></ng-template>\\n  </div>\\n\\n  <ng-content select=\\\"ts-expansion-panel-action-row\\\"></ng-content>\\n</div>\\n\",\n        // NOTE: @Outputs are defined here rather than using decorators since we are extending the @Outputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-outputs-metadata-property\n        outputs: [\n            'opened',\n            'closed',\n            'expandedChange',\n            'destroyed',\n        ],\n        animations: [tsExpansionPanelAnimations.bodyExpansion],\n        host: {\n            'class': 'ts-expansion-panel',\n            '[class.ts-expansion-panel--shadow]': '!transparentMode',\n            '[class.ts-expansion-panel--expanded]': 'expanded',\n            '[class.ts-expansion-panel--animation-noopable]': 'animationMode === \"NoopAnimations\"',\n        },\n        providers: [\n            // Provide TsAccordionComponent as undefined to prevent nested expansion panels from registering to the same accordion.\n            {\n                provide: TS_ACCORDION,\n                useValue: Éµ0,\n            },\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsExpansionPanel',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-expansion-panel{background:#fafafa;border-radius:4px;box-sizing:content-box;color:#302d35;display:block;margin:0;overflow:hidden}@media screen and (-ms-high-contrast:active){.ts-expansion-panel{outline:solid 1px}}.ts-expansion-panel.ts-expansion-panel--shadow{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.ts-accordion .ts-expansion-panel{border-radius:0}.ts-accordion .ts-expansion-panel:first-of-type{border-top-left-radius:4px;border-top-right-radius:4px}.ts-accordion .ts-expansion-panel:last-of-type{border-bottom-left-radius:4px;border-bottom-right-radius:4px}.ng-animate-disabled .ts-expansion-panel,.ts-expansion-panel.ng-animate-disabled,.ts-expansion-panel.ts-expansion-panel--animation-noopable{transition:none}.ts-expansion-panel .ts-expansion-panel__body{padding:0}.ts-expansion-panel--shadow .ts-expansion-panel__body{padding:0 24px 16px}.ts-expansion-panel__content{display:flex;flex-direction:column;overflow:visible}.ts-expansion-panel__action-row{border-top:1px solid #cecdd1;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.ts-expansion-panel__action-row .ts-button{margin-left:8px}\"]\n    }),\n    __param(4, Optional()), __param(4, SkipSelf()), __param(4, Inject(TS_ACCORDION)),\n    __param(5, Optional()), __param(5, Inject(ANIMATION_MODULE_TYPE)),\n    __param(6, Optional()), __param(6, Inject(TS_EXPANSION_PANEL_DEFAULT_OPTIONS)),\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef,\n        UniqueSelectionDispatcher,\n        ViewContainerRef,\n        TsDocumentService, Object, String, Object])\n], TsExpansionPanelComponent);\n\n/**\n * Trigger to open/close a {@link TsExpansionPanelComponent}\n *\n * @example\n * <ts-expansion-panel>\n *               <ts-expansion-panel-trigger\n *                 collapsedHeight=\"100px\"\n *                 expandedHeight=\"150px\"\n *               >\n *                 Panel trigger\n *               </ts-expansion-panel-trigger>\n *\n *               Panel content\n * </ts-expansion-panel>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/expansion-panel</example-url>\n */\nlet TsExpansionPanelTriggerComponent = class TsExpansionPanelTriggerComponent {\n    constructor(panel, elementRef, focusMonitor, changeDetectorRef, defaultOptions) {\n        this.panel = panel;\n        this.elementRef = elementRef;\n        this.focusMonitor = focusMonitor;\n        this.changeDetectorRef = changeDetectorRef;\n        const accordionHideToggleChange = panel.accordion\n            // NOTE: Underscore naming controlled by Material\n            // eslint-disable-next-line no-underscore-dangle\n            ? panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle))\n            : EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we need to subscribe and trigger change detection manually.\n        // eslint-disable-next-line deprecation/deprecation\n        merge(panel.opened, panel.closed, accordionHideToggleChange, panel.inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))).pipe(untilComponentDestroyed(this))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n        // Avoid focus being lost if the panel contained the focused element and was closed.\n        panel.closed.pipe(filter(() => panel.contentContainsFocus), untilComponentDestroyed(this)).subscribe(() => focusMonitor.focusVia(elementRef, 'program'));\n        // Subscribe to trigger focus events\n        focusMonitor.monitor(elementRef).subscribe(origin => {\n            if (origin && panel.accordion) {\n                panel.accordion.handleTriggerFocus(this);\n            }\n        });\n        // Set the default options if they exist\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Determine the current expanded state string of the panel\n     */\n    get currentPanelExpandedState() {\n        return this.panel.currentExpandedState;\n    }\n    /**\n     * Determine if the panel is currently expanded\n     */\n    get isExpanded() {\n        return this.panel.expanded;\n    }\n    /**\n     * Determine if current mode is transparent\n     */\n    get isTransparent() {\n        return this.panel.transparentMode;\n    }\n    /**\n     * Whether the associated panel is disabled.\n     *\n     * Implemented as a part of `FocusableOption`.\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    get shouldShowToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Stop monitoring focus events\n     */\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef);\n    }\n    /**\n     * Focuses the panel trigger.\n     *\n     * Implemented as a part of `FocusableOption`.\n     *\n     * @param origin - Origin of the action that triggered the focus.\n     */\n    focus(origin = 'program') {\n        this.focusMonitor.focusVia(this.elementRef, origin);\n    }\n    /**\n     * Toggle the expanded state of the panel\n     */\n    toggle() {\n        this.panel.toggle();\n    }\n    /**\n     * Handle keydown event calling to toggle() if appropriate\n     *\n     * @param event\n     */\n    keydown(event) {\n        const { code } = event;\n        const isSelectionKey = (code === KEYS.SPACE.code) || (code === KEYS.ENTER.code);\n        if (isSelectionKey) {\n            // istanbul ignore else\n            if (!hasModifierKey(event)) {\n                event.preventDefault();\n                this.toggle();\n            }\n        }\n        else if (this.panel.accordion) {\n            this.panel.accordion.handleTriggerKeydown(event);\n        }\n    }\n};\nTsExpansionPanelTriggerComponent.ctorParameters = () => [\n    { type: TsExpansionPanelComponent, decorators: [{ type: Host }] },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [TS_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsExpansionPanelTriggerComponent.prototype, \"collapsedHeight\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsExpansionPanelTriggerComponent.prototype, \"expandedHeight\", void 0);\nTsExpansionPanelTriggerComponent = __decorate([\n    Component({\n        animations: [\n            tsExpansionPanelAnimations.indicatorRotate,\n            tsExpansionPanelAnimations.expansionTriggerHeight,\n        ],\n        selector: 'ts-expansion-panel-trigger',\n        template: \"<span\\n  class=\\\"ts-expansion-panel__trigger-content\\\"\\n  role=\\\"button\\\"\\n>\\n  <ng-content select=\\\"ts-expansion-panel-trigger-title\\\"></ng-content>\\n  <ng-content select=\\\"ts-expansion-panel-trigger-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n\\n<span\\n  class=\\\"ts-expansion-panel__indicator\\\"\\n  [@indicatorRotate]=\\\"currentPanelExpandedState\\\"\\n  *ngIf=\\\"shouldShowToggle\\\"\\n></span>\\n\",\n        host: {\n            'class': 'ts-expansion-panel__trigger',\n            'role': 'button',\n            '[attr.id]': 'panel.triggerId',\n            '[attr.tabindex]': 'disabled ? -1 : 0',\n            '[attr.aria-controls]': 'panel.id',\n            '[attr.aria-expanded]': 'isExpanded',\n            '[attr.aria-disabled]': 'panel.disabled',\n            '[class.ts-expansion-panel__trigger--expanded]': 'isExpanded',\n            '[class.ts-expansion-panel__trigger--transparent]': 'isTransparent',\n            '(click)': 'toggle()',\n            '(keydown)': 'keydown($event)',\n            '[@expansionHeight]': `{\n      value: currentPanelExpandedState,\n      params: {\n        collapsedHeight: collapsedHeight,\n        expandedHeight: expandedHeight\n      }\n    }`,\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsExpansionPanelTrigger',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-expansion-panel__trigger{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:400;align-items:center;border-radius:inherit;display:flex;flex-direction:row;padding:0 24px}.ts-expansion-panel__trigger:not(.c-button):not(.c-input):not(.c-select):not(.ts-checkbox){line-height:20px}.ts-expansion-panel__trigger.ts-expansion-panel__trigger--transparent{padding:0}.ts-expansion-panel__trigger:focus,.ts-expansion-panel__trigger:hover{outline:0}.ts-expansion-panel__trigger.ts-expansion-panel__trigger--expanded:focus,.ts-expansion-panel__trigger.ts-expansion-panel__trigger--expanded:hover{background:inherit}.ts-expansion-panel__trigger[aria-disabled=true]{color:#cecdd1}.ts-expansion-panel__trigger[aria-disabled=true] .ts-expansion-panel__trigger-description,.ts-expansion-panel__trigger[aria-disabled=true] .ts-expansion-panel__trigger-title{color:inherit}.ts-expansion-panel__trigger:not([aria-disabled=true]){cursor:pointer}@media (hover:none){.ts-expansion-panel:not(.ts-expansion-panel--expanded):not([aria-disabled=true]) .ts-expansion-panel__trigger:hover{background:#fafafa}}.ts-expansion-panel__trigger-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.ts-expansion-panel__trigger-description,.ts-expansion-panel__trigger-title{display:flex;flex-grow:0;margin-right:32px}.ts-expansion-panel__trigger-description{color:#757575;flex-grow:2}.ts-expansion-panel__indicator::after{border-style:solid;border-width:0 2px 2px 0;color:#999;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.ts-expansion-panel:not(.ts-expansion-panel--expanded) .ts-expansion-panel__trigger:not([aria-disabled=true]).cdk-keyboard-focused,.ts-expansion-panel:not(.ts-expansion-panel--expanded) .ts-expansion-panel__trigger:not([aria-disabled=true]).cdk-program-focused,.ts-expansion-panel:not(.ts-expansion-panel--expanded) .ts-expansion-panel__trigger:not([aria-disabled=true]):hover{background:#f2f0f7}\"]\n    }),\n    __param(0, Host()),\n    __param(4, Inject(TS_EXPANSION_PANEL_DEFAULT_OPTIONS)), __param(4, Optional()),\n    __metadata(\"design:paramtypes\", [TsExpansionPanelComponent,\n        ElementRef,\n        FocusMonitor,\n        ChangeDetectorRef, Object])\n], TsExpansionPanelTriggerComponent);\n\nvar TsAccordionComponent_1;\n/**\n * Component to allow multiple {@link TsExpansionPanelComponent}'s to function as an accordion.\n *\n * @example\n * <ts-accordion\n *               [multi]=\"true\"\n *               [hideToggle]=\"true\"\n *               (destroyed)=\"accordionDestroyed()\"\n * >\n *               <ts-expansion-panel>\n *                 ...\n *               </ts-expansion-panel>\n *\n *               <ts-expansion-panel>\n *                 ...\n *               </ts-expansion-panel>\n *\n *               <ts-expansion-panel>\n *                 ...\n *               </ts-expansion-panel>\n * </ts-accordion>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/expansion-panel</example-url>\n */\nlet TsAccordionComponent = TsAccordionComponent_1 = class TsAccordionComponent extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        this._hideToggle = false;\n        /**\n         * The event emitted as the accordion is destroyed\n         */\n        this.destroyed = new EventEmitter();\n    }\n    /**\n     * Determine if the toggle indicator should be hidden\n     *\n     * @param value\n     */\n    set hideToggle(value) {\n        this._hideToggle = value;\n    }\n    get hideToggle() {\n        return this._hideToggle;\n    }\n    /**\n     * Initialize the key manager\n     */\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager(this.triggers).withWrap();\n    }\n    /**\n     * Alert consumers when the accordion is destroyed\n     */\n    ngOnDestroy() {\n        this.destroyed.emit();\n    }\n    /**\n     * Handle keyboard events coming in from the panel triggers\n     *\n     * @param event\n     */\n    handleTriggerKeydown(event) {\n        const { code } = event;\n        const manager = this.keyManager;\n        if (code === KEYS.HOME.code) {\n            manager.setFirstItemActive();\n            event.preventDefault();\n        }\n        else if (code === KEYS.END.code) {\n            manager.setLastItemActive();\n            event.preventDefault();\n        }\n        else {\n            this.keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Handle focus events for the trigger\n     *\n     * @param trigger - The trigger component that is receiving focus\n     */\n    handleTriggerFocus(trigger) {\n        this.keyManager.updateActiveItem(trigger);\n    }\n};\n__decorate([\n    ContentChildren(TsExpansionPanelTriggerComponent, { descendants: true }),\n    __metadata(\"design:type\", QueryList)\n], TsAccordionComponent.prototype, \"triggers\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsAccordionComponent.prototype, \"hideToggle\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsAccordionComponent.prototype, \"destroyed\", void 0);\nTsAccordionComponent = TsAccordionComponent_1 = __decorate([\n    Component({\n        selector: 'ts-accordion',\n        template: `<ng-content></ng-content>`,\n        // NOTE: @Inputs are defined here rather than using decorators since we are extending the @Inputs of the base class\n        // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n        inputs: ['multi'],\n        providers: [\n            {\n                provide: TS_ACCORDION,\n                useExisting: TsAccordionComponent_1,\n            },\n        ],\n        host: { class: 'ts-accordion' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsAccordion'\n    })\n], TsAccordionComponent);\n\n/**\n * {@link TsExpansionPanelComponent} action row that will be rendered at the bottom of the panel.\n *\n * @example\n * <ts-expansion-panel>\n *               <ts-expansion-panel-trigger>\n *                 Panel trigger\n *               </ts-expansion-panel-trigger>\n *\n *               Panel content\n *\n *               <ts-expansion-panel-action-row>\n *                 <button>Next</button>\n *               </ts-expansion-panel-action-row>\n * </ts-expansion-panel>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/expansion-panel</example-url>\n */\nlet TsExpansionPanelActionRowComponent = class TsExpansionPanelActionRowComponent {\n};\nTsExpansionPanelActionRowComponent = __decorate([\n    Component({\n        selector: 'ts-expansion-panel-action-row',\n        template: `<ng-content></ng-content>`,\n        host: { class: 'ts-expansion-panel__action-row' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsExpansionPanelActionRow'\n    })\n], TsExpansionPanelActionRowComponent);\n\nlet TsExpansionPanelTriggerDescriptionComponent = class TsExpansionPanelTriggerDescriptionComponent {\n};\nTsExpansionPanelTriggerDescriptionComponent = __decorate([\n    Component({\n        selector: 'ts-expansion-panel-trigger-description',\n        template: `<ng-content></ng-content>`,\n        host: { class: 'ts-expansion-panel__trigger-description' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsExpansionPanelTriggerDescription'\n    })\n], TsExpansionPanelTriggerDescriptionComponent);\n\nlet TsExpansionPanelTriggerTitleComponent = class TsExpansionPanelTriggerTitleComponent {\n};\nTsExpansionPanelTriggerTitleComponent = __decorate([\n    Component({\n        selector: 'ts-expansion-panel-trigger-title',\n        template: `<ng-content></ng-content>`,\n        host: { class: 'ts-expansion-panel__trigger-title' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsExpansionPanelTriggerTitle'\n    })\n], TsExpansionPanelTriggerTitleComponent);\n\nlet TsExpansionPanelModule = class TsExpansionPanelModule {\n};\nTsExpansionPanelModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            CdkAccordionModule,\n            PortalModule,\n        ],\n        declarations: [\n            TsExpansionPanelComponent,\n            TsExpansionPanelTriggerComponent,\n            TsExpansionPanelTriggerTitleComponent,\n            TsExpansionPanelTriggerDescriptionComponent,\n            TsExpansionPanelContentDirective,\n            TsExpansionPanelActionRowComponent,\n            TsAccordionComponent,\n        ],\n        exports: [\n            TsExpansionPanelComponent,\n            TsExpansionPanelTriggerComponent,\n            TsExpansionPanelTriggerTitleComponent,\n            TsExpansionPanelTriggerDescriptionComponent,\n            TsExpansionPanelContentDirective,\n            TsExpansionPanelActionRowComponent,\n            TsAccordionComponent,\n        ],\n    })\n], TsExpansionPanelModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TS_ACCORDION, TS_EXPANSION_PANEL_ANIMATION_TIMING, TS_EXPANSION_PANEL_DEFAULT_OPTIONS, TsAccordionComponent, TsExpansionPanelActionRowComponent, TsExpansionPanelComponent, TsExpansionPanelContentDirective, TsExpansionPanelModule, TsExpansionPanelTriggerComponent, TsExpansionPanelTriggerDescriptionComponent, TsExpansionPanelTriggerTitleComponent, tsExpansionPanelAnimations, Éµ0 };\n//# sourceMappingURL=terminus-ui-expansion-panel.js.map\n","<ng-content select=\"ts-expansion-panel-trigger\"></ng-content>\n\n<div\n  class=\"ts-expansion-panel__content\"\n  role=\"region\"\n  [@bodyExpansion]=\"currentExpandedState\"\n  (@bodyExpansion.done)=\"bodyAnimationDone.next($event)\"\n  [attr.aria-labelledby]=\"triggerId\"\n  [attr.aria-hidden]=\"!expanded\"\n  [id]=\"id\"\n  #panelBody\n>\n  <div class=\"ts-expansion-panel__body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"portal\"></ng-template>\n  </div>\n\n  <ng-content select=\"ts-expansion-panel-action-row\"></ng-content>\n</div>\n","<ng-content></ng-content>","<span\n  class=\"ts-expansion-panel__trigger-content\"\n  role=\"button\"\n>\n  <ng-content select=\"ts-expansion-panel-trigger-title\"></ng-content>\n  <ng-content select=\"ts-expansion-panel-trigger-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n\n<span\n  class=\"ts-expansion-panel__indicator\"\n  [@indicatorRotate]=\"currentPanelExpandedState\"\n  *ngIf=\"shouldShowToggle\"\n></span>\n","<ng-content></ng-content>","<ng-content></ng-content>","<ng-content></ng-content>","import { Directive, Input, EventEmitter, Optional, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/accordion.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion.\n * @type {?}\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /**\n         * Emits when the state of the accordion changes\n         */\n        this._stateChanges = new Subject();\n        /**\n         * Stream that emits true/false when openAll/closeAll is triggered.\n         */\n        this._openCloseAllActions = new Subject();\n        /**\n         * A readonly id value to use for unique selection coordination.\n         */\n        this.id = `cdk-accordion-${nextId++}`;\n        this._multi = false;\n    }\n    /**\n     * Whether the accordion should allow multiple expanded accordion items simultaneously.\n     * @return {?}\n     */\n    get multi() { return this._multi; }\n    /**\n     * @param {?} multi\n     * @return {?}\n     */\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n    /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    openAll() {\n        this._openCloseAll(true);\n    }\n    /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    closeAll() {\n        this._openCloseAll(false);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /**\n     * @private\n     * @param {?} expanded\n     * @return {?}\n     */\n    _openCloseAll(expanded) {\n        if (this.multi) {\n            this._openCloseAllActions.next(expanded);\n        }\n    }\n}\nCdkAccordion.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion',\n            },] }\n];\nCdkAccordion.propDecorators = {\n    multi: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CdkAccordion.ngAcceptInputType_multi;\n    /**\n     * Emits when the state of the accordion changes\n     * @type {?}\n     */\n    CdkAccordion.prototype._stateChanges;\n    /**\n     * Stream that emits true/false when openAll/closeAll is triggered.\n     * @type {?}\n     */\n    CdkAccordion.prototype._openCloseAllActions;\n    /**\n     * A readonly id value to use for unique selection coordination.\n     * @type {?}\n     */\n    CdkAccordion.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAccordion.prototype._multi;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/accordion-item.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion item.\n * @type {?}\n */\nlet nextId$1 = 0;\nconst Éµ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _expansionDispatcher\n     */\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /**\n         * Subscription to openAll/closeAll events.\n         */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /**\n         * Event emitted every time the AccordionItem is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted every time the AccordionItem is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event emitted when the AccordionItem is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * \\@docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /**\n         * The unique AccordionItem id.\n         */\n        this.id = `cdk-accordion-child-${nextId$1++}`;\n        this._expanded = false;\n        this._disabled = false;\n        /**\n         * Unregister function for _expansionDispatcher.\n         */\n        this._removeUniqueSelectionListener = (/**\n         * @return {?}\n         */\n        () => { });\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen((/**\n             * @param {?} id\n             * @param {?} accordionId\n             * @return {?}\n             */\n            (id, accordionId) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            }));\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /**\n     * Whether the AccordionItem is expanded.\n     * @return {?}\n     */\n    get expanded() { return this._expanded; }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    set expanded(expanded) {\n        expanded = coerceBooleanProperty(expanded);\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 * @type {?}\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the AccordionItem is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe((/**\n         * @param {?} expanded\n         * @return {?}\n         */\n        expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        }));\n    }\n}\nCdkAccordionItem.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                    // to the same accordion.\n                    { provide: CdkAccordion, useValue: Éµ0 },\n                ],\n            },] }\n];\n/** @nocollapse */\nCdkAccordionItem.ctorParameters = () => [\n    { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher }\n];\nCdkAccordionItem.propDecorators = {\n    closed: [{ type: Output }],\n    opened: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    expandedChange: [{ type: Output }],\n    expanded: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CdkAccordionItem.ngAcceptInputType_expanded;\n    /** @type {?} */\n    CdkAccordionItem.ngAcceptInputType_disabled;\n    /**\n     * Subscription to openAll/closeAll events.\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._openCloseAllSubscription;\n    /**\n     * Event emitted every time the AccordionItem is closed.\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.closed;\n    /**\n     * Event emitted every time the AccordionItem is opened.\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.opened;\n    /**\n     * Event emitted when the AccordionItem is destroyed.\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.destroyed;\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.expandedChange;\n    /**\n     * The unique AccordionItem id.\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._expanded;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._disabled;\n    /**\n     * Unregister function for _expansionDispatcher.\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._removeUniqueSelectionListener;\n    /** @type {?} */\n    CdkAccordionItem.prototype.accordion;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkAccordionItem.prototype._expansionDispatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/accordion-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkAccordionModule {\n}\nCdkAccordionModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n//# sourceMappingURL=accordion.js.map\n"]}