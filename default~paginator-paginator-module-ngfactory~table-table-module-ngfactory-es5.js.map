{"version":3,"sources":["webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/paginator/fesm2015/terminus-ui-paginator.js","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/paginator/terminus-ui-paginator.d.ts.TsPaginatorComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/tooltip/terminus-ui-tooltip.d.ts.TsTooltipComponent.html"],"names":["DEFAULT_RECORDS_PER_PAGE","DEFAULT_MAX_PREFERRED_RECORDS","DEFAULT_RECORDS_PER_PAGE_OPTIONS","TsPaginatorComponent","changeDetectorRef","DEFAULT_HIGH_RECORD_MESSAGE","allowUserInput","firstPageIcon","pageControl","previousPageIcon","nextPageIcon","lastPageIcon","_recordsPerPage","templateContext","$implicit","isZeroBased","firstPageTooltip","previousPageTooltip","nextPageTooltip","lastPageTooltip","_currentPageIndex","maxPreferredRecords","menuLocation","theme","_totalRecords","recordCountTooHighMessage","recordsPerPageChoices","recordsSelectLabel","showRecordsPerPageSelector","isSimpleMode","pageSelect","recordsPerPageChange","setValue","recordsPerPage","initialize","changes","currentPageIndex","currentValue","pagesArray","createPagesArray","totalRecords","currentPageLabel","createCurrentPageLabel","changePage","page","value","emit","detectChanges","destinationPage","currentPage","pages","destinationIsValid","firstPageIndex","length","notAlreadyOnPage","foundPage","find","currentPageChanged","isNextDisabled","undefined","isLastPage","message","max","selection","pagesCount","moreThanOne","lowestPerPage","Math","min","apply","findPage","allPages","index","name","createDefaultPageLabel","start","end","total","perPage","zeroBased","paginatorArray","recordsRemaining","pageNumber","rangeStart","rangeEnd","pageValue","push","sort","a","b","first","second","records","ctorParameters","type","Object","prototype","Number","String","Array","Boolean","selector","template","host","changeDetection","OnPush","encapsulation","None","exportAs","styles","TsPaginatorModule","imports","exports","declarations"],"mappings":"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","file":"default~paginator-paginator-module-ngfactory~table-table-module-ngfactory-es5.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, ChangeDetectorRef, Input, TemplateRef, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TsButtonModule } from '@terminus/ui-button';\nimport { TsMenuModule } from '@terminus/ui-menu';\nimport { TsOptionModule } from '@terminus/ui-option';\nimport { TsSelectionListModule } from '@terminus/ui-selection-list';\nimport { TsTooltipModule } from '@terminus/ui-tooltip';\nimport { coerceNumberProperty } from '@terminus/ngx-tools/coercion';\nimport { inputHasChanged } from '@terminus/ngx-tools/utilities';\n\n/**\n * Define the default count of records per page\n */\nconst DEFAULT_RECORDS_PER_PAGE = 10;\n/**\n * Default max records before message is shown\n */\nconst DEFAULT_MAX_PREFERRED_RECORDS = 100;\n/**\n * Define the default options for the records per page select menu\n */\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst DEFAULT_RECORDS_PER_PAGE_OPTIONS = [10, 20, 50];\n/**\n * A paginator component\n *\n * @example\n * <ts-paginator\n *              currentPageIndex=\"1\"\n *              firstPageTooltip=\"View first results\"\n *              [isSimpleMode]=\"true\"\n *              [isZeroBased]=\"true\"\n *              lastPageTooltip=\"View last results\"\n *              maxPreferredRecords=\"100\"\n *              menuLocation=\"below\"\n *              nextPageTooltip=\"View next results\"\n *              [paginatorMessageTemplate]=\"myTemplate\"\n *              previousPageTooltip=\"View previous results\"\n *              recordCountTooHighMessage=\"Please refine your filters.\"\n *              recordsPerPageChoices=\"[10, 20, 50]\"\n *              [showRecordsPerPageSelector]=\"true\"\n *              totalRecords=\"1450\"\n *              (pageSelect)=\"myMethod($event)\"\n *              (recordsPerPageChange)=\"myMethod($event)\"\n * ></ts-paginator>\n *\n * <ng-template #myTemplate let-message>\n *   <strong>{{ message }}</strong>\n *   <a href=\"/faq\">Learn more</a>\n * </ng-template>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/paginator</example-url>\n */\nlet TsPaginatorComponent = class TsPaginatorComponent {\n    constructor(changeDetectorRef) {\n        this.changeDetectorRef = changeDetectorRef;\n        /**\n         * Define the default message to show when too many records are returned\n         */\n        this.DEFAULT_HIGH_RECORD_MESSAGE = `That's a lot of results! Try refining your filters for better results.`;\n        /**\n         * This does not allow user input in selection list\n         */\n        this.allowUserInput = false;\n        /**\n         * Define the icon for the 'first page' button\n         */\n        this.firstPageIcon = 'first_page';\n        /**\n         * Set up a form control to pass to {@link TsSelectionListComponent}\n         */\n        this.pageControl = new FormControl();\n        /**\n         * Define the icon for the 'previous page' button\n         */\n        this.previousPageIcon = 'keyboard_arrow_left';\n        /**\n         * Define the icon for the 'next page' button\n         */\n        this.nextPageIcon = 'keyboard_arrow_right';\n        /**\n         * Define the icon for the 'last page' button\n         */\n        this.lastPageIcon = 'last_page';\n        this._recordsPerPage = DEFAULT_RECORDS_PER_PAGE;\n        /**\n         * Define the template context for the record count message\n         */\n        this.templateContext = { $implicit: this.DEFAULT_HIGH_RECORD_MESSAGE };\n        /**\n         * Define if the paging is 0-based or 1-based\n         */\n        this.isZeroBased = true;\n        /**\n         * Define the tooltip message for the first page tooltip\n         */\n        this.firstPageTooltip = 'View the first results';\n        /**\n         * Define the tooltip message for the previous page tooltip\n         */\n        this.previousPageTooltip = 'View the previous results';\n        /**\n         * Define the tooltip message for the next page tooltip\n         */\n        this.nextPageTooltip = 'View the next results';\n        /**\n         * Define the tooltip message for the last page tooltip\n         */\n        this.lastPageTooltip = 'View the last results';\n        this._currentPageIndex = 0;\n        /**\n         * Define how many pages exist to show a prompt about better filtering\n         */\n        this.maxPreferredRecords = DEFAULT_MAX_PREFERRED_RECORDS;\n        /**\n         * Define the menu location (open up or open down)\n         */\n        this.menuLocation = 'above';\n        /**\n         * Define the color theme\n         */\n        this.theme = 'accent';\n        this._totalRecords = 0;\n        /**\n         * Define the message to show when too many pages exist\n         */\n        this.recordCountTooHighMessage = this.DEFAULT_HIGH_RECORD_MESSAGE;\n        /**\n         * Define how many records are shown per page\n         */\n        this.recordsPerPageChoices = DEFAULT_RECORDS_PER_PAGE_OPTIONS;\n        /**\n         * Define the label for the records per page select\n         */\n        this.recordsSelectLabel = 'Per page';\n        /**\n         * Define if the records per page select menu should be visible\n         */\n        this.showRecordsPerPageSelector = true;\n        /**\n         * Determine if the paginator should be in 'simple' mode\n         *\n         * Simple mode: Page jump dropdown is converted to plain text, jump to last page button removed.\n         */\n        this.isSimpleMode = false;\n        /**\n         * Emit a page selected event\n         */\n        this.pageSelect = new EventEmitter();\n        /**\n         * Emit a change event when the records per page changes\n         */\n        this.recordsPerPageChange = new EventEmitter();\n        this.pageControl.setValue([this.recordsPerPage]);\n    }\n    /**\n     * Define the amount of records show per page\n     *\n     * @param value\n     */\n    // public recordsPerPage: number = DEFAULT_RECORDS_PER_PAGE;\n    set recordsPerPage(value) {\n        this._recordsPerPage = value;\n        this.pageControl.setValue([value]);\n    }\n    get recordsPerPage() {\n        return this._recordsPerPage;\n    }\n    /**\n     * Getter to return the index of the first page\n     */\n    get firstPageIndex() {\n        return this.isZeroBased ? 0 : 1;\n    }\n    /**\n     * Getter to return the index of the next page\n     */\n    get nextPageIndex() {\n        return this.currentPageIndex - this.firstPageIndex;\n    }\n    /**\n     * Getter to return the index of the last page\n     */\n    get lastPageIndex() {\n        return this.isZeroBased ? (this.pagesArray.length - 1) : this.pagesArray.length;\n    }\n    /**\n     * Define the current page\n     *\n     * @param page\n     */\n    set currentPageIndex(page) {\n        this._currentPageIndex = coerceNumberProperty(page);\n    }\n    get currentPageIndex() {\n        return this._currentPageIndex;\n    }\n    /**\n     * Define the total number of records\n     *\n     * @param records\n     */\n    set totalRecords(records) {\n        this._totalRecords = coerceNumberProperty(records);\n    }\n    get totalRecords() {\n        return this._totalRecords;\n    }\n    /**\n     * Initialize after the view is initialized\n     */\n    ngAfterViewInit() {\n        this.initialize();\n    }\n    /**\n     * Initialize on any changes\n     *\n     * @param changes - The object containing all changes since last cycle\n     */\n    ngOnChanges(changes) {\n        // If the record count changed, assign the new value to the template context\n        // istanbul ignore else\n        if (inputHasChanged(changes, 'recordCountTooHighMessage')) {\n            this.templateContext.$implicit = this.recordCountTooHighMessage;\n        }\n        // If the zeroBased input changes, update the current page index\n        if (inputHasChanged(changes, 'isZeroBased')) {\n            this.currentPageIndex = changes.isZeroBased.currentValue ? 0 : 1;\n        }\n        this.initialize();\n    }\n    /**\n     * Set up initial resources\n     */\n    initialize() {\n        this.pagesArray = this.createPagesArray(this.totalRecords, this.recordsPerPage, this.isZeroBased);\n        this.currentPageLabel = this.createCurrentPageLabel(this.currentPageIndex, this.pagesArray, this.totalRecords);\n        // Change to the current page\n        // istanbul ignore else\n        if (this.totalRecords > 0) {\n            this.changePage(this.currentPageIndex, -1, this.pagesArray);\n        }\n    }\n    /**\n     * Perform tasks when the current page is changed\n     *\n     * @param page - The selected page\n     */\n    currentPageChanged(page) {\n        // Set the current page\n        this.currentPageIndex = coerceNumberProperty(page.value);\n        // Create a new label for the menu\n        this.currentPageLabel =\n            this.createCurrentPageLabel(this.currentPageIndex, this.pagesArray, this.totalRecords);\n        // Emit an event\n        this.pageSelect.emit(page);\n        this.changeDetectorRef.detectChanges();\n    }\n    /**\n     * Manually trigger a page change event from a number\n     *\n     * @param destinationPage - The selected page number\n     * @param currentPage - The current page number\n     * @param pages - The collection of pages\n     */\n    changePage(destinationPage, currentPage, pages) {\n        const destinationIsValid = destinationPage >= this.firstPageIndex && destinationPage <= pages.length;\n        const notAlreadyOnPage = destinationPage !== currentPage;\n        // istanbul ignore else\n        if (destinationIsValid && notAlreadyOnPage) {\n            const foundPage = pages.find((page) => page.value === destinationPage);\n            // istanbul ignore else\n            if (foundPage) {\n                this.currentPageChanged(foundPage);\n            }\n        }\n    }\n    /**\n     * Check if a page is the first page\n     *\n     * @param page - The number of the current page\n     * @returns A boolean representing if this is the first page\n     */\n    isFirstPage(page) {\n        return coerceNumberProperty(page) === this.firstPageIndex;\n    }\n    /**\n     * Check if a page is the last page\n     *\n     * @param page - The number of the current page\n     * @returns A boolean representing if this is the last page\n     */\n    isLastPage(page) {\n        if (this.pagesArray) {\n            return page === (this.pagesArray.length - (this.isZeroBased ? 1 : 0));\n        }\n        return false;\n    }\n    /**\n     * Check if the next button is disabled\n     *\n     * @param page - The number of the current page\n     * @returns A boolena representing if the button is disabled.\n     */\n    isNextButtonDisabled(page) {\n        if (this.isNextDisabled === undefined) {\n            return this.isLastPage(page) || !this.pagesArray || !this.pagesArray.length;\n        }\n        return this.isNextDisabled;\n    }\n    /**\n     * Determine if the string exists\n     *\n     * @param message - The help message when too many results are returned\n     * @param max - The max number of records before the message should be shown\n     * @param totalRecords - The number of records\n     * @returns A boolean representing if the message should be shown\n     */\n    shouldShowRecordsMessage(message, max, totalRecords) {\n        if (totalRecords > max) {\n            return !!((message && message.length > 0));\n        }\n        return false;\n    }\n    /**\n     * Re-initialize the paginator when records per page changes\n     *\n     * @param selection - The selected records-per-page count\n     */\n    recordsPerPageUpdated(selection) {\n        this.recordsPerPage = selection.value;\n        this.currentPageIndex = this.firstPageIndex;\n        this.recordsPerPageChange.emit(selection.value);\n        this.initialize();\n    }\n    /**\n     * Determine if the page select menu should be disabled\n     *\n     * @param pagesCount - The number of pages\n     * @returns A boolean representing if the menu should be disabled\n     */\n    menuIsDisabled(pagesCount) {\n        const moreThanOne = 2;\n        return coerceNumberProperty(pagesCount) < moreThanOne;\n    }\n    /**\n     * Determine if the records-per-page menu should be disabled\n     *\n     * @param totalRecords - The total number of records\n     * @param recordsPerPageChoices - The array of counts representing how many records may be show\n     * per page\n     * @returns A boolean representing if the records select should be disabled\n     */\n    disableRecordsPerPage(totalRecords, recordsPerPageChoices) {\n        const lowestPerPage = Math.min.apply(Math, recordsPerPageChoices);\n        return totalRecords < lowestPerPage;\n    }\n    /**\n     * Create a new label based on the current page\n     *\n     * @param currentPage - The current page\n     * @param pages - The array of all pages\n     * @param totalRecords - The number of total records\n     * @returns The string to use as the current page label\n     */\n    createCurrentPageLabel(currentPage, pages, totalRecords) {\n        const findPage = (allPages, index) => pages.find((page) => page.value === index);\n        let foundPage = findPage(pages, currentPage);\n        // If no found page, try the previous page\n        if (!foundPage) {\n            foundPage = findPage(pages, currentPage - 1);\n            // istanbul ignore else\n            if (foundPage) {\n                // If we found the previous page,\n                // save the current page change back to the primary variable\n                this.currentPageIndex -= 1;\n            }\n        }\n        // This may be the case if there are no records\n        if (!foundPage || !foundPage.name) {\n            return this.createDefaultPageLabel(currentPage, totalRecords);\n        }\n        // '1 - 10 of 243'\n        return `${foundPage.name} of ${totalRecords}`;\n    }\n    /**\n     * Create a default label based on the records per page and total records\n     *\n     * @param currentPage - The current page\n     * @param totalRecords - The number of total records\n     * @returns The string to use as the current page label\n     */\n    createDefaultPageLabel(currentPage, totalRecords) {\n        const start = this.isZeroBased\n            ? (currentPage * this.recordsPerPage)\n            : (currentPage - 1) * this.recordsPerPage;\n        const end = start + this.recordsPerPage;\n        // '1 - 10'\n        if (this.isSimpleMode && !totalRecords) {\n            return `${start + 1} - ${end}`;\n        }\n        // '1 - 10 of 243'\n        return `${start + 1} - ${end} of ${totalRecords}`;\n    }\n    /**\n     * Create an array containing objects that represent each available page of records\n     *\n     * @param total - The total records remaining\n     * @param perPage - How many records are shown per page\n     * @param zeroBased - If the pages are based on a `0` index rather than `1`\n     * @returns The array representing all possible pages of records\n     */\n    createPagesArray(total, perPage, zeroBased) {\n        const paginatorArray = [];\n        let recordsRemaining = total;\n        let page = zeroBased ? 0 : 1;\n        // If there are no records just return an empty array\n        if (!recordsRemaining || recordsRemaining < 1) {\n            return paginatorArray;\n        }\n        while (recordsRemaining >= perPage) {\n            // We are creating the text for the range here so we are dealing with records based on 1\n            // (while the pages themselves may be based on 0 or 1)\n            const pageNumber = (page < 1) ? 1 : page;\n            const rangeStart = (pageNumber * perPage) - (perPage - 1);\n            const rangeEnd = pageNumber * perPage;\n            const pageValue = paginatorArray.length + 1;\n            // Create a page object\n            paginatorArray.push({\n                name: `${rangeStart} - ${rangeEnd}`,\n                // The value is zero based\n                value: (pageValue - (zeroBased ? 1 : 0)),\n            });\n            // Update the remaining count\n            recordsRemaining -= perPage;\n            // Set up for next loop if enough records exist\n            if (recordsRemaining >= perPage) {\n                page = pageValue + 1;\n            }\n        }\n        // If any records remain, add the partial group as the last page in the array\n        if (recordsRemaining > 0) {\n            let name;\n            let value;\n            const pageNumber = (page < 1) ? 1 : page;\n            const pageValue = paginatorArray.length + 1;\n            if (paginatorArray.length > 0) {\n                name = `${(pageNumber * perPage) + 1} - ${(pageNumber * perPage) + recordsRemaining}`;\n                value = (pageValue - (zeroBased ? 1 : 0));\n            }\n            else {\n                name = `${pageNumber} - ${recordsRemaining}`;\n                value = (pageValue - (zeroBased ? 1 : 0));\n            }\n            paginatorArray.push({\n                name,\n                value,\n            });\n        }\n        return paginatorArray.sort((a, b) => {\n            const first = coerceNumberProperty(a.value);\n            const second = coerceNumberProperty(b.value);\n            return (first < second) ? -1 : 1;\n        });\n    }\n    /**\n     * Tracking method for the pagesArray ngFor\n     *\n     * @param index - The current index\n     * @param page - The page object\n     * @returns The value to be used\n     */\n    trackPagesArray(index, page) {\n        return page ? page.name : undefined;\n    }\n};\nTsPaginatorComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"isZeroBased\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"firstPageTooltip\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"previousPageTooltip\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"nextPageTooltip\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"lastPageTooltip\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsPaginatorComponent.prototype, \"currentPageIndex\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], TsPaginatorComponent.prototype, \"maxPreferredRecords\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsPaginatorComponent.prototype, \"menuLocation\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", TemplateRef)\n], TsPaginatorComponent.prototype, \"paginatorMessageTemplate\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsPaginatorComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsPaginatorComponent.prototype, \"totalRecords\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsPaginatorComponent.prototype, \"recordCountTooHighMessage\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array)\n], TsPaginatorComponent.prototype, \"recordsPerPageChoices\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"recordsSelectLabel\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"showRecordsPerPageSelector\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"isSimpleMode\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], TsPaginatorComponent.prototype, \"isNextDisabled\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"pageSelect\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"recordsPerPageChange\", void 0);\nTsPaginatorComponent = __decorate([\n    Component({\n        selector: 'ts-paginator',\n        template: \"<div\\n  class=\\\"c-paginator qa-paginator\\\"\\n  [class.c-paginator--simple-mode]=\\\"isSimpleMode\\\"\\n>\\n\\n<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n    <ts-selection-list\\n      class=\\\"qa-paginator-per-page-select\\\"\\n      *ngIf=\\\"recordsPerPageChoices && showRecordsPerPageSelector\\\"\\n      [label]=\\\"recordsSelectLabel\\\"\\n      [isDisabled]=\\\"disableRecordsPerPage(totalRecords, recordsPerPageChoices)\\\"\\n      [noValidationOrHint]=\\\"true\\\"\\n      [formControl]=\\\"pageControl\\\"\\n      [allowUserInput]=\\\"allowUserInput\\\"\\n      (selectionChange)=\\\"recordsPerPageUpdated($event)\\\"\\n    >\\n      <ts-option\\n        [value]=\\\"count\\\"\\n        *ngFor=\\\"let count of recordsPerPageChoices\\\"\\n      >{{ count }}</ts-option>\\n    </ts-selection-list>\\n\\n\\n    <ts-tooltip [tooltipValue]=\\\"isFirstPage(currentPageIndex) ? '' : firstPageTooltip\\\">\\n      <ts-button\\n        class=\\\"qa-paginator-first-page-button\\\"\\n        [theme]=\\\"theme\\\"\\n        [iconName]=\\\"firstPageIcon\\\"\\n        [isDisabled]=\\\"isFirstPage(currentPageIndex)\\\"\\n        (clicked)=\\\"changePage(firstPageIndex, currentPageIndex, pagesArray)\\\"\\n      ></ts-button>\\n    </ts-tooltip>\\n\\n\\n    <ts-tooltip [tooltipValue]=\\\"isFirstPage(currentPageIndex) ? '' : previousPageTooltip\\\">\\n      <ts-button\\n        class=\\\"qa-paginator-previous-page-button\\\"\\n        [theme]=\\\"theme\\\"\\n        [iconName]=\\\"previousPageIcon\\\"\\n        [isDisabled]=\\\"isFirstPage(currentPageIndex)\\\"\\n        (clicked)=\\\"changePage(currentPageIndex - 1, currentPageIndex, pagesArray)\\\"\\n      ></ts-button>\\n    </ts-tooltip>\\n\\n\\n    <ts-menu\\n      *ngIf=\\\"!isSimpleMode\\\"\\n      class=\\\"qa-paginator-current-page-menu\\\"\\n      [theme]=\\\"theme\\\"\\n      [menuItemsTemplate]=\\\"menuItems\\\"\\n      [menuPositionY]=\\\"menuLocation\\\"\\n      [isDisabled]=\\\"menuIsDisabled(pagesArray?.length)\\\"\\n      [ngClass]=\\\"{'disabled': menuIsDisabled(pagesArray?.length)}\\\"\\n    >{{ currentPageLabel }}</ts-menu>\\n\\n    <div\\n      class=\\\"c-paginator__current-page\\\"\\n      *ngIf=\\\"isSimpleMode\\\"\\n    >{{ currentPageLabel }}</div>\\n\\n    <ts-tooltip [tooltipValue]=\\\"isNextButtonDisabled(currentPageIndex) ? '' : nextPageTooltip\\\">\\n      <ts-button\\n        class=\\\"qa-paginator-next-page-button\\\"\\n        [theme]=\\\"theme\\\"\\n        [iconName]=\\\"nextPageIcon\\\"\\n        [isDisabled]=\\\"isNextButtonDisabled(currentPageIndex)\\\"\\n        (clicked)=\\\"changePage(currentPageIndex + 1, currentPageIndex, pagesArray)\\\"\\n      ></ts-button>\\n    </ts-tooltip>\\n\\n\\n  <ts-tooltip\\n    [tooltipValue]=\\\"isNextButtonDisabled(currentPageIndex) ? '' : lastPageTooltip\\\"\\n    *ngIf=\\\"!isSimpleMode\\\"\\n  >\\n    <ts-button\\n        class=\\\"qa-paginator-last-page-button\\\"\\n        [theme]=\\\"theme\\\"\\n        [iconName]=\\\"lastPageIcon\\\"\\n        [isDisabled]=\\\"isNextButtonDisabled(currentPageIndex)\\\"\\n        (clicked)=\\\"changePage(lastPageIndex, currentPageIndex, pagesArray)\\\"\\n      ></ts-button>\\n    </ts-tooltip>\\n  </div>\\n\\n  <div\\n    class=\\\"c-paginator__message qa-paginator-message\\\"\\n    *ngIf=\\\"shouldShowRecordsMessage(recordCountTooHighMessage, maxPreferredRecords, totalRecords)\\\"\\n  >\\n    <ng-container\\n      [ngTemplateOutlet]=\\\"paginatorMessageTemplate || defaultPaginatorMessageTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"templateContext\\\"\\n    ></ng-container>\\n  </div>\\n\\n</div>\\n\\n\\n<ng-template #menuItems>\\n  <ts-button\\n    *ngFor=\\\"let page of pagesArray; trackBy: trackPagesArray\\\"\\n    (clicked)=\\\"currentPageChanged(page)\\\"\\n  >\\n    {{ page.name }}\\n  </ts-button>\\n</ng-template>\\n\\n<ng-template #defaultPaginatorMessageTemplate let-message>\\n  {{ message }}\\n</ng-template>\\n\",\n        host: { class: 'ts-paginator' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsPaginator',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-paginator{display:inline-block}.ts-paginator :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-paginator h1,.ts-paginator h2,.ts-paginator h3,.ts-paginator h4,.ts-paginator h5,.ts-paginator p{margin:unset}.ts-paginator .c-paginator{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:400;display:inline-block}.ts-paginator .c-paginator:not(.c-button):not(.c-input):not(.c-select):not(.ts-checkbox){line-height:20px}.c-paginator .c-paginator__message{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;color:#757575;margin:.4em 0;text-align:right}.c-paginator .c-paginator__current-page{display:inline-block;line-height:2.6em;margin-right:4px;margin-top:4px;text-align:center;width:8em}.c-paginator .ts-selection-list{width:var(--ts-space-base-large5)}.c-paginator .ts-button,.c-paginator .ts-selection-list{margin-right:4px}\"]\n    }),\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef])\n], TsPaginatorComponent);\n\nlet TsPaginatorModule = class TsPaginatorModule {\n};\nTsPaginatorModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FormsModule,\n            FlexLayoutModule,\n            ReactiveFormsModule,\n            TsButtonModule,\n            TsMenuModule,\n            TsOptionModule,\n            TsSelectionListModule,\n            TsTooltipModule,\n        ],\n        exports: [TsPaginatorComponent],\n        declarations: [TsPaginatorComponent],\n    })\n], TsPaginatorModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsPaginatorComponent, TsPaginatorModule };\n//# sourceMappingURL=terminus-ui-paginator.js.map\n","<div\n  class=\"c-paginator qa-paginator\"\n  [class.c-paginator--simple-mode]=\"isSimpleMode\"\n>\n\n<div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n    <ts-selection-list\n      class=\"qa-paginator-per-page-select\"\n      *ngIf=\"recordsPerPageChoices && showRecordsPerPageSelector\"\n      [label]=\"recordsSelectLabel\"\n      [isDisabled]=\"disableRecordsPerPage(totalRecords, recordsPerPageChoices)\"\n      [noValidationOrHint]=\"true\"\n      [formControl]=\"pageControl\"\n      [allowUserInput]=\"allowUserInput\"\n      (selectionChange)=\"recordsPerPageUpdated($event)\"\n    >\n      <ts-option\n        [value]=\"count\"\n        *ngFor=\"let count of recordsPerPageChoices\"\n      >{{ count }}</ts-option>\n    </ts-selection-list>\n\n\n    <ts-tooltip [tooltipValue]=\"isFirstPage(currentPageIndex) ? '' : firstPageTooltip\">\n      <ts-button\n        class=\"qa-paginator-first-page-button\"\n        [theme]=\"theme\"\n        [iconName]=\"firstPageIcon\"\n        [isDisabled]=\"isFirstPage(currentPageIndex)\"\n        (clicked)=\"changePage(firstPageIndex, currentPageIndex, pagesArray)\"\n      ></ts-button>\n    </ts-tooltip>\n\n\n    <ts-tooltip [tooltipValue]=\"isFirstPage(currentPageIndex) ? '' : previousPageTooltip\">\n      <ts-button\n        class=\"qa-paginator-previous-page-button\"\n        [theme]=\"theme\"\n        [iconName]=\"previousPageIcon\"\n        [isDisabled]=\"isFirstPage(currentPageIndex)\"\n        (clicked)=\"changePage(currentPageIndex - 1, currentPageIndex, pagesArray)\"\n      ></ts-button>\n    </ts-tooltip>\n\n\n    <ts-menu\n      *ngIf=\"!isSimpleMode\"\n      class=\"qa-paginator-current-page-menu\"\n      [theme]=\"theme\"\n      [menuItemsTemplate]=\"menuItems\"\n      [menuPositionY]=\"menuLocation\"\n      [isDisabled]=\"menuIsDisabled(pagesArray?.length)\"\n      [ngClass]=\"{'disabled': menuIsDisabled(pagesArray?.length)}\"\n    >{{ currentPageLabel }}</ts-menu>\n\n    <div\n      class=\"c-paginator__current-page\"\n      *ngIf=\"isSimpleMode\"\n    >{{ currentPageLabel }}</div>\n\n    <ts-tooltip [tooltipValue]=\"isNextButtonDisabled(currentPageIndex) ? '' : nextPageTooltip\">\n      <ts-button\n        class=\"qa-paginator-next-page-button\"\n        [theme]=\"theme\"\n        [iconName]=\"nextPageIcon\"\n        [isDisabled]=\"isNextButtonDisabled(currentPageIndex)\"\n        (clicked)=\"changePage(currentPageIndex + 1, currentPageIndex, pagesArray)\"\n      ></ts-button>\n    </ts-tooltip>\n\n\n  <ts-tooltip\n    [tooltipValue]=\"isNextButtonDisabled(currentPageIndex) ? '' : lastPageTooltip\"\n    *ngIf=\"!isSimpleMode\"\n  >\n    <ts-button\n        class=\"qa-paginator-last-page-button\"\n        [theme]=\"theme\"\n        [iconName]=\"lastPageIcon\"\n        [isDisabled]=\"isNextButtonDisabled(currentPageIndex)\"\n        (clicked)=\"changePage(lastPageIndex, currentPageIndex, pagesArray)\"\n      ></ts-button>\n    </ts-tooltip>\n  </div>\n\n  <div\n    class=\"c-paginator__message qa-paginator-message\"\n    *ngIf=\"shouldShowRecordsMessage(recordCountTooHighMessage, maxPreferredRecords, totalRecords)\"\n  >\n    <ng-container\n      [ngTemplateOutlet]=\"paginatorMessageTemplate || defaultPaginatorMessageTemplate\"\n      [ngTemplateOutletContext]=\"templateContext\"\n    ></ng-container>\n  </div>\n\n</div>\n\n\n<ng-template #menuItems>\n  <ts-button\n    *ngFor=\"let page of pagesArray; trackBy: trackPagesArray\"\n    (clicked)=\"currentPageChanged(page)\"\n  >\n    {{ page.name }}\n  </ts-button>\n</ng-template>\n\n<ng-template #defaultPaginatorMessageTemplate let-message>\n  {{ message }}\n</ng-template>\n","<span #tooltip=\"matTooltip\"\n  class=\"c-tooltip qa-tooltip\"\n  [matTooltip]=\"tooltipValue\"\n  [matTooltipPosition]=\"tooltipPosition\"\n  [ngClass]=\"{'c-tooltip--underline': hasUnderline}\"\n>\n  <ng-content></ng-content>\n</span>\n"]}