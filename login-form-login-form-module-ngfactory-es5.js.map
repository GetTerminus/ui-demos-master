{"version":3,"sources":["webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/login-form/fesm2015/terminus-ui-login-form.js","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/login-form/terminus-ui-login-form.d.ts.TsLoginFormComponent.html","webpack:///src/app/components/login-form/login-form-routing.module.ts","webpack:///src/app/components/login-form/login-form.component.html","webpack:///src/app/components/login-form/login-form.component.ts","webpack:///src/app/components/login-form/login-form.module.ts"],"names":["TsLoginFormComponent","formBuilder","validatorsService","forgotPasswordLink","forgotPasswordText","inProgress","isRedirecting","loginCTA","triggerFormReset","submission","loginForm","createForm","changes","hasOwnProperty","currentValue","resetForm","reset","group","email","required","password","rememberMe","get","ctorParameters","type","prototype","Array","Object","selector","template","host","changeDetection","OnPush","encapsulation","None","exportAs","styles","TsLoginFormModule","imports","providers","exports","declarations","routes","path","component","LoginFormRoutingModule","LoginFormComponent","progress","link","e","console","warn","setTimeout","log","loginFormComponent","LoginFormModule"],"mappings":"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","file":"login-form-login-form-module-ngfactory-es5.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, ViewChildren, QueryList, ViewChild, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormControl, Validators, FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { TsButtonModule } from '@terminus/ui-button';\nimport { TsCheckboxComponent, TsCheckboxModule } from '@terminus/ui-checkbox';\nimport { TsInputComponent, TsInputModule } from '@terminus/ui-input';\nimport { TsLinkModule } from '@terminus/ui-link';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\nimport { TsValidatorsService } from '@terminus/ui-validators';\n\n/**\n * This is the login-form UI Component\n *\n * @example\n * <ts-login-form\n *              [inProgress]=\"true\"\n *              [forgotPasswordLink]=\"['my/', 'path']\"\n *              [loginCTA]=\" 'Sign In' \"\n *              [forgotPasswordText]=\" 'Forget something?' \"\n *              (submission)=\"myMethod($event)\"\n * ></ts-login-form>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/login-form</example-url>\n */\nlet TsLoginFormComponent = class TsLoginFormComponent {\n    constructor(formBuilder, validatorsService) {\n        this.formBuilder = formBuilder;\n        this.validatorsService = validatorsService;\n        /**\n         * Define the link to the 'forgot password' view\n         */\n        this.forgotPasswordLink = ['/forgot'];\n        /**\n         * Define the text for the 'forgot password' link\n         */\n        this.forgotPasswordText = 'Forgot your password?';\n        /**\n         * Define if the form button is showing progress\n         */\n        this.inProgress = false;\n        /**\n         * Define if the user has successfully logged in and is being redirected\n         */\n        this.isRedirecting = false;\n        /**\n         * Define the login call to action\n         */\n        this.loginCTA = 'Log In';\n        /**\n         * Allow a consumer to reset the form via an @Input()\n         *\n         * @deprecated Please use the public method `resetForm()`\n         */\n        this.triggerFormReset = false;\n        /**\n         * Emit an event on form submission\n         */\n        this.submission = new EventEmitter();\n        this.loginForm = this.createForm();\n    }\n    /**\n     * Access the email form control\n     */\n    get emailControl() {\n        return this.loginForm.get('email');\n    }\n    /**\n     * Access the password form control\n     */\n    get passwordControl() {\n        return this.loginForm.get('password');\n    }\n    /**\n     * Access the rememberMe form control\n     */\n    get rememberMeControl() {\n        return this.loginForm.get('rememberMe');\n    }\n    /**\n     * Trigger a form reset if `triggerFormReset` is changed to TRUE\n     *\n     * @param changes - The inputs that have changed\n     */\n    ngOnChanges(changes) {\n        if (changes.hasOwnProperty('triggerFormReset') && changes.triggerFormReset.currentValue) {\n            this.resetForm();\n        }\n    }\n    /**\n     * Reset the form state\n     *\n     * HACK: Calling `reset` doesn't reset individual control validators so we also reinitialize the form.\n     */\n    resetForm() {\n        this.loginForm.reset();\n        this.loginForm = this.createForm();\n    }\n    /**\n     * Create the log in form\n     *\n     * @returns The log in FormGroup\n     */\n    createForm() {\n        return this.formBuilder.group({\n            email: new FormControl('', [Validators.required, this.validatorsService.email()]),\n            password: new FormControl('', Validators.required),\n            rememberMe: new FormControl(false),\n        });\n    }\n};\nTsLoginFormComponent.ctorParameters = () => [\n    { type: FormBuilder },\n    { type: TsValidatorsService }\n];\n__decorate([\n    ViewChildren(TsInputComponent),\n    __metadata(\"design:type\", QueryList)\n], TsLoginFormComponent.prototype, \"inputComponents\", void 0);\n__decorate([\n    ViewChild(TsCheckboxComponent, { static: true }),\n    __metadata(\"design:type\", TsCheckboxComponent)\n], TsLoginFormComponent.prototype, \"checkbox\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array)\n], TsLoginFormComponent.prototype, \"forgotPasswordLink\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsLoginFormComponent.prototype, \"forgotPasswordText\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsLoginFormComponent.prototype, \"inProgress\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsLoginFormComponent.prototype, \"isRedirecting\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsLoginFormComponent.prototype, \"loginCTA\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsLoginFormComponent.prototype, \"triggerFormReset\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsLoginFormComponent.prototype, \"submission\", void 0);\nTsLoginFormComponent = __decorate([\n    Component({\n        selector: 'ts-login-form',\n        template: \"<form\\n  class=\\\"c-login-form qa-login-form\\\"\\n  [formGroup]=\\\"loginForm\\\"\\n  fxLayout=\\\"column\\\"\\n  (keydown.enter)=\\\"loginForm?.valid && submission.emit(loginForm?.value)\\\"\\n>\\n\\n  <ts-input\\n    label=\\\"Email\\\"\\n    name=\\\"email\\\"\\n    type=\\\"email\\\"\\n    [formControl]=\\\"emailControl\\\"\\n    [isRequired]=\\\"true\\\"\\n    [spellcheck]=\\\"false\\\"\\n    [autocapitalize]=\\\"false\\\"\\n    autocomplete=\\\"email\\\"\\n    tabindex=\\\"-1\\\"\\n    tabIndex=\\\"1\\\"\\n  ></ts-input>\\n\\n  <ts-input\\n    label=\\\"Password\\\"\\n    name=\\\"password\\\"\\n    type=\\\"password\\\"\\n    [formControl]=\\\"passwordControl\\\"\\n    [isRequired]=\\\"true\\\"\\n    autocomplete=\\\"current-password\\\"\\n    [autocapitalize]=\\\"false\\\"\\n    [spellcheck]=\\\"false\\\"\\n    tabindex=\\\"-1\\\"\\n    tabIndex=\\\"2\\\"\\n  ></ts-input>\\n\\n  <ts-checkbox\\n    [formControl]=\\\"rememberMeControl\\\"\\n    tabindex=\\\"-1\\\"\\n    tabIndex=\\\"3\\\"\\n    tsVerticalSpacing\\n  >\\n    Remember me\\n  </ts-checkbox>\\n\\n  <ts-link\\n    [destination]=\\\"forgotPasswordLink\\\"\\n    tsVerticalSpacing\\n    tabindex=\\\"-1\\\"\\n    tabIndex=\\\"5\\\"\\n  >{{ forgotPasswordText }}</ts-link>\\n\\n  <div fxLayout=\\\"row\\\" fxFlexAlign=\\\"end\\\">\\n    <ts-button\\n      actionName=\\\"Submit\\\"\\n      buttonType=\\\"submit\\\"\\n      [showProgress]=\\\"inProgress || isRedirecting\\\"\\n      [isDisabled]=\\\"!loginForm?.valid\\\"\\n      (clicked)=\\\"submission.emit(loginForm?.value)\\\"\\n      tabindex=\\\"-1\\\"\\n      tabIndex=\\\"4\\\"\\n    >\\n      {{ loginCTA }}\\n    </ts-button>\\n  </div>\\n\\n</form>\\n\",\n        host: { class: 'ts-login-form' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsLoginForm',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-login-form{display:block;width:100%}.ts-login-form :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-login-form h1,.ts-login-form h2,.ts-login-form h3,.ts-login-form h4,.ts-login-form h5,.ts-login-form p{margin:unset}\"]\n    }),\n    __metadata(\"design:paramtypes\", [FormBuilder,\n        TsValidatorsService])\n], TsLoginFormComponent);\n\nlet TsLoginFormModule = class TsLoginFormModule {\n};\nTsLoginFormModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            ReactiveFormsModule,\n            TsButtonModule,\n            TsCheckboxModule,\n            TsInputModule,\n            TsLinkModule,\n            TsSpacingModule,\n        ],\n        providers: [TsValidatorsService],\n        exports: [TsLoginFormComponent],\n        declarations: [TsLoginFormComponent],\n    })\n], TsLoginFormModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsLoginFormComponent, TsLoginFormModule };\n//# sourceMappingURL=terminus-ui-login-form.js.map\n","<form\n  class=\"c-login-form qa-login-form\"\n  [formGroup]=\"loginForm\"\n  fxLayout=\"column\"\n  (keydown.enter)=\"loginForm?.valid && submission.emit(loginForm?.value)\"\n>\n\n  <ts-input\n    label=\"Email\"\n    name=\"email\"\n    type=\"email\"\n    [formControl]=\"emailControl\"\n    [isRequired]=\"true\"\n    [spellcheck]=\"false\"\n    [autocapitalize]=\"false\"\n    autocomplete=\"email\"\n    tabindex=\"-1\"\n    tabIndex=\"1\"\n  ></ts-input>\n\n  <ts-input\n    label=\"Password\"\n    name=\"password\"\n    type=\"password\"\n    [formControl]=\"passwordControl\"\n    [isRequired]=\"true\"\n    autocomplete=\"current-password\"\n    [autocapitalize]=\"false\"\n    [spellcheck]=\"false\"\n    tabindex=\"-1\"\n    tabIndex=\"2\"\n  ></ts-input>\n\n  <ts-checkbox\n    [formControl]=\"rememberMeControl\"\n    tabindex=\"-1\"\n    tabIndex=\"3\"\n    tsVerticalSpacing\n  >\n    Remember me\n  </ts-checkbox>\n\n  <ts-link\n    [destination]=\"forgotPasswordLink\"\n    tsVerticalSpacing\n    tabindex=\"-1\"\n    tabIndex=\"5\"\n  >{{ forgotPasswordText }}</ts-link>\n\n  <div fxLayout=\"row\" fxFlexAlign=\"end\">\n    <ts-button\n      actionName=\"Submit\"\n      buttonType=\"submit\"\n      [showProgress]=\"inProgress || isRedirecting\"\n      [isDisabled]=\"!loginForm?.valid\"\n      (clicked)=\"submission.emit(loginForm?.value)\"\n      tabindex=\"-1\"\n      tabIndex=\"4\"\n    >\n      {{ loginCTA }}\n    </ts-button>\n  </div>\n\n</form>\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { LoginFormComponent } from './login-form.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginFormComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginFormRoutingModule { }\n","<ts-card>\n  <div tsVerticalSpacing>\n    <button (click)=\"resetForm()\">Reset Form</button>\n    <br>\n    <button (click)=\"logForm()\">Log form to console</button>\n  </div>\n\n  <ts-login-form\n    [inProgress]=\"progress\"\n    (submission)=\"formSubmission($event)\"\n    tsVerticalSpacing\n  ></ts-login-form>\n</ts-card>\n","import {\n  Component,\n  ViewChild,\n} from '@angular/core';\n\nimport {\n  TsLoginFormResponse,\n  TsLoginFormComponent,\n} from '@terminus/ui-login-form';\n\n\n@Component({\n  selector: 'demo-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent {\n  public progress = false;\n  public link = '/reset';\n\n  @ViewChild(TsLoginFormComponent, { static: true })\n  loginFormComponent!: TsLoginFormComponent;\n\n  formSubmission(e: TsLoginFormResponse): void {\n    console.warn('DEMO: Form value: ', e);\n    this.progress = true;\n\n    setTimeout(() => {\n      this.resetForm();\n      this.progress = false;\n    }, 1000);\n  }\n\n  resetForm() {\n    console.log('DEMO: Reset form');\n    this.loginFormComponent.resetForm();\n  }\n\n  logForm(): void {\n    console.log('DEMO: Current form state: ', this.loginFormComponent.loginForm);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsLoginFormModule } from '@terminus/ui-login-form';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\n\nimport { LoginFormRoutingModule } from './login-form-routing.module';\nimport { LoginFormComponent } from './login-form.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginFormRoutingModule,\n    TsCardModule,\n    TsLoginFormModule,\n    TsSpacingModule,\n  ],\n  declarations: [\n    LoginFormComponent,\n  ],\n})\nexport class LoginFormModule {}\n"]}