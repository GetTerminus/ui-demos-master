{"version":3,"sources":["/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/csv-entry/fesm2015/terminus-ui-csv-entry.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/csv-entry/terminus-ui-csv-entry.d.ts.TsCSVEntryComponent.html","./src/app/components/csv-entry/csv-entry-routing.module.ts","./src/app/components/csv-entry/csv-entry.component.html","./src/app/components/csv-entry/csv-entry.component.ts","./src/app/components/csv-entry/csv-entry.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACA;AACiG;AACxF;AAC6C;AAChD;AACJ;AACa;AACP;AACT;AACkB;AAC2B;AACnB;AACtB;AACc;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gEAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0FAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0FAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0FAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD,8CAA8C,0DAAW;AACzD;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC,0CAA0C,0DAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAY,KAAK,8FAAuB;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gBAAgB,MAAM,+BAA+B,0CAA0C,aAAa;AACtI;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2FAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAS,KAAK,kCAAkC,KAAK,OAAO;AACrF,sEAAsE,MAAM;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2FAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAS,KAAK,aAAa,KAAK,gBAAgB;AACzE,sEAAsE,MAAM;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS,KAAK,YAAY,KAAK,UAAU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8BAA8B;AACnE;AACA;AACA;AACA,iFAAiF,qCAAqC;AACtH,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,MAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,gDAAgD,wDAAS,oBAAoB,wDAAS;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA,qCAAqC,0DAAW,cAAc,0DAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAW;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA,wBAAwB,sFAAsB;AAC9C;AACA;AACA,6BAA6B,0DAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,2BAA2B,2BAA2B;AACtD;AACA,wBAAwB,+DAA+D,2BAA2B;AAClH,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA,KAAK,OAAO,0DAAW,EAAE;AACzB,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,8EAAiB;AAC7B;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT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","file":"csv-entry-csv-entry-module-ngfactory-es2015.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, ChangeDetectorRef, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormControl, FormGroup, FormArray, FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { TsButtonModule } from '@terminus/ui-button';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { TsIconButtonModule } from '@terminus/ui-icon-button';\nimport { TsTooltipModule } from '@terminus/ui-tooltip';\nimport { debounceTime } from 'rxjs/operators';\nimport { TsDocumentService } from '@terminus/ngx-tools/browser';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@terminus/ngx-tools/coercion';\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\nimport { TS_SPACING } from '@terminus/ui-spacing';\nimport { stripControlCharacters } from '@terminus/ui-utilities';\n\nvar TsCSVEntryComponent_1;\n/**\n * Unique ID for each instance\n */\nlet nextUniqueId = 0;\nconst DEFAULT_ROW_COUNT = 4;\nconst DEFAULT_COLUMN_COUNT = 2;\nconst DEFAULT_MAX_ROWS = 2000;\nconst DEFAULT_VALIDATION_MESSAGES_MAX = 6;\n/**\n * This is the csv-entry UI Component\n *\n * @example\n * <ts-csv-entry\n *              columnCount=\"6\"\n *              [columnHeaders]=\"arrayOfHeaders\"\n *              [columnValidators]=\"arrayOfValidators\"\n *              [footerDirection]=\"ltr\"\n *              [fullWidth]=\"false\"\n *              id=\"my-id\"\n *              maxRows=\"1000\"\n *              rowCount=\"12\"\n *              outputFormat=\"csv\"\n *              (blobGenerated)=\"handleTheFileBlob($event)\"\n * ></ts-csv-entry>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/csv-entry</example-url>\n */\nlet TsCSVEntryComponent = TsCSVEntryComponent_1 = class TsCSVEntryComponent {\n    constructor(formBuilder, changeDetectorRef, documentService) {\n        this.formBuilder = formBuilder;\n        this.changeDetectorRef = changeDetectorRef;\n        this.documentService = documentService;\n        this.originalColumnCount = DEFAULT_COLUMN_COUNT;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-csv-entry-${nextUniqueId++}`;\n        /**\n         * Define the static height needed in the DOM for the external rows\n         */\n        this.fakeRowHeight = '35px';\n        /**\n         * Expose the flexbox layout gap\n         */\n        this.layoutGap = TS_SPACING.small[0];\n        /**\n         * Expose a validation message if too many rows are added\n         */\n        this.tooManyRowsMessage = null;\n        /**\n         * Store records (rows)\n         */\n        this.records = [];\n        /**\n         * Initialize the records form with an empty array\n         */\n        this.recordsForm = this.formBuilder.group({\n            headers: this.formBuilder.array([]),\n            records: this.formBuilder.array([]),\n        });\n        /**\n         * Store a reference to all existing errors\n         */\n        this.allErrors = null;\n        this._columnCount = DEFAULT_COLUMN_COUNT;\n        this._columnValidators = [];\n        /**\n         * Define the layout direction for the footer\n         */\n        this.footerDirection = 'ltr';\n        /**\n         * Allow full-width mode\n         */\n        this.fullWidth = false;\n        this._id = this.uid;\n        this._maxRows = DEFAULT_MAX_ROWS;\n        /**\n         * Define output to be CSV rather than TSV\n         */\n        this.outputFormat = 'tsv';\n        this._rowCount = DEFAULT_ROW_COUNT;\n        /**\n         * Emit the built file blob\n         */\n        this.blobGenerated = new EventEmitter();\n    }\n    /**\n     * Get header cells as a form array\n     */\n    get headerCells() {\n        return this.recordsForm.get('headers');\n    }\n    /**\n     * Get rows as a form array\n     */\n    get rows() {\n        return this.recordsForm.get('records');\n    }\n    /**\n     * Set the number of columns\n     *\n     * @param value\n     */\n    set columnCount(value) {\n        this._columnCount = coerceNumberProperty(value, DEFAULT_COLUMN_COUNT);\n    }\n    get columnCount() {\n        return this._columnCount;\n    }\n    /**\n     * Allow static headers to be set\n     *\n     * @param value\n     */\n    set columnHeaders(value) {\n        this._columnHeaders = value;\n        this.clearHeaderCells();\n        this.addHeaders(this.columnCount, this.columnHeaders);\n    }\n    get columnHeaders() {\n        return this._columnHeaders;\n    }\n    /**\n     * Define any column validators\n     *\n     * @param value\n     */\n    set columnValidators(value) {\n        if (!value) {\n            return;\n        }\n        this._columnValidators = value;\n    }\n    get columnValidators() {\n        return this._columnValidators;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Set the maximum number of allowed rows\n     *\n     * @param value\n     */\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value, DEFAULT_MAX_ROWS);\n    }\n    get maxRows() {\n        return this._maxRows;\n    }\n    /**\n     * Define the number of rows\n     *\n     * @param value\n     */\n    set rowCount(value) {\n        this._rowCount = coerceNumberProperty(value, DEFAULT_ROW_COUNT);\n    }\n    get rowCount() {\n        return this._rowCount;\n    }\n    /**\n     * Add columns to existing rows + header\n     *\n     * @param rows - The existing body rows\n     * @param headerCells - The array of header cells\n     * @param columnsToAdd - The number of columns to add\n     */\n    static addColumnsToRows(rows, headerCells, columnsToAdd) {\n        // Add columns to body rows\n        for (let i = 0; i < rows.length; i += 1) {\n            const row = rows.controls[i];\n            // istanbul ignore else\n            if (row) {\n                const columns = row.controls.columns;\n                for (let j = 0; j < columnsToAdd; j += 1) {\n                    columns.controls.push(new FormControl());\n                }\n            }\n        }\n        // Add columns to header\n        for (let k = 0; k < columnsToAdd; k += 1) {\n            headerCells.controls.push(new FormControl());\n        }\n    }\n    /**\n     * Split pasted data into headers, rows, and columns\n     *\n     * @param content - The event content\n     * @param hasHeaders - Whether the content has a header row\n     * @returns An object containing all data\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static splitContent(content, hasHeaders) {\n        const result = {\n            headers: undefined,\n            rows: undefined,\n        };\n        const rows = content.split('\\n');\n        if (hasHeaders) {\n            result.headers = rows[0].split('\\t');\n            result.rows = rows.slice(1, rows.length).map(r => r.split('\\t'));\n        }\n        else {\n            result.rows = rows.slice(0, rows.length).map(r => r.split('\\t'));\n        }\n        return result;\n    }\n    /**\n     * Initialize empty rows\n     */\n    ngOnInit() {\n        this.addRows(this.rowCount, this.columnCount);\n        this.addHeaders(this.columnCount, this.columnHeaders);\n        this.originalColumnCount = this.columnCount;\n        this.recordsForm.valueChanges.pipe(\n        // Let the form values 'settle' before we emit anything\n        debounceTime(1), untilComponentDestroyed(this)).subscribe(v => {\n            const blob = this.generateBlob(v);\n            this.blobGenerated.emit(blob);\n        });\n    }\n    /**\n     * Needed for `untilComponentDestroyed`\n     */\n    ngOnDestroy() { }\n    /**\n     * Add rows to the form\n     *\n     * @param rowCount - The number of rows to add\n     * @param columnCount - The number of columns each row should have\n     * @param content - The column content\n     * @param index - The row index\n     */\n    addRows(rowCount = 1, columnCount = this.columnCount, content, index) {\n        if ((this.rows.length + rowCount) > this.maxRows) {\n            // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n            const rowsThatDontFit = (rowCount === 1 ? 2 : rowCount) - ((this.rows.length + rowCount) - this.maxRows);\n            this.tooManyRowsMessage =\n                `Adding ${rowsThatDontFit} row${rowsThatDontFit > 1 ? 's' : ''} would exceed the maximum rows allowed (${this.maxRows}).`;\n            return;\n        }\n        if (this.tooManyRowsMessage) {\n            this.tooManyRowsMessage = null;\n        }\n        for (let i = 0; i < rowCount; i += 1) {\n            const indexToInjectAt = (index === undefined ? this.rowCount : index) + i;\n            const c = content ? content[i] : null;\n            const createdRow = this.createRow(this.rows.length, c);\n            if ((index !== undefined) && (index >= 0)) {\n                this.rows.insert(indexToInjectAt, createdRow);\n            }\n            else {\n                this.rows.push(createdRow);\n            }\n        }\n    }\n    /**\n     * Get the columns of a row\n     *\n     * @param row - The row\n     * @returns The array of columns\n     */\n    getColumns(row) {\n        return row.get('columns');\n    }\n    /**\n     * Update the form control for recordId on each row according to index.\n     */\n    updateAllRowIds() {\n        for (let i = 0; i < this.rows.length; i += 1) {\n            const row = this.rows.controls[i];\n            // istanbul ignore else\n            if (row) {\n                row.controls.recordId.setValue(i);\n            }\n        }\n    }\n    /**\n     * Handle paste event for standard content cell\n     *\n     * @param event - The paste event\n     * @param hasHeader - Whether the content has a header row\n     */\n    onPaste(event, hasHeader) {\n        var _a;\n        const eventContent = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('Text');\n        if (!eventContent) {\n            return;\n        }\n        // If the user is only pasting the content for a single cell - do nothing\n        const isSingleCell = (eventContent.indexOf('\\n') < 0) && (eventContent.indexOf('\\t') < 0);\n        if (isSingleCell) {\n            return;\n        }\n        hasHeader = coerceBooleanProperty(hasHeader);\n        const pastedRowId = parseInt(event.target.id.split('X')[0].split('_')[2], 10);\n        const content = TsCSVEntryComponent_1.splitContent(eventContent, hasHeader);\n        const neededRows = content.rows.length;\n        // If the paste was into a header cell, verify that header cell content doesn't already exist\n        if (hasHeader) {\n            this.clearAllRows();\n            this.clearHeaderCells();\n            this.addHeaders(content.headers.length, this.columnHeaders || content.headers);\n            this.columnCount = content.headers.length;\n            this.addRows(neededRows, content.headers.length, content.rows);\n        }\n        else {\n            // Else: the paste happened in a body cell\n            const pastedColumnCount = content.rows[0].length;\n            // If more columns were pasted than currently exist, increase the column count\n            if (pastedColumnCount > this.columnCount) {\n                const numberOfMissingColumns = pastedColumnCount - this.columnCount;\n                TsCSVEntryComponent_1.addColumnsToRows(this.rows, this.headerCells, numberOfMissingColumns);\n                this.columnCount = pastedColumnCount;\n            }\n            this.deleteRow(pastedRowId);\n            this.addRows(neededRows, content.rows.length, content.rows, pastedRowId);\n        }\n        this.updateAllRowIds();\n        this.updateErrors();\n        this.changeDetectorRef.detectChanges();\n    }\n    /**\n     * Expose ability to trigger error updates from the DOM\n     */\n    updateErrors() {\n        this.allErrors = this.collectErrors();\n    }\n    /**\n     * Helper to get the name (content) of a header cell for the title attribute\n     *\n     * @param index - The column index\n     * @returns The header cell content\n     */\n    getHeaderCellName(index) {\n        if (!this.headerCells || !this.headerCells.controls[index]) {\n            return '';\n        }\n        return this.headerCells.controls[index].value;\n    }\n    /**\n     * Stop accidental page navigation when scrolling to the edges of the CSV form\n     *\n     * @param event - The scroll wheel event\n     */\n    onScroll(event) {\n        if (!event) {\n            return;\n        }\n        const dir = (event.deltaX < 0) ? 'right' : 'left';\n        // NOTE: TypeScript doesn't believe `form` exists on `EventTarget`\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const targetEl = event.target;\n        if (!targetEl) {\n            return;\n        }\n        const borderSize = 2;\n        const scrollRight = targetEl.form.scrollWidth - (parseInt(targetEl.form.offsetWidth, 10) + borderSize) - targetEl.form.scrollLeft;\n        const scrollLeft = targetEl.form.scrollLeft;\n        const stopRightScroll = (dir === 'right') && (scrollLeft < 1);\n        const stopLeftScroll = (dir === 'left') && (scrollRight < 1);\n        // If scrolling horizontally and at either edge, stop the scroll event\n        if (event.deltaX !== 0 && (stopRightScroll || stopLeftScroll)) {\n            event.preventDefault();\n        }\n    }\n    /**\n     * Change focus to the cell below the current cell\n     *\n     * @param currentCellId - The ID of the currently focused cell\n     * @param up - The direction to move (up vs down)\n     */\n    selectCellInNextRow(currentCellId, up) {\n        if (!currentCellId) {\n            return;\n        }\n        const [rowId, columnId] = currentCellId.split('X');\n        const row = rowId.split('_')[2];\n        const column = columnId.split('_')[1];\n        const newId = `${this.uid}_r_${parseInt(row, 10) + (up ? -1 : 1)}Xc_${column}`;\n        const input = this.documentService.document.querySelector(`#${newId}`);\n        if (input) {\n            input.focus();\n        }\n        else {\n            // Else we must be on the last row so we add one more\n            this.addRows();\n            this.changeDetectorRef.detectChanges();\n            this.selectCellInNextRow(currentCellId);\n        }\n    }\n    /**\n     * Select the next cell or previous cell\n     *\n     * @param event - The KeyboardEvent\n     * @param currentCellId - The ID of the currently focused cell\n     * @param previous - If the movement is forward or backward\n     */\n    selectAdjacentCell(event, currentCellId, previous) {\n        // Prevent native tabindex functionality\n        event.preventDefault();\n        previous = coerceBooleanProperty(previous);\n        const [rowId, columnId] = currentCellId.split('X');\n        const row = parseInt(rowId.split('_')[2], 10);\n        const column = parseInt(columnId.split('_')[1], 10);\n        const isFirstColumn = column === 0;\n        const isLastColumn = column === (this.columnCount - 1);\n        let newColumnNumber;\n        let newRowNumber = row;\n        // If first column, move to last column of previous row\n        if (previous) {\n            // Backward\n            if (isFirstColumn) {\n                newColumnNumber = this.columnCount - 1;\n                newRowNumber += -1;\n            }\n            else {\n                newColumnNumber = column - 1;\n            }\n        }\n        else if (isLastColumn) {\n            // Forward\n            newColumnNumber = 0;\n            newRowNumber += 1;\n        }\n        else {\n            newColumnNumber = column + 1;\n        }\n        const newId = `${this.uid}_r_${newRowNumber}Xc_${newColumnNumber}`;\n        const input = this.documentService.document.querySelector(`#${newId}`);\n        // istanbul ignore else\n        if (input) {\n            input.focus();\n        }\n    }\n    /**\n     * Create an ID for a cell. Format: `ts-csv-entry-{number}_r_7Xc_2` would be the 2nd cell in the 7th row.\n     *\n     * @param recordIndex - The index of the record/row\n     * @param cellIndex - The index of the cell within the row\n     * @returns The ID\n     */\n    createId(recordIndex, cellIndex) {\n        return `${this.uid}_r_${recordIndex}Xc_${cellIndex}`;\n    }\n    /**\n     * Collect all errors from the recordsForm and set to allErrors\n     */\n    collectErrors() {\n        const group = this.recordsForm.get('records');\n        // istanbul ignore else\n        if (group) {\n            const errors = this.getFormErrors(group);\n            // istanbul ignore else\n            if (errors) {\n                return Object.keys(errors).map(key => ({\n                    control: key,\n                    // De-duplicate the errors array\n                    [key]: errors[key].filter((el, i, arr) => arr.indexOf(el) === i),\n                }));\n            }\n            return null;\n        }\n        return null;\n    }\n    /**\n     * Get all validation messages\n     *\n     * NOTE: Currently this only supports a custom error message for URL validation. Other messages can be added when the need arises.\n     * FIXME: Find a way to use the existing ValidationMessagesService\n     *\n     * @returns The array of validation messages\n     */\n    get validationMessages() {\n        if (!this.allErrors) {\n            return undefined;\n        }\n        const messages = [];\n        for (const errorObj of this.allErrors) {\n            const name = errorObj.control;\n            for (const error of errorObj[name]) {\n                let message = '';\n                // The ID is zero-based\n                message += `<b>Row ${parseInt(error.rowId, 10) + 1}:</b> `;\n                // istanbul ignore else\n                if (name === 'url') {\n                    const maxItemLength = 20;\n                    const errorItem = (error.actual.length > maxItemLength) ? `${error.actual.slice(0, maxItemLength)}...` : error.actual;\n                    message += `\"${errorItem}\" is not a valid URL.`;\n                }\n                // istanbul ignore else\n                if (name === 'required') {\n                    message += `Content is required.`;\n                }\n                messages.push(message);\n            }\n        }\n        // If more messages than allowed exist, truncate the list with a message\n        if (messages.length > DEFAULT_VALIDATION_MESSAGES_MAX) {\n            const count = messages.length - DEFAULT_VALIDATION_MESSAGES_MAX;\n            messages.length = DEFAULT_VALIDATION_MESSAGES_MAX;\n            messages.push(`and ${count} more errors...`);\n        }\n        return messages.length > 0 ? messages : undefined;\n    }\n    /**\n     * Delete a row\n     *\n     * @param index - The index of the row to delete\n     */\n    deleteRow(index) {\n        if (index === undefined || index === null || index < 0) {\n            return;\n        }\n        this.rows.removeAt(index);\n        this.updateAllRowIds();\n        this.updateErrors();\n    }\n    /**\n     * Reset the table to it's initial state\n     */\n    resetTable() {\n        this.clearAllRows();\n        this.clearHeaderCells();\n        this.columnCount = this.originalColumnCount;\n        this.addRows(this.rowCount, this.columnCount);\n        this.addHeaders(this.columnCount, this.columnHeaders);\n        this.allErrors = null;\n    }\n    /**\n     * Get all form errors from a FormGroup or FormArray\n     *\n     * NOTE: This external function and `result` object is needed since `getAllErrors` may be recursive\n     *\n     * @param form - The form\n     * @returns An object containing all errors\n     */\n    getFormErrors(form) {\n        const result = {};\n        this.getAllErrors(form, result);\n        return result;\n    }\n    /**\n     * Get all errors for the form\n     *\n     * @param form - The primary form group\n     * @param result - The collection of errors\n     * @param result.required\n     * @param result.url\n     * @returns An object containing all errors\n     */\n    getAllErrors(form, result) {\n        const keys = Object.keys(form.controls);\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for (let i = 0; i < keys.length; i += 1) {\n            const ctrl = form.get(keys[i]);\n            // istanbul ignore else\n            if (ctrl) {\n                const errors = (ctrl instanceof FormGroup || ctrl instanceof FormArray) ? this.getAllErrors(ctrl, result) : ctrl.errors;\n                // istanbul ignore else\n                if (errors) {\n                    // Get the record ID from the grandparent control\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    const grandparentControls = ctrl.parent.parent.controls;\n                    const rowId = grandparentControls.recordId\n                        ? grandparentControls.recordId.value /* istanbul ignore next - Unreachable */ : undefined;\n                    const errorKeys = Object.keys(errors);\n                    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n                    for (let j = 0; j < errorKeys.length; j += 1) {\n                        const errorKey = errorKeys[j];\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        let error = errors[errorKeys[j]];\n                        // Angular built in required validator only returns a boolean\n                        if (typeof error === 'boolean') {\n                            error = { valid: false };\n                        }\n                        // If the rowId exists, add it to the errors object\n                        // istanbul ignore else\n                        if (rowId !== undefined) {\n                            error.rowId = rowId;\n                        }\n                        // Add this error to the result object\n                        if (result[errorKey]) {\n                            result[errorKey].push(error);\n                        }\n                        else {\n                            result[errorKey] = [error];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Clear all rows\n     */\n    clearAllRows() {\n        this.recordsForm.setControl('records', this.formBuilder.array([]));\n    }\n    /**\n     * Clear header cells\n     */\n    clearHeaderCells() {\n        this.recordsForm.setControl('headers', this.formBuilder.array([]));\n    }\n    /**\n     * Add header content to the form\n     *\n     * @param headerCount - The number of header cells\n     * @param content - The cell's content\n     */\n    addHeaders(headerCount, content) {\n        for (let i = 0; i < headerCount; i += 1) {\n            const value = (content && content[i]) ? content[i] : null;\n            const ctrl = value ? new FormControl(value) : new FormControl();\n            this.headerCells.setControl(i, ctrl);\n        }\n    }\n    /**\n     * Create a row\n     *\n     * @param id - The row's ID\n     * @param content - The column's content\n     * @returns The FormGroup\n     */\n    createRow(id, content) {\n        return this.formBuilder.group({\n            recordId: new FormControl(id),\n            columns: this.formBuilder.array(this.createColumns(this.columnCount, content)),\n        });\n    }\n    /**\n     * Create an array of columns\n     *\n     * @param count - The number of columns to create\n     * @param content - An array of content to seed the columns with\n     * @returns The array of form controls\n     */\n    createColumns(count, content) {\n        const columns = [];\n        for (let i = 0; i < count; i += 1) {\n            let value = (content && content[i]) ? content[i] : null;\n            // Strip any control characters\n            if (value) {\n                value = stripControlCharacters(value);\n            }\n            const validator = this.columnValidators ? this.columnValidators[i] /* istanbul ignore next - Unreachable */ : null;\n            columns.push(new FormControl(value, validator));\n        }\n        return columns;\n    }\n    /**\n     * Generate a File blob from the form contents\n     *\n     * @param content - The recordForm content\n     * @returns The File blob\n     */\n    generateBlob(content) {\n        const prefix = 'data:text/csv;charset=utf-8,';\n        const headers = `${content.headers.join('\\t')}\\r\\n`;\n        // Encapsulate content with quotes and escape any existing quotes\n        const rows = `${content.records.map(v => v.columns.map(column => (column ? `\"${column.replace(/\"/g, '\"\"')}\"` : '')).join('\\t'))\n            .join('\\r\\n')}\\r\\n`;\n        let joined = prefix + headers + rows;\n        // istanbul ignore else\n        if (this.outputFormat === 'csv') {\n            joined = JSON.stringify(joined).replace(/\\\\t/g, ',');\n        }\n        return new Blob([joined], { type: 'text/csv' });\n    }\n};\nTsCSVEntryComponent.ctorParameters = () => [\n    { type: FormBuilder },\n    { type: ChangeDetectorRef },\n    { type: TsDocumentService }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsCSVEntryComponent.prototype, \"columnCount\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array),\n    __metadata(\"design:paramtypes\", [Array])\n], TsCSVEntryComponent.prototype, \"columnHeaders\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], TsCSVEntryComponent.prototype, \"columnValidators\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsCSVEntryComponent.prototype, \"footerDirection\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsCSVEntryComponent.prototype, \"fullWidth\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsCSVEntryComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsCSVEntryComponent.prototype, \"maxRows\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsCSVEntryComponent.prototype, \"outputFormat\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsCSVEntryComponent.prototype, \"rowCount\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsCSVEntryComponent.prototype, \"blobGenerated\", void 0);\nTsCSVEntryComponent = TsCSVEntryComponent_1 = __decorate([\n    Component({\n        selector: 'ts-csv-entry',\n        template: \"<div class=\\\"c-csv-entry qa-csv-entry\\\">\\n\\n  <div class=\\\"c-csv-entry__info qa-csv-entry-info\\\">\\n    {{ rows.length }} row{{ rows.length === 1 ? '' : 's' }}\\n    <br>\\n    {{ columnCount }} column{{ columnCount === 1 ? '' : 's' }}\\n  </div>\\n\\n  <div class=\\\"c-csv-entry__scroll\\\">\\n    <!-- NOTE: fxLayout cannot be defined on the scroll container -->\\n    <div fxLayout=\\\"row\\\">\\n\\n      <!-- Column for delete buttons -->\\n      <div fxLayout=\\\"column\\\">\\n        <!-- Fake row for header -->\\n        <div [style.height]=\\\"fakeRowHeight\\\" fxFlex=\\\"0 0 auto\\\"></div>\\n\\n        <div\\n          class=\\\"c-csv-entry__column-id\\\"\\n          [class.c-csv-entry__column-id--invalid]=\\\"row.invalid\\\"\\n          [attr.id]=\\\"'csv-row-id-' + (idIndex + 1)\\\"\\n          *ngFor=\\\"let row of rows?.controls; let idIndex = index\\\"\\n          fxFlex=\\\"0 0 auto\\\"\\n          fxLayout=\\\"row\\\"\\n          fxLayoutAlign=\\\"center center\\\"\\n        >\\n          <span fxFlex>\\n            {{ +row.controls?.recordId?.value + 1 }}\\n          </span>\\n        </div>\\n      </div>\\n\\n      <!-- Content -->\\n      <form\\n        class=\\\"c-csv-entry__form\\\"\\n        [formGroup]=\\\"recordsForm\\\"\\n        fxFlex\\n        #form\\n        (mousewheel)=\\\"onScroll($event)\\\"\\n      >\\n\\n        <!-- Header Cells -->\\n        <div\\n          class=\\\"c-csv-entry__row c-csv-entry__row--header qa-csv-entry-header-row\\\"\\n          formArrayName=\\\"headers\\\"\\n        >\\n          <input\\n            class=\\\"c-csv-entry__input c-csv-entry__input--header qa-csv-entry-header-cell\\\"\\n            type=\\\"text\\\"\\n            title=\\\"Header, Column: {{ getHeaderCellName(headerIndex) || headerIndex + 1 }}\\\"\\n            [readonly]=\\\"(columnHeaders && columnHeaders[headerIndex])\\\"\\n            *ngFor=\\\"let c of headerCells?.controls; let headerIndex = index\\\"\\n            [attr.id]=\\\"createId(-1, headerIndex)\\\"\\n            [formControlName]=\\\"headerIndex\\\"\\n            (paste)=\\\"onPaste($event, true)\\\"\\n            (keydown.enter)=\\\"selectCellInNextRow(createId(-1, headerIndex))\\\"\\n            (keydown.tab)=\\\"selectAdjacentCell($event, createId(-1, headerIndex))\\\"\\n            (keydown.shift.tab)=\\\"selectAdjacentCell($event, createId(-1, headerIndex), true)\\\"\\n          >\\n        </div>\\n\\n\\n        <!-- Body Rows -->\\n        <div formArrayName=\\\"records\\\">\\n          <div\\n            class=\\\"c-csv-entry__row qa-csv-entry-row\\\"\\n            *ngFor=\\\"let record of rows?.controls; let recordIndex = index\\\"\\n            [formGroupName]=\\\"recordIndex\\\"\\n          >\\n            <div\\n              formArrayName=\\\"columns\\\"\\n            >\\n              <input\\n                *ngFor=\\\"let c of getColumns(record)?.controls; let columnIndex = index\\\"\\n                class=\\\"c-csv-entry__input qa-csv-entry-cell\\\"\\n                [class.c-csv-entry__input--invalid]=\\\"c.invalid\\\"\\n                type=\\\"text\\\"\\n                title=\\\"Row: {{ record.controls?.recordId?.value + 1 }}, Column: {{ getHeaderCellName(columnIndex) || columnIndex + 1 }}\\\"\\n                [attr.id]=\\\"createId(recordIndex, columnIndex)\\\"\\n                [formControlName]=\\\"columnIndex\\\"\\n                (paste)=\\\"onPaste($event)\\\"\\n                (keydown.enter)=\\\"selectCellInNextRow(createId(recordIndex, columnIndex))\\\"\\n                (keydown.shift.enter)=\\\"selectCellInNextRow(createId(recordIndex, columnIndex), true)\\\"\\n                (keyup)=\\\"updateErrors()\\\"\\n                (keydown.tab)=\\\"selectAdjacentCell($event, createId(recordIndex, columnIndex))\\\"\\n                (keydown.shift.tab)=\\\"selectAdjacentCell($event, createId(recordIndex, columnIndex), true)\\\"\\n              >\\n            </div>\\n          </div>\\n        </div>\\n      </form>\\n\\n\\n      <!-- Column for delete buttons -->\\n      <div fxLayout=\\\"column\\\">\\n        <!-- Fake row for header -->\\n        <div [style.height]=\\\"fakeRowHeight\\\"  fxFlex=\\\"0 0 auto\\\"></div>\\n\\n        <ts-icon-button\\n          class=\\\"c-csv-entry__delete qa-csv-entry-delete\\\"\\n          [attr.id]=\\\"'csv-delete-' + (deleteIndex + 1)\\\"\\n          [attr.title]=\\\"'Delete row ' + (deleteIndex + 1)\\\"\\n          *ngFor=\\\"let row of rows?.controls; let deleteIndex = index;\\\"\\n          (click)=\\\"deleteRow(deleteIndex)\\\"\\n          fxFlex=\\\"noshrink\\\"\\n        >delete_forever</ts-icon-button>\\n      </div>\\n\\n    </div>\\n  </div>\\n\\n\\n  <!-- Validation messages -->\\n  <div\\n    class=\\\"c-csv-entry__messages\\\"\\n    fxLayout=\\\"column\\\"\\n    fxLayoutAlign=\\\"start stretch\\\"\\n    [fxLayoutGap]=\\\"layoutGap\\\"\\n  >\\n    <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center end\\\">\\n      <div\\n        class=\\\"c-csv-entry__message qa-csv-entry-message\\\"\\n        *ngFor=\\\"let message of validationMessages; let i = index\\\"\\n        [innerHTML]=\\\"message\\\"\\n      ></div>\\n      <div\\n        class=\\\"c-csv-entry__message qa-csv-entry-message\\\"\\n        *ngIf=\\\"tooManyRowsMessage\\\"\\n      >{{ tooManyRowsMessage }}</div>\\n    </div>\\n\\n    <div fxLayout=\\\"row\\\" [dir]=\\\"footerDirection\\\" fxLayoutAlign=\\\"space-between center\\\" [fxLayoutGap]=\\\"layoutGap\\\">\\n      <div dir=\\\"ltr\\\" fxLayoutGap=\\\"1em\\\">\\n        <ts-button\\n          id=\\\"ts-csv-reset\\\"\\n          class=\\\"qa-csv-entry-reset\\\"\\n          format=\\\"hollow\\\"\\n          theme=\\\"warn\\\"\\n          (clicked)=\\\"resetTable()\\\"\\n        >Reset Table</ts-button>\\n\\n        <ts-button\\n          id=\\\"ts-csv-add-row\\\"\\n          class=\\\"qa-csv-entry-add-row\\\"\\n          format=\\\"hollow\\\"\\n          (clicked)=\\\"addRows()\\\"\\n        >Add Row</ts-button>\\n      </div>\\n\\n      <span fxFlex></span>\\n\\n      <div>\\n        <ng-content></ng-content>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n        host: {\n            'class': 'ts-csv-entry',\n            '[class.c-csv-entry--full-width]': 'fullWidth',\n            '[attr.id]': 'id',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsCSVEntry',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-csv-entry{display:inline-block;font-size:16px;max-width:100%}.ts-csv-entry.c-csv-entry--full-width{display:block;width:100%}.ts-csv-entry.c-csv-entry--full-width .c-csv-entry__row{display:block}.ts-csv-entry.c-csv-entry--full-width .c-csv-entry__input{width:100%}.c-csv-entry{--csv-row-height:39px;--csv-cell-padding:8px;--csv-external-row-height:35px}.c-csv-entry .c-csv-entry__scroll{max-height:28.5em;overflow-x:-moz-hidden-unscrollable;overflow-y:auto}.c-csv-entry .c-csv-entry__info{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;line-height:1.2em;margin-bottom:4px;margin-right:40px;text-align:right}.c-csv-entry .c-csv-entry__form{border:1px solid #cecdd1;overflow-x:auto}.c-csv-entry .c-csv-entry__row{display:table-row;white-space:nowrap}.c-csv-entry .c-csv-entry__input{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;border:1px solid #cecdd1;display:table-cell;font-size:inherit;min-width:72px;padding:var(--csv-cell-padding)}.c-csv-entry .c-csv-entry__input+.c-csv-entry__input{border-left-width:0}.c-csv-entry .c-csv-entry__input:first-of-type{border-left:0}.c-csv-entry .c-csv-entry__input:last-of-type{border-right:0}.c-csv-entry .c-csv-entry__input:focus{background-color:#d3eaf9}.c-csv-entry .c-csv-entry__input--header{border-bottom-width:3px;border-top:0}.c-csv-entry .c-csv-entry__input--invalid{color:#c8604d}.c-csv-entry .c-csv-entry__delete{max-height:var(--csv-external-row-height)}.c-csv-entry .c-csv-entry__delete .ts-icon-button{color:#cecdd1}.c-csv-entry .c-csv-entry__column-id{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;color:#cecdd1;max-height:var(--csv-external-row-height);padding:var(--csv-cell-padding)}.c-csv-entry .c-csv-entry__column-id--invalid{color:#c8604d;font-weight:400}.c-csv-entry .c-csv-entry__messages{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:75%;font-weight:400;letter-spacing:.01em;color:#c8604d;line-height:1.2em;margin-left:15px;margin-right:40px;padding-top:4px}.c-csv-entry__row:not(.c-csv-entry__row--header):not(:last-child) .c-csv-entry__input{border-bottom-width:0}\"]\n    }),\n    __metadata(\"design:paramtypes\", [FormBuilder,\n        ChangeDetectorRef,\n        TsDocumentService])\n], TsCSVEntryComponent);\n\nlet TsCSVEntryModule = class TsCSVEntryModule {\n};\nTsCSVEntryModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            ReactiveFormsModule,\n            TsButtonModule,\n            TsIconButtonModule,\n            TsIconModule,\n            TsTooltipModule,\n        ],\n        declarations: [TsCSVEntryComponent],\n        exports: [TsCSVEntryComponent],\n    })\n], TsCSVEntryModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsCSVEntryComponent, TsCSVEntryModule };\n//# sourceMappingURL=terminus-ui-csv-entry.js.map\n","<div class=\"c-csv-entry qa-csv-entry\">\n\n  <div class=\"c-csv-entry__info qa-csv-entry-info\">\n    {{ rows.length }} row{{ rows.length === 1 ? '' : 's' }}\n    <br>\n    {{ columnCount }} column{{ columnCount === 1 ? '' : 's' }}\n  </div>\n\n  <div class=\"c-csv-entry__scroll\">\n    <!-- NOTE: fxLayout cannot be defined on the scroll container -->\n    <div fxLayout=\"row\">\n\n      <!-- Column for delete buttons -->\n      <div fxLayout=\"column\">\n        <!-- Fake row for header -->\n        <div [style.height]=\"fakeRowHeight\" fxFlex=\"0 0 auto\"></div>\n\n        <div\n          class=\"c-csv-entry__column-id\"\n          [class.c-csv-entry__column-id--invalid]=\"row.invalid\"\n          [attr.id]=\"'csv-row-id-' + (idIndex + 1)\"\n          *ngFor=\"let row of rows?.controls; let idIndex = index\"\n          fxFlex=\"0 0 auto\"\n          fxLayout=\"row\"\n          fxLayoutAlign=\"center center\"\n        >\n          <span fxFlex>\n            {{ +row.controls?.recordId?.value + 1 }}\n          </span>\n        </div>\n      </div>\n\n      <!-- Content -->\n      <form\n        class=\"c-csv-entry__form\"\n        [formGroup]=\"recordsForm\"\n        fxFlex\n        #form\n        (mousewheel)=\"onScroll($event)\"\n      >\n\n        <!-- Header Cells -->\n        <div\n          class=\"c-csv-entry__row c-csv-entry__row--header qa-csv-entry-header-row\"\n          formArrayName=\"headers\"\n        >\n          <input\n            class=\"c-csv-entry__input c-csv-entry__input--header qa-csv-entry-header-cell\"\n            type=\"text\"\n            title=\"Header, Column: {{ getHeaderCellName(headerIndex) || headerIndex + 1 }}\"\n            [readonly]=\"(columnHeaders && columnHeaders[headerIndex])\"\n            *ngFor=\"let c of headerCells?.controls; let headerIndex = index\"\n            [attr.id]=\"createId(-1, headerIndex)\"\n            [formControlName]=\"headerIndex\"\n            (paste)=\"onPaste($event, true)\"\n            (keydown.enter)=\"selectCellInNextRow(createId(-1, headerIndex))\"\n            (keydown.tab)=\"selectAdjacentCell($event, createId(-1, headerIndex))\"\n            (keydown.shift.tab)=\"selectAdjacentCell($event, createId(-1, headerIndex), true)\"\n          >\n        </div>\n\n\n        <!-- Body Rows -->\n        <div formArrayName=\"records\">\n          <div\n            class=\"c-csv-entry__row qa-csv-entry-row\"\n            *ngFor=\"let record of rows?.controls; let recordIndex = index\"\n            [formGroupName]=\"recordIndex\"\n          >\n            <div\n              formArrayName=\"columns\"\n            >\n              <input\n                *ngFor=\"let c of getColumns(record)?.controls; let columnIndex = index\"\n                class=\"c-csv-entry__input qa-csv-entry-cell\"\n                [class.c-csv-entry__input--invalid]=\"c.invalid\"\n                type=\"text\"\n                title=\"Row: {{ record.controls?.recordId?.value + 1 }}, Column: {{ getHeaderCellName(columnIndex) || columnIndex + 1 }}\"\n                [attr.id]=\"createId(recordIndex, columnIndex)\"\n                [formControlName]=\"columnIndex\"\n                (paste)=\"onPaste($event)\"\n                (keydown.enter)=\"selectCellInNextRow(createId(recordIndex, columnIndex))\"\n                (keydown.shift.enter)=\"selectCellInNextRow(createId(recordIndex, columnIndex), true)\"\n                (keyup)=\"updateErrors()\"\n                (keydown.tab)=\"selectAdjacentCell($event, createId(recordIndex, columnIndex))\"\n                (keydown.shift.tab)=\"selectAdjacentCell($event, createId(recordIndex, columnIndex), true)\"\n              >\n            </div>\n          </div>\n        </div>\n      </form>\n\n\n      <!-- Column for delete buttons -->\n      <div fxLayout=\"column\">\n        <!-- Fake row for header -->\n        <div [style.height]=\"fakeRowHeight\"  fxFlex=\"0 0 auto\"></div>\n\n        <ts-icon-button\n          class=\"c-csv-entry__delete qa-csv-entry-delete\"\n          [attr.id]=\"'csv-delete-' + (deleteIndex + 1)\"\n          [attr.title]=\"'Delete row ' + (deleteIndex + 1)\"\n          *ngFor=\"let row of rows?.controls; let deleteIndex = index;\"\n          (click)=\"deleteRow(deleteIndex)\"\n          fxFlex=\"noshrink\"\n        >delete_forever</ts-icon-button>\n      </div>\n\n    </div>\n  </div>\n\n\n  <!-- Validation messages -->\n  <div\n    class=\"c-csv-entry__messages\"\n    fxLayout=\"column\"\n    fxLayoutAlign=\"start stretch\"\n    [fxLayoutGap]=\"layoutGap\"\n  >\n    <div fxLayout=\"column\" fxLayoutAlign=\"center end\">\n      <div\n        class=\"c-csv-entry__message qa-csv-entry-message\"\n        *ngFor=\"let message of validationMessages; let i = index\"\n        [innerHTML]=\"message\"\n      ></div>\n      <div\n        class=\"c-csv-entry__message qa-csv-entry-message\"\n        *ngIf=\"tooManyRowsMessage\"\n      >{{ tooManyRowsMessage }}</div>\n    </div>\n\n    <div fxLayout=\"row\" [dir]=\"footerDirection\" fxLayoutAlign=\"space-between center\" [fxLayoutGap]=\"layoutGap\">\n      <div dir=\"ltr\" fxLayoutGap=\"1em\">\n        <ts-button\n          id=\"ts-csv-reset\"\n          class=\"qa-csv-entry-reset\"\n          format=\"hollow\"\n          theme=\"warn\"\n          (clicked)=\"resetTable()\"\n        >Reset Table</ts-button>\n\n        <ts-button\n          id=\"ts-csv-add-row\"\n          class=\"qa-csv-entry-add-row\"\n          format=\"hollow\"\n          (clicked)=\"addRows()\"\n        >Add Row</ts-button>\n      </div>\n\n      <span fxFlex></span>\n\n      <div>\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { CSVEntryComponent } from './csv-entry.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CSVEntryComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CSVEntryRoutingModule { }\n","<ts-card tsVerticalSpacing>\n  <h3 tsVerticalSpacing>CSV Entry</h3>\n\n  <div>\n    Footer direction:\n    <ul>\n      <li>\n        <label>\n          ltr\n          <input type=\"radio\" name=\"direction\" value=\"ltr\" [(ngModel)]=\"footerDirection\">\n        </label>\n      </li>\n      <li>\n        <label>\n          rtl\n          <input type=\"radio\" name=\"direction\" value=\"rtl\" [(ngModel)]=\"footerDirection\">\n        </label>\n      </li>\n    </ul>\n  </div>\n\n  <div style=\"max-width: 80%;\" tsVerticalSpacing>\n    <ts-csv-entry\n      [columnValidators]=\"validators\"\n      [columnHeaders]=\"['foo', 'bar']\"\n      [footerDirection]=\"footerDirection\"\n      (blobGenerated)=\"file($event)\"\n    >\n      <button>My Custom Content!</button>\n    </ts-csv-entry>\n  </div>\n\n  <button (click)=\"customReset()\">Custom table reset</button>\n  <br>\n  <button (click)=\"generateFile()\">Generate file & download</button>\n</ts-card>\n\n\n<ts-card tsVerticalSpacing>\n  <h3 tsVerticalSpacing>CSV Full Width Entry</h3>\n\n  <div fxLayout=\"row\">\n    <ts-csv-entry\n      [columnValidators]=\"validators\"\n      [columnHeaders]=\"['Full Width']\"\n      (blobGenerated)=\"file($event)\"\n      [fullWidth]=\"true\"\n      columnCount=1\n    ></ts-csv-entry>\n  </div>\n\n</ts-card>\n","import { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { TsCSVEntryComponent } from '@terminus/ui-csv-entry';\nimport { TsValidatorsService } from '@terminus/ui-validators';\n\n\n@Component({\n  selector: 'demo-csv-entry',\n  templateUrl: './csv-entry.component.html',\n})\nexport class CSVEntryComponent {\n  public validators = [\n    Validators.required,\n    this.validatorsService.url(),\n  ];\n  public results: string | undefined;\n  public blob;\n  public myFile;\n  public footerDirection: 'ltr' | 'rtl' = 'ltr';\n\n  @ViewChild(TsCSVEntryComponent, {\n    static: true,\n    read: false,\n  })\n  public csvComponent!: TsCSVEntryComponent;\n\n  constructor(\n    private validatorsService: TsValidatorsService,\n  ) {}\n\n  public file(v: Blob): void {\n    console.log('DEMO: Got file from CSV entry: ', v);\n    this.blob = v;\n  }\n\n  public generateFile(): void {\n    this.myFile = new File([this.blob], 'testCsv');\n    saveFile(this.blob, 'test');\n  }\n\n  public customReset(): void {\n    this.csvComponent.resetTable();\n  }\n}\n\n\n// Helper function to generate a file download for testing purposes\n/**\n * @param blob\n * @param filename\n */\nfunction saveFile(blob: Blob, filename: string) {\n  if (window.navigator.msSaveOrOpenBlob) {\n    window.navigator.msSaveOrOpenBlob(blob, filename);\n  } else {\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    const url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = filename;\n    a.click();\n    setTimeout(() => {\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    }, 0);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsCSVEntryModule } from '@terminus/ui-csv-entry';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\nimport { TsValidatorsModule } from '@terminus/ui-validators';\n\nimport { CSVEntryRoutingModule } from './csv-entry-routing.module';\nimport { CSVEntryComponent } from './csv-entry.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CSVEntryRoutingModule,\n    FormsModule,\n    TsCardModule,\n    TsCSVEntryModule,\n    TsSpacingModule,\n    TsValidatorsModule,\n  ],\n  declarations: [\n    CSVEntryComponent,\n  ],\n})\nexport class CSVEntryModule {}\n"],"sourceRoot":"webpack:///"}