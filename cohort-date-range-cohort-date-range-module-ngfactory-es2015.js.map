{"version":3,"sources":["/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/cohort-date-range/fesm2015/terminus-ui-cohort-date-range.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/cohort-date-range/terminus-ui-cohort-date-range.d.ts.TsCohortDateRangeComponent.html","./src/app/components/cohort-date-range/cohort-date-range-routing.module.ts","./src/app/components/cohort-date-range/cohort-date-range.component.html","./src/app/components/cohort-date-range/cohort-date-range.component.ts","./src/app/components/cohort-date-range/cohort-date-range.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACA;AACyF;AAChF;AACuB;AACnB;AACP;AACyC;AAC5B;AACM;;AAExE;AACA,4BAA4B,iCAAiC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB;AACvD,8BAA8B,wBAAwB;AACtD;AACA,gCAAgC,yBAAyB;AACzD,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,wBAAwB,0DAAW;AACnC,SAAS;AACT;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0DAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","file":"cohort-date-range-cohort-date-range-module-ngfactory-es2015.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, ViewChild, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormControl, FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { TsDateRangeModule } from '@terminus/ui-date-range';\nimport { TsOptionModule } from '@terminus/ui-option';\nimport { TsSelectionListComponent, TsSelectionListModule } from '@terminus/ui-selection-list';\nimport { coerceDateProperty } from '@terminus/ngx-tools/coercion';\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\n\n/**\n * Event object emitted by {@link TsCohortDateRangeComponent} when there is date range change\n */\nclass TsCohortDateRangeChanged {\n    constructor(start, end, source) {\n        this.start = start;\n        this.end = end;\n        this.source = source;\n    }\n}\n// Unique ID for each instance\nlet nextUniqueId = 0;\n/**\n * This is the cohort-date-range UI Component\n *\n *\n * @example\n * <ts-cohort-date-range\n *              [allowCustomDates]=\"true\"\n *              [cohorts]=\"myCohorts\"\n *              endMaxDate=\"{{ new Date(2017, 4, 30) }}\"\n *              endMinDate=\"{{ new Date(2017, 4, 1) }}\"\n *              id=\"myID\"\n *              startMaxDate=\"{{ new Date(2017, 4, 30) }}\"\n *              startMinDate=\"{{ new Date(2017, 4, 1) }}\"\n *              (cohortDateRangeChange)=\"myFunc($event)\"\n * ></ts-cohort-date-range>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/cohort-date-range</example-url>\n */\nlet TsCohortDateRangeComponent = class TsCohortDateRangeComponent {\n    constructor(formBuilder) {\n        this.formBuilder = formBuilder;\n        /**\n         * Define the custom date cohort\n         *\n         * @internal\n         */\n        this.customDateCohort = {\n            display: 'Custom Dates',\n            range: {\n                start: '',\n                end: '',\n            },\n        };\n        /**\n         * Initialize the date range with empty start and end date\n         *\n         * @internal\n         */\n        this.formGroup = this.formBuilder.group({\n            dateRange: this.formBuilder.group({\n                startDate: [''],\n                endDate: [''],\n            }),\n            cohort: new FormControl([]),\n        });\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-cohort-date-range-${nextUniqueId++}`;\n        this._allowCustomDates = true;\n        this._id = this.uid;\n        /**\n         * Disable the component\n         */\n        this.isDisabled = false;\n        /**\n         * Cohort change event emitter\n         */\n        this.cohortDateRangeChanged = new EventEmitter();\n    }\n    /**\n     * Get reference to the date range form group\n     *\n     * @internal\n     */\n    get dateRangeFormGroup() {\n        return this.formGroup.get('dateRange');\n    }\n    /**\n     * Get a reference to the cohort form control\n     *\n     * @internal\n     */\n    get cohortControl() {\n        return this.formGroup.get('cohort');\n    }\n    /**\n     * Define whether custom dates are allowed\n     *\n     * @param value\n     */\n    set allowCustomDates(value) {\n        this._allowCustomDates = value;\n        // If this flag is being toggled, set the original cohorts again which will add or remove the custom cohort option as needed.\n        this.cohorts = this.originalCohorts;\n    }\n    get allowCustomDates() {\n        return this._allowCustomDates;\n    }\n    /**\n     * Define the array of date cohorts\n     *\n     * @param value\n     */\n    set cohorts(value) {\n        if (!value) {\n            return;\n        }\n        this.originalCohorts = value;\n        this._cohorts = value.slice();\n        if (this.allowCustomDates) {\n            this._cohorts.push(this.customDateCohort);\n        }\n        const activeCohort = value.filter(c => c.active);\n        if (activeCohort.length) {\n            this.cohortControl.setValue(activeCohort);\n            this.setDateRangeValues(activeCohort[0].range);\n        }\n    }\n    get cohorts() {\n        return this._cohorts;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    ngOnInit() {\n        this.updateSelectOnRangeChange();\n    }\n    /**\n     * Needed for untilComponentDestroyed\n     */\n    ngOnDestroy() { }\n    /**\n     * Emit the change event\n     *\n     * @internal\n     * @param event - triggered by date range change\n     */\n    cohortDateRangeChange(event) {\n        this.cohortDateRangeChanged.emit(new TsCohortDateRangeChanged(event.start, event.end, this));\n    }\n    /**\n     * Called when selection changed\n     *\n     * @internal\n     * @param event - TsSelectChangeEvent\n     */\n    selectionChange(event) {\n        this.setDateRangeValues(event.value[0].range);\n    }\n    /**\n     * Function for tracking for-loops changes\n     *\n     * @internal\n     * @param index - The item index\n     * @returns The index\n     */\n    trackByFn(index) {\n        return index;\n    }\n    /**\n     * The display formatter for {@link TsSelectionListComponent}\n     *\n     * @param cohort - The cohort\n     * @returns The display value for the cohort\n     */\n    formatter(cohort) {\n        return cohort.display;\n    }\n    /**\n     * Update the date range form values\n     *\n     * @param range - The new range\n     */\n    setDateRangeValues(range) {\n        const newValues = {\n            startDate: range.start,\n            endDate: range.end,\n        };\n        // istanbul ignore else\n        if (newValues.startDate && newValues.endDate) {\n            this.dateRangeFormGroup.setValue(newValues);\n            this.cohortDateRangeChange(range);\n        }\n    }\n    /**\n     * Update the select when the date is manually changed to not match a cohort\n     */\n    updateSelectOnRangeChange() {\n        var _a;\n        // eslint-disable-next-line deprecation/deprecation\n        (_a = this.formGroup.get('dateRange')) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(untilComponentDestroyed(this)).subscribe(results => {\n            if (!this.cohorts || !this.cohorts.length) {\n                return;\n            }\n            const resultsStartTime = coerceDateProperty(results.startDate).getTime();\n            const resultsEndTime = coerceDateProperty(results.endDate).getTime();\n            const matchedCohorts = this.cohorts.filter(cohort => {\n                const cohortStartTime = coerceDateProperty(cohort.range.start).getTime();\n                const cohortEndTime = coerceDateProperty(cohort.range.end).getTime();\n                const cohortStartMatches = resultsStartTime === cohortStartTime;\n                const cohortEndMatches = resultsEndTime === cohortEndTime;\n                // istanbul ignore else\n                if (cohortStartMatches && cohortEndMatches) {\n                    return cohort;\n                }\n            });\n            // istanbul ignore else\n            if (matchedCohorts.length === 0) {\n                this.cohortControl.setValue([this.customDateCohort]);\n            }\n        });\n    }\n};\nTsCohortDateRangeComponent.ctorParameters = () => [\n    { type: FormBuilder }\n];\n__decorate([\n    ViewChild(TsSelectionListComponent, { static: true }),\n    __metadata(\"design:type\", TsSelectionListComponent)\n], TsCohortDateRangeComponent.prototype, \"selectionListComponent\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsCohortDateRangeComponent.prototype, \"allowCustomDates\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array),\n    __metadata(\"design:paramtypes\", [Array])\n], TsCohortDateRangeComponent.prototype, \"cohorts\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsCohortDateRangeComponent.prototype, \"dateLocale\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Date)\n], TsCohortDateRangeComponent.prototype, \"endMaxDate\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Date)\n], TsCohortDateRangeComponent.prototype, \"endMinDate\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsCohortDateRangeComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsCohortDateRangeComponent.prototype, \"isDisabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Date)\n], TsCohortDateRangeComponent.prototype, \"startMaxDate\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Date)\n], TsCohortDateRangeComponent.prototype, \"startMinDate\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsCohortDateRangeComponent.prototype, \"cohortDateRangeChanged\", void 0);\nTsCohortDateRangeComponent = __decorate([\n    Component({\n        selector: 'ts-cohort-date-range',\n        template: \"<ts-date-range\\n  class=\\\"ts-cohort-date-range__date-range\\\"\\n  [dateFormGroup]=\\\"dateRangeFormGroup\\\"\\n  [dateLocale]=\\\"dateLocale\\\"\\n  [isDisabled]=\\\"!allowCustomDates || isDisabled\\\"\\n  (dateRangeChange)=\\\"cohortDateRangeChange($event)\\\"\\n  [startMinDate]=\\\"startMinDate\\\"\\n  [startMaxDate]=\\\"startMaxDate\\\"\\n  [endMinDate]=\\\"endMinDate\\\"\\n  [endMaxDate]=\\\"endMaxDate\\\"\\n></ts-date-range>\\n\\n<ts-selection-list\\n  label=\\\"Select a date range\\\"\\n  class=\\\"ts-cohort-date-range__select\\\"\\n  [isDisabled]=\\\"isDisabled\\\"\\n  [allowUserInput]=\\\"false\\\"\\n  [formControl]=\\\"cohortControl\\\"\\n  [displayFormatter]=\\\"formatter\\\"\\n  (selectionChange)=\\\"selectionChange($event)\\\"\\n>\\n  <ts-option\\n    [value]=\\\"option\\\"\\n    [option]=\\\"option\\\"\\n    *ngFor=\\\"let option of cohorts; trackBy: trackByFn\\\"\\n  >\\n    {{ option.display }}\\n  </ts-option>\\n</ts-selection-list>\\n\",\n        host: {\n            'class': 'ts-cohort-date-range',\n            '[class.ts-cohort-date-range--disabled]': 'isDisabled',\n            '[attr.disabled]': 'isDisabled',\n            '[attr.aria-disabled]': 'isDisabled',\n            '[id]': 'id',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsCohortDateRange',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-cohort-date-range{--cohort-selection-list-minWidth:200px;display:block}.ts-cohort-date-range .ts-selection-list.ts-cohort-date-range__select{display:inline-block;min-width:var(--cohort-selection-list-minWidth)}.ts-date-range.ts-cohort-date-range__date-range{display:inline-block;margin-right:24px}\"]\n    }),\n    __metadata(\"design:paramtypes\", [FormBuilder])\n], TsCohortDateRangeComponent);\n\nlet TsCohortDateRangeModule = class TsCohortDateRangeModule {\n};\nTsCohortDateRangeModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            ReactiveFormsModule,\n            TsDateRangeModule,\n            TsOptionModule,\n            TsSelectionListModule,\n        ],\n        exports: [TsCohortDateRangeComponent],\n        declarations: [TsCohortDateRangeComponent],\n    })\n], TsCohortDateRangeModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsCohortDateRangeChanged, TsCohortDateRangeComponent, TsCohortDateRangeModule };\n//# sourceMappingURL=terminus-ui-cohort-date-range.js.map\n","<ts-date-range\n  class=\"ts-cohort-date-range__date-range\"\n  [dateFormGroup]=\"dateRangeFormGroup\"\n  [dateLocale]=\"dateLocale\"\n  [isDisabled]=\"!allowCustomDates || isDisabled\"\n  (dateRangeChange)=\"cohortDateRangeChange($event)\"\n  [startMinDate]=\"startMinDate\"\n  [startMaxDate]=\"startMaxDate\"\n  [endMinDate]=\"endMinDate\"\n  [endMaxDate]=\"endMaxDate\"\n></ts-date-range>\n\n<ts-selection-list\n  label=\"Select a date range\"\n  class=\"ts-cohort-date-range__select\"\n  [isDisabled]=\"isDisabled\"\n  [allowUserInput]=\"false\"\n  [formControl]=\"cohortControl\"\n  [displayFormatter]=\"formatter\"\n  (selectionChange)=\"selectionChange($event)\"\n>\n  <ts-option\n    [value]=\"option\"\n    [option]=\"option\"\n    *ngFor=\"let option of cohorts; trackBy: trackByFn\"\n  >\n    {{ option.display }}\n  </ts-option>\n</ts-selection-list>\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { CohortDateRangeComponent } from './cohort-date-range.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CohortDateRangeComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CohortDateRangeRoutingModule { }\n","<ts-card tsVerticalSpacing>\n  <h3 tsCardTitle tsVerticalSpacing>Demo Controls</h3>\n\n  <div>\n    <div tsVerticalSpacing>Start date minimum and maximum</div>\n    <form [formGroup]=\"constraintForm\" novalidate>\n      <ts-date-range\n        [dateFormGroup]=\"constraintForm.get('startDateRange')\"\n      ></ts-date-range>\n\n      <div tsVerticalSpacing>End date minimum and maximum</div>\n      <ts-date-range\n        [dateFormGroup]=\"constraintForm.get('endDateRange')\"\n      ></ts-date-range>\n    </form>\n  </div>\n</ts-card>\n\n<ts-card>\n  <form [formGroup]=\"myForm\" novalidate>\n    <ts-cohort-date-range\n      [cohorts]=\"cohorts\"\n      [allowCustomDates]=\"true\"\n      (cohortDateRangeChanged)=\"printRange($event)\"\n      [isDisabled]=\"false\"\n      [startMinDate]=\"constraintForm.get('startDateRange')?.get('startDate')?.value\"\n      [startMaxDate]=\"constraintForm.get('startDateRange')?.get('endDate')?.value\"\n      [endMinDate]=\"constraintForm.get('endDateRange')?.get('startDate')?.value\"\n      [endMaxDate]=\"constraintForm.get('endDateRange')?.get('endDate')?.value\"\n    ></ts-cohort-date-range>\n  </form>\n\n  <pre *ngIf=\"lastRange\">\n    Start: {{ lastRange.start }}\n    End: {{ lastRange.end }}\n  </pre>\n</ts-card>\n","import { Component } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  endOfDay,\n  startOfDay,\n  startOfMonth,\n  subDays,\n  subMonths,\n} from 'date-fns';\n\nimport {\n  TsCohortDateRangeChanged,\n  TsDateCohort,\n} from '@terminus/ui-cohort-date-range';\n\nconst currentDate: Date = new Date();\n\n\n@Component({\n  selector: 'demo-cohort-date-range',\n  templateUrl: './cohort-date-range.component.html',\n})\nexport class CohortDateRangeComponent {\n  public myForm: FormGroup = this.formBuilder.group({\n    dateRange: this.formBuilder.group({\n      startDate: [\n        null,\n        [\n          Validators.required,\n        ],\n      ],\n      endDate: [\n        null,\n        [Validators.required],\n      ],\n    }),\n  });\n  public constraintForm: FormGroup = this.formBuilder.group({\n    startDateRange: this.formBuilder.group({\n      startDate: [\n        startOfDay(subDays(new Date(), 120)),\n        [Validators.required],\n      ],\n      endDate: [\n        startOfDay(subDays(new Date(), 1)),\n        [Validators.required],\n      ],\n    }),\n    endDateRange: this.formBuilder.group({\n      startDate: [\n        startOfDay(subDays(new Date(), 119)),\n        [Validators.required],\n      ],\n      endDate: [\n        endOfDay(new Date()),\n        [Validators.required],\n      ],\n    }),\n  });\n  public cohorts: TsDateCohort[] = [\n    {\n      display: 'Last 90 days',\n      range: {\n        start: startOfDay(subDays(new Date(), 90)),\n        end: currentDate,\n      },\n    },\n    {\n      display: 'Last full month',\n      range: {\n        start: startOfDay(subMonths(startOfMonth(currentDate), 1)),\n        end: endOfDay(subDays(startOfMonth(currentDate), 1)),\n      },\n      active: true,\n    },\n  ];\n  public lastRange: TsCohortDateRangeChanged | undefined;\n\n\n  constructor(\n    private formBuilder: FormBuilder,\n  ) {}\n\n\n  public printRange(value: TsCohortDateRangeChanged): void {\n    // console.log('DEMO: formValue: ', value);\n    this.lastRange = value;\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsCohortDateRangeModule } from '@terminus/ui-cohort-date-range';\nimport { TsDateRangeModule } from '@terminus/ui-date-range';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\n\nimport { CohortDateRangeRoutingModule } from './cohort-date-range-routing.module';\nimport { CohortDateRangeComponent } from './cohort-date-range.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CohortDateRangeRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TsCardModule,\n    TsCohortDateRangeModule,\n    TsDateRangeModule,\n    TsSpacingModule,\n  ],\n  declarations: [\n    CohortDateRangeComponent,\n  ],\n})\nexport class CohortDateRangeModule {}\n"],"sourceRoot":"webpack:///"}