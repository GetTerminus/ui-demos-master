{"version":3,"sources":["webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/autocomplete/fesm2015/terminus-ui-autocomplete.js","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/autocomplete/terminus-ui-autocomplete.d.ts.TsAutocompleteComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/autocomplete/terminus-ui-autocomplete.d.ts.TsAutocompletePanelComponent.html","webpack:///home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/material/fesm2015/autocomplete.js","webpack:///src/app/components/autocomplete/autocomplete-routing.module.ts","webpack:///src/app/components/autocomplete/autocomplete.component.html","webpack:///src/app/components/autocomplete/autocomplete.component.ts","webpack:///src/app/components/autocomplete/autocomplete.module.ts"],"names":["TsAutocompletePanelComponent_1","TsAutocompletePanelSelectedEvent","source","option","nextUniqueId","TsAutocompletePanelComponent","changeDetectorRef","elementRef","showPanel","uid","isOpen","displayWith","_id","optionSelected","opened","closed","keyManager","options","withWrap","setVisibility","event","emit","panel","nativeElement","scrollTop","length","markForCheck","value","ctorParameters","type","prototype","Function","String","Object","selector","template","host","providers","provide","useExisting","changeDetection","OnPush","encapsulation","None","exportAs","styles","TsAutocompleteTriggerDirective_1","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","TS_AUTOCOMPLETE_SCROLL_STRATEGY","TS_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","TS_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","nextUniqueId$1","TsAutocompleteTriggerDirective","viewContainerRef","ngZone","documentService","viewportRuler","scrollStrategy","formField","canOpenOnNextFocus","closeKeyEventStream","componentDestroyed","manuallyFloatingLabel","optionSelections","autocompletePanel","map","selectionChange","onStable","asObservable","pipe","overlayAttached","viewportSubscription","EMPTY","autocompleteAttribute","_autocompleteDisabled","_reopenAfterSelection","onChange","onTouched","windowBlurHandler","document","activeElement","panelOpen","window","runOutsideAngular","addEventListener","removeEventListener","unsubscribe","destroyPanel","complete","overrideReopenFlag","resetLabel","overlayRef","hasAttached","detach","closingActionsSubscription","detectChanges","reopenAfterSelection","openPanel","subscribeToClosingActions","canOpen","previousValue","attachOverlay","floatLabel","target","parseFloat","keyCode","code","ESCAPE","preventDefault","activeOption","ENTER","selectViaInteraction","resetActiveItem","prevActiveItem","activeItem","isArrowKey","UP_ARROW","DOWN_ARROW","TAB","onKeydown","scrollToOption","fn","isDisabled","disabled","Promise","resolve","then","setTriggerValue","updateSize","width","getPanelWidth","portal","create","getOverlayConfig","keydownEvents","subscribe","altKey","next","change","attach","wasOpen","element","readOnly","autocompleteDisabled","skip","forEach","selected","deselect","closePanel","dispose","shouldAnimate","animateAndLockLabel","getConnectedOverlayOrigin","getConnectedElement","getBoundingClientRect","backdropClass","direction","hasBackdrop","positionStrategy","getOverlayPosition","position","flexibleConnectedTo","withFlexibleDimensions","withPush","withPositions","originX","originY","overlayX","overlayY","getHostWidth","setActiveItem","index","activeItemIndex","labelCount","optionGroups","newScrollPosition","getScrollTop","setScrollTop","displayFn","toDisplay","inputValue","control","clearPreviousSelectedOption","focus","emitSelectEvent","firstStable","optionChanges","changes","reapplyLastPosition","panelClosingActions","undefined","setValueAndClose","_a","tabOut","backdropClick","decorators","args","Boolean","multi","TsAutocompleteComponent_1","TsAutocompleteSelectedEvent","nextUniqueId$2","DEFAULT_MINIMUM_CHARACTER_COUNT","DEFAULT_DEBOUNCE_DELAY","TsAutocompleteChange","TsAutocompleteComponent","ngControl","componentName","autocompleteFormControl","labelChanges","optionIds","selfReference","stateChanges","querySubject","allowMultiple","allowDuplicateSelections","_debounceDelay","hideRequiredMarker","_isRequired","_minimumCharacters","showProgress","theme","validateOnChange","displayFormatter","v","valueComparator","a","b","duplicateSelection","optionDeselected","selection","query","queryChange","valueChange","valueAccessor","Error","setValue","searchQuery","valueChanges","newValue","emitEvent","setTimeout","debounceDelay","minimumCharacters","inputElement","queryIsValid","open","propagateChanges","autocompleteTrigger","updateValueAndValidity","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","valueToEmit","hasRelatedTarget","hasNodeName","nodeName","resetAutocompleteQuery","close","initKeyManager","updateActiveItem","isDuplicate","findIndex","o","concat","viewValue","updatePosition","filter","opt","el","focused","empty","_hint","ctrl","requiredFormControl","_value","descendants","Number","TsAutocompleteModule","imports","declarations","exports","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteActivatedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocompleteDefaultOptions","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","_activeOptionChanges","_isOpen","optionActivated","_classList","id","_autoActiveFirstOption","_keyManager","toArray","_setVisibility","_setVisibilityClasses","classList","split","reduce","className","trim","inputs","propDecorators","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","getMatAutocompleteMissingPanelError","_element","_overlay","_viewContainerRef","_zone","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","_onChange","_onTouched","_overlayAttached","autocomplete","onSelectionChange","_scrollStrategy","_getWindow","_isInsideShadowRoot","_positionStrategy","_setStrategyPositions","_overlayRef","_destroyPanel","_attachOverlay","_floatLabel","_resetLabel","_closingActionsSubscription","clickTarget","composedPath","contains","overlayElement","_setTriggerValue","_selectViaInteraction","_resetActiveItem","_canOpen","_scrollToOption","_previousValue","_animateAndLockLabel","_setScrollTop","_getScrollTop","_setValueAndClose","_control","_clearPreviousSelectedOption","_emitSelectEvent","_portal","_getOverlayConfig","stopPropagation","_getPanelWidth","setOrigin","_getConnectedElement","_subscribeToClosingActions","_getOverlayPosition","strategy","belowPositions","panelClass","abovePositions","positions","connectedTo","_getHostWidth","defaultView","_getOutsideClickStream","detachments","MatAutocompleteModule","routes","path","component","AutocompleteRoutingModule","AutocompleteComponent","states","name","population","myQuery$","fakeAsync","stateCtrl","required","singleStateCtrl","filteredStates","state","val","filterStates","console","log","filterValue","toLowerCase","indexOf","e","AutocompleteModule"],"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","file":"autocomplete-autocomplete-module-ngfactory-es5.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { Overlay, OverlayConfig, ViewportRuler, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, ChangeDetectorRef, ElementRef, ViewChild, TemplateRef, Input, QueryList, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, InjectionToken, isDevMode, ViewContainerRef, NgZone, Inject, Optional, Host, Directive, forwardRef, Self, ContentChildren, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NG_VALUE_ACCESSOR, FormControl, NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { TsCheckboxModule } from '@terminus/ui-checkbox';\nimport { TsChipCollectionComponent, TsChipModule } from '@terminus/ui-chip';\nimport { TsFormFieldComponent, TsFormFieldControl, TsFormFieldModule } from '@terminus/ui-form-field';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { TsInputModule } from '@terminus/ui-input';\nimport { TS_OPTION_PARENT_COMPONENT, TsOptionSelectionChange, countGroupLabelsBeforeOption, getOptionScrollPosition, TsOptionComponent, TsOptgroupComponent, TsOptionModule } from '@terminus/ui-option';\nimport { TsValidationMessagesModule } from '@terminus/ui-validation-messages';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Subject, defer, merge, Subscription, of, BehaviorSubject } from 'rxjs';\nimport { take, switchMap, filter, map, tap, delay, debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { TsDocumentService } from '@terminus/ngx-tools/browser';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@terminus/ngx-tools/coercion';\nimport { KEYS } from '@terminus/ngx-tools/keycodes';\nimport { isUnset, untilComponentDestroyed, hasRequiredControl } from '@terminus/ngx-tools/utilities';\nimport { TsUILibraryError } from '@terminus/ui-utilities';\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\nimport { isArray } from '@terminus/ngx-tools/type-guards';\n\nvar TsAutocompletePanelComponent_1;\n/**\n * Event object that is emitted when an autocomplete option is selected\n */\nclass TsAutocompletePanelSelectedEvent {\n    constructor(\n    // Reference to the autocomplete panel that emitted the event\n    // eslint-disable-next-line deprecation/deprecation\n    source, \n    // The option that was selected\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Unique ID for each instance\nlet nextUniqueId = 0;\n/**\n * The panel used to display autocomplete options when {@link TsOptionComponent} is in autocomplete mode.\n *\n * @deprecated Please use `TsSelectionListPanel`\n *\n * @example\n * <ts-autocomplete-panel\n *              [options]=\"myOptionsQueryList\"\n *              [optionGroups]=\"myOptionGroupsQueryList\"\n *              (optionsSelected)=\"doSomething($event)\"\n * ></ts-autocomplete-panel>\n */\nlet TsAutocompletePanelComponent = TsAutocompletePanelComponent_1 = class TsAutocompletePanelComponent {\n    constructor(changeDetectorRef, elementRef) {\n        this.changeDetectorRef = changeDetectorRef;\n        this.elementRef = elementRef;\n        /**\n         * Whether the autocomplete panel should be visible\n         */\n        this.showPanel = false;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-select-autocomplete-${nextUniqueId++}`;\n        /**\n         * Whether the autocomplete panel is open\n         */\n        this.isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger\n         */\n        this.displayWith = null;\n        this._id = this.uid;\n        /**\n         * Event that is emitted whenever an option from the list is selected\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed\n         */\n        this.closed = new EventEmitter();\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        // Note: this ID is being set internally by `TsSelectComponent` so no fallback is needed.\n        this._id = value;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Set up\n     */\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        // Set the initial visibility state.\n        this.setVisibility();\n    }\n    /**\n     * Emit the `select` event\n     *\n     * @param option\n     */\n    emitSelectEvent(option) {\n        const event = new TsAutocompletePanelSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Return the panel's scrollTop\n     *\n     * @returns The scrolltop number\n     */\n    getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Set the panel scrollTop.\n     *\n     * This allows us to manually scroll to display options above or below the fold, as they are not actually being focused when active.\n     *\n     * @param scrollTop - The number of pixels to move\n     */\n    setScrollTop(scrollTop) {\n        // istanbul ignore else\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Set the visibility of the panel based on whether options exist\n     */\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this.changeDetectorRef.markForCheck();\n    }\n};\nTsAutocompletePanelComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef }\n];\n__decorate([\n    ViewChild(TemplateRef),\n    __metadata(\"design:type\", TemplateRef)\n], TsAutocompletePanelComponent.prototype, \"template\", void 0);\n__decorate([\n    ViewChild('panel', { static: true }),\n    __metadata(\"design:type\", ElementRef)\n], TsAutocompletePanelComponent.prototype, \"panel\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function)\n], TsAutocompletePanelComponent.prototype, \"displayWith\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsAutocompletePanelComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", QueryList)\n], TsAutocompletePanelComponent.prototype, \"optionGroups\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", QueryList)\n], TsAutocompletePanelComponent.prototype, \"options\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompletePanelComponent.prototype, \"optionSelected\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompletePanelComponent.prototype, \"opened\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompletePanelComponent.prototype, \"closed\", void 0);\nTsAutocompletePanelComponent = TsAutocompletePanelComponent_1 = __decorate([\n    Component({\n        selector: 'ts-autocomplete-panel',\n        template: \"<ng-template>\\n  <div\\n    class=\\\"ts-autocomplete-panel__inner\\\"\\n    [class.ts-autocomplete-visible]=\\\"showPanel\\\"\\n    role=\\\"listbox\\\"\\n    [attr.id]=\\\"id\\\"\\n    #panel\\n  >\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n        host: { class: 'ts-autocomplete-panel qa-autocomplete-panel' },\n        providers: [\n            {\n                provide: TS_OPTION_PARENT_COMPONENT,\n                // eslint-disable-next-line deprecation/deprecation\n                useExisting: TsAutocompletePanelComponent_1,\n            },\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsAutocompletePanel',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-autocomplete-panel__inner{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);background:#fafafa;border-bottom-left-radius:4px;border-bottom-right-radius:4px;color:#302d35;max-height:256px;max-width:none;min-width:112px;overflow:auto;-webkit-overflow-scrolling:touch;position:relative;visibility:hidden;width:100%}@media screen and (-ms-high-contrast:active){.ts-autocomplete-panel__inner{outline:solid 1px}}.ts-autocomplete-panel__inner .ts-option.ts-option--selected:not(.ts-active):not(:hover){background:#1777b6}.ts-autocomplete-panel__inner .ts-option:not(.ts-option--template){font-size:inherit;height:3em;line-height:3em}.ts-autocomplete-panel__inner.ts-autocomplete-visible{visibility:visible}.ts-autocomplete-panel__inner.ts-autocomplete-hidden{visibility:hidden}.ts-autocomplete-panel-above .ts-autocomplete-panel__inner{border-radius:4px 4px 0 0}.ts-autocomplete-panel__inner .ts-divider-horizontal{margin-top:-1px}\"]\n    }),\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef,\n        ElementRef])\n], TsAutocompletePanelComponent);\n\nvar TsAutocompleteTriggerDirective_1;\n/**\n * The following style constants are necessary to save here in order to properly calculate the scrollTop of the panel.\n * Because we are not actually focusing the active item, scroll must be handled manually.\n */\n// The height of each autocomplete option.\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n// The total height of the autocomplete panel\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n// Injection token that determines the scroll handling while the autocomplete panel is open\nconst TS_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * Define a scroll strategy factory\n *\n * @param overlay\n */\nconst TS_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY = (overlay) => () => overlay.scrollStrategies.reposition();\nconst TS_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: TS_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: TS_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n// Unique ID for each instance\nlet nextUniqueId$1 = 0;\n/**\n * A directive that adds autocomplete trigger functionality to an input. Used in {@link TsSelectComponent}.\n *\n * @deprecated Please use `TsSelectionListTrigger`\n *\n * @example\n * <ts-input\n *              [tsAutocompleteTrigger]=\"myReferenceToAutocompletePanel\"\n *              [tsAutocompleteDisabled]=\"false\"\n *              autocomplete=\"off\"\n *              [reopenAfterSelection]=\"false\"\n * ></ts-input>\n */\nlet TsAutocompleteTriggerDirective = TsAutocompleteTriggerDirective_1 = class TsAutocompleteTriggerDirective {\n    constructor(elementRef, overlay, viewContainerRef, ngZone, changeDetectorRef, documentService, viewportRuler, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    scrollStrategy, formField) {\n        this.elementRef = elementRef;\n        this.overlay = overlay;\n        this.viewContainerRef = viewContainerRef;\n        this.ngZone = ngZone;\n        this.changeDetectorRef = changeDetectorRef;\n        this.documentService = documentService;\n        this.viewportRuler = viewportRuler;\n        this.formField = formField;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused, closed autocomplete from being reopened if\n         * the user switches to another browser tab and then comes back.\n         */\n        this.canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel\n         */\n        this.closeKeyEventStream = new Subject();\n        /*\n         * Note: In some cases `openPanel` can end up being called after the component is destroyed. This flag is to ensure that we don't try to\n         * run change detection on a destroyed view.\n         */\n        this.componentDestroyed = false;\n        /**\n         * Whether or not the label state is being overridden\n         */\n        this.manuallyFloatingLabel = false;\n        /**\n         * Stream of autocomplete option selections\n         */\n        this.optionSelections = defer(() => {\n            if (this.autocompletePanel && this.autocompletePanel.options) {\n                // eslint-disable-next-line deprecation/deprecation\n                return merge(...this.autocompletePanel.options.map(option => option.selectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // In that case, return a stream that we'll replace with the real one once everything is in place.\n            return this.ngZone.onStable\n                .asObservable()\n                // TODO: Refactor deprecation\n                // eslint-disable-next-line deprecation/deprecation\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        /**\n         * Store whether the overlay is currently attached\n         */\n        this.overlayAttached = false;\n        /**\n         * Subscription to viewport size changes\n         */\n        this.viewportSubscription = Subscription.EMPTY;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-autocomplete-trigger-${nextUniqueId$1++}`;\n        /**\n         * The `autocomplete` attribute to be set on the input element.\n         *\n         * NOTE: Input has specific naming since it is accepting a standard HTML data attribute.\n         */\n        // eslint-disable-next-line @angular-eslint/no-input-rename\n        this.autocompleteAttribute = 'off';\n        this._autocompleteDisabled = false;\n        this._reopenAfterSelection = false;\n        /**\n         * View -> model callback called when value changes\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.onChange = () => { };\n        /**\n         * View -> model callback called when autocomplete has been touched\n         */\n        this.onTouched = () => { };\n        /**\n         * Event handler for when the window is blurred.\n         *\n         * Needs to be an arrow function in order to preserve the context.\n         */\n        this.windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n        };\n        if (typeof window !== 'undefined') {\n            ngZone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n        this.scrollStrategy = scrollStrategy;\n        this.document = this.documentService.document;\n    }\n    /**\n     * The currently active option, coerced to TsOptionComponent type\n     */\n    get activeOption() {\n        if (this.autocompletePanel && this.autocompletePanel.keyManager) {\n            return this.autocompletePanel.keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        var _a;\n        // eslint-disable-next-line deprecation/deprecation\n        return merge(this.optionSelections, this.autocompletePanel.keyManager.tabOut.pipe(filter(() => this.overlayAttached)), this.closeKeyEventStream, \n        // eslint-disable-next-line deprecation/deprecation\n        ((_a = this.overlayRef) === null || _a === void 0 ? void 0 : _a.backdropClick()) || of('')).pipe(map(event => (event instanceof TsOptionSelectionChange ? event : null)));\n    }\n    /**\n     * Whether or not the autocomplete panel is open\n     */\n    get panelOpen() {\n        return this.overlayAttached && this.autocompletePanel.showPanel;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will act as a regular input and the user won't be able to open the\n     * panel.\n     *\n     * @param value\n     */\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    get autocompleteDisabled() {\n        return this._autocompleteDisabled;\n    }\n    /**\n     * Define if the autocomplete panel should reopen after a selection is made\n     *\n     * @param value\n     */\n    set reopenAfterSelection(value) {\n        this._reopenAfterSelection = value;\n    }\n    get reopenAfterSelection() {\n        return this._reopenAfterSelection;\n    }\n    /**\n     * Clean up subscriptions and destroy the panel\n     */\n    ngOnDestroy() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n    /**\n     * Close the autocomplete suggestion panel\n     *\n     * @param overrideReopenFlag - Whether the panel should reopen\n     */\n    closePanel(overrideReopenFlag) {\n        this.resetLabel();\n        if (!this.overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocompletePanel.closed.emit();\n        }\n        this.autocompletePanel.isOpen = this.overlayAttached = false;\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because `fromEvent` doesn't seem to do it at the proper time.  This ensures that the\n            // label is reset when the user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n        if (this.reopenAfterSelection && !overrideReopenFlag) {\n            this.openPanel();\n        }\n        else {\n            // If the panel isn't reopened immediately, we must re-subscribe to the closing actions\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n    }\n    /**\n     * Handle the focus event\n     */\n    handleFocus() {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        }\n        else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n            this.floatLabel(true);\n        }\n    }\n    /**\n     * Handle input into the autocomplete trigger\n     *\n     * @param event - The keyboard event\n     */\n    handleInput(event) {\n        const target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load, focus and blur, in addition to when the user actually\n        // changed the value. To filter out all of the extra events, we save the value on focus and between `input` events, and we check\n        // whether it changed. See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value && this.document.activeElement === event.target) {\n            this.previousValue = value;\n            this.onChange(value);\n            if (this.canOpen()) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * Handle keydown events\n     *\n     * @param event - The keyboard event\n     */\n    handleKeydown(event) {\n        const keyCode = event.code;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE in line with other browsers. By default,\n        // pressing escape on IE will cause it to revert the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === KEYS.ESCAPE.code) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === KEYS.ENTER.code && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocompletePanel) {\n            const prevActiveItem = this.autocompletePanel.keyManager.activeItem;\n            const isArrowKey = keyCode === KEYS.UP_ARROW.code || keyCode === KEYS.DOWN_ARROW.code;\n            if (this.panelOpen || keyCode === KEYS.TAB.code) {\n                this.autocompletePanel.keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this.canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocompletePanel.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n    /**\n     * Open the autocomplete suggestion panel\n     * Subscribe to click event stream and if two conditions described below met,\n     * close the panel.\n     */\n    openPanel() {\n        this.attachOverlay();\n        this.floatLabel();\n    }\n    /**\n     * Register the onChange function\n     *\n     * NOTE: Implemented as part of ControlValueAccessor\n     *\n     * @param fn - The new onChange function\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Register the onTouched function\n     *\n     * NOTE: Implemented as part of ControlValueAccessor\n     *\n     * @param fn - The new onTouched function\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Set the disabled state\n     *\n     * NOTE: Implemented as part of ControlValueAccessor\n     *\n     * @param isDisabled - Whether the element should be set to disabled\n     */\n    setDisabledState(isDisabled) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * Function used to write the value by the model\n     *\n     * NOTE: Implemented as part of ControlValueAccessor\n     *\n     * @param value - The value to write\n     */\n    writeValue(value) {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n    /**\n     * Attach the overlay\n     */\n    attachOverlay() {\n        if (!this.autocompletePanel && isDevMode()) {\n            throw new TsUILibraryError('TsAutocompleteTriggerDirective: Attempting to open an undefined instance of `ts-autocomplete-panel`.');\n        }\n        if (this.overlayRef) {\n            // Update the panel width in case anything has changed\n            this.overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n        else {\n            this.portal = new TemplatePortal(this.autocompletePanel.template, this.viewContainerRef);\n            this.overlayRef = this.overlay.create(this.getOverlayConfig());\n            // Use the `keydownEvents` in order to take advantage of the overlay event targeting provided by the CDK overlay.\n            this.overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.code === KEYS.ESCAPE.code || (event.code === KEYS.UP_ARROW.code && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n            this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && this.overlayRef) {\n                    this.overlayRef.updateSize({ width: this.getPanelWidth() });\n                }\n            });\n        }\n        if (this.overlayRef && !this.overlayRef.hasAttached()) {\n            this.overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocompletePanel.setVisibility();\n        this.autocompletePanel.isOpen = this.overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocompletePanel.opened.emit();\n        }\n    }\n    /**\n     * Determine whether the panel can be opened\n     */\n    canOpen() {\n        const element = this.elementRef.nativeElement;\n        return !element.readOnly && !element.disabled && !this.autocompleteDisabled;\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     *\n     * @param skip\n     */\n    clearPreviousSelectedOption(skip) {\n        this.autocompletePanel.options.forEach(option => {\n            // istanbul ignore else\n            // NOTE: Loose check (`!=`) needed for comparing classes\n            // eslint-disable-next-line eqeqeq\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    /**\n     * Destroy the autocomplete suggestion panel\n     */\n    destroyPanel() {\n        // istanbul ignore else\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n    /**\n     * In 'auto' mode, the label will animate down as soon as focus is lost.  This causes the value to jump when selecting an option with the\n     * mouse. This method manually floats the label until the panel can be closed.\n     *\n     * @param shouldAnimate - Whether the label should be animated when it is floated\n     */\n    floatLabel(shouldAnimate = false) {\n        if (this.formField && this.formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this.formField.animateAndLockLabel();\n            }\n            else {\n                this.formField.floatLabel = 'always';\n            }\n            this.manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * Return the connected element\n     *\n     * @returns The ElementRef\n     */\n    getConnectedElement() {\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it\n     */\n    getHostWidth() {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Create a config for an overlay\n     *\n     * @returns The overlay config\n     */\n    getOverlayConfig() {\n        return new OverlayConfig({\n            backdropClass: 'ts-autocomplete__backdrop',\n            direction: 'ltr',\n            hasBackdrop: true,\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n        });\n    }\n    /**\n     * Get the overlay position strategy\n     *\n     * @returns The position strategy\n     */\n    getOverlayPosition() {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ]);\n        return this.positionStrategy;\n    }\n    /**\n     * Return the panel width\n     *\n     * @returns The width\n     */\n    getPanelWidth() {\n        return this.getHostWidth();\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the correct options, or to 0 if the consumer opted into it\n     */\n    resetActiveItem() {\n        this.autocompletePanel.keyManager.setActiveItem(-1);\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state\n     */\n    resetLabel() {\n        // istanbul ignore else\n        if (this.manuallyFloatingLabel) {\n            this.formField.floatLabel = 'auto';\n            this.manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Scroll to an option\n     *\n     * Given that we are not actually focusing active options, we must manually adjust scroll to reveal options below the fold. First, we find\n     * the offset of the option from the top of the panel. If that offset is below the fold, the new scrollTop will be the offset - the panel\n     * height + the option height, so the active option will be just visible at the bottom of the panel. If that offset is above the top of\n     * the visible panel, the new scrollTop will become the offset. If that offset is visible within the panel already, the scrollTop is not\n     * adjusted.\n     */\n    scrollToOption() {\n        const index = this.autocompletePanel.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index, this.autocompletePanel.options, this.autocompletePanel.optionGroups);\n        const newScrollPosition = getOptionScrollPosition(index + labelCount, \n        // FIXME: can this height be dynamic like the TsSelectComponent? https://github.com/GetTerminus/terminus-ui/issues/1153\n        AUTOCOMPLETE_OPTION_HEIGHT, this.autocompletePanel.getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n        this.autocompletePanel.setScrollTop(newScrollPosition);\n    }\n    /**\n     * Set the value of the trigger\n     *\n     * @param value - The value to set\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setTriggerValue(value) {\n        const displayFn = this.autocompletePanel && this.autocompletePanel.displayWith;\n        const toDisplay = displayFn ? displayFn(value) : value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and should not fall back to an empty string.\n        const inputValue = isUnset(toDisplay) ? toDisplay : '';\n        // If it is used within a {@link TsFormFieldComponent}, we should set it through the property so it can go through change detection\n        if (this.formField) {\n            this.formField.control.value = inputValue;\n        }\n        else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated control to that value.\n     * It will also mark the control as dirty if this interaction stemmed from the user.\n     *\n     * @param event - The event containing the option\n     */\n    setValueAndClose(event) {\n        this.clearPreviousSelectedOption(event.source);\n        this.setTriggerValue(event.source.value);\n        this.onChange(event.source.value);\n        this.elementRef.nativeElement.focus();\n        this.autocompletePanel.emitSelectEvent(event.source);\n        this.closePanel();\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the stream every time the option list changes\n     *\n     * @returns The subscription\n     */\n    subscribeToClosingActions() {\n        const firstStable = this.ngZone.onStable.asObservable().pipe(take(1));\n        const optionChanges = this.autocompletePanel.options.changes.pipe(\n        // TODO: Refactor deprecation\n        // eslint-disable-next-line deprecation/deprecation\n        tap(() => this.positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        // eslint-disable-next-line deprecation/deprecation\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // Create a new stream of panelClosingActions, replacing any previous streams that were created, and flatten it so our stream only\n        // emits closing events...\n        // TODO: Refactor deprecation\n        // eslint-disable-next-line deprecation/deprecation\n        switchMap(() => {\n            this.resetActiveItem();\n            this.autocompletePanel.setVisibility();\n            return this.panelClosingActions;\n        }), take(1), untilComponentDestroyed(this))\n            // Set the value, close the panel, and complete.\n            .subscribe((event) => {\n            if (event && event.source && event.source.value !== undefined) {\n                this.setValueAndClose(event);\n            }\n        });\n    }\n};\nTsAutocompleteTriggerDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: TsDocumentService },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [TS_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: TsFormFieldComponent, decorators: [{ type: Optional }, { type: Host }] }\n];\n__decorate([\n    Input('autocomplete'),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteTriggerDirective.prototype, \"autocompleteAttribute\", void 0);\n__decorate([\n    Input('tsAutocompleteDisabled'),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsAutocompleteTriggerDirective.prototype, \"autocompleteDisabled\", null);\n__decorate([\n    Input('tsAutocompleteTrigger'),\n    __metadata(\"design:type\", TsAutocompletePanelComponent)\n], TsAutocompleteTriggerDirective.prototype, \"autocompletePanel\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsAutocompleteTriggerDirective.prototype, \"reopenAfterSelection\", null);\nTsAutocompleteTriggerDirective = TsAutocompleteTriggerDirective_1 = __decorate([\n    Directive({\n        selector: '[tsAutocompleteTrigger]',\n        host: {\n            'class': 'ts-autocomplete-trigger qa-autocomplete-trigger',\n            '[attr.autocomplete]': 'autocompleteAttribute',\n            '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n            '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n            '[attr.aria-activedescendant]': 'activeOption?.id',\n            '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n            '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocompletePanel?.id',\n            // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n            // a little earlier. This avoids issues where IE delays the focusing of the input.\n            '(focusin)': 'handleFocus()',\n            '(blur)': 'onTouched()',\n            '(input)': 'handleInput($event)',\n            '(keydown)': 'handleKeydown($event)',\n        },\n        providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                // eslint-disable-next-line deprecation/deprecation\n                useExisting: forwardRef(() => TsAutocompleteTriggerDirective_1),\n                multi: true,\n            },\n        ],\n        exportAs: 'tsAutocompleteTrigger',\n    }),\n    __param(7, Inject(TS_AUTOCOMPLETE_SCROLL_STRATEGY)),\n    __param(8, Optional()), __param(8, Host()),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        Overlay,\n        ViewContainerRef,\n        NgZone,\n        ChangeDetectorRef,\n        TsDocumentService,\n        ViewportRuler, Object, TsFormFieldComponent])\n], TsAutocompleteTriggerDirective);\n\nvar TsAutocompleteComponent_1;\nclass TsAutocompleteSelectedEvent extends MatAutocompleteSelectedEvent {\n}\n// Unique ID for each instance\n// @internal\nlet nextUniqueId$2 = 0;\nconst DEFAULT_MINIMUM_CHARACTER_COUNT = 2;\nconst DEFAULT_DEBOUNCE_DELAY = 200;\n/**\n * The event object that is emitted when the select value has changed\n */\nclass TsAutocompleteChange {\n    constructor(\n    // eslint-disable-next-line deprecation/deprecation\n    source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * The autocomplete UI Component\n *\n * @deprecated Please use `TsSelectionListComponent`\n *\n * @example\n * <ts-autocomplete\n *              [allowMultiple]=\"allowMultiple\"\n *              [displayFormatter]=\"formatterFunc\"\n *              [valueComparator]=\"comparatorFunc\"\n *              debounceDelay=\"300\"\n *              displayWith=\"(v) => v.name\"\n *              hint=\"Begin typing to search..\"\n *              [isDisabled]=\"isDisabled\"\n *              label=\"Select options:\"\n *              name=\"product selections\"\n *              options=\"[{}, {}, ...]\"\n *              [showProgress]=\"inProgress\"\n *              theme=\"primary\"\n *              (closed)=\"panelWasClosed($event)\"\n *              (opened)=\"panelWasOpened($event)\"\n *              (optionSelected)=\"mySelected($event)\"\n *              (optionRemoved)=\"myRemoved($event)\"\n *              (query)=\"myQuery($event)\"\n *              (selection)=\"mySelection($event)\"\n * ></ts-autocomplete>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/autocomplete</example-url>\n */\nlet TsAutocompleteComponent = TsAutocompleteComponent_1 = class TsAutocompleteComponent {\n    constructor(changeDetectorRef, documentService, elementRef, ngControl) {\n        this.changeDetectorRef = changeDetectorRef;\n        this.documentService = documentService;\n        this.elementRef = elementRef;\n        this.ngControl = ngControl;\n        /**\n         * Give the component an explicit name\n         *\n         * @internal\n         */\n        this.componentName = 'TsAutocompleteComponent';\n        /**\n         * Define the FormControl\n         *\n         * @internal\n         */\n        this.autocompleteFormControl = new FormControl([]);\n        /**\n         * Subject used to alert the parent {@link TsFormFieldComponent} when the label gap should be recalculated\n         *\n         * Implemented as part of TsFormFieldControl.\n         *\n         * @internal\n         */\n        this.labelChanges = new Subject();\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         *\n         * @internal\n         */\n        this.optionIds = '';\n        /**\n         * Whether or not the overlay panel is open\n         */\n        this.panelOpen = false;\n        /**\n         * Since the {@link TsFormFieldComponent} is inside this template, we cannot use a provider to pass this component instance to the form\n         * field. Instead, we pass it manually through the template with this reference.\n         *\n         * @internal\n         */\n        this.selfReference = this;\n        /*\n         * Implemented as part of {@link TsFormFieldControl}\n         *\n         * @internal\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Define the default component ID\n         *\n         * @internal\n         */\n        this.uid = `ts-autocomplete-${nextUniqueId$2++}`;\n        /**\n         * Management of the query string\n         *\n         * @internal\n         */\n        this.querySubject = new BehaviorSubject('');\n        /**\n         * Define if multiple selections are allowed\n         */\n        this.allowMultiple = false;\n        /**\n         * Define if should allow duplicate selections\n         */\n        this.allowDuplicateSelections = false;\n        /**\n         * Define if the panel should reopen after a selection is made\n         *\n         * NOTE: Though it is technically 're-opening', it happens fast enough so that it doesn't appear to close at all.\n         */\n        this.reopenAfterSelection = false;\n        this._debounceDelay = DEFAULT_DEBOUNCE_DELAY;\n        /**\n         * Define if the required marker should be hidden\n         */\n        this.hideRequiredMarker = false;\n        this._id = this.uid;\n        /**\n         * Define if the control should be disabled\n         */\n        this.isDisabled = false;\n        this._isRequired = false;\n        this._minimumCharacters = DEFAULT_MINIMUM_CHARACTER_COUNT;\n        /**\n         * Define if the input should currently be showing a progress spinner\n         */\n        this.showProgress = false;\n        /**\n         * Define the component theme\n         */\n        this.theme = 'primary';\n        /**\n         * Define if validation messages should be shown immediately or on blur\n         */\n        this.validateOnChange = false;\n        /**\n         * Define the formatter for the selected items.\n         *\n         * @param v\n         */\n        this.displayFormatter = v => v;\n        /**\n         * Define the comparator for the values of the options\n         *\n         * @param a\n         * @param b\n         */\n        this.valueComparator = (a, b) => a === b;\n        /**\n         * Event for when the panel is closed\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event for when a duplicate selection is made\n         */\n        this.duplicateSelection = new EventEmitter();\n        /**\n         * Event for when the panel is opened\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Emit the selected chip\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event for when an option is removed\n         */\n        this.optionDeselected = new EventEmitter();\n        /**\n         * Emit the current selection\n         */\n        this.selection = new EventEmitter();\n        /**\n         * Emit the query string\n         */\n        this.query = new EventEmitter();\n        /**\n         * Event for when the query has changed\n         */\n        this.queryChange = new EventEmitter();\n        /**\n         * Event for when the selections change\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         *\n         * Needed for {@link TsFormFieldComponent}.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Stub in onChange\n         *\n         * @internal\n         *\n         * Needed for ControlValueAccessor (View -> model callback called when value changes)\n         */\n        // istanbul ignore next\n        this.onChange = () => { };\n        /**\n         * Stub in onTouched\n         *\n         * @internal\n         *\n         * Needed for ControlValueAccessor (View -> model callback called when select has been touched)\n         */\n        // istanbul ignore next\n        this.onTouched = () => { };\n        this.document = this.documentService.document;\n        // This is the assigned FormControl or NgModel\n        // istanbul ignore else\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * Whether the select has a value\n     */\n    get empty() {\n        return !this.autocompleteFormControl.value.length;\n    }\n    /**\n     * Whether the input has focus\n     */\n    get focused() {\n        const el = this.inputElement && this.inputElement.nativeElement;\n        return (this.document.activeElement === el) || this.panelOpen;\n    }\n    /**\n     * Determine if the label should float\n     */\n    get shouldLabelFloat() {\n        return this.focused || !this.empty;\n    }\n    /**\n     * Define a debounce delay for the query stream\n     *\n     * @param value\n     */\n    set debounceDelay(value) {\n        this._debounceDelay = coerceNumberProperty(value, DEFAULT_DEBOUNCE_DELAY);\n    }\n    get debounceDelay() {\n        return this._debounceDelay;\n    }\n    /**\n     * Define a hint for the input\n     *\n     * @param value\n     */\n    set hint(value) {\n        this._hint = value;\n    }\n    get hint() {\n        return this._hint;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Define if the control is required\n     *\n     * @param value\n     */\n    set isRequired(value) {\n        this._isRequired = value;\n    }\n    get isRequired() {\n        const ctrl = this.ngControl && this.ngControl.control;\n        const requiredFormControl = !!ctrl && hasRequiredControl(ctrl);\n        return this._isRequired || requiredFormControl;\n    }\n    /**\n     * Define a minimum character count for queries\n     *\n     * @param value\n     */\n    set minimumCharacters(value) {\n        this._minimumCharacters = coerceNumberProperty(value, DEFAULT_MINIMUM_CHARACTER_COUNT);\n    }\n    get minimumCharacters() {\n        return this._minimumCharacters;\n    }\n    /**\n     * Value of the select control\n     *\n     * @param newValue\n     */\n    set value(newValue) {\n        if (newValue !== this._value) {\n            this._value = newValue;\n        }\n    }\n    get value() {\n        return this._value;\n    }\n    /**\n     * Seed initial control values\n     */\n    ngOnInit() {\n        // Seed the control value\n        // NOTE: When the consumer is using an ngModel, the value is not set on the first cycle.\n        // We need to push it to the next event loop. When using a FormControl the value is there on the first run.\n        // eslint-disable-next-line dot-notation\n        if (this.ngControl && this.ngControl['form']) {\n            // istanbul ignore else\n            if (this.ngControl.value && !isArray(this.ngControl.value)) {\n                throw Error('form control values must be an array of values');\n            }\n            else if (this.ngControl.value) {\n                this.autocompleteFormControl.setValue(this.ngControl.value);\n                if (!this.allowMultiple) {\n                    this.searchQuery = this.displayFormatter(this.ngControl.value[0]);\n                }\n            }\n            // Support dynamic form control updates\n            // istanbul ignore else\n            if (this.ngControl.valueChanges) {\n                this.ngControl.valueChanges\n                    .pipe(untilComponentDestroyed(this))\n                    .subscribe(newValue => {\n                    // istanbul ignore else\n                    if (newValue) {\n                        this.autocompleteFormControl.setValue(newValue, { emitEvent: false });\n                        if (!this.allowMultiple) {\n                            this.searchQuery = this.displayFormatter(newValue[0]);\n                        }\n                    }\n                });\n            }\n        }\n        else {\n            // HACK: Wait until the next detection cycle to set the value from an ngModel.\n            // NOTE: Using CDR.detectChanges causes errors in children that expect TsOptionComponent to exist.\n            setTimeout(() => {\n                // istanbul ignore else\n                if (this.ngControl && this.ngControl.value) {\n                    if (!isArray(this.ngControl.value)) {\n                        throw Error('ngModel must be an array of values');\n                    }\n                    this.autocompleteFormControl.setValue(this.ngControl.value);\n                    if (!this.allowMultiple) {\n                        this.searchQuery = this.displayFormatter(this.ngControl.value[0]);\n                    }\n                }\n            });\n        }\n        // Take a stream of query changes\n        this.querySubject.pipe(untilComponentDestroyed(this), \n        // Debounce the query changes\n        debounceTime(this.debounceDelay), \n        // If the query is shorter than allowed, convert to an empty string\n        // eslint-disable-next-line deprecation/deprecation\n        switchMap(query => of((query && (query.length >= this.minimumCharacters)) ? query : '')), \n        // Only allow a query through if it is different from the previous query\n        distinctUntilChanged()).subscribe((query) => {\n            // NOTE: When an option is selected, the full string value comes through this stream. We are checking the stream value against the\n            // input element value to verify we are sending a query rather than a selected option.\n            const inputValue = this.inputElement.nativeElement.value;\n            const queryIsValid = (query === inputValue) || (query === '');\n            this.queryChange.emit(queryIsValid ? query : inputValue);\n            if (!this.panelOpen) {\n                this.open();\n            }\n        });\n        // Propagate changes from form control\n        this.autocompleteFormControl.valueChanges.pipe(untilComponentDestroyed(this)).subscribe(v => {\n            this.propagateChanges();\n        });\n    }\n    /**\n     * Subscribe to the querySubject and pass values to the query emitter\n     *\n     * NOTE: When an option is selected, the full selected value is piped through this stream\n     * somehow. Have not figured out why. Best guess is it's something due to the `matAutocomplete`\n     * directive. For now, we are filtering out anything that is not a string.\n     */\n    ngAfterViewInit() {\n        // Take a stream of query changes\n        this.querySubject.pipe(untilComponentDestroyed(this), filter(v => (typeof v === 'string') && v.length >= this.minimumCharacters), \n        // Debounce the query changes\n        debounceTime(this.debounceDelay), \n        // Only allow a query through if it is different from the previous query\n        distinctUntilChanged()).subscribe((query) => {\n            this.query.next(query);\n        });\n    }\n    /**\n     * Needed for untilComponentDestroyed\n     */\n    ngOnDestroy() { }\n    /**\n     * Close the overlay panel\n     */\n    close() {\n        if (this.autocompleteTrigger.panelOpen) {\n            this.panelOpen = false;\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n            this.updateValueAndValidity();\n            // Alert the consumer\n            this.closed.emit();\n        }\n    }\n    /**\n     * Set up a key manager to listen to keyboard events on the overlay panel\n     */\n    initKeyManager() {\n        // We need to initialize with wrapping turned on\n        this.keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation('ltr')\n            .withWrap();\n    }\n    /**\n     * Focus the text input\n     *\n     * @internal\n     */\n    focus() {\n        this.inputElement.nativeElement.focus();\n    }\n    /**\n     * Open the overlay panel\n     */\n    open() {\n        if (this.isDisabled || !this.options || !this.options.length || this.panelOpen) {\n            return;\n        }\n        this.opened.emit();\n    }\n    /**\n     * Emit a change event to set the model value\n     *\n     */\n    propagateChanges() {\n        const valueToEmit = this.autocompleteFormControl.value;\n        this.value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new TsAutocompleteChange(this, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n    /**\n     * Call FormControl updateValueAndValidity function to ensure value and valid status get updated.\n     */\n    updateValueAndValidity() {\n        if (this.ngControl && this.ngControl.control) {\n            this.ngControl.control.updateValueAndValidity();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface required to integrate with Angular's core forms API.\n     *\n     * NOTE: Currently we are not using this, but it still must be present since this component is acting as a CVA.\n     *\n     * @internal\n     *\n     * @param value - New value to be written to the model\n     */\n    writeValue(value) { }\n    /**\n     * Save a callback function to be invoked when the select's value changes from user input.\n     * Part of the ControlValueAccessor interface required to integrate with Angular's core forms API.\n     *\n     * @internal\n     *\n     * @param fn - Callback to be triggered when the value changes\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Save a callback function to be invoked when the select is blurred by the user.\n     * Part of the ControlValueAccessor interface required to integrate with Angular's core forms API.\n     *\n     * @internal\n     *\n     * @param fn - Callback to be triggered when the component has been touched\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Disables the select.\n     * Part of the ControlValueAccessor interface required to integrate with Angular's core forms API.\n     *\n     * @param isDisabled - If the component is disabled\n     */\n    setDisabledState(isDisabled) {\n        this.isDisabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Ensure the correct element gets focus when the primary container is clicked.\n     *\n     * @internal\n     *\n     * Implemented as part of TsFormFieldControl.\n     */\n    onContainerClick() {\n        this.focus();\n    }\n    /**\n     * Close the dropdown and reset the query when the user leaves the input\n     *\n     * @param event - The keyboard or mouse event\n     */\n    handleInputBlur(event) {\n        // FIXME: cannot use dot syntax here since 'relatedTarget' doesn't exist on a KeyboardEvent\n        // eslint-disable-next-line dot-notation\n        const hasRelatedTarget = !!(event && event['relatedTarget']);\n        // eslint-disable-next-line dot-notation\n        const hasNodeName = !!(hasRelatedTarget && event['relatedTarget'].nodeName);\n        if (hasRelatedTarget && hasNodeName) {\n            // If the blur event comes from the user clicking an option, `event.relatedTarget.nodeName`\n            // will be `TS-OPTION`.\n            // istanbul ignore else\n            // NOTE: TypeScript warns `Property 'nodeName' does not exist on type 'EventTarget'.`\n            // eslint-disable-next-line dot-notation\n            if (event['relatedTarget'].nodeName !== 'TS-OPTION') {\n                this.resetAutocompleteQuery();\n            }\n        }\n        else if (this.autocompleteTrigger.panelOpen) {\n            this.close();\n            this.autocompleteTrigger.closePanel(true);\n        }\n        // Mark this control as 'touched' to trigger any validations needed on blur\n        this.onTouched();\n        this.updateValueAndValidity();\n    }\n    /**\n     * Reset input\n     */\n    resetAutocompleteQuery() {\n        // istanbul ignore else\n        if (!this.keyManager) {\n            this.initKeyManager();\n        }\n        // Deselect the option from the key manager\n        this.keyManager.updateActiveItem(-1);\n        this.inputElement.nativeElement.value = '';\n    }\n    /**\n     * Select an item\n     *\n     * @param selection - The item to select\n     */\n    autocompleteSelectItem(selection) {\n        const isDuplicate = (this.autocompleteFormControl.value || []).findIndex(o => this.valueComparator(o, selection.option.value)) >= 0;\n        // istanbul ignore else\n        if (isDuplicate) {\n            this.duplicateSelection.emit(new TsAutocompleteChange(this, selection.option.value));\n        }\n        // Stop the flow if the selection already exists in the array and duplicates aren't allowed\n        if (!this.allowDuplicateSelections && isDuplicate) {\n            return;\n        }\n        if (this.allowMultiple) {\n            // If supporting multiple selections, reset the input text value as long as the panel should NOT reopen\n            // istanbul ignore else\n            if (!this.reopenAfterSelection) {\n                this.close();\n                this.resetAutocompleteQuery();\n            }\n            // Update the form control\n            const options = (this.autocompleteFormControl.value || []).concat(selection.option.value);\n            this.autocompleteFormControl.setValue(options);\n        }\n        else {\n            // Update the form control\n            this.autocompleteFormControl.setValue([selection.option.value]);\n            // In single selection mode, set the query input to the selection so the user can see what was selected\n            this.inputElement.nativeElement.value = selection.option.viewValue;\n        }\n        // Update the panel position in case the addition of a chip causes the select height to change\n        // istanbul ignore else\n        if (this.autocompleteTrigger.overlayRef) {\n            this.autocompleteTrigger.overlayRef.updatePosition();\n            this.changeDetectorRef.detectChanges();\n        }\n        // Notify consumers about changes\n        this.optionSelected.emit(new TsAutocompleteChange(this, selection.option.value));\n        this.selectionChange.emit(new TsAutocompleteChange(this, this.autocompleteFormControl.value));\n    }\n    /**\n     * Chip component emit a focusInput event, autocomplete puts focus on input field.\n     */\n    focusInput() {\n        this.focus();\n    }\n    /**\n     * Deselect an item\n     *\n     * @param option - The value of the item to remove\n     */\n    autocompleteDeselectItem(option) {\n        // Remove the selection from the array of selections\n        const options = (this.autocompleteFormControl.value || []).filter(opt => !this.valueComparator(opt, option.value));\n        // Update the form control\n        this.autocompleteFormControl.setValue(options);\n        // If the only chip was removed, re-focus the input\n        // istanbul ignore else\n        if (options.length === 0) {\n            this.focus();\n        }\n        // HACK: For some reason, triggering change detection works in the selection method above, but not here. Same issue seems present in\n        // TsOptionComponent where `setActiveStyles` works by calling the CDR but `setInactiveStyles` required a timeout.\n        setTimeout(() => {\n            // Update the panel position in case the removal of a chip causes the select height to change\n            if (this.autocompleteTrigger.overlayRef) {\n                this.autocompleteTrigger.overlayRef.updatePosition();\n            }\n        });\n        // Notify consumers about changes\n        this.optionDeselected.emit(new TsAutocompleteChange(this, option));\n        this.selectionChange.emit(new TsAutocompleteChange(this, options));\n    }\n    /**\n     * Function for tracking for-loops changes\n     *\n     * @internal\n     *\n     * @param index - The item index\n     * @returns The unique ID\n     */\n    trackByFn(index) {\n        return index;\n    }\n};\nTsAutocompleteComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: TsDocumentService },\n    { type: ElementRef },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }\n];\n__decorate([\n    ViewChild('auto', { static: true }),\n    __metadata(\"design:type\", TsAutocompletePanelComponent)\n], TsAutocompleteComponent.prototype, \"autocompletePanel\", void 0);\n__decorate([\n    ViewChild(TsAutocompleteTriggerDirective),\n    __metadata(\"design:type\", TsAutocompleteTriggerDirective)\n], TsAutocompleteComponent.prototype, \"autocompleteTrigger\", void 0);\n__decorate([\n    ViewChild('chipCollection'),\n    __metadata(\"design:type\", TsChipCollectionComponent)\n], TsAutocompleteComponent.prototype, \"chipCollection\", void 0);\n__decorate([\n    ViewChild('input'),\n    __metadata(\"design:type\", ElementRef)\n], TsAutocompleteComponent.prototype, \"inputElement\", void 0);\n__decorate([\n    ContentChildren(TsOptionComponent, { descendants: true }),\n    __metadata(\"design:type\", QueryList)\n], TsAutocompleteComponent.prototype, \"options\", void 0);\n__decorate([\n    ContentChildren(TsOptgroupComponent),\n    __metadata(\"design:type\", QueryList)\n], TsAutocompleteComponent.prototype, \"optionGroups\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"allowMultiple\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"allowDuplicateSelections\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"reopenAfterSelection\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsAutocompleteComponent.prototype, \"debounceDelay\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"hideRequiredMarker\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsAutocompleteComponent.prototype, \"hint\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsAutocompleteComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"isDisabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsAutocompleteComponent.prototype, \"isRequired\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsAutocompleteComponent.prototype, \"minimumCharacters\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"showProgress\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsAutocompleteComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"validateOnChange\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsAutocompleteComponent.prototype, \"value\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsAutocompleteComponent.prototype, \"label\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsAutocompleteComponent.prototype, \"name\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function)\n], TsAutocompleteComponent.prototype, \"displayFormatter\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function)\n], TsAutocompleteComponent.prototype, \"valueComparator\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"closed\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"duplicateSelection\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"opened\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"optionSelected\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"optionDeselected\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"selection\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"query\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"queryChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"selectionChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsAutocompleteComponent.prototype, \"valueChange\", void 0);\nTsAutocompleteComponent = TsAutocompleteComponent_1 = __decorate([\n    Component({\n        selector: 'ts-autocomplete',\n        template: \"<ts-form-field\\n  [validateOnChange]=\\\"validateOnChange\\\"\\n  [control]=\\\"selfReference\\\"\\n  [hideRequiredMarker]=\\\"hideRequiredMarker\\\"\\n  [hint]=\\\"hint\\\"\\n  [id]=\\\"id\\\"\\n  [theme]=\\\"theme\\\"\\n  cdk-overlay-origin\\n  #origin=\\\"cdkOverlayOrigin\\\"\\n>\\n  <ts-label *ngIf=\\\"label\\\">\\n    {{ label }}\\n  </ts-label>\\n\\n  <div class=\\\"ts-autocomplete__input-wrap\\\">\\n\\n    <ng-container *ngIf=\\\"allowMultiple\\\">\\n      <ts-chip-collection\\n        [allowMultipleSelections]=\\\"true\\\"\\n        [isDisabled]=\\\"false\\\"\\n        [isReadonly]=\\\"false\\\"\\n        (tabUpdateFocus)=\\\"focusInput()\\\"\\n        #chipCollection=\\\"tsChipCollection\\\"\\n      >\\n        <ts-chip\\n          *ngFor=\\\"let chip of autocompleteFormControl.value; trackBy: trackByFn\\\"\\n          [isRemovable]=\\\"true\\\"\\n          [isDisabled]=\\\"isDisabled\\\"\\n          [value]=\\\"chip\\\"\\n          (remove)=\\\"autocompleteDeselectItem($event.chip)\\\"\\n        >{{ displayFormatter(chip) }}</ts-chip>\\n\\n        <input\\n          class=\\\"ts-autocomplete__input qa-select-autocomplete-input\\\"\\n          [tsAutocompleteTrigger]=\\\"auto\\\"\\n          [reopenAfterSelection]=\\\"reopenAfterSelection\\\"\\n          [attr.id]=\\\"id\\\"\\n          [(ngModel)]=\\\"searchQuery\\\"\\n          [readonly]=\\\"isDisabled ? 'true' : null\\\"\\n          (ngModelChange)=\\\"querySubject.next($event)\\\"\\n          (blur)=\\\"handleInputBlur($event)\\\"\\n          #input\\n        />\\n      </ts-chip-collection>\\n      <ng-template *ngTemplateOutlet=\\\"spinnerTemplate\\\"></ng-template>\\n    </ng-container>\\n\\n    <ng-container *ngIf=\\\"!allowMultiple\\\">\\n      <input\\n        class=\\\"ts-autocomplete__input qa-select-autocomplete-input\\\"\\n        [tsAutocompleteTrigger]=\\\"auto\\\"\\n        [attr.id]=\\\"id\\\"\\n        [readonly]=\\\"isDisabled ? 'true' : null\\\"\\n        [(ngModel)]=\\\"searchQuery\\\"\\n        [value]=\\\"searchQuery\\\"\\n        (ngModelChange)=\\\"querySubject.next($event)\\\"\\n        (blur)=\\\"handleInputBlur($event)\\\"\\n        #input\\n      />\\n\\n      <ng-template *ngTemplateOutlet=\\\"spinnerTemplate\\\"></ng-template>\\n    </ng-container>\\n\\n  </div>\\n</ts-form-field>\\n\\n\\n<ts-autocomplete-panel\\n  class=\\\"ts-autocomplete\\\"\\n  #auto=\\\"tsAutocompletePanel\\\"\\n  [id]=\\\"id + '-panel'\\\"\\n  [options]=\\\"options\\\"\\n  [optionGroups]=\\\"optionGroups\\\"\\n  (optionSelected)=\\\"autocompleteSelectItem($event)\\\"\\n>\\n  <!-- Outlet for options passed in by consumer -->\\n  <ng-template *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-template>\\n</ts-autocomplete-panel>\\n\\n\\n<ng-template #contentTemplate>\\n  <ng-content></ng-content>\\n</ng-template>\\n\\n<ng-template #spinnerTemplate>\\n  <mat-progress-spinner\\n    *ngIf=\\\"showProgress\\\"\\n    class=\\\"c-autocomplete__spinner c-autocomplete__spinner--{{theme}} qa-select-autocomplete-spinner\\\"\\n    [ngClass]=\\\"{'c-autocomplete__spinner--active': showProgress}\\\"\\n    diameter=\\\"21\\\"\\n    mode=\\\"indeterminate\\\"\\n  ></mat-progress-spinner>\\n</ng-template>\\n\",\n        host: {\n            'class': 'ts-autocomplete',\n            '[class.ts-autocomplete--required]': 'isRequired',\n            '[class.ts-autocomplete--disabled]': 'isDisabled',\n            '[attr.aria-owns]': 'panelOpen ? optionIds : null',\n            '[attr.aria-required]': 'isRequired.toString()',\n            '[attr.aria-multiselectable]': 'allowMultiple',\n        },\n        providers: [\n            {\n                provide: TsFormFieldControl,\n                // eslint-disable-next-line deprecation/deprecation\n                useExisting: TsAutocompleteComponent_1,\n            },\n            {\n                provide: TS_OPTION_PARENT_COMPONENT,\n                // eslint-disable-next-line deprecation/deprecation\n                useExisting: TsAutocompleteComponent_1,\n            },\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsAutocomplete',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.ts-autocomplete__input-wrap--hidden,.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-autocomplete__input-wrap .ts-chip{font-size:14px}.ts-autocomplete__input{background:0 0;border:none;color:currentColor;display:inline-block;flex:1 0 10px;font:inherit;max-width:100%;outline:0;padding:0;text-align:inherit;vertical-align:bottom;width:100%}.ts-autocomplete__input:-moz-ui-invalid{box-shadow:none}.cdk-overlay-container .ts-autocomplete__backdrop{background:0 0}\"]\n    }),\n    __param(3, Self()), __param(3, Optional()),\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef,\n        TsDocumentService,\n        ElementRef,\n        NgControl])\n], TsAutocompleteComponent);\n\n/* eslint-disable deprecation/deprecation */\n// @deprecated Please use `TsSelectionListModule`\nlet TsAutocompleteModule = class TsAutocompleteModule {\n};\nTsAutocompleteModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            FlexLayoutModule,\n            MatInputModule,\n            MatProgressSpinnerModule,\n            MatRippleModule,\n            OverlayModule,\n            TsCheckboxModule,\n            TsChipModule,\n            TsIconModule,\n            TsFormFieldModule,\n            TsOptionModule,\n            TsValidationMessagesModule,\n            TsInputModule,\n        ],\n        providers: [TS_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n        declarations: [\n            TsAutocompleteComponent,\n            TsAutocompletePanelComponent,\n            TsAutocompleteTriggerDirective,\n        ],\n        exports: [\n            TsAutocompleteComponent,\n            TsAutocompletePanelComponent,\n            TsAutocompleteTriggerDirective,\n        ],\n    })\n], TsAutocompleteModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, TS_AUTOCOMPLETE_SCROLL_STRATEGY, TS_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, TS_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, TsAutocompleteChange, TsAutocompleteComponent, TsAutocompleteModule, TsAutocompletePanelComponent, TsAutocompletePanelSelectedEvent, TsAutocompleteSelectedEvent, TsAutocompleteTriggerDirective };\n//# sourceMappingURL=terminus-ui-autocomplete.js.map\n","<ts-form-field\n  [validateOnChange]=\"validateOnChange\"\n  [control]=\"selfReference\"\n  [hideRequiredMarker]=\"hideRequiredMarker\"\n  [hint]=\"hint\"\n  [id]=\"id\"\n  [theme]=\"theme\"\n  cdk-overlay-origin\n  #origin=\"cdkOverlayOrigin\"\n>\n  <ts-label *ngIf=\"label\">\n    {{ label }}\n  </ts-label>\n\n  <div class=\"ts-autocomplete__input-wrap\">\n\n    <ng-container *ngIf=\"allowMultiple\">\n      <ts-chip-collection\n        [allowMultipleSelections]=\"true\"\n        [isDisabled]=\"false\"\n        [isReadonly]=\"false\"\n        (tabUpdateFocus)=\"focusInput()\"\n        #chipCollection=\"tsChipCollection\"\n      >\n        <ts-chip\n          *ngFor=\"let chip of autocompleteFormControl.value; trackBy: trackByFn\"\n          [isRemovable]=\"true\"\n          [isDisabled]=\"isDisabled\"\n          [value]=\"chip\"\n          (remove)=\"autocompleteDeselectItem($event.chip)\"\n        >{{ displayFormatter(chip) }}</ts-chip>\n\n        <input\n          class=\"ts-autocomplete__input qa-select-autocomplete-input\"\n          [tsAutocompleteTrigger]=\"auto\"\n          [reopenAfterSelection]=\"reopenAfterSelection\"\n          [attr.id]=\"id\"\n          [(ngModel)]=\"searchQuery\"\n          [readonly]=\"isDisabled ? 'true' : null\"\n          (ngModelChange)=\"querySubject.next($event)\"\n          (blur)=\"handleInputBlur($event)\"\n          #input\n        />\n      </ts-chip-collection>\n      <ng-template *ngTemplateOutlet=\"spinnerTemplate\"></ng-template>\n    </ng-container>\n\n    <ng-container *ngIf=\"!allowMultiple\">\n      <input\n        class=\"ts-autocomplete__input qa-select-autocomplete-input\"\n        [tsAutocompleteTrigger]=\"auto\"\n        [attr.id]=\"id\"\n        [readonly]=\"isDisabled ? 'true' : null\"\n        [(ngModel)]=\"searchQuery\"\n        [value]=\"searchQuery\"\n        (ngModelChange)=\"querySubject.next($event)\"\n        (blur)=\"handleInputBlur($event)\"\n        #input\n      />\n\n      <ng-template *ngTemplateOutlet=\"spinnerTemplate\"></ng-template>\n    </ng-container>\n\n  </div>\n</ts-form-field>\n\n\n<ts-autocomplete-panel\n  class=\"ts-autocomplete\"\n  #auto=\"tsAutocompletePanel\"\n  [id]=\"id + '-panel'\"\n  [options]=\"options\"\n  [optionGroups]=\"optionGroups\"\n  (optionSelected)=\"autocompleteSelectItem($event)\"\n>\n  <!-- Outlet for options passed in by consumer -->\n  <ng-template *ngTemplateOutlet=\"contentTemplate\"></ng-template>\n</ts-autocomplete-panel>\n\n\n<ng-template #contentTemplate>\n  <ng-content></ng-content>\n</ng-template>\n\n<ng-template #spinnerTemplate>\n  <mat-progress-spinner\n    *ngIf=\"showProgress\"\n    class=\"c-autocomplete__spinner c-autocomplete__spinner--{{theme}} qa-select-autocomplete-spinner\"\n    [ngClass]=\"{'c-autocomplete__spinner--active': showProgress}\"\n    diameter=\"21\"\n    mode=\"indeterminate\"\n  ></mat-progress-spinner>\n</ng-template>\n","<ng-template>\n  <div\n    class=\"ts-autocomplete-panel__inner\"\n    [class.ts-autocomplete-visible]=\"showPanel\"\n    role=\"listbox\"\n    [attr.id]=\"id\"\n    #panel\n  >\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n","import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, ContentChildren, Input, Output, Directive, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MatOption, MatOptgroup, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\nif (false) {\n    /**\n     * Reference to the autocomplete panel that emitted the event.\n     * @type {?}\n     */\n    MatAutocompleteSelectedEvent.prototype.source;\n    /**\n     * Option that was selected.\n     * @type {?}\n     */\n    MatAutocompleteSelectedEvent.prototype.option;\n}\n/**\n * Event object that is emitted when an autocomplete option is activated.\n * @record\n */\nfunction MatAutocompleteActivatedEvent() { }\nif (false) {\n    /**\n     * Reference to the autocomplete panel that emitted the event.\n     * @type {?}\n     */\n    MatAutocompleteActivatedEvent.prototype.source;\n    /**\n     * Option that was selected.\n     * @type {?}\n     */\n    MatAutocompleteActivatedEvent.prototype.option;\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/**\n * Default `mat-autocomplete` options that can be overridden.\n * @record\n */\nfunction MatAutocompleteDefaultOptions() { }\nif (false) {\n    /**\n     * Whether the first option should be highlighted when an autocomplete panel is opened.\n     * @type {?|undefined}\n     */\n    MatAutocompleteDefaultOptions.prototype.autoActiveFirstOption;\n}\n/**\n * Injection token to be used to override the default options for `mat-autocomplete`.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Emits whenever an option is activated using the keyboard.\n         */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((/**\n             * @param {?} classList\n             * @param {?} className\n             * @return {?}\n             */\n            (classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }), (/** @type {?} */ ({})));\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe((/**\n         * @param {?} index\n         * @return {?}\n         */\n        index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        }));\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Sets the autocomplete visibility classes on a classlist based on the panel is visible.\n     * @private\n     * @param {?} classList\n     * @return {?}\n     */\n    _setVisibilityClasses(classList) {\n        classList['mat-autocomplete-visible'] = this.showPanel;\n        classList['mat-autocomplete-hidden'] = !this.showPanel;\n    }\n}\nMatAutocomplete.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template>\\n  <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup, { descendants: true },] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatAutocomplete.ngAcceptInputType_autoActiveFirstOption;\n    /** @type {?} */\n    MatAutocomplete.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._activeOptionChanges;\n    /**\n     * Manages active item in option list based on key events.\n     * @type {?}\n     */\n    MatAutocomplete.prototype._keyManager;\n    /**\n     * Whether the autocomplete panel should be visible, depending on option length.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.showPanel;\n    /** @type {?} */\n    MatAutocomplete.prototype._isOpen;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.template;\n    /**\n     * Element for the panel containing the autocomplete options.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.panel;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.options;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionGroups;\n    /**\n     * Function that maps an option's control value to its display value in the trigger.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.displayWith;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._autoActiveFirstOption;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.panelWidth;\n    /**\n     * Event that is emitted whenever an option from the list is selected.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionSelected;\n    /**\n     * Event that is emitted when the autocomplete panel is opened.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.opened;\n    /**\n     * Event that is emitted when the autocomplete panel is closed.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.closed;\n    /**\n     * Emits whenever an option is activated using the keyboard.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionActivated;\n    /** @type {?} */\n    MatAutocomplete.prototype._classList;\n    /**\n     * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-origin.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.decorators = [\n    { type: Directive, args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin',\n            },] }\n];\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\nif (false) {\n    /**\n     * Reference to the element on which the directive is applied.\n     * @type {?}\n     */\n    MatAutocompleteOrigin.prototype.elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The height of each autocomplete option.\n * @type {?}\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @type {?}\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatAutocompleteTrigger)),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = (/**\n         * @return {?}\n         */\n        () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        });\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange)));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelections)));\n        }))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        /** @type {?} */\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            }));\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            (/** @type {?} */ (this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter((/**\n         * @return {?}\n         */\n        () => this._overlayAttached))), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter((/**\n             * @return {?}\n             */\n            () => this._overlayAttached))) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @private\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        return merge((/** @type {?} */ (fromEvent(this._document, 'click'))), (/** @type {?} */ (fromEvent(this._document, 'touchend'))))\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            /** @type {?} */\n            const clickTarget = (/** @type {?} */ ((this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target)));\n            /** @type {?} */\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        })));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then((/**\n         * @return {?}\n         */\n        () => this._setTriggerValue(value)));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @private\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @private\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @private\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.autocomplete._setScrollTop(0);\n        }\n        else {\n            /** @type {?} */\n            const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n            this.autocomplete._setScrollTop(newScrollPosition);\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @private\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap((/**\n         * @return {?}\n         */\n        () => this._positionStrategy.reapplyLastPosition())), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this._setValueAndClose(event)));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @private\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @private\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        /** @type {?} */\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }));\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                }));\n            }\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /**\n     * Sets the positions on a position strategy based on the directive's input state.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        /** @type {?} */\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        /** @type {?} */\n        const panelClass = 'mat-autocomplete-panel-above';\n        /** @type {?} */\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        /** @type {?} */\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @private\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @private\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @private\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n}\nMatAutocompleteTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatAutocompleteTrigger.ngAcceptInputType_autocompleteDisabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._portal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._componentDestroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._autocompleteDisabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._scrollStrategy;\n    /**\n     * Old value of the native input. Used to work around issues with the `input` event on IE.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._previousValue;\n    /**\n     * Strategy that is used to position the panel.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._positionStrategy;\n    /**\n     * Whether or not the label state is being overridden.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._manuallyFloatingLabel;\n    /**\n     * The subscription for closing actions (some are bound to document).\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._closingActionsSubscription;\n    /**\n     * Subscription to viewport size changes.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewportSubscription;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._canOpenOnNextFocus;\n    /**\n     * Whether the element is inside of a ShadowRoot component.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._isInsideShadowRoot;\n    /**\n     * Stream of keyboard events that can close the panel.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._closeKeyEventStream;\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._windowBlurHandler;\n    /**\n     * `View -> model callback called when value changes`\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype._onChange;\n    /**\n     * `View -> model callback called when autocomplete has been touched`\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype._onTouched;\n    /**\n     * The autocomplete panel to be attached to this trigger.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.autocomplete;\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.position;\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.connectedTo;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.autocompleteAttribute;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlayAttached;\n    /**\n     * Stream of autocomplete option selections.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.optionSelections;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._zone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._formField;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewportRuler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    CdkScrollableModule,\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n//# sourceMappingURL=autocomplete.js.map\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { AutocompleteComponent } from './autocomplete.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AutocompleteComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AutocompleteRoutingModule { }\n","<ts-card tsVerticalSpacing fxFlex>\n  <form\n    novalidate\n    fxLayout=\"column\"\n    fxLayout.gt-sm=\"row\"\n    fxLayoutGap=\"1rem\"\n  >\n    <aside class=\"deprecated\" tsVerticalSpacing>\n      <h2>🚨 DEPRECATED 🚨</h2>\n      <p>Please use <a [routerLink]=\"['/components/selection-list']\">TsSelectionList</a>.</p>\n    </aside>\n\n    <h3 tsCardTitle tsVerticalSpacing=\"small--1\">\n      Autocomplete (multiple)\n    </h3>\n\n    <ts-autocomplete\n      label=\"Autocomplete Example\"\n      hint=\"Begin typing to select..\"\n      [formControl]=\"stateCtrl\"\n      [allowMultiple]=\"true\"\n      [allowDuplicateSelections]=\"false\"\n      [reopenAfterSelection]=\"false\"\n      [showProgress]=\"fakeAsync\"\n      [displayFormatter]=\"formatter\"\n      (queryChange)=\"queryHasChanged($event)\"\n      (duplicateSelection)=\"duplicate($event)\"\n      tsVerticalSpacing\n    >\n\n      <ts-option\n        [value]=\"state\"\n        [option]=\"state\"\n        *ngFor=\"let state of filteredStates | async\"\n      >\n        {{ state.name }}\n      </ts-option>\n\n    </ts-autocomplete>\n\n    <div>\n      FormControl value: {{ stateCtrl.value | json }}\n    </div>\n  </form>\n</ts-card>\n\n<ts-card tsVerticalSpacing fxFlex>\n  <form\n    novalidate\n    fxLayout=\"column\"\n    fxLayout.gt-sm=\"row\"\n    fxLayoutGap=\"1rem\"\n  >\n    <h3 tsCardTitle tsVerticalSpacing=\"small--1\">\n      Autocomplete (single)\n    </h3>\n\n    <ts-autocomplete\n      label=\"Autocomplete Example\"\n      hint=\"Begin typing to select..\"\n      [formControl]=\"singleStateCtrl\"\n      [allowMultiple]=\"false\"\n      [allowDuplicateSelections]=\"true\"\n      [reopenAfterSelection]=\"false\"\n      [showProgress]=\"fakeAsync\"\n      [displayFormatter]=\"formatter\"\n      (queryChange)=\"queryHasChanged($event)\"\n      (duplicateSelection)=\"duplicate($event)\"\n      tsVerticalSpacing\n    >\n\n      <ts-option\n        [value]=\"state\"\n        [option]=\"state\"\n        *ngFor=\"let state of filteredStates | async\"\n      >\n        {{ state.name }}\n      </ts-option>\n\n    </ts-autocomplete>\n\n    <div>\n      FormControl value: {{ singleStateCtrl.value | json }}\n    </div>\n  </form>\n</ts-card>\n","import {\n  Component,\n  ViewChild,\n} from '@angular/core';\nimport {\n  FormControl,\n  Validators,\n} from '@angular/forms';\nimport {\n  BehaviorSubject,\n  Observable,\n} from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { TsChipCollectionComponent } from '@terminus/ui-chip';\n\n\nexport interface State {\n  name: string;\n  population: string;\n}\n\n\n@Component({\n  selector: 'demo-autocomplete',\n  templateUrl: './autocomplete.component.html',\n})\nexport class AutocompleteComponent {\n  @ViewChild(TsChipCollectionComponent, { static: false })\n  public list!: TsChipCollectionComponent;\n  states: State[] = [\n    {\n      name: 'Arkansas',\n      population: '2.978M',\n    },\n    {\n      name: 'Alabama',\n      population: '3.29M',\n    },\n    {\n      name: 'Alaska',\n      population: '1.341M',\n    },\n    {\n      name: 'CALIFORNIA',\n      population: '39.14M',\n    },\n    {\n      name: 'Florida',\n      population: '20.27M',\n    },\n    {\n      name: 'Texas',\n      population: '27.47M',\n    },\n    {\n      name: 'Arizona',\n      population: '24.112M',\n    },\n    {\n      name: 'Arkansas 2',\n      population: '2.978M',\n    },\n    {\n      name: 'Alabama 2',\n      population: '3.29M',\n    },\n    {\n      name: 'Alaska 2',\n      population: '1.341M',\n    },\n    {\n      name: 'California 2',\n      population: '39.14M',\n    },\n    {\n      name: 'Florida 2',\n      population: '20.27M',\n    },\n    {\n      name: 'Texas 2',\n      population: '27.47M',\n    },\n    {\n      name: 'Arizona 2',\n      population: '24.112M',\n    },\n    {\n      name: 'Arkansas 3',\n      population: '2.978M',\n    },\n    {\n      name: 'Alabama 3',\n      population: '3.29M',\n    },\n    {\n      name: 'Alaska 3',\n      population: '1.341M',\n    },\n    {\n      name: 'California 3',\n      population: '39.14M',\n    },\n    {\n      name: 'Florida 3',\n      population: '20.27M',\n    },\n    {\n      name: 'Texas 3',\n      population: '27.47M',\n    },\n    {\n      name: 'Arizona 3',\n      population: '24.112M',\n    },\n  ];\n  filteredStates!: Observable<State[]>;\n  myQuery$: BehaviorSubject<string> = new BehaviorSubject('');\n  fakeAsync = false;\n\n  stateCtrl = new FormControl([this.states[4]], [Validators.required]);\n  singleStateCtrl = new FormControl([this.states[4]], [Validators.required]);\n\n  constructor() {\n    this.filteredStates = this.myQuery$\n      .pipe(\n        map(state => {\n          const val = state ? this.filterStates(state) : [];\n          console.log('Demo: in pipe: ', state, val);\n          return val;\n        }),\n      );\n  }\n\n  private filterStates(value: string): State[] {\n    const filterValue = value.toLowerCase();\n    return this.states.filter(state => state.name.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  log(v: any): void {\n    console.log('DEMO: Form value: ', v);\n  }\n\n  queryHasChanged(v) {\n    console.log('DEMO: query string changed: ', v);\n    this.myQuery$.next(v);\n  }\n\n  duplicate(e) {\n    console.log('DEMO: Duplicate selection: ', e);\n  }\n\n  formatter(value: State): string {\n    return value.name;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\nimport { TsAutocompleteModule } from '@terminus/ui-autocomplete';\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsCheckboxModule } from '@terminus/ui-checkbox';\nimport { TsChipModule } from '@terminus/ui-chip';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { TsOptionModule } from '@terminus/ui-option';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\n\nimport { AutocompleteRoutingModule } from './autocomplete-routing.module';\nimport { AutocompleteComponent } from './autocomplete.component';\n\n@NgModule({\n  imports: [\n    AutocompleteRoutingModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TsAutocompleteModule,\n    TsCheckboxModule,\n    TsCardModule,\n    TsChipModule,\n    TsIconModule,\n    TsOptionModule,\n    TsSpacingModule,\n  ],\n  declarations: [AutocompleteComponent],\n})\nexport class AutocompleteModule {}\n"]}