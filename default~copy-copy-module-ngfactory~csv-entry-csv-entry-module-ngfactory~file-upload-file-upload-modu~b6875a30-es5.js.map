{"version":3,"sources":["webpack:///home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/tooltip/fesm2015/terminus-ui-tooltip.js","webpack:///home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/cdk/fesm2015/layout.js","webpack:///home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/material/fesm2015/tooltip.js","webpack:///home/runner/work/terminus-oss/terminus-oss/node_modules/@angular/material/tooltip/index.d.ts.TooltipComponent.html"],"names":["allowedTooltipTypes","TsTooltipComponent","hasUnderline","_tooltipPosition","matTooltip","show","value","indexOf","console","warn","Object","prototype","String","selector","template","host","changeDetection","OnPush","encapsulation","None","styles","TsTooltipModule","imports","exports","declarations","LayoutModule","decorators","type","args","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","_platform","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","createEmptyStyleRule","providedIn","ctorParameters","Éµprov","factory","MediaMatcher_Factory","token","has","document","createElement","setAttribute","head","appendChild","sheet","insertRule","add","e","error","matches","media","addListener","removeListener","BreakpointState","InternalBreakpointState","Query","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","next","complete","queries","splitQueries","some","mediaQuery","_registerQuery","mql","observables","map","observable","stateObservable","pipe","breakpointStates","response","breakpoints","forEach","state","get","queryObservable","observer","handler","run","nextMql","output","set","BreakpointObserver_Factory","split","reduce","a1","a2","concat","trim","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape","matTooltipAnimations","tooltipState","opacity","transform","offset","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","passiveListenerOptions","passive","LONGPRESS_DELAY","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MatTooltipDefaultOptions","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MatTooltip","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_hammerLoader","_position","_disabled","touchGestures","_message","_passiveListeners","_destroyed","_handleKeydown","event","_isTooltipVisible","keyCode","preventDefault","stopPropagation","hide","_scrollStrategy","monitor","subscribe","origin","runOutsideAngular","nativeElement","addEventListener","_setupPointerEvents","clearTimeout","_touchstartTimeout","_overlayRef","dispose","_tooltipInstance","removeEventListener","listener","clear","removeDescription","message","stopMonitoring","delay","disabled","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","TooltipComponent","attach","instance","afterHidden","_setTooltipClass","_tooltipClass","_updateTooltipMessage","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","change","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","_updatePosition","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","assign","main","fallback","isLtr","originPosition","originX","originY","_invertPosition","x","y","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","updatePosition","tooltipClass","IOS","ANDROID","_disableNativeGesturesIfNecessary","touchendListener","setTimeout","element","style","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","Promise","resolve","then","describe","exportAs","undefined","propDecorators","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","observe","toState","markForCheck","animations","MatTooltipModule","entryComponents","providers"],"mappings":"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","file":"default~copy-copy-module-ngfactory~csv-entry-csv-entry-module-ngfactory~file-upload-file-upload-modu~b6875a30-es5.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { isDevMode, Input, ViewChild, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MatTooltip, MatTooltipModule } from '@angular/material/tooltip';\n\n/**\n * Define the allowed tooltips Used by {@link TsTooltipComponent} position\n */\nconst allowedTooltipTypes = [\n    'above',\n    'below',\n    'before',\n    'after',\n];\n/**\n * This is the tooltip UI Component\n *\n * @example\n * <ts-tooltip\n *              [hasUnderline]=\"myUnderlineOption\"\n *              [tooltipPosition]=\"myPosition\"\n *              [tooltipValue]=\"myTooltip\"\n * >My Tooltip!</ts-tooltip>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/tooltip</example-url>\n */\nlet TsTooltipComponent = class TsTooltipComponent {\n    constructor() {\n        /**\n         * Define whether there is a dotted underline shown on the text\n         */\n        this.hasUnderline = false;\n        this._tooltipPosition = 'below';\n    }\n    /**\n     * Define the position of the tooltip\n     *\n     * @param value\n     */\n    set tooltipPosition(value) {\n        if (value && isDevMode() && (allowedTooltipTypes.indexOf(value) < 0)) {\n            // eslint-disable-next-line no-console\n            console.warn(`TsTooltipComponent: \"${value}\" is not an allowed position. Allowed positions defined by \"TsTooltipPositionTypes\".`);\n        }\n        this._tooltipPosition = value;\n    }\n    get tooltipPosition() {\n        return this._tooltipPosition;\n    }\n    /**\n     * Call Material Tooltip's show() method\n     */\n    showTooltip() {\n        this.matTooltip.show();\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsTooltipComponent.prototype, \"hasUnderline\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsTooltipComponent.prototype, \"tooltipPosition\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsTooltipComponent.prototype, \"tooltipValue\", void 0);\n__decorate([\n    ViewChild('tooltip', { static: true }),\n    __metadata(\"design:type\", MatTooltip)\n], TsTooltipComponent.prototype, \"matTooltip\", void 0);\nTsTooltipComponent = __decorate([\n    Component({\n        selector: 'ts-tooltip',\n        template: \"<span #tooltip=\\\"matTooltip\\\"\\n  class=\\\"c-tooltip qa-tooltip\\\"\\n  [matTooltip]=\\\"tooltipValue\\\"\\n  [matTooltipPosition]=\\\"tooltipPosition\\\"\\n  [ngClass]=\\\"{'c-tooltip--underline': hasUnderline}\\\"\\n>\\n  <ng-content></ng-content>\\n</span>\\n\",\n        host: { class: 'ts-tooltip' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-tooltip{display:inline-block}.ts-tooltip :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-tooltip h1,.ts-tooltip h2,.ts-tooltip h3,.ts-tooltip h4,.ts-tooltip h5,.ts-tooltip p{margin:unset}.c-tooltip--underline{border-bottom:.1em dotted;border-color:inherit;cursor:help}.mat-tooltip-panel .mat-tooltip{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);background-color:#fafafa;color:#302d35;overflow-wrap:break-word;white-space:normal}\"]\n    })\n], TsTooltipComponent);\n\nlet TsTooltipModule = class TsTooltipModule {\n};\nTsTooltipModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            MatTooltipModule,\n        ],\n        exports: [TsTooltipComponent],\n        declarations: [TsTooltipComponent],\n    })\n], TsTooltipModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsTooltipComponent, TsTooltipModule, allowedTooltipTypes };\n//# sourceMappingURL=terminus-ui-tooltip.js.map\n","import { NgModule, Injectable, ÉµÉµdefineInjectable, ÉµÉµinject, NgZone } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/layout-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LayoutModule {\n}\nLayoutModule.decorators = [\n    { type: NgModule, args: [{},] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/media-matcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Global registry for all dynamically-created, injected media queries.\n * @type {?}\n */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/**\n * Style tag that holds all of the dynamically-created media queries.\n * @type {?}\n */\nlet mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\nclass MediaMatcher {\n    /**\n     * @param {?} _platform\n     */\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n/** @nocollapse */ MediaMatcher.Éµprov = ÉµÉµdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(ÉµÉµinject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\nif (false) {\n    /**\n     * The internal matchMedia method to return back a MediaQueryList like object.\n     * @type {?}\n     * @private\n     */\n    MediaMatcher.prototype._matchMedia;\n    /**\n     * @type {?}\n     * @private\n     */\n    MediaMatcher.prototype._platform;\n}\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            (/** @type {?} */ (document.head)).appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            ((/** @type {?} */ (mediaQueryStyleNode.sheet)))\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return (/** @type {?} */ ({\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: (/**\n         * @return {?}\n         */\n        () => { }),\n        removeListener: (/**\n         * @return {?}\n         */\n        () => { })\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/breakpoints-observer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The current state of a layout breakpoint.\n * @record\n */\nfunction BreakpointState() { }\nif (false) {\n    /**\n     * Whether the breakpoint is currently matching.\n     * @type {?}\n     */\n    BreakpointState.prototype.matches;\n    /**\n     * A key boolean pair for each query provided to the observe method,\n     * with its current matched state.\n     * @type {?}\n     */\n    BreakpointState.prototype.breakpoints;\n}\n/**\n * The current state of a layout breakpoint.\n * @record\n */\nfunction InternalBreakpointState() { }\nif (false) {\n    /**\n     * Whether the breakpoint is currently matching.\n     * @type {?}\n     */\n    InternalBreakpointState.prototype.matches;\n    /**\n     * The media query being to be matched\n     * @type {?}\n     */\n    InternalBreakpointState.prototype.query;\n}\n/**\n * @record\n */\nfunction Query() { }\nif (false) {\n    /** @type {?} */\n    Query.prototype.observable;\n    /** @type {?} */\n    Query.prototype.mql;\n}\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nclass BreakpointObserver {\n    /**\n     * @param {?} _mediaMatcher\n     * @param {?} _zone\n     */\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**\n         * A map of all media queries currently being listened for.\n         */\n        this._queries = new Map();\n        /**\n         * A subject for all other observables to takeUntil based on.\n         */\n        this._destroySubject = new Subject();\n    }\n    /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    isMatched(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        return queries.some((/**\n         * @param {?} mediaQuery\n         * @return {?}\n         */\n        mediaQuery => this._registerQuery(mediaQuery).mql.matches));\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    observe(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        /** @type {?} */\n        const observables = queries.map((/**\n         * @param {?} query\n         * @return {?}\n         */\n        query => this._registerQuery(query).observable));\n        /** @type {?} */\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map((/**\n         * @param {?} breakpointStates\n         * @return {?}\n         */\n        (breakpointStates) => {\n            /** @type {?} */\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach((/**\n             * @param {?} state\n             * @return {?}\n             */\n            (state) => {\n                response.matches = response.matches || state.matches;\n                response.breakpoints[state.query] = state.matches;\n            }));\n            return response;\n        })));\n    }\n    /**\n     * Registers a specific query to be listened for.\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return (/** @type {?} */ (this._queries.get(query)));\n        }\n        /** @type {?} */\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        /** @type {?} */\n        const queryObservable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            /** @type {?} */\n            const handler = (/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => this._zone.run((/**\n             * @return {?}\n             */\n            () => observer.next(e))));\n            mql.addListener(handler);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                mql.removeListener(handler);\n            });\n        })).pipe(startWith(mql), map((/**\n         * @param {?} nextMql\n         * @return {?}\n         */\n        (nextMql) => ({ query, matches: nextMql.matches }))), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        /** @type {?} */\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n/** @nocollapse */ BreakpointObserver.Éµprov = ÉµÉµdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(ÉµÉµinject(MediaMatcher), ÉµÉµinject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\nif (false) {\n    /**\n     * A map of all media queries currently being listened for.\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._queries;\n    /**\n     * A subject for all other observables to takeUntil based on.\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._destroySubject;\n    /**\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._mediaMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._zone;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    (query) => query.split(',')))\n        .reduce((/**\n     * @param {?} a1\n     * @param {?} a2\n     * @return {?}\n     */\n    (a1, a2) => a1.concat(a2)))\n        .map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    query => query.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/breakpoints.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst Breakpoints = {\n    XSmall: '(max-width: 599.99px)',\n    Small: '(min-width: 600px) and (max-width: 959.99px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\n        '(max-width: 959.99px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/layout/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n//# sourceMappingURL=layout.js.map\n","import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tooltip/tooltip-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by MatTooltip.\n * \\@docs-private\n * @type {?}\n */\nconst matTooltipAnimations = {\n    /**\n     * Animation that transitions a tooltip in and out.\n     */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tooltip/tooltip.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle repositioning after scroll events.\n * @type {?}\n */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @type {?}\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Options used to bind passive event listeners.\n * @type {?}\n */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n * @type {?}\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n * @type {?}\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS }));\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Default `matTooltip` options that can be overridden.\n * @record\n */\nfunction MatTooltipDefaultOptions() { }\nif (false) {\n    /** @type {?} */\n    MatTooltipDefaultOptions.prototype.showDelay;\n    /** @type {?} */\n    MatTooltipDefaultOptions.prototype.hideDelay;\n    /** @type {?} */\n    MatTooltipDefaultOptions.prototype.touchendHideDelay;\n    /** @type {?|undefined} */\n    MatTooltipDefaultOptions.prototype.touchGestures;\n    /** @type {?|undefined} */\n    MatTooltipDefaultOptions.prototype.position;\n}\n/**\n * Injection token to be used to override the default options for `matTooltip`.\n * @type {?}\n */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    /**\n     * @param {?} _overlay\n     * @param {?} _elementRef\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _ngZone\n     * @param {?} _platform\n     * @param {?} _ariaDescriber\n     * @param {?} _focusMonitor\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _defaultOptions\n     * @param {?=} _hammerLoader\n     */\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, \n    /**\n     * @deprecated _hammerLoader parameter to be removed.\n     * @breaking-change 9.0.0\n     */\n    // Note that we need to give Angular something to inject here so it doesn't throw.\n    _hammerLoader) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        /**\n         * The default delay in ms before showing the tooltip after show is called\n         */\n        this.showDelay = this._defaultOptions.showDelay;\n        /**\n         * The default delay in ms before hiding the tooltip after hide is called\n         */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /**\n         * Manually-bound passive event listeners.\n         */\n        this._passiveListeners = new Map();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Handles the keydown events on the host element.\n         * Needs to be an arrow function so that we can use it in addEventListener.\n         */\n        this._handleKeydown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this.hide(0)));\n            }\n        });\n        this._scrollStrategy = scrollStrategy;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _focusMonitor.monitor(_elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                _ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this.hide(0)));\n            }\n            else if (origin === 'keyboard') {\n                _ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this.show()));\n            }\n        }));\n        _ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n        }));\n    }\n    /**\n     * Allows the user to define the position of the tooltip relative to the parent element\n     * @return {?}\n     */\n    get position() { return this._position; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition();\n                if (this._tooltipInstance) {\n                    (/** @type {?} */ (this._tooltipInstance)).show(0);\n                }\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /**\n     * Disables the display of the tooltip.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n    }\n    /**\n     * The message to be displayed in the tooltip\n     * @return {?}\n     */\n    get message() { return this._message; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        this._message = value != null ? `${value}`.trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n                }));\n            }));\n        }\n    }\n    /**\n     * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n     * @return {?}\n     */\n    get tooltipClass() { return this._tooltipClass; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    /**\n     * Setup styling-specific things\n     * @return {?}\n     */\n    ngOnInit() {\n        // This needs to happen in `ngOnInit` so the initial values for all inputs have been set.\n        this._setupPointerEvents();\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n        this._passiveListeners.forEach((/**\n         * @param {?} listener\n         * @param {?} event\n         * @return {?}\n         */\n        (listener, event) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        }));\n        this._passiveListeners.clear();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message);\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !(/** @type {?} */ (this._tooltipInstance))._showTimeoutId && !(/** @type {?} */ (this._tooltipInstance))._hideTimeoutId)) {\n            return;\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this._detach()));\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        (/** @type {?} */ (this._tooltipInstance)).show(delay);\n    }\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /**\n     * Create the overlay config and position strategy\n     * @private\n     * @return {?}\n     */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        /** @type {?} */\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn('.mat-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} change\n         * @return {?}\n         */\n        change => {\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run((/**\n                     * @return {?}\n                     */\n                    () => this.hide(0)));\n                }\n            }\n        }));\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: TOOLTIP_PANEL_CLASS,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition();\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this._detach()));\n        return this._overlayRef;\n    }\n    /**\n     * Detaches the currently-attached tooltip.\n     * @private\n     * @return {?}\n     */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /**\n     * Updates the position of the current tooltip.\n     * @private\n     * @return {?}\n     */\n    _updatePosition() {\n        /** @type {?} */\n        const position = (/** @type {?} */ ((/** @type {?} */ (this._overlayRef)).getConfig().positionStrategy));\n        /** @type {?} */\n        const origin = this._getOrigin();\n        /** @type {?} */\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            Object.assign(Object.assign({}, origin.main), overlay.main),\n            Object.assign(Object.assign({}, origin.fallback), overlay.fallback)\n        ]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     * @return {?}\n     */\n    _getOrigin() {\n        /** @type {?} */\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n        const position = this.position;\n        /** @type {?} */\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /**\n     * Returns the overlay position and a fallback position based on the user's preference\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n        const position = this.position;\n        /** @type {?} */\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @private\n     * @return {?}\n     */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (this._tooltipInstance) {\n                    (/** @type {?} */ (this._overlayRef)).updatePosition();\n                }\n            }));\n        }\n    }\n    /**\n     * Updates the tooltip class\n     * @private\n     * @param {?} tooltipClass\n     * @return {?}\n     */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /**\n     * Inverts an overlay position.\n     * @private\n     * @param {?} x\n     * @param {?} y\n     * @return {?}\n     */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /**\n     * Binds the pointer events to the tooltip trigger.\n     * @private\n     * @return {?}\n     */\n    _setupPointerEvents() {\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (!this._platform.IOS && !this._platform.ANDROID) {\n            this._passiveListeners\n                .set('mouseenter', (/**\n             * @return {?}\n             */\n            () => this.show()))\n                .set('mouseleave', (/**\n             * @return {?}\n             */\n            () => this.hide()));\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            /** @type {?} */\n            const touchendListener = (/**\n             * @return {?}\n             */\n            () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            });\n            this._passiveListeners\n                .set('touchend', touchendListener)\n                .set('touchcancel', touchendListener)\n                .set('touchstart', (/**\n             * @return {?}\n             */\n            () => {\n                // Note that it's important that we don't `preventDefault` here,\n                // because it can prevent click events from firing on the element.\n                clearTimeout(this._touchstartTimeout);\n                this._touchstartTimeout = setTimeout((/**\n                 * @return {?}\n                 */\n                () => this.show()), LONGPRESS_DELAY);\n            }));\n        }\n        this._passiveListeners.forEach((/**\n         * @param {?} listener\n         * @param {?} event\n         * @return {?}\n         */\n        (listener, event) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        }));\n    }\n    /**\n     * Disables the native browser gestures, based on how the tooltip has been configured.\n     * @private\n     * @return {?}\n     */\n    _disableNativeGesturesIfNecessary() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const style = element.style;\n        /** @type {?} */\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                    ((/** @type {?} */ (style))).MozUserSelect = 'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                ((/** @type {?} */ (style))).webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\nMatTooltip.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n            },] }\n];\n/** @nocollapse */\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [ElementRef,] }] }\n];\nMatTooltip.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    touchGestures: [{ type: Input, args: ['matTooltipTouchGestures',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatTooltip.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatTooltip.ngAcceptInputType_hideDelay;\n    /** @type {?} */\n    MatTooltip.ngAcceptInputType_showDelay;\n    /** @type {?} */\n    MatTooltip.prototype._overlayRef;\n    /** @type {?} */\n    MatTooltip.prototype._tooltipInstance;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._portal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._position;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._tooltipClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._scrollStrategy;\n    /**\n     * The default delay in ms before showing the tooltip after show is called\n     * @type {?}\n     */\n    MatTooltip.prototype.showDelay;\n    /**\n     * The default delay in ms before hiding the tooltip after hide is called\n     * @type {?}\n     */\n    MatTooltip.prototype.hideDelay;\n    /**\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n     * elements). The different values for this option configure the touch event handling as follows:\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n     * - `on` - Enables touch gestures for all elements and disables native\n     *   browser gestures with no exceptions.\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n     *   showing on touch devices.\n     * @type {?}\n     */\n    MatTooltip.prototype.touchGestures;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._message;\n    /**\n     * Manually-bound passive event listeners.\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._passiveListeners;\n    /**\n     * Timer started at the last `touchstart` event.\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._touchstartTimeout;\n    /**\n     * Emits when the component is destroyed.\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._destroyed;\n    /**\n     * Handles the keydown events on the host element.\n     * Needs to be an arrow function so that we can use it in addEventListener.\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._handleKeydown;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._scrollDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._ariaDescriber;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._defaultOptions;\n}\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nclass TooltipComponent {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _breakpointObserver\n     */\n    constructor(_changeDetectorRef, _breakpointObserver) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._breakpointObserver = _breakpointObserver;\n        /**\n         * Property watched by the animation framework to show or hide the tooltip\n         */\n        this._visibility = 'initial';\n        /**\n         * Whether interactions on the page should close the tooltip\n         */\n        this._closeOnInteraction = false;\n        /**\n         * Subject for notifying that the tooltip has been hidden from the view\n         */\n        this._onHide = new Subject();\n        /**\n         * Stream that emits whether the user has a handset-sized display.\n         */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n            this._hideTimeoutId = null;\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this._visibility = 'visible';\n            this._showTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }), delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n        }\n        this._hideTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }), delay);\n    }\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view.\n     * @return {?}\n     */\n    afterHidden() {\n        return this._onHide.asObservable();\n    }\n    /**\n     * Whether the tooltip is being displayed.\n     * @return {?}\n     */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._onHide.complete();\n    }\n    /**\n     * @return {?}\n     */\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _animationDone(event) {\n        /** @type {?} */\n        const toState = (/** @type {?} */ (event.toState));\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     * @return {?}\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     * @return {?}\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n}\nTooltipComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matTooltipAnimations.tooltipState],\n                host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true',\n                },\n                styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\nif (false) {\n    /**\n     * Message to display in the tooltip\n     * @type {?}\n     */\n    TooltipComponent.prototype.message;\n    /**\n     * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n     * @type {?}\n     */\n    TooltipComponent.prototype.tooltipClass;\n    /**\n     * The timeout ID of any current timer set to show the tooltip\n     * @type {?}\n     */\n    TooltipComponent.prototype._showTimeoutId;\n    /**\n     * The timeout ID of any current timer set to hide the tooltip\n     * @type {?}\n     */\n    TooltipComponent.prototype._hideTimeoutId;\n    /**\n     * Property watched by the animation framework to show or hide the tooltip\n     * @type {?}\n     */\n    TooltipComponent.prototype._visibility;\n    /**\n     * Whether interactions on the page should close the tooltip\n     * @type {?}\n     * @private\n     */\n    TooltipComponent.prototype._closeOnInteraction;\n    /**\n     * Subject for notifying that the tooltip has been hidden from the view\n     * @type {?}\n     * @private\n     */\n    TooltipComponent.prototype._onHide;\n    /**\n     * Stream that emits whether the user has a handset-sized display.\n     * @type {?}\n     */\n    TooltipComponent.prototype._isHandset;\n    /**\n     * @type {?}\n     * @private\n     */\n    TooltipComponent.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    TooltipComponent.prototype._breakpointObserver;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tooltip/tooltip-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tooltip/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };\n//# sourceMappingURL=tooltip.js.map\n","<div class=\"mat-tooltip\"\n     [ngClass]=\"tooltipClass\"\n     [class.mat-tooltip-handset]=\"(_isHandset | async)?.matches\"\n     [@state]=\"_visibility\"\n     (@state.start)=\"_animationStart()\"\n     (@state.done)=\"_animationDone($event)\">{{message}}</div>\n"]}