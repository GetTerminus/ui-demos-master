{"version":3,"sources":["/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/confirmation/fesm2015/terminus-ui-confirmation.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/confirmation/terminus-ui-confirmation.d.ts.TsConfirmationOverlayComponent.html","./src/app/components/confirmation/confirmation-routing.module.ts","./src/app/components/confirmation/confirmation.component.html","./src/app/components/confirmation/confirmation.component.ts","./src/app/components/confirmation/confirmation.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC8B;AAC9B;AACiJ;AACxI;AACgB;AAClB;AAChB;AAC+B;AACG;AACtB;;AAElD;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA,mBAAmB,gEAAU;AAC7B;AACA;AACA,iCAAiC,wDAAU;AAC3C,IAAI,+DAAS;AACb;AACA,yIAAyI,mBAAmB,qRAAqR,oBAAoB,sIAAsI,0BAA0B;AACrmB,eAAe,2BAA2B;AAC1C,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA,wBAAwB,gEAAgE,+DAA+D,+DAA+D,8DAA8D,UAAU,kBAAkB,qCAAqC,kDAAkD,2BAA2B,cAAc,iBAAiB,kBAAkB,UAAU,2BAA2B,8GAA8G,yBAAyB,yBAAyB,gBAAgB,oBAAoB,uCAAuC,iBAAiB,sBAAsB,kBAAkB,sBAAsB,0BAA0B,qCAAqC,iBAAiB,kDAAkD,mBAAmB,SAAS,gCAAgC,wBAAwB,cAAc,WAAW,YAAY,gBAAgB,UAAU,oBAAoB,kBAAkB,kBAAkB,UAAU,qDAAqD,sBAAsB,uHAAuH,aAAa,yBAAyB,sCAAsC,6DAA6D,sBAAsB,uKAAuK,aAAa,gCAAgC,uGAAuG,yBAAyB,cAAc,aAAa,oEAAoE,sBAAsB,iNAAiN,aAAa,sEAAsE,mBAAmB,6EAA6E,WAAW,SAAS,kBAAkB,QAAQ,YAAY,kCAAkC,mCAAmC,SAAS,8BAA8B,SAAS,6EAA6E,WAAW,SAAS,kBAAkB,QAAQ,YAAY,kCAAkC,mCAAmC,YAAY,iCAAiC,SAAS,2BAA2B,8EAA8E,WAAW,SAAS,kBAAkB,QAAQ,YAAY,oCAAoC,iCAAiC,+BAA+B,YAAY,QAAQ,2BAA2B,6EAA6E,WAAW,SAAS,kBAAkB,QAAQ,YAAY,oCAAoC,iCAAiC,gCAAgC,WAAW,QAAQ,2BAA2B;AACxzG,KAAK;AACL;;AAEA;AACA,wCAAwC,qCAAqC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAAS;AAC9B;AACA,oDAAoD,MAAM;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAK;AACb;AACA;AACA;AACA,kBAAkB,6FAAuB;AACzC;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mEAAe;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0FAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,mBAAmB,kEAAa;AAChC;AACA;AACA;AACA;AACA,iFAAiF,cAAc;AAC/F,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;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","file":"confirmation-confirmation-module-ngfactory-es2015.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { OverlayConfig, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, EventEmitter, isDevMode, ElementRef, ChangeDetectorRef, Input, Output, HostListener, Directive, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { TsButtonComponent, TsButtonModule } from '@terminus/ui-button';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject, merge } from 'rxjs';\nimport { coerceBooleanProperty } from '@terminus/ngx-tools/coercion';\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\nimport { TS_SPACING } from '@terminus/ui-spacing';\n\n/**\n * The confirmation overlay used by {@link TsConfirmationDirective}\n */\nlet TsConfirmationOverlayComponent = class TsConfirmationOverlayComponent {\n    constructor() {\n        /**\n         * Stream confirmation choices\n         */\n        this.confirm = new Subject();\n        /**\n         * Define the space between the buttons\n         */\n        this.gap = TS_SPACING.large[0];\n    }\n};\nTsConfirmationOverlayComponent = __decorate([\n    Component({\n        selector: 'ts-confirmation-overlay',\n        template: \"<div\\n  fxLayout=\\\"column\\\"\\n>\\n  <p *ngIf=\\\"explanationText\\\" class=\\\"ts-confirmation-overlay__explanation\\\">\\n    {{ explanationText }}\\n  </p>\\n\\n  <div\\n    fxLayout=\\\"row\\\"\\n    fxLayoutAlign=\\\"center space-between\\\"\\n    [fxLayoutGap]=\\\"gap\\\"\\n  >\\n    <ts-button\\n      class=\\\"qa-confirmation-cancel\\\"\\n      theme=\\\"warn\\\"\\n      format=\\\"hollow\\\"\\n      (clicked)=\\\"confirm.next(false)\\\"\\n    >\\n      {{ cancelButtonText }}\\n    </ts-button>\\n\\n    <ts-button\\n      class=\\\"qa-confirmation-confirm\\\"\\n      (clicked)=\\\"confirm.next(true)\\\"\\n    >\\n      {{ confirmationButtonText }}\\n    </ts-button>\\n  </div>\\n</div>\\n\",\n        host: { class: 'ts-confirmation' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsConfirmation',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-confirmation :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-confirmation h1,.ts-confirmation h2,.ts-confirmation h3,.ts-confirmation h4,.ts-confirmation h5,.ts-confirmation p{margin:unset}.ts-confirmation-overlay{background-color:rgba(250,250,250,.5)}.ts-confirmation-overlay :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-confirmation-overlay h1,.ts-confirmation-overlay h2,.ts-confirmation-overlay h3,.ts-confirmation-overlay h4,.ts-confirmation-overlay h5,.ts-confirmation-overlay p{margin:unset}.ts-confirmation-overlay__panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);background-color:#fafafa;display:block;padding:16px}.ts-confirmation-overlay__panel :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-confirmation-overlay__panel h1,.ts-confirmation-overlay__panel h2,.ts-confirmation-overlay__panel h3,.ts-confirmation-overlay__panel h4,.ts-confirmation-overlay__panel h5,.ts-confirmation-overlay__panel p{margin:unset}.ts-confirmation-overlay__panel .ts-confirmation-overlay__explanation{margin-bottom:24px}.ts-confirmation-overlay__panel.ts-confirmation-overlay__panel-above::before{content:'';height:0;position:absolute;width:0;z-index:503;border-left:8px solid transparent;border-right:8px solid transparent;top:100%;border-top:12px solid #fafafa;left:50%}.ts-confirmation-overlay__panel.ts-confirmation-overlay__panel-below::before{content:'';height:0;position:absolute;width:0;z-index:503;border-left:8px solid transparent;border-right:8px solid transparent;bottom:100%;border-bottom:12px solid #fafafa;left:50%;transform:translateX(-50%)}.ts-confirmation-overlay__panel.ts-confirmation-overlay__panel-before::before{content:'';height:0;position:absolute;width:0;z-index:503;border-bottom:8px solid transparent;border-top:8px solid transparent;border-left:12px solid #fafafa;right:-12px;top:50%;transform:translateY(-50%)}.ts-confirmation-overlay__panel.ts-confirmation-overlay__panel-after::before{content:'';height:0;position:absolute;width:0;z-index:503;border-bottom:8px solid transparent;border-top:8px solid transparent;border-right:12px solid #fafafa;left:-12px;top:50%;transform:translateY(-50%)}\"]\n    })\n], TsConfirmationOverlayComponent);\n\n/**\n * Define the allowed tooltips Used by {@link TsConfirmationOverlayComponent} position\n */\nconst allowedOverlayPositionTypes = [\n    'above',\n    'below',\n    'before',\n    'after',\n];\n/**\n * A directive to inject a confirmation step into any button\n *\n * @example\n *         <ts-button\n *           tsConfirmation\n *           cancelButtonText=\"Abort!\"\n *           confirmationButtonText=\"Confirm!\"\n *           explanationText=\"Are you sure you want to do this?\"\n *           overlayPosition=\"before\"\n *           (cancelled)=\"myFunction($event)\"\n *         >\n *           Click me!\n *         </ts-button>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/confirmation</example-url>\n */\nlet TsConfirmationDirective = class TsConfirmationDirective {\n    constructor(elementRef, overlay, host, changeDetectorRef) {\n        this.elementRef = elementRef;\n        this.overlay = overlay;\n        this.host = host;\n        this.changeDetectorRef = changeDetectorRef;\n        this._confirmationButtonText = 'Confirm';\n        this._cancelButtonText = 'Cancel';\n        this._overlayPosition = 'below';\n        /**\n         * An event emitted when the confirmation is cancelled\n         */\n        this.cancelled = new EventEmitter();\n    }\n    /**\n     * Define the confirmation button text\n     *\n     * @param value\n     */\n    set confirmationButtonText(value) {\n        this._confirmationButtonText = value || 'Confirm';\n    }\n    get confirmationButtonText() {\n        return this._confirmationButtonText;\n    }\n    /**\n     * Define the cancel button text\n     *\n     * @param value\n     */\n    set cancelButtonText(value) {\n        this._cancelButtonText = value || 'Cancel';\n    }\n    get cancelButtonText() {\n        return this._cancelButtonText;\n    }\n    /**\n     * Define position of the overlay\n     *\n     * @param value\n     */\n    set overlayPosition(value) {\n        if (value && isDevMode() && (allowedOverlayPositionTypes.indexOf(value) < 0)) {\n            // eslint-disable-next-line no-console\n            console.warn(`TsConfirmationOverlay: \"${value}\" is not an allowed position.`\n                + `Allowed positions are defined by \"allowedOverlayPositionTypes\".`);\n        }\n        this._overlayPosition = value;\n    }\n    get overlayPosition() {\n        return this._overlayPosition;\n    }\n    /**\n     * Spawn the confirmation overlay on click\n     *\n     * NOTE: Even though the 'event' param is not used, the param must exist for AoT to pass.\n     *\n     * @param event\n     */\n    onClick(event) {\n        this.createOverlay();\n    }\n    /**\n     * Dismiss the confirmation overlay on pressing escape\n     */\n    onKeydownHandler() {\n        this.dismissOverlay();\n    }\n    /**\n     * Set a flag in the {@link TsButtonComponent} to intercept the click\n     */\n    ngOnInit() {\n        this.host.interceptClick = true;\n    }\n    /**\n     * Dismiss the overlay and clean up observables\n     */\n    ngOnDestroy() {\n        this.dismissOverlay();\n        this.host.interceptClick = false;\n    }\n    /**\n     * Create and attach the confirmation overlay\n     */\n    createOverlay() {\n        const overlayConfig = this.generateOverlayConfig(this.overlayPosition);\n        // Create the overlay\n        this.overlayRef = this.overlay.create(overlayConfig);\n        // Wire up listeners for keydown events and overlay clicks\n        // eslint-disable-next-line deprecation/deprecation\n        merge(\n        // NOTE: Naming controlled by the CDK\n        // eslint-disable-next-line no-underscore-dangle\n        this.overlayRef._keydownEvents, this.overlayRef.backdropClick())\n            .pipe(untilComponentDestroyed(this))\n            .subscribe(() => {\n            this.dismissOverlay();\n            this.cancelled.emit(true);\n        });\n        // Create and attach the overlay\n        const userProfilePortal = new ComponentPortal(TsConfirmationOverlayComponent);\n        this.overlayInstance = this.overlayRef.attach(userProfilePortal).instance;\n        this.overlayInstance.confirmationButtonText = this.confirmationButtonText;\n        this.overlayInstance.cancelButtonText = this.cancelButtonText;\n        this.overlayInstance.explanationText = this.explanationText;\n        // Start the progress indicator of the TsButton\n        this.host.showProgress = true;\n        // Subscribe to the continue event\n        this.overlayInstance.confirm.subscribe((shouldProceed) => {\n            if (coerceBooleanProperty(shouldProceed)) {\n                this.host.clicked.emit(this.host.originalClickEvent);\n                this.dismissOverlay();\n            }\n            else {\n                this.dismissOverlay();\n                this.cancelled.emit(true);\n            }\n        });\n    }\n    /**\n     * Configure the overlay\n     *\n     * @param value\n     */\n    generateOverlayConfig(value = 'below') {\n        let overlayPosOriginX = 'center';\n        let overlayPosOriginY = 'bottom';\n        let overlayPosOverlayX = 'center';\n        let overlayPosOverlayY = 'top';\n        let positionClass = 'ts-confirmation-overlay__panel-below';\n        // Define custom offsets so that the full button is still visible after the overlay is opened\n        const OFFSET_Y = 16;\n        const OFFSET_X_BEFORE = -38;\n        const OFFSET_X_AFTER = 38;\n        let defaultOffsetY = 0;\n        let defaultOffsetX = 0;\n        switch (value) {\n            case ('above'):\n                overlayPosOriginY = 'top';\n                overlayPosOverlayY = 'bottom';\n                positionClass = 'ts-confirmation-overlay__panel-above';\n                defaultOffsetY = -(OFFSET_Y);\n                break;\n            case ('below'):\n                overlayPosOriginY = 'bottom';\n                overlayPosOverlayY = 'top';\n                positionClass = 'ts-confirmation-overlay__panel-below';\n                defaultOffsetY = OFFSET_Y;\n                break;\n            case ('before'):\n                overlayPosOriginX = 'start';\n                overlayPosOriginY = 'center';\n                overlayPosOverlayX = 'end';\n                overlayPosOverlayY = 'center';\n                positionClass = 'ts-confirmation-overlay__panel-before';\n                defaultOffsetX = OFFSET_X_BEFORE;\n                break;\n            case ('after'):\n                overlayPosOriginX = 'end';\n                overlayPosOriginY = 'center';\n                overlayPosOverlayX = 'start';\n                overlayPosOverlayY = 'center';\n                positionClass = 'ts-confirmation-overlay__panel-after';\n                defaultOffsetX = OFFSET_X_AFTER;\n                break;\n            // skip default - unreachable\n        }\n        const positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withDefaultOffsetY(defaultOffsetY)\n            .withDefaultOffsetX(defaultOffsetX)\n            .withPositions([\n            {\n                originX: overlayPosOriginX,\n                originY: overlayPosOriginY,\n                overlayX: overlayPosOverlayX,\n                overlayY: overlayPosOverlayY,\n            },\n        ]);\n        return new OverlayConfig({\n            positionStrategy,\n            scrollStrategy: this.overlay.scrollStrategies.reposition(),\n            hasBackdrop: true,\n            backdropClass: 'ts-confirmation-overlay',\n            panelClass: ['qa-confirmation', 'ts-confirmation-overlay__panel', `${positionClass}`],\n        });\n    }\n    /**\n     * Dismiss the overlay\n     */\n    dismissOverlay() {\n        // istanbul ignore else\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        // Stop the progress indicator of the TsButton\n        this.host.showProgress = false;\n        this.changeDetectorRef.markForCheck();\n    }\n};\nTsConfirmationDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: TsButtonComponent },\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsConfirmationDirective.prototype, \"confirmationButtonText\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsConfirmationDirective.prototype, \"cancelButtonText\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsConfirmationDirective.prototype, \"explanationText\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsConfirmationDirective.prototype, \"overlayPosition\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsConfirmationDirective.prototype, \"cancelled\", void 0);\n__decorate([\n    HostListener('click', ['$event']),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Event]),\n    __metadata(\"design:returntype\", void 0)\n], TsConfirmationDirective.prototype, \"onClick\", null);\n__decorate([\n    HostListener('document:keydown.escape'),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], TsConfirmationDirective.prototype, \"onKeydownHandler\", null);\nTsConfirmationDirective = __decorate([\n    Directive({\n        selector: '[tsConfirmation]',\n        host: { class: 'ts-confirmation' },\n        exportAs: 'tsConfirmation',\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        Overlay,\n        TsButtonComponent,\n        ChangeDetectorRef])\n], TsConfirmationDirective);\n\nlet TsConfirmationModule = class TsConfirmationModule {\n};\nTsConfirmationModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            OverlayModule,\n            TsButtonModule,\n        ],\n        declarations: [\n            TsConfirmationDirective,\n            TsConfirmationOverlayComponent,\n        ],\n        exports: [TsConfirmationDirective],\n        entryComponents: [TsConfirmationOverlayComponent],\n    })\n], TsConfirmationModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsConfirmationDirective, TsConfirmationModule, TsConfirmationOverlayComponent, allowedOverlayPositionTypes };\n//# sourceMappingURL=terminus-ui-confirmation.js.map\n","<div\n  fxLayout=\"column\"\n>\n  <p *ngIf=\"explanationText\" class=\"ts-confirmation-overlay__explanation\">\n    {{ explanationText }}\n  </p>\n\n  <div\n    fxLayout=\"row\"\n    fxLayoutAlign=\"center space-between\"\n    [fxLayoutGap]=\"gap\"\n  >\n    <ts-button\n      class=\"qa-confirmation-cancel\"\n      theme=\"warn\"\n      format=\"hollow\"\n      (clicked)=\"confirm.next(false)\"\n    >\n      {{ cancelButtonText }}\n    </ts-button>\n\n    <ts-button\n      class=\"qa-confirmation-confirm\"\n      (clicked)=\"confirm.next(true)\"\n    >\n      {{ confirmationButtonText }}\n    </ts-button>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { ConfirmationComponent } from './confirmation.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ConfirmationComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ConfirmationRoutingModule { }\n","<ts-card tsVerticalSpacing>\n  <h3 tsCardTitle tsVerticalSpacing=\"small--0\">Demo Controls</h3>\n\n  <div tsVerticalSpacing>\n    <label>\n      Overlay Position:\n      <select name=\"myOverlayPosition\" [(ngModel)]=\"myOverlayPosition\">\n        <option value=\"{{ overlayPosition }}\" *ngFor=\"let overlayPosition of overlayPositions\">\n          {{ overlayPosition }}\n        </option>\n      </select>\n    </label>\n  </div>\n</ts-card>\n\n<ts-card tsVerticalSpacing *ngIf=\"myOverlayPosition === 'after'\" aspectRatio=\"5:3\">\n  <h3 tsCardTitle tsVerticalSpacing=\"small--0\">Use 'after' when the button is on the left</h3>\n  <div fxLayout=\"row\" fxLayoutAlign=\"start\">\n    <ts-button\n      tsConfirmation\n      [showProgress]=\"progress\"\n      (clicked)=\"submit()\"\n      (cancelled)=\"cancel($event)\"\n      confirmationButtonText=\"Custom Confirmation Button Text\"\n      [explanationText]=\"explanation\"\n      [overlayPosition]=\"myOverlayPosition\"\n    >\n    Click Me!\n  </ts-button>\n</div>\n</ts-card>\n\n<ts-card tsVerticalSpacing *ngIf=\"myOverlayPosition === 'before'\" aspectRatio=\"5:3\">\n  <h3 tsCardTitle tsVerticalSpacing=\"small--0\">Use 'before' when the button is on the right</h3>\n  <div fxLayout=\"row\" fxLayoutAlign=\"end\">\n    <ts-button\n      tsConfirmation\n      [showProgress]=\"progress\"\n      (clicked)=\"submit()\"\n      (cancelled)=\"cancel($event)\"\n      confirmationButtonText=\"Custom Confirmation Button Text\"\n      [explanationText]=\"explanation\"\n      [overlayPosition]=\"myOverlayPosition\"\n    >\n      Click Me!\n    </ts-button>\n  </div>\n</ts-card>\n\n\n<ts-card *ngIf=\"myOverlayPosition === 'above' || myOverlayPosition === 'below'\" [centeredContent]=\"true\" aspectRatio=\"5:3\">\n\n  <ts-button\n    tsConfirmation\n    [showProgress]=\"progress\"\n    (clicked)=\"submit()\"\n    (cancelled)=\"cancel($event)\"\n    confirmationButtonText=\"Custom Confirmation Button Text\"\n    [explanationText]=\"explanation\"\n    [overlayPosition]=\"myOverlayPosition\"\n  >\n    Click Me!\n  </ts-button>\n\n</ts-card>\n","import { Component } from '@angular/core';\n\nimport { TsConfirmationOverlayPositionTypes } from '@terminus/ui-confirmation';\n\n\n@Component({\n  selector: 'demo-confirmation',\n  templateUrl: './confirmation.component.html',\n})\nexport class ConfirmationComponent {\n  progress = false;\n  myOverlayPosition: TsConfirmationOverlayPositionTypes = 'before';\n  overlayPositions: TsConfirmationOverlayPositionTypes[] = ['above', 'below', 'before', 'after'];\n\n  explanation = `Are you sure you want to do the thing you clicked to do?`;\n\n  cancel(v: boolean) {\n    console.log('DEMO: Cancel: ', v);\n  }\n\n  submit() {\n    console.log('DEMO: Real Submit');\n    this.progress = true;\n\n    setTimeout(() => {\n      this.progress = false;\n    }, 2000);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule } from '@angular/forms';\n\nimport { TsButtonModule } from '@terminus/ui-button';\nimport { TsCardModule } from '@terminus/ui-card';\nimport { TsConfirmationModule } from '@terminus/ui-confirmation';\nimport { TsSelectModule } from '@terminus/ui-select';\nimport { TsSpacingModule } from '@terminus/ui-spacing';\n\nimport { ConfirmationRoutingModule } from './confirmation-routing.module';\nimport { ConfirmationComponent } from './confirmation.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfirmationRoutingModule,\n    FlexLayoutModule,\n    FormsModule,\n    TsButtonModule,\n    TsCardModule,\n    TsConfirmationModule,\n    TsSelectModule,\n    TsSpacingModule,\n  ],\n  declarations: [\n    ConfirmationComponent,\n  ],\n})\nexport class ConfirmationModule {}\n"],"sourceRoot":"webpack:///"}