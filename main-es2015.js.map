{"version":3,"sources":["/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/autofocus/fesm2015/terminus-ui-autofocus.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/button/fesm2015/terminus-ui-button.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/checkbox/fesm2015/terminus-ui-checkbox.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/checkbox/terminus-ui-checkbox.d.ts.TsCheckboxComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/chip/fesm2015/terminus-ui-chip.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/chip/terminus-ui-chip.d.ts.TsChipComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/chip/terminus-ui-chip.d.ts.TsChipCollectionComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/form-field/fesm2015/terminus-ui-form-field.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/form-field/terminus-ui-form-field.d.ts.TsFormFieldComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/icon/fesm2015/terminus-ui-icon.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/icon/terminus-ui-icon.d.ts.TsIconComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/input/fesm2015/terminus-ui-input.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/link/fesm2015/terminus-ui-link.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/option/fesm2015/terminus-ui-option.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/option/terminus-ui-option.d.ts.TsOptionComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/option/terminus-ui-option.d.ts.TsOptgroupComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/pipes/fesm2015/terminus-ui-pipes.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/selection-list/fesm2015/terminus-ui-selection-list.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/selection-list/terminus-ui-selection-list.d.ts.TsSelectionListComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/selection-list/terminus-ui-selection-list.d.ts.TsSelectionListPanelComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/spacing/fesm2015/terminus-ui-spacing.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/utilities/fesm2015/terminus-ui-utilities.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/validation-messages/fesm2015/terminus-ui-validation-messages.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/validation-messages/terminus-ui-validation-messages.d.ts.TsValidationMessagesComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/validators/fesm2015/terminus-ui-validators.js","./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/components.component.html","./src/app/components/components.component.ts","./src/app/components/components.constant.ts","./src/app/utilities/orderArrayByProperty.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACA;AACsD;AAChC;AACX;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0FAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAAS;AAC9B,0BAA0B,uEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,+DAAiB;AAC7B;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,uBAAuB,wDAAU;AACjC,IAAI,+DAAS,EAAE,4BAA4B;AAC3C,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C,QAAQ,+DAAiB;AACzB;;AAEA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ,kBAAkB,4DAAY;AAC9B;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEmD;AACnD;;;;;;;;;;;;;AC5EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACA;AAC8I;AAClI;AACmB;AAChB;AACb;AACe;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA,kDAAkD;AAClD;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,+DAAS;AACpE;AACA,gDAAgD,MAAM;AACtD;AACA;AACA,uCAAuC,+DAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6EAAsB,uBAAuB,+DAAS;AAClE;AACA,gDAAgD,MAAM;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG,+DAAS;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,MAAM;AAC1E,uEAAuE,OAAO;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,UAAU;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,UAAU;AACpE;AACA;AACA;AACA;AACA,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,2EAAe,EAAE;AAC7B,KA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AAuB,+DAAiB;AACtD,QAAQ,2EAAe;AACvB,QAAQ,uDAAS;AACjB;;AAEA;AACA;AACA,iBAAiB,wDAAU;AAC3B,IAAI,8DAAQ;AACZ;AACA,YAAY,4DAAY;AACxB,YAAY,wEAAe;AAC3B,YAAY,2FAAwB;AACpC,YAAY,8DAAY;AACxB;AACA,oBAAoB,2EAAe;AACnC;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEuE;AACvE;;;;;;;;;;;;;ACjXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACA;AAC4G;AAC9G;AACkD;AACW;;AAE1G;AACA;AACA;AACA;AACA,+BAA+B,4EAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,kFAA2B;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA,uCAAuC,0DAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,+DAAiB;AAC7B;AACA,wDAAU;AACV,IAAI,+DAAS,CAAC,sEAAW,GAAG,eAAe;AAC3C,IAAI,wDAAU,gBAAgB,sEAAW;AACzC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,mCAAmC,0DAAY;AAC/C;AACA;AACA;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mFAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oFAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,gCAAgC;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iEAAI;AACrB,iBAAiB,iEAAI;AACrB;AACA;AACA,iBAAiB,iEAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAI;AACtB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,6EAAiB;AAC7B;AACA,wDAAU;AACV,IAAI,+DAAS,aAAa,eAAe;AACzC,IAAI,wDAAU,gBAAgB,wDAAU;AACxC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,kBAAkB,wDAAU;AAC5B,IAAI,+DAAS;AACb;AACA,4DAA4D,2GAA2G;AACvK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA,wBAAwB,gEAAgE,+DAA+D,+DAA+D,8DAA8D,UAAU,kBAAkB,qCAAqC,kDAAkD,2BAA2B,cAAc,iBAAiB,kBAAkB,UAAU,2BAA2B,8GAA8G,yBAAyB,yBAAyB,gBAAgB,oBAAoB,uCAAuC,iBAAiB,sBAAsB,kBAAkB,sBAAsB,0BAA0B,qCAAqC,iBAAiB,kDAAkD,mBAAmB,SAAS,gCAAgC,wBAAwB,cAAc,WAAW,YAAY,gBAAgB,UAAU,oBAAoB,kBAAkB,kBAAkB,UAAU,SAAS,kCAAkC,+BAA+B,yBAAyB,qBAAqB,qBAAqB,mBAAmB,kBAAkB,+BAA+B,wBAAwB,gCAAgC,sIAAsI,yDAAyD,iDAAiD,mDAAmD,cAAc,qGAAqG,yBAAyB,mGAAmG,yBAAyB,+FAA+F,yBAAyB,mFAAmF,cAAc,gCAAgC,yBAAyB,6BAA6B,iBAAiB,6DAA6D,eAAe,qBAAqB,gBAAgB,mBAAmB,6CAA6C,uCAAuC,sBAAsB,wBAAwB,oBAAoB,+BAA+B,0BAA0B,kEAAkE,gBAAgB,4BAA4B,kBAAkB,wCAAwC,wBAAwB,yCAAyC,+EAA+E,iBAAiB,mCAAmC,mBAAmB,mDAAmD,cAAc,kCAAkC,qBAAqB,4BAA4B,oBAAoB,kDAAkD,aAAa,iCAAiC,mCAAmC,2BAA2B,eAAe,aAAa,+BAA+B,WAAW,kBAAkB,QAAQ,QAAQ,qCAAqC,gCAAgC,8BAA8B,uCAAuC,WAAW,+BAA+B,cAAc;AAC/jH,KAAK;AACL,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C,QAAQ,oDAAM;AACd,QAAQ,6EAAiB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,sCAAsC,OAAO,kDAAI,EAAE;AACxD;AACA,uBAAuB,wDAAU;AACjC,IAAI,+DAAS,EAAE,4BAA4B;AAC3C,IAAI,qDAAO,IAAI,0DAAI;AACnB,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sBAAsB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,0DAAY;AAChD;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,kCAAkC,0DAAY;AAC9C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kDAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kDAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kDAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kDAAK;AACpkCAAkC,wEAAc;AAChD;AACA;AACA;AACA;AACA;AACA,8BAA8B,kEAAe;AAC7C;AACA;AACA;AACA,oCAAoC,8FAAuB;AAC3D;AACA,SAAS;AACT;AACA;AACA,gCAAgC,gEAAS,QAAQ,8FAAuB;AACxE;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAAI;AAC5B;AACA;AACA;AACA;AACA,4BAA4B,iEAAI;AAChC;AACA;AACA;AACA,iCAAiC,iEAAI;AACrC;AACA;AACA;AACA,4DAA4D,iEAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8FAAuB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mCAAmC,8FAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,kCAAkC,8FAAuB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qCAAqC,8FAAuB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AAC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yBAAyB;AACxC;;AAEA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,+DAAS,EAAE,yBAAyB;AACxC;;AAEA;AACA,4EAA4E;AAC5E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+DAAU;AACjC;AACA;AACA;AACA,sCAAsC,eAAe;AACrD;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,eAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gEAAS;AAChD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2CAA2C,gEAAS;AACpD;AACA,aAAa;AACb;AACA;AACA,gGAAgG,0CAAK;AACrG,QAAQ,sDAAS,2EAA2E,kDAAa;AACzG,kBAAkB,6FAAuB;AACzC;AACA,kCAAkC,2DAAI;AACtC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAS,wDAAwD,2DAAI;AAC7E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,8CAA8C,WAAW;AACzD;AACA,uBAAuB,mBAAmB;AAC1C,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,6EAAiB,EAAE;AAC/B,KAAK,OAAO,oDAAM;AAClB;AACA,wDAAU;AACV,IAAI,+DAAS,sBAAsB,eAAe;AAClD,IAAI,wDAAU,gBAAgB,wDAAU;AACxC;AACA,wDAAU;AACV,IAAI,+DAAS,kBAAkB,eAAe;AAC9C,IAAI,wDAAU,gBAAgB,wDAAU;AACxC;AACA,wDAAU;AACV,IAAI,+DAAS;AACb,IAAI,wDAAU,gBAAgB,wDAAU;AACxC;AACA,wDAAU;AACV,IAAI,qEAAe;AACnB,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,wDAAU;AACV,IAAI,qEAAe;AACnB,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,uBAAuB,wDAAU;AACjC,IAAI,+DAAS;AACb;AACA,0FAA0F,sDAAsD,i8FAAi8F,QAAQ;AACzlG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA,wBAAwB,gEAAgE,+DAA+D,+DAA+D,8DAA8D,UAAU,kBAAkB,qCAAqC,kDAAkD,2BAA2B,cAAc,iBAAiB,kBAAkB,UAAU,2BAA2B,8GAA8G,yBAAyB,yBAAyB,gBAAgB,oBAAoB,uCAAuC,iBAAiB,sBAAsB,kBAAkB,sBAAsB,0BAA0B,qCAAqC,iBAAiB,kDAAkD,mBAAmB,SAAS,gCAAgC,wBAAwB,cAAc,WAAW,YAAY,gBAAgB,UAAU,oBAAoB,kBAAkB,kBAAkB,UAAU,eAAe,6DAA6D,kEAAkE,2DAA2D,8DAA8D,uDAAuD,qCAAqC,8BAA8B,oCAAoC,uCAAuC,sCAAsC,4CAA4C,wHAAwH,6BAA6B,oCAAoC,+BAA+B,2GAA2G,iFAAiF,kFAAkF,yCAAyC,uCAAuC,cAAc,mDAAmD,sBAAsB,2GAA2G,aAAa,4HAA4H,UAAU,6DAA6D,0IAA0I,UAAU,qGAAqG,UAAU,6DAA6D,4GAA4G,UAAU,0DAA0D,sIAAsI,mFAAmF,gDAAgD,gEAAgE,6BAA6B,qEAAqE,0CAA0C,2FAA2F,0DAA0D,qLAAqL,wDAAwD,6DAA6D,6CAA6C,uHAAuH,sCAAsC,+DAA+D,6CAA6C,iEAAiE,mBAAmB,uCAAuC,SAAS,4CAA4C,aAAa,OAAO,oBAAoB,kBAAkB,QAAQ,0CAA0C,wFAAwF,yDAAyD,gDAAgD,6CAA6C,8FAA8F,wBAAwB,2CAA2C,uBAAuB,8FAA8F,YAAY,2CAA2C,yDAAyD,uBAAuB,wBAAwB,wBAAwB,8CAA8C,kDAAkD,UAAU,gOAAgO,+DAA+D,kEAAkE,yCAAyC,qBAAqB,sBAAsB,oBAAoB,4DAA4D,+CAA+C,kBAAkB,WAAW,qHAAqH,YAAY,qCAAqC,8DAA8D,cAAc,UAAU,iBAAiB,YAAY,iFAAiF,kBAAkB,6CAA6C,qCAAqC,yDAAyD,uDAAuD,4EAA4E,UAAU,kBAAkB,0CAA0C,mBAAmB,sCAAsC,kBAAkB,gHAAgH,kBAAkB,WAAW,wBAAwB,UAAU,6CAA6C,uBAAuB,YAAY,OAAO,6CAA6C,oBAAoB,kBAAkB,8CAA8C,WAAW,iDAAiD,sBAAsB,gBAAgB,qDAAqD,kBAAkB,WAAW,4CAA4C,6DAA6D,WAAW,cAAc,gBAAgB,qBAAqB,gBAAgB,aAAa,qCAAqC,aAAa,OAAO,gDAAgD,gBAAgB,oBAAoB,kBAAkB,uBAAuB,4EAA4E,qBAAqB,gPAAgP,mBAAmB,WAAW,uEAAuE,gBAAgB,4HAA4H,cAAc,uCAAuC,+CAA+C,kBAAkB,gBAAgB,sEAAsE,sDAAsD,sBAAsB,0BAA0B,+BAA+B;AAC9hR,KAAK;AACL,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C,QAAQ,+DAAiB;AACzB,QAAQ,6EAAiB;AACzB,QAAQ,oDAAM;AACd;;AAEA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,+DAAS,EAAE,uBAAuB;AACtC;;AAEA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA,YAAY,4DAAY;AACxB,YAAY,qEAAgB;AAC5B,YAAY,2FAA0B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAE4J;AAC5J;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0GC1aI,8KAAsF,IACpF,0DAAgC;0GAqB5B,yNAIC,8EAAC;0GAKR,8KAAsF,IACpF,0DAAgC;0GAgBhC,wHAA+C,KAC7C,22BAIC,iDAFC,6CAAoD,uBACpD,mBAAqC,mBAHvC,YAIC,EAFC,SAAoD,EACpD,SAAqC;0GAT3C,uHAAmE,KACjE,qJAAwB,IACtB,0DAA4C,IAG9C,6YAA+C,iDAAjC,oBAAgC,0BAA9C,YAA+C,EAAjC,SAAgC;0GAShD,+JAAsD,KACpD,oKAA8C,4LAE9C;0GAxBJ,4wDAMC,IACC,6YAAmE,IAcnE,6YAAsD,iDAnBtD,qBAAc,EAFhB,YAMC,EAJC,SAAc,GAEd,mBAAuB,UAJzB,YAMC,EAFC,SAAuB,GADvB,sCAAoC,EAHtC,YAMC,EAHC,SAAoC,GAI/B,6DAA6D,wBAAlE,YAAmE,EAA9D,SAA6D,GAc7D,mBAAY,OAAjB,YAAsD,EAAjD,SAAY;qXA9ErB,slBAGC,GADC,2FAAmE,KAFrE,opBAGC,GADC,2FAAmE,MAEnE,sQAIC,YADC;;wBAAsE;MAHxE,wBAIC,KAEC,gLAA0D,KACxD,kLAA2D,KAC3D,8KAAuD,KACvD,+JAAwC,KAE1C,+MAAwF,KACtF,kLAA2D,KAC3D,+KAAwD,KACxD,+JAAwC,KAG1C,8YAAsF,IAKtF,yLAAkE,IAChE,0DAAY,IAEZ,kKAA2C,KAGzC,gUAQC,IACC,0DAA8B,IAE9B,8YAIC,IAKP,8YAAsF,IAKxF,8YAMC,iDA9DD,sDAA4C,EAC5C,kCAAmE,sBAFrE,YAGC,EAFC,SAA4C,EAC5C,8CAAmE,sBADnE,sDAA4C,EAD9C,YAGC,EADC,SAAmE,EADnE,SAA4C,GAoBc,mBAA6B,wBAArF,aAAsF,EAA9B,SAA6B,GAyB7E,6EAAwE,sBAH1E,aAIC,EADC,UAAwE,GAMxB,oBAA6B,wBAArF,aAAsF,EAA9B,UAA6B,GAUrF,qBAA2B,qBAL7B,aAMC,EADC,UAA2B,mDA5BrB,mBAAe,KACf,mBAAqB,KACrB,0CAAyE,qBACzE,sCAAqC,GACrC,oCAAiC,GANnC,aAQC,EANC,SAAe,EACf,SAAqB,EACrB,SAAyE,EACzE,SAAqC,EACrC,SAAiC;;;;;;;;;;;;;;;;ACtC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACA;AACmE;AAC1C;AACf;;AAEzpE;AACA,8CAA8C,MAAM;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sEAAe,EAAE;AAC7B,KAAK,OAAO,sEAAY;AACxB;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,kBAAkB,wDAAU;AAC5B,IAAI,+DAAS;AACb;AACA,yEAAyE,yBAAyB,yKAAyK,yBAAyB;AACpS;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA,wBAAwB,gEAAgE,+DAA+D,+DAA+D,8DAA8D,UAAU,kBAAkB,qCAAqC,kDAAkD,2BAA2B,cAAc,iBAAiB,kBAAkB,UAAU,2BAA2B,8GAA8G,yBAAyB,yBAAyB,gBAAgB,oBAAoB,uCAAuC,iBAAiB,sBAAsB,kBAAkB,sBAAsB,0BAA0B,qCAAqC,iBAAiB,kDAAkD,mBAAmB,SAAS,gCAAgC,wBAAwB,cAAc,WAAW,YAAY,gBAAgB,UAAU,oBAAoB,kBAAkB,kBAAkB,UAAU,SAAS,qBAAqB,6CAA6C,sBAAsB,uEAAuE,aAAa,yBAAyB,6BAA6B,8BAA8B,sBAAsB,0BAA0B,cAAc,8CAA8C,yBAAyB,cAAc,yBAAyB,cAAc,6CAA6C,yBAAyB,cAAc,uBAAuB,cAAc,2CAA2C,yBAAyB,cAAc,6BAA6B,kBAAkB,YAAY,kBAAkB,WAAW,qCAAqC,SAAS,kBAAkB,QAAQ,mCAAmC,uBAAuB,mBAAmB,sBAAsB,2BAA2B,eAAe,WAAW,sBAAsB,UAAU,8DAA8D,kBAAkB,kBAAkB,WAAW,iCAAiC,WAAW,uBAAuB,sBAAsB;AACrzE,KAAK;AACL,IAAI,wDAAU,uBAAuB,sEAAe;AACpD,QAAQ,sEAAY;AACpB;;AAEA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,8DAAQ;AACZ;AACA,YAAY,4DAAY;AACxB,YAAY,oEAAa;AACzB;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAE0D;AAC1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qGC9OE,yGAAiD;qGALnD,o2BAIC,GAFC,2EAAsC,KAFxC,ibAIC,IACC,+WAAiD,iDAJjD,gCAAsB,EACtB,iCAAsC,UAFxC,YAIC,EAHC,SAAsB,EACtB,SAAsC,GAFxC,YAIC,GACc,+EAAmC,GAAhD,YAAiD,EAApC,SAAmC,2BALlD,2XAIC;;qGAWC,yGAAiD;qGANnD,o2BAKC,GAHC,2EAAsC,KAFxC,wcAKC,IACC,+WAAiD,iDALjD,gCAAsB,EACtB,iCAAsC,UAFxC,YAKC,EAJC,SAAsB,EACtB,SAAsC,GAEtC,mBAAmB,UAJrB,YAKC,EADC,SAAmB,GAEN,+EAAmC,GAAhD,YAAiD,EAApC,SAAmC,2BANlD,2XAKC;oGAMC,0DAAY;qGApBd,wYAIC,IAKD,wYAKC,IAKD,6HAA8B,kDAhB5B,oBAAgB,UAHlB,YAIC,EADC,SAAgB,GAShB,mBAAe,UAHjB,YAKC,EAFC,SAAe;;;;;;;;;;;;;;;;ACZjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACT;AAC0M;AACjM;AACkC;AACmC;AAC3C;AACF;AAC/B;AACD;AAC8B;AAChB;AACmB;AAChC;AACS;AAC3B;AAC6D;AACtB;AACQ;AACd;AACoB;AACM;AACxC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,gDAAgD,wEAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM,GAAG,IAAI,GAAG,KAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iFAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,gEAAU;AACd;;AAEA;AACA,2EAA2E,uBAAuB;AAClG,qEAAqE,qCAAqC;AAC1G;AACA;AACA;AACA;AACA,oCAAoC,4DAAc;;AAElD;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD,2BAA2B,wBAAwB;AACnD;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gEAAU;AACjC;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,gCAAgC,6CAAO;AACvC;AACA;AACA;AACA;AACA,gCAAgC,mEAAI;AACpC;AACA;AACA;AACA,iCAAiC,mEAAI;AACrC;AACA,2CAA2C,2BAA2B;AACtE;AACA;AACA;AACA;AACA;AACA,gCAAgC,6CAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAW;AAC3C;AACA,qDAAqD,2BAA2B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yBAAyB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,+BAA+B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,yFAAkB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAAS;AAC9B;AACA,+CAA+C,MAAM;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0FAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iFAAQ;AACrC;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,MAAM;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sFAAe;AAClD,uCAAuC,sFAAe;AACtD,sCAAsC,sFAAe;AACrD,oCAAoC,sFAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbmFAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,sBAAsB,8EAAgB,EAAE,eAAe;AACvD;AACA,aAAa;AACb;AACA,sBAAsB,8EAAgB;AACtC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,sBAAsB,8EAAgB;AACtC;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,qBAAqB,iCAAiC;AACtD;AACA;AACA,sBAAsB,yFAA2B;AACjD;AACA,aAAa;AACb,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,gDAAgD;AAC/F;AACA,wCAAwC,oGAA0B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mFAAU;AACzC;AACA;AACA;AACA;AACA,gBAAgB,mFAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oFAAW;AACnC;AACA;AACA;AACA,+BAA+B,yBAAyB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,uDAAS,EAAE;AACvB,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,wEAAe,EAAE;AAC7B,KAAK,OAAO,+DAAQ,EAAE;AACtB,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,8EAAiB,EAAE;AAC/B,KAAK,OAAO,6DAAU,EAAE;AACxB,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,kDAAI,EAAE,GAAG,OAAO,oDAAM,oCAAoC,GAAG;AAC7H,KAAK,OAAO,kEAAW,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC3D,KAAK,OAAO,wDAAS,gBAAgB,OAAO,sDAAQ,EAAE,GAAG,OAAO,kDAAI,EAAE;AACtE;AACA,wDAAU;AACV,IAAI,+DAAS;AACb,IAAI,wDAAU,gBAAgB,0EAAa;AAC3C;AACA,wDAAU;AACV,IAAI,+DAAS;AACb,IAAI,wDAAU,gBAAgB,wDAAU;AACxC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU,gBAAgB,0DAAW;AACzC,IAAI,wDAAU,uBAAuB,0DAAW;AAChD;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AA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8DAA8D,8CAA8C,0BAA0B,6CAA6C,wCAAwC,kDAAkD,6BAA6B,cAAc,gBAAgB,4DAA4D,qBAAqB,0DAA0D,2CAA2C,2DAA2D,gEAAgE,wDAAwD,8CAA8C;AAC1nG,KAAK;AACL;;AAEA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,8DAAQ;AACZ;AACA,YAAY,4DAAY;AACxB,YAAY,4DAAY;AACxB,YAAY,8DAAY;AACxB;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEyC;AACzC;;;;;;;;;;;;;ACzHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACT;AAC+O;AACrO;AACqB;AAC/C;AACO;AACc;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,2BAA2B,wDAAU;AACrC,IAAI,+DAAS,EAAE,gCAAgC;AAC/C,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C;;AAEA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA,uCAAuC,4DAAc;AACrD;AACA,4EAA4E;AAC5E;AACA,yCAAyC,4DAAc;AACvD;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0DAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,wBAAwB;AACnF;AACA;AACA,gDAAgD,+BAA+B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,+DAAS;AAC5D;AACA;AACA;AACA,iDAAiD,2DAAI;AACrD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iEAAI,8BAA8B,iEAAI;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,uCAAuC,GAAG;AAChH,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,yCAAyC;AAC/G;AACA,wDAAU;AACV,IAAI,kEAAY,CAAC,yDAAW;AAC5B,IAAI,wDAAU,gBAAgB,yDAAW;AACzC;AACA,wDAAU;AACV,IAAI,kEAAY;AAChB,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,oBAAoB,wDAAU;AAC9B,IAAI,+DAAS;AACb;AACA,u1BAAu1B,kBAAkB;AACz2B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,+DAAiB;AACxC,yBAAyB,qEAAuB;AAChD;AACA,wBAAwB,gE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;AAAA;AAAA;AAAmC;AACY;AACW;AACoB;AAC5B;AACsB;;AAExE;AACA;AACA;AACA;AACA,KAAK;AACL,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sFAAgB;AAC/B;AACA;AACA,yBAAyB,wDAAU;AACnC,IAAI,0DAAI,EAAE,6BAA6B;AACvC;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mFAAW,WAAW,+DAAS;AAC5C,4BAA4B,MAAM;AAClC;AACA;AACA,oDAAoD,+DAAS;AAC7D,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA,wCAAwC,uDAAM;AAC9C,wCAAwC,uDAAM;AAC9C,8CAA8C,uDAAM;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAU;AACvB,IAAI,0DAAI,EAAE,iBAAiB;AAC3B;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iFAAW;AAC1B;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,0DAAI,EAAE,wBAAwB;AAClC;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAU;AAC/B,IAAI,0DAAI,EAAE,yBAAyB;AACnC;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mFAAW,WAAW,+DAAS;AAC5C,4BAA4B,MAAM;AAClC;AACA,aAAa,mFAAW,kBAAkB,+DAAS;AACnD,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA,eAAe,+DAAc;AAC7B;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI,EAAE,oBAAoB;AAC9B;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,0DAAI,EAAE,sBAAsB;AAChC;;AAEA;AACA,yDAAyD,uBAAuB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,wCAAwC;AAC7C,KAAK,iDAAiD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gFAAQ;AACrB;AACA,4BAA4B,UAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,0DAAI,EAAE,uBAAuB;AACjC;;AAEA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,8DAAQ;AACZ,kBAAkB,4DAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAE8K;AAC9K;;;;;;;;;;;;;ACpRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACoC;AAC7C;AAC+P;AACtP;AACkC;AACjC;AACqB;AACrB;AACmB;AAC0B;AACrD;AACE;AACsJ;AAC3H;AACf;AACiB;AAC8B;AAC9C;AAC2B;AACjC;AACkC;AACG;AAC1C;AACD;;AAEpD;AACA;AACA,wCAAwC,wBAAwB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wBAAwB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,kCAAkC,0DAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6EAA0B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,wDAAU;AACtB;AACA,wDAAU;AACV,IAAI,+DAAS,CAAC,yDAAW;AACzB,IAAI,wDAAU,gBAAgB,yDAAW;AACzC;AACA,wDAAU;AACV,IAAI,+DAAS;AACb,IAAI,wDAAU,gBAAgB,wDAAU;AACxC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,kEAAkE,wDAAU;AAC5E,IAAI,+DAAS;AACb;AACA;AACA,eAAe,2DAA2D;AAC1E;AACA;AACA,yBAAyB,+EAA0B;AACnD;AACA,aAAa;AACb;AACA,yBAAyB,qEAAuB;AAChD,uBAAuB,+DAAiB;AACxC;AACA,wBAAwB,gEAAgE,+DAA+D,+DAA+D,8DAA8D,UAAU,kBAAkB,qCAAqC,kDAAkD,2BAA2B,cAAc,iBAAiB,kBAAkB,UAAU,2BAA2B,8GAA8G,yBAAyB,yBAAyB,gBAAgB,oBAAoB,uCAAuC,iBAAiB,sBAAsB,kBAAkB,sBAAsB,0BAA0B,qCAAqC,iBAAiB,kDAAkD,mBAAmB,SAAS,gCAAgC,wBAAwB,cAAc,WAAW,YAAY,gBAAgB,UAAU,oBAAoB,kBAAkB,kBAAkB,UAAU,gCAAgC,uGAAuG,mBAAmB,8BAA8B,+BAA+B,cAAc,iBAAiB,eAAe,gBAAgB,cAAc,iCAAiC,kBAAkB,kBAAkB,WAAW,6CAA6C,gCAAgC,mBAAmB,2FAA2F,mBAAmB,qEAAqE,kBAAkB,WAAW,gBAAgB,2DAA2D,mBAAmB,+DAA+D,0BAA0B,uDAAuD,gBAAgB;AAC1iE,KAAK;AACL,IAAI,wDAAU,uBAAuB,+DAAiB;AACtD,QAAQ,wDAAU;AAClB;;AAEA;AACA;AACA,8CAA8C,4DAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4DAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,6CAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mDAAK;AACrC;AACA;AACA;AACA,uBAAuB,mDAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAI,KAAK,iEAAS;AACxC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kDAAY;AAChD;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0DAAY;AAC/C;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mDAAK,uEAAuE,8DAAM;AACjG;AACA,4FAA4F,gDAAE;AAC9F;AACA;AACA,QAAQ,2DAAG,4BAA4B,4EAAuB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,2FAAqwBAAwB,kEAAI;AAC5B;AACA;AACA,6CAA6C,kEAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,kEAAI,8BAA8B,kEAAI;AACjF,8CAA8C,kEAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,wCAAwC,+DAAS;AACjD,sBAAsB,wEAAgB;AACtC;AACA;AACA;AACA,wCAAwC,8BAA8B;AACtE;AACA;AACA,8BAA8B,mEAAc;AAC5C;AACA,iDAAiD,8FAAuB;AACxE;AACA;AACA,mCAAmC,kEAAI,gCAAgC,kEAAI;AAC3E;AACA;AACA;AACA,aAAa;AACb,yEAAyE,8FAAuB;AAChG;AACA,gDAAgD,8BAA8B;AAC9E;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iDAAiD,8FAAuB;AACxE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2FAAqB;AAChD,eAAe,2FAAqB;AACpC,eAAe,2FAAqB;AACpC,2BAA2B,2FAAqB;AAChD,gCAAgC,2FAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,4DAAI;AACzE;AACA;AACA;AACA,QAAQ,2DAAG;AACX;AACA,QAAQ,6DAAK;AACb;AACA;AACA,eAAe,mDAAK;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAS;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,4DAAI;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yFAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,oFAAuB;AACvE;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,4DAAO,EAAE;AACrB,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,8EAAiB,EAAE;AAC/B,KAAK,OAAO,kEAAa,EAAE;AAC3B,KAAK,gCAAgC,OAAO,oDAAM,8CAA8C,GAAG;AACnG,KAAK,OAAO,6EAAoB,gBAAgB,OAAO,sDAAQ,EAAE,GAAG,OAAO,kDAAI,EAAE;AACjF;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,sEAAsE,wDAAU;AAChF,IAAI,+DAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,mGAAmC;AAC/C;AACA;AACA,KAAK;AACL,IAAI,qDAAO,IAAI,4DAAM;AACrB,IAAI,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,0DAAI;AAC3C,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C,QAAQ,4DAAO;AACf,QAAQ,8DAAgB;AACxB,QAAQ,oDAAM;AACd,QAAQ,+DAAiB;AACzB,QAAQ,8EAAiB;AACzB,QAAQ,kEAAa,UAAU,6EAAoB;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,IAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,0DAAW;AACvD;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA;AACA,gCAAgC,6CAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6CAAO;AACvC;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA,gCAAgC,qDAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0DAAY;AAC/C;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,sCAAsC,0DAAY;AAClD;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,kCAAkC,0DAAY;AAC9C;AACA;AACA;AACA,oCAAoC,0DAAY;AAChD;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA,mCAAmC,0DAAY;AAC/C;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0FAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,yFAAkB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0FAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gFAAO;AAChD,0BAA0B,wEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8FAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,mBAAmB;AACjG;AACA;AACA,mFAAmF,mBAAmB;AACtG;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gFAAO;AAChC,kCAAkC,wEAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,wDAAwD,8FAAuB;AAC/E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,8FAAuB;AAC3E;AACA,SAAS;AACT;AACA,yBAAyB,8FAAuB;AAChD;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,oDAAoD,8FAAuB;AAC3E;AACA,SAAS;AACT,0CAA0C,8FAAuB;AACjE;AACA,SAAS;AACT;AACA,+BAA+B,8FAAuB,QAAQ,oEAAY;AAC1E;AACA;AACA,QAAQ,iEAAS,sDAAsD,gDAAE,UAAU,gDAAE,QAAQ,4EAAoB;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,oFAAuB;AAC3E;AACA;AACA;AACA;AACA,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,8EAAiB,EAAE;AAC/B,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,wDAAS,gBAAgB,OAAO,kDAAI,EAAE,GAAG,OAAO,sDAAQ,EA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wB;AACP;AACX;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kEAAI;AACpC;AACA;AACA;AACA,iCAAiC,kEAAI;AACrC;AACA;AACA;AACA,+BAA+B,0DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU,gBAAgB,0DAAW;AACzC;AACA,8BAA8B,wDAAU;AACxC,IAAI,+DAAS,EAAE,eAAe;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gEAAiB;AAClC,qBAAqB,gEAAU;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,4BAA4B,wBAAwB;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEwK;AACxK;;;;;;;;;;;;;ACvLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACA;AAC8D;AACnD;AACK;AACS;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C,2CAA2C,8FAA8F;AACzI,4CAA4C,8FAA8F;AAC1I;AACA;AACA;AACA,0CAA0C,uFAAuF,OAAO,uFAAuF;AAC/N;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sFAAsF,wBAAwB,mFAAmF;AACrN,4BAA4B,sFAAsF,wBAAwB,2FAA2F;AACrO,8CAA8C,uFAAuF;AACrI,oBAAoB,sFAAsF,qBAAqB,mFAAmF;AAClN,yBAAyB,sFAAsF,qBAAqB,wFAAwF;AAC5N,0BAA0B,sFAAsF;AAChH;AACA,qBAAqB,sFAAsF;AAC3G,wBAAwB,sFAAsF;AAC9G,gCAAgC,sFAAsF,sBAAsB,4FAA4F;AACxO,gDAAgD,yFAAyF;AACzI,gDAAgD,yFAAyF;AACzI,8CAA8C,mFAAmF;AACjI,yBAAyB,sFAAsF;AAC/G;AACA;AACA;AACA;AACA;AACA,6BAA6B,sFAAsF;AACnH;AACA;AACA,oDAAoD,yHAAyH;AAC7K;AACA;AACA,mDAAmD,yHAAyH;AAC5K;AACA;AACA,wCAAwC,4FAA4F,GAAG,6FAA6F;AACpO;AACA;AACA,mCAAmC,sFAAsF;AACzH;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,6DAAU;AACtB;AACA,8BAA8B,wDAAU;AACxC,IAAI,gEAAU;AACd,IAAI,wDAAU,uBAAuB,6DAAU;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6FAAuB;AACnE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,KAAK,oCAAoC;AACzC,KAAK,OAAO,+DAAiB;AAC7B;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU,gBAAgB,0DAAW;AACzC,IAAI,wDAAU,uBAAuB,0DAAW;AAChD;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,gCAAgC,wDAAU;AAC1C,IAAI,+DAAS;AACb;AACA,0HAA0H,qBAAqB;AAC/I,eAAe,kCAAkC;AACjD,uBAAuB,+DAAiB;AACxC;AACA,wBAAwB,gEAAgE,+DAA+D,+DAA+D,8DAA8D,UAAU,kBAAkB,qCAAqC,kDAAkD,2BAA2B,cAAc,iBAAiB,kBAAkB,UAAU,2BAA2B,8GAA8G,yBAAyB,yBAAyB,gBAAgB,oBAAoB,uCAAuC,iBAAiB,sBAAsB,kBAAkB,sBAAsB,0BAA0B,qCAAqC,iBAAiB,kDAAkD,mBAAmB,SAAS,gCAAgC,wBAAwB,cAAc,WAAW,YAAY,gBAAgB,UAAU,oBAAoB,kBAAkB,kBAAkB,UAAU,4DAA4D,sBAAsB,iKAAiK,aAAa,8CAA8C,6DAA6D,eAAe,qBAAqB,cAAc,YAAY,iCAAiC,qBAAqB,8DAA8D,uBAAuB,wDAAwD,gBAAgB,yBAAyB,kBAAkB,QAAQ;AACxzD,KAAK;AACL,IAAI,wDAAU;AACd,QAAQ,+DAAiB;AACzB;;AAEA;AACA;AACA,6BAA6B,wDAAU;AACvC,IAAI,8DAAQ;AACZ;AACA,YAAY,4DAAY;AACxB,YAAY,0DAAW;AACvB,YAAY,gEAAa;AACzB;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEkG;AAClG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mHCxPA,2MAIC,gFAAuB,yDADtB,mBAAc,KAHhB,YAIC,EADC,SAAc,GACf,8DAAuB;;;;;;;;;;;;;;;;ACJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACsC;AAC0I;AAC/I;AACiC;;AAErG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,WAAW,yEAAe;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,WAAW,kFAAwB;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,WAAW,oEAAU;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gFAAQ,aAAa,yFAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yFAAoB;AAClC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAAQ;AAC1B;AACA;AACA;AACA;AACA,SAAS,gFAAQ,cAAc,gFAAQ,aAAa,yFAAiB,aAAa,yFAAiB;AACnG;AACA;AACA,iCAAiC,yFAAoB,WAAW,yFAAoB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yFAAoB;AAClC,cAAc,yFAAoB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gFAAQ,SAAS,yFAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,yFAAoB;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kBAAkB,8FAA4B;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gFAAQ,aAAa,yFAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS,mFAAW,gCAAgC,mFAAW;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gFAAQ,aAAa,yFAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS,mFAAW,gCAAgC,mFAAW;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AA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","file":"main-es2015.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { isDevMode, ElementRef, ChangeDetectorRef, Input, Directive, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@terminus/ngx-tools/coercion';\nimport { TsUILibraryError } from '@terminus/ui-utilities';\n\n/**\n * Autofocus any focusable element on-load.\n *\n * Passing any truthy value OR an empty string will enable the autofocus.\n *\n * @example\n * <input type=\"text\" tsAutofocus />\n * <button [tsAutofocus]=\"true\">Click Me</button>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/autofocus</example-url>\n */\nlet TsAutofocusDirective = class TsAutofocusDirective {\n    constructor(elementRef, changeDetectorRef) {\n        this.elementRef = elementRef;\n        this.changeDetectorRef = changeDetectorRef;\n    }\n    /**\n     * Define if the element should be focused after initialization\n     *\n     * @param value\n     */\n    set tsAutofocus(value) {\n        this.shouldFocus = coerceBooleanProperty(value);\n    }\n    /**\n     * Focus the input after the view has initialized\n     */\n    ngAfterViewInit() {\n        if (this.shouldFocus) {\n            const el = this.elementRef.nativeElement;\n            if (el.focus) {\n                el.focus();\n                this.changeDetectorRef.detectChanges();\n            }\n            else if (isDevMode()) {\n                throw new TsUILibraryError(`TsAutofocusDirective must be used on an element that has a .focus() method.`);\n            }\n        }\n    }\n};\nTsAutofocusDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], TsAutofocusDirective.prototype, \"tsAutofocus\", null);\nTsAutofocusDirective = __decorate([\n    Directive({ selector: '[tsAutofocus]' }),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        ChangeDetectorRef])\n], TsAutofocusDirective);\n\nlet TsAutofocusModule = class TsAutofocusModule {\n};\nTsAutofocusModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        declarations: [TsAutofocusDirective],\n        exports: [TsAutofocusDirective],\n    })\n], TsAutofocusModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsAutofocusDirective, TsAutofocusModule };\n//# sourceMappingURL=terminus-ui-autofocus.js.map\n","import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, isDevMode, ChangeDetectorRef, Renderer2, ViewChild, ElementRef, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { TsWindowService } from '@terminus/ngx-tools/browser';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { tsStyleThemeTypesArray } from '@terminus/ui-utilities';\n\n// Unique ID for each instance\nlet nextUniqueId = 0;\n/**\n * @internal\n */\nconst tsButtonFormatTypesArray = [\n    'filled',\n    'hollow',\n    // @deprecated Use 'collapsible' instead.\n    'collapsable',\n    'collapsible',\n];\nconst DEFAULT_COLLAPSE_DELAY_MS = 4000;\n/**\n * A presentational component to render a button\n *\n * @example\n * <ts-button\n *              actionName=\"Submit\"\n *              theme=\"primary\"\n *              format=\"filled\"\n *              buttonType=\"search\"\n *              iconName=\"search\"\n *              [isDisabled]=\"false\"\n *              [showProgress]=\"true\"\n *              [collapsed]=\"false\"\n *              collapseDelay=\"500\"\n *              tabIndex=\"2\"\n *              (clicked)=\"myMethod($event)\"\n * >Click Me!</ts-button>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/button</example-url>\n */\nlet TsButtonComponent = class TsButtonComponent {\n    constructor(changeDetectorRef, windowService, renderer) {\n        this.changeDetectorRef = changeDetectorRef;\n        this.windowService = windowService;\n        this.renderer = renderer;\n        /**\n         * The flag that defines if the button is collapsed or expanded\n         */\n        this.isCollapsed = false;\n        /**\n         * A flag to determine if click events should be intercepted.\n         *\n         * Set by {@link TsConfirmationDirective}\n         */\n        this.interceptClick = false;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-button-${nextUniqueId++}`;\n        /**\n         * Define the action for the aria-label. {@link TsButtonActionTypes}\n         */\n        this.actionName = 'Button';\n        /**\n         * Define the button type. {@link TsButtonFunctionTypes}\n         */\n        this.buttonType = 'button';\n        /**\n         * Define if the button is disabled\n         */\n        this.isDisabled = false;\n        this._id = this.uid;\n        /**\n         * Define if the progress indicator should show\n         */\n        this.showProgress = false;\n        /**\n         * Define the tabindex for the button\n         */\n        this.tabIndex = 0;\n        /**\n         * Pass the click event through to the parent\n         */\n        this.clicked = new EventEmitter();\n    }\n    /**\n     * Getter returning a boolean based on both the component `isDisabled` flag and the FormControl's disabled status\n     */\n    get shouldBeDisabled() {\n        return this.isDisabled || this.showProgress;\n    }\n    /**\n     * Define the collapsed value and trigger the delay if needed\n     *\n     * @param value\n     */\n    set collapsed(value) {\n        this.isCollapsed = value;\n        // If the value is `false` and a collapse delay is set\n        if (!value && this.collapseDelay) {\n            // Trigger the delayed close\n            this.collapseWithDelay(this.collapseDelay);\n        }\n    }\n    /**\n     * Define the button format. {@link TsButtonFormatTypes}\n     *\n     * @param value\n     */\n    set format(value) {\n        if (!value) {\n            return;\n        }\n        // Verify the value is allowed\n        if (tsButtonFormatTypesArray.indexOf(value) < 0 && isDevMode()) {\n            // eslint-disable-next-line no-console\n            console.warn(`TsButtonComponent: \"${value}\" is not an allowed format. See TsButtonFormatTypes for available options.`);\n            return;\n        }\n        if (value === 'collapsable' && isDevMode()) {\n            // eslint-disable-next-line no-console\n            console.warn(`TsButtonComponent: \"collapsable\" has been deprecated. Please use \"collapsible\" instead.`);\n        }\n        this._format = value;\n        if (this._format === 'collapsable' || this._format === 'collapsible') {\n            if (!this.collapseDelay) {\n                this.collapseDelay = DEFAULT_COLLAPSE_DELAY_MS;\n            }\n        }\n        else if (this.collapseDelay) {\n            // If the format is NOT collapsible, remove the delay\n            this.collapseDelay = undefined;\n        }\n        this.updateClasses(value);\n    }\n    get format() {\n        return this._format;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Define the theme\n     *\n     * @param value\n     */\n    set theme(value) {\n        if (!value) {\n            return;\n        }\n        // Verify the value is allowed\n        if (tsStyleThemeTypesArray.indexOf(value) < 0 && isDevMode()) {\n            // eslint-disable-next-line no-console\n            console.warn(`TsButtonComponent: \"${value}\" is not an allowed theme. See TsStyleThemeTypes for available options.`);\n            return;\n        }\n        this._theme = value;\n        this.updateClasses(value);\n    }\n    get theme() {\n        return this._theme;\n    }\n    /**\n     * Collapse after delay (if set)\n     */\n    ngOnInit() {\n        if (this.collapseDelay) {\n            this.collapseTimeoutId = this.collapseWithDelay(this.collapseDelay);\n        }\n        // NOTE: Update classes in ngOnInit because this.button is only available here\n        // It there is a theme then update classes\n        // Otherwise set a default theme\n        if (this.theme) {\n            this.updateClasses(this.theme);\n        }\n        else {\n            this.theme = 'primary';\n        }\n        // It there is a format then update classes\n        // Otherwise set a filled format\n        if (this.format) {\n            this.updateClasses(this.format);\n        }\n        else {\n            this.format = 'filled';\n        }\n        // If the format is `collapsible`, verify an `iconName` is set\n        if ((this.format === 'collapsable' || this.format === 'collapsible') && !this.iconName && isDevMode()) {\n            throw new Error('`iconName` must be defined for collapsible buttons.');\n        }\n    }\n    /**\n     * Clear any existing timeout\n     */\n    ngOnDestroy() {\n        // istanbul ignore else\n        if (this.collapseTimeoutId) {\n            this.windowService.nativeWindow.clearTimeout(this.collapseTimeoutId);\n        }\n    }\n    /**\n     * Handle button clicks\n     *\n     * @internal\n     *\n     * @param event - The MouseEvent\n     */\n    clickedButton(event) {\n        if (this.interceptClick) {\n            // Save the original event but don't emit the originalClickEvent\n            this.originalClickEvent = event;\n        }\n        else {\n            // Allow the click to propagate\n            this.clicked.emit(event);\n        }\n    }\n    /**\n     * Collapse the button after a delay\n     *\n     * NOTE: I'm not entirely sure why this `detectChanges` is needed. Supposedly zone.js should be patching setTimeout automatically.\n     *\n     * @param delay - The time to delay before collapsing the button\n     * @returns The ID of the timeout\n     */\n    collapseWithDelay(delay) {\n        return this.windowService.nativeWindow.setTimeout(() => {\n            this.isCollapsed = true;\n            this.changeDetectorRef.detectChanges();\n        }, delay);\n    }\n    /**\n     * Update button classes (theme|format)\n     *\n     * @param classname - The classname to add to the button\n     */\n    updateClasses(classname) {\n        const themeOptions = ['primary', 'accent', 'warn'];\n        const formatOptions = ['filled', 'hollow', 'collapsable', 'collapsible'];\n        const isTheme = themeOptions.indexOf(classname) >= 0;\n        const isFormat = formatOptions.indexOf(classname) >= 0;\n        // NOTE: Underscore dangle name controlled by Material\n        // NOTE: This 'any' is needed since the `mat-raised-button` directive overwrites elementRef\n        // NOTE: Need to check if button is already available (could be undefined during initialization)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-underscore-dangle\n        const buttonEl = this.button ? this.button._elementRef.nativeElement : null;\n        const themeClasses = themeOptions.map(theme => `c-button--${theme}`);\n        const formatClasses = formatOptions.map(format => `c-button--${format}`);\n        // If dealing with a theme class. Update only in case if button is available\n        // istanbul ignore else\n        if (isTheme && buttonEl) {\n            for (const themeClass of themeClasses) {\n                this.renderer.removeClass(buttonEl, themeClass);\n            }\n            this.renderer.addClass(buttonEl, `c-button--${classname}`);\n        }\n        // Update only in case if button is available\n        // istanbul ignore else\n        if (isFormat && buttonEl) {\n            for (const formatClass of formatClasses) {\n                this.renderer.removeClass(buttonEl, formatClass);\n            }\n            this.renderer.addClass(buttonEl, `c-button--${classname}`);\n        }\n    }\n};\nTsButtonComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: TsWindowService },\n    { type: Renderer2 }\n];\n__decorate([\n    ViewChild('button', { static: true }),\n    __metadata(\"design:type\", ElementRef)\n], TsButtonComponent.prototype, \"button\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsButtonComponent.prototype, \"actionName\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsButtonComponent.prototype, \"buttonType\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsButtonComponent.prototype, \"collapsed\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsButtonComponent.prototype, \"format\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsButtonComponent.prototype, \"iconName\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsButtonComponent.prototype, \"isDisabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsButtonComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsButtonComponent.prototype, \"showProgress\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsButtonComponent.prototype, \"tabIndex\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsButtonComponent.prototype, \"theme\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsButtonComponent.prototype, \"clicked\", void 0);\nTsButtonComponent = __decorate([\n    Component({\n        selector: 'ts-button',\n        template: \"<button\\n  mat-raised-button\\n  class=\\\"c-button mat-raised-button qa-button\\\"\\n  [ngClass]=\\\"{\\n    'c-button--collapsed': isCollapsed,\\n    'c-button--progress': showProgress && !isDisabled\\n  }\\\"\\n  [attr.aria-label]=\\\"actionName\\\"\\n  [attr.id]=\\\"id\\\"\\n  [attr.type]=\\\"buttonType\\\"\\n  [disabled]=\\\"shouldBeDisabled\\\"\\n  tabindex=\\\"{{ tabIndex }}\\\"\\n  (click)=\\\"clickedButton($event)\\\"\\n  #button\\n>\\n  <ts-icon\\n    *ngIf=\\\"iconName\\\"\\n    class=\\\"c-button__icon\\\"\\n  >\\n    {{ iconName }}\\n  </ts-icon>\\n\\n  <span class=\\\"c-button__content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n\\n\\n  <mat-progress-spinner\\n    *ngIf=\\\"showProgress && !isDisabled\\\"\\n    class=\\\"c-button__spinner qa-button-spinner\\\"\\n    [ngClass]=\\\"{'c-button__spinner--active': showProgress && !isDisabled}\\\"\\n    diameter=\\\"21\\\"\\n    mode=\\\"indeterminate\\\"\\n  ></mat-progress-spinner>\\n</button>\\n\",\n        host: { class: 'ts-button' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsButton',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}ts-button{--button-lineHeight:35px;--button-rotation:360deg;--button-icon-negative-padding-adjustment:-4px;--button-collapsible-first-icon-adjustment:-.15em;--button-content-transitionDuration:var(--ts-animation-time-duration-500);--button-icon-transitionDuration-collapse:calc(var(--button-content-transitionDuration) - 100ms);--button-icon-transitionDuration-expand:calc(var(--button-icon-transitionDuration-collapse) - 100ms);--button-label-transitionDuration:calc(var(--button-icon-transitionDuration-expand) - 100ms);--button-color-transitionDuration:calc(var(--button-label-transitionDuration) - 100ms);--button-color-transition:color var(--button-color-transitionDuration) var(--ts-animation-easing-ease);--button-background-transition:background var(--button-icon-transitionDuration-collapse) var(--ts-animation-easing-ease);--button-shadow-transition:box-shadow var(--button-icon-transitionDuration-expand) var(--ts-animation-easing-ease);--button-maxWidth-transition:max-width var(--button-content-transitionDuration) var(--ts-animation-easing-ease);--button-icon-transition:transform var(--button-icon-transitionDuration-expand) var(--ts-animation-easing-ease);--button-spinner-transition:opacity var(--button-label-transitionDuration) var(--ts-animation-easing-ease);--button-margin:4px 0;--button-padding:0 var(--ts-space-inline-400);--button-padding-collapsed:0 6px;--button-border:1px solid transparent;--button-border-radius:3px;--button-border-radius-collapsible:2em;--button-backgroundColor-disabled:var(--ts-color-utility-300);--button-backgroundColor-primary:var(--ts-color-primary-500);--button-backgroundColor-accent:var(--ts-color-accent-500);--button-backgroundColor-warn:var(--ts-color-warn-500);--button-color-disabled:var(--ts-color-utility-500);--button-color:var(--ts-color-light);--button-padding-right-progress:36px;--button-icon-vertical-adjustment:-.15em;--button-icon-horizontal-adjustment:.2em}.ts-button{display:inline-block;margin:var(--button-margin)}.ts-button :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-button h1,.ts-button h2,.ts-button h3,.ts-button h4,.ts-button h5,.ts-button p{margin:unset}.ts-button .c-button{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:400;border:var(--button-border);border-radius:var(--button-border-radius);color:var(--button-color);line-height:var(--button-lineHeight);min-width:auto;padding:var(--button-padding);transition:var(--button-color-transition),var(--button-background-transition),var(--button-shadow-transition)}.ts-button .c-button:not(.c-button):not(.c-input):not(.c-select):not(.ts-checkbox){line-height:20px}.ts-button .c-button--primary:not(.c-button--hollow){background-color:var(--button-backgroundColor-primary)}.ts-button .c-button--primary[disabled]{background-color:var(--button-backgroundColor-disabled);color:var(--button-color-disabled)}.ts-button .c-button--primary.c-button--hollow{border-color:var(--ts-color-primary-500);box-shadow:none;color:var(--ts-color-primary-500)}.ts-button .c-button--primary.c-button--hollow:focus,.ts-button .c-button--primary.c-button--hollow:hover{background-color:var(--button-backgroundColor-primary);color:var(--button-color)}.ts-button .c-button--primary.c-button--hollow[disabled]{background-color:transparent;border-color:var(--ts-color-utility-500);color:var(--ts-color-utility-500)}.ts-button .c-button--accent:not(.c-button--hollow){background-color:var(--button-backgroundColor-accent)}.ts-button .c-button--accent[disabled]{background-color:var(--button-backgroundColor-disabled);color:var(--button-color-disabled)}.ts-button .c-button--accent.c-button--hollow{border-color:var(--ts-color-accent-500);box-shadow:none;color:var(--ts-color-accent-500)}.ts-button .c-button--accent.c-button--hollow:focus,.ts-button .c-button--accent.c-button--hollow:hover{background-color:var(--button-backgroundColor-accent);color:var(--button-color)}.ts-button .c-button--accent.c-button--hollow[disabled]{background-color:transparent;border-color:var(--ts-color-utility-500);color:var(--ts-color-utility-500)}.ts-button .c-button--warn:not(.c-button--hollow){background-color:var(--button-backgroundColor-warn)}.ts-button .c-button--warn[disabled]{background-color:var(--button-backgroundColor-disabled);color:var(--button-color-disabled)}.ts-button .c-button--warn.c-button--hollow{border-color:var(--ts-color-warn-500);box-shadow:none;color:var(--ts-color-warn-500)}.ts-button .c-button--warn.c-button--hollow:focus,.ts-button .c-button--warn.c-button--hollow:hover{background-color:var(--button-backgroundColor-warn);color:var(--button-color)}.ts-button .c-button--warn.c-button--hollow[disabled]{background-color:transparent;border-color:var(--ts-color-utility-500);color:var(--ts-color-utility-500)}.ts-search .ts-button{position:relative;top:calc(var(--ts-space-stack-400) * -1)}.c-button[disabled]{cursor:not-allowed}.c-button .mat-button-wrapper{position:relative;transition:padding .2s ease-out;will-change:padding,margin}.c-button.c-button--progress .mat-button-wrapper{padding-right:var(--button-padding-right-progress)}.c-button__icon{margin-right:var(--button-icon-horizontal-adjustment)}.c-button .c-icon{margin-top:var(--button-icon-vertical-adjustment);transition:var(--button-icon-transition);vertical-align:middle;will-change:transform}.c-button .c-button__spinner{display:inline-block;opacity:0;position:absolute;right:0;top:0;transition:var(--button-spinner-transition)}.c-button .c-button__spinner--active{opacity:1}.c-button .c-button__spinner circle{stroke:var(--ts-color-utility-500)}.c-button.c-button--collapsed:not(:hover):not(:focus){padding:var(--button-padding-collapsed)}.c-button.c-button--collapsed:not(:hover):not(:focus) .ts-icon{margin-right:0}.c-button.c-button--collapsed:not(:hover):not(:focus) .c-icon{position:relative;transform:rotate(var(--button-rotation));transition-duration:var(--button-icon-transitionDuration-collapse)}.c-button.c-button--collapsed:not(:hover):not(:focus) .c-button__content{max-width:0;padding:0}.c-button.c-button--collapsable,.c-button.c-button--collapsible{border-radius:var(--button-border-radius-collapsible)}.c-button.c-button--collapsable[disabled]:not(:hover):not(:focus),.c-button.c-button--collapsible[disabled]:not(:hover):not(:focus){padding:var(--button-padding-collapsed)}.c-button.c-button--collapsable[disabled]:not(:hover):not(:focus) .ts-icon,.c-button.c-button--collapsible[disabled]:not(:hover):not(:focus) .ts-icon{margin-right:0}.c-button.c-button--collapsable[disabled]:not(:hover):not(:focus) .c-icon,.c-button.c-button--collapsible[disabled]:not(:hover):not(:focus) .c-icon{position:relative;transform:rotate(var(--button-rotation));transition-duration:var(--button-icon-transitionDuration-collapse)}.c-button.c-button--collapsable[disabled]:not(:hover):not(:focus) .c-button__content,.c-button.c-button--collapsible[disabled]:not(:hover):not(:focus) .c-button__content{max-width:0;padding:0}.c-button.c-button--collapsable:focus .c-icon,.c-button.c-button--collapsable:hover .c-icon,.c-button.c-button--collapsible:focus .c-icon,.c-button.c-button--collapsible:hover .c-icon{margin-left:var(--button-collapsible-first-icon-adjustment)}.c-button.c-button--collapsable .c-button__content,.c-button.c-button--collapsible .c-button__content{display:inline-block;max-width:400px;overflow:hidden;transition:var(--button-maxWidth-transition);white-space:nowrap}.c-button.c-button--collapsable .c-button__content .ts-icon,.c-button.c-button--collapsible .c-button__content .ts-icon{margin-left:var(--button-icon-negative-padding-adjustment);margin-right:var(--button-icon-negative-padding-adjustment)}.c-button.c-button--collapsable .mat-ripple,.c-button.c-button--collapsible .mat-ripple{border-radius:var(--button-border-radius-collapsible)}.mat-menu-panel .ts-button button.c-button{--menu-item-color:var(--ts-color-base-black);--menu-item-backgroundColor:transparent;background-color:var(--menu-item-backgroundColor);border-radius:0;box-shadow:none;color:var(--menu-item-color);text-align:left;transition-duration:var(--ts-animation-time-duration-400);transition-property:background-color,color;transition-timing-function:var(--ts-animation-easing-ease);width:100%}.mat-menu-panel .ts-button button.c-button:active,.mat-menu-panel .ts-button button.c-button:focus,.mat-menu-panel .ts-button button.c-button:hover{--menu-item-backgroundColor:var(--ts-color-utility-100);--menu-item-color:var(--ts-color-primary-500);box-shadow:none}\"]\n    }),\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef,\n        TsWindowService,\n        Renderer2])\n], TsButtonComponent);\n\nlet TsButtonModule = class TsButtonModule {\n};\nTsButtonModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            MatButtonModule,\n            MatProgressSpinnerModule,\n            TsIconModule,\n        ],\n        providers: [TsWindowService],\n        exports: [TsButtonComponent],\n        declarations: [TsButtonComponent],\n    })\n], TsButtonModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsButtonComponent, TsButtonModule, tsButtonFormatTypesArray };\n//# sourceMappingURL=terminus-ui-button.js.map\n","import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, ChangeDetectorRef, ViewChild, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatCheckboxChange, MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';\nimport { TsReactiveFormBaseComponent, ControlValueAccessorProviderFactory } from '@terminus/ui-utilities';\n\nvar TsCheckboxComponent_1;\n/**\n * Expose the MatCheckboxChange event as TsCheckboxChange\n */\nclass TsCheckboxChange extends MatCheckboxChange {\n}\n/**\n * Unique ID for each instance\n */\nlet nextUniqueId = 0;\n/**\n * This is the checkbox UI Component\n *\n * @example\n * <ts-checkbox\n *              [formControl]=\"myControl\"\n *              [(ngModel]=\"myModel\"\n *              id=\"my-id\"\n *              [isChecked]=\"true\"\n *              [isDisabled]=\"false\"\n *              [isIndeterminate]=\"false\"\n *              [isRequired]=\"false\"\n *              tabIndex=\"4\"\n *              theme=\"accent\"\n *              (inputChange)=\"myMethod($event)\"\n *              (indeterminateChange)=\"myMethod($event)\"\n * ></ts-checkbox>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/checkbox</example-url>\n */\nlet TsCheckboxComponent = TsCheckboxComponent_1 = class TsCheckboxComponent extends TsReactiveFormBaseComponent {\n    constructor(changeDetectorRef) {\n        super();\n        this.changeDetectorRef = changeDetectorRef;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-checkbox-${nextUniqueId++}`;\n        this._id = this.uid;\n        this._isChecked = false;\n        /**\n         * Define if the checkbox is disabled\n         */\n        this.isDisabled = false;\n        /**\n         * Define if the checkbox should be indeterminate\n         */\n        this.isIndeterminate = false;\n        /**\n         * Define if the checkbox is required\n         */\n        this.isRequired = false;\n        /**\n         * Define the tabindex\n         */\n        this.tabIndex = 0;\n        /**\n         * Define the theme\n         */\n        this.theme = 'primary';\n        /**\n         * Emit an event on input change\n         */\n        this.inputChange = new EventEmitter();\n        /**\n         * Emit a change when moving from the indeterminate state\n         */\n        this.indeterminateChange = new EventEmitter();\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Toggle the underlying checkbox if the isChecked property changes\n     *\n     * @param value\n     */\n    set isChecked(value) {\n        this._isChecked = value;\n        this.value = this._isChecked;\n        this.checkbox.checked = this._isChecked;\n        this.changeDetectorRef.detectChanges();\n    }\n    get isChecked() {\n        return this._isChecked;\n    }\n    /**\n     * Toggle the underlying checkbox if the ngModel changes\n     *\n     * @param v\n     */\n    set ngModel(v) {\n        this._isChecked = v;\n        this.value = v;\n        this.changeDetectorRef.detectChanges();\n    }\n};\nTsCheckboxComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    ViewChild(MatCheckbox, { static: true }),\n    __metadata(\"design:type\", MatCheckbox)\n], TsCheckboxComponent.prototype, \"checkbox\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsCheckboxComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsCheckboxComponent.prototype, \"isChecked\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsCheckboxComponent.prototype, \"isDisabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsCheckboxComponent.prototype, \"isIndeterminate\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsCheckboxComponent.prototype, \"isRequired\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsCheckboxComponent.prototype, \"ngModel\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsCheckboxComponent.prototype, \"tabIndex\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsCheckboxComponent.prototype, \"theme\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsCheckboxComponent.prototype, \"inputChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsCheckboxComponent.prototype, \"indeterminateChange\", void 0);\nTsCheckboxComponent = TsCheckboxComponent_1 = __decorate([\n    Component({\n        selector: 'ts-checkbox',\n        template: \"<mat-checkbox\\n  class=\\\"c-checkbox qa-checkbox\\\"\\n  [color]=\\\"theme\\\"\\n  [indeterminate]=\\\"isIndeterminate\\\"\\n  [disabled]=\\\"isDisabled ? 'disabled' : null\\\"\\n  [required]=\\\"isRequired ? '' : null\\\"\\n  [(ngModel)]=\\\"value\\\"\\n  tabIndex=\\\"{{ tabIndex }}\\\"\\n  (change)=\\\"inputChange.emit($event.checked)\\\"\\n  (indeterminateChange)=\\\"indeterminateChange.emit($event)\\\"\\n>\\n  <ng-content></ng-content>\\n</mat-checkbox>\\n\",\n        host: {\n            'class': 'ts-checkbox',\n            '[attr.id]': 'id',\n        },\n        providers: [ControlValueAccessorProviderFactory(TsCheckboxComponent_1)],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsCheckbox',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-checkbox{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:400;display:block}.ts-checkbox :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-checkbox h1,.ts-checkbox h2,.ts-checkbox h3,.ts-checkbox h4,.ts-checkbox h5,.ts-checkbox p{margin:unset}.ts-checkbox:not(.c-button):not(.c-input):not(.c-select):not(.ts-checkbox){line-height:20px}.ts-optgroup .ts-optgroup-label .ts-checkbox{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:500;color:#999;line-height:3em}.ts-checkbox .c-checkbox{display:block}.ts-select-panel .ts-checkbox .c-checkbox{line-height:3em;padding:0 16px}.ts-select-panel .ts-checkbox .mat-checkbox-layout{max-width:100%}.ts-select-panel .ts-checkbox .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;display:block;max-width:calc(100% - 28px)}.ts-select-panel .ts-checkbox .ts-option-text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;display:block}.ts-menu__panel .ts-checkbox .c-checkbox{line-height:2em;padding:0 16px}.ts-menu__panel .ts-checkbox.cdk-drag .c-checkbox{padding:0 32px 2px 16px}.ts-menu__panel .ts-checkbox .mat-checkbox-layout{width:100%}.ts-menu__panel .ts-checkbox .mat-checkbox-label{flex:1}.ts-option .ts-checkbox .mat-checkbox-layout,.ts-select-panel__toggle-all .ts-checkbox .mat-checkbox-layout{width:100%}.ts-option .ts-checkbox .mat-checkbox-layout .mat-checkbox-inner-container,.ts-select-panel__toggle-all .ts-checkbox .mat-checkbox-layout .mat-checkbox-inner-container{margin:auto 10px auto 0}\"]\n    }),\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef])\n], TsCheckboxComponent);\n\nlet TsCheckboxModule = class TsCheckboxModule {\n};\nTsCheckboxModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FormsModule,\n            MatCheckboxModule,\n        ],\n        exports: [TsCheckboxComponent],\n        declarations: [TsCheckboxComponent],\n    })\n], TsCheckboxModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsCheckboxChange, TsCheckboxComponent, TsCheckboxModule };\n//# sourceMappingURL=terminus-ui-checkbox.js.map\n","<mat-checkbox\n  class=\"c-checkbox qa-checkbox\"\n  [color]=\"theme\"\n  [indeterminate]=\"isIndeterminate\"\n  [disabled]=\"isDisabled ? 'disabled' : null\"\n  [required]=\"isRequired ? '' : null\"\n  [(ngModel)]=\"value\"\n  tabIndex=\"{{ tabIndex }}\"\n  (change)=\"inputChange.emit($event.checked)\"\n  (indeterminateChange)=\"indeterminateChange.emit($event)\"\n>\n  <ng-content></ng-content>\n</mat-checkbox>\n","import { __decorate, __metadata, __param } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, ElementRef, NgZone, ViewChild, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Host, Directive, ChangeDetectorRef, ContentChildren, QueryList, NgModule } from '@angular/core';\nimport { MatRippleModule } from '@angular/material/core';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, merge } from 'rxjs';\nimport { take, startWith } from 'rxjs/operators';\nimport { TsDocumentService } from '@terminus/ngx-tools/browser';\nimport { KEYS } from '@terminus/ngx-tools/keycodes';\nimport { isUndefined } from '@terminus/ngx-tools/type-guards';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\n\n// Unique ID for each instance\n// @internal\nlet nextUniqueId = 0;\n/**\n * Represents an event fired on an individual {@link TsChipComponent}\n */\nclass TsChipEvent {\n    constructor(chip) {\n        this.chip = chip;\n    }\n}\n/**\n * Represents an event fired when clicking an individual {@link TsChipComponent}\n */\nclass TsChipClickEvent {\n    constructor(chip, event) {\n        this.chip = chip;\n    }\n}\n/**\n * Event object emitted by {@link TsChipComponent} when selected or deselected\n */\nclass TsChipSelectionChange {\n    constructor(\n    // Reference to the chip that emitted the event\n    source, \n    // Whether the chip that emitted the event is selected\n    selected) {\n        this.source = source;\n        this.selected = selected;\n    }\n}\n/**\n * A presentational component to render a chip\n *\n * @example\n * <ts-chip\n *              id=\"my-id\"\n *              [isDisabled]=\"false\"\n *              [isRemovable]=\"true\"\n *              [isSelectable]=\"false\"\n *              theme=\"primary\"\n *              [selected]=\"true\"\n *              (clicked)=\"chipClicked($event)\"\n *              (destroyed)=\"destroyed($event)\"\n *              (blurred)=\"chipBlurred($event)\"\n *              (remove)=\"removeChip($event)\"\n *              (selectionChange)=\"selectionChange($event)\"\n * ></ts-chip>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/chip</example-url>\n */\nlet TsChipComponent = class TsChipComponent {\n    constructor(elementRef, ngZone, documentService) {\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n        this.documentService = documentService;\n        this._allowMultiple = false;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-chip-${nextUniqueId++}`;\n        /**\n         * Emits when the chip is focused\n         *\n         * @internal\n         */\n        this.onFocus = new Subject();\n        /**\n         * Whether the chip has focus\n         *\n         * @internal\n         */\n        this.hasFocus = false;\n        /**\n         * Whether the chip collection is selectable\n         *\n         * @internal\n         */\n        this.chipCollectionSelectable = true;\n        /**\n         * Whether the chip collection allows chip removable\n         *\n         * @internal\n         */\n        this.chipCollectionRemovable = true;\n        /**\n         * Whether the chip collection is in multi-selection mode.\n         *\n         * @internal\n         */\n        this.chipCollectionMultiple = false;\n        this._id = this.uid;\n        /**\n         * Define if the chip should be disabled\n         */\n        this.isDisabled = false;\n        /**\n         * Define if the chip allows focus\n         */\n        this.isFocusable = true;\n        /**\n         * Define if the chip is removable\n         */\n        this.isRemovable = true;\n        this._selectable = true;\n        this._selected = false;\n        this._theme = 'primary';\n        /**\n         * Emitted when the chip is clicked\n         */\n        this.clicked = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emitted when the chip is blurred\n         */\n        this.blurred = new EventEmitter();\n        /**\n         * Emitted when the chip is to be removed\n         */\n        this.remove = new EventEmitter();\n        /**\n         * Emitted when the chip is selected or deselected\n         */\n        this.selectionChange = new EventEmitter();\n    }\n    /**\n     * Define if multiple chips are allowed\n     *\n     * Used by the {@link TsAutocompleteComponent} consumer\n     *\n     * @param value\n     */\n    set allowMultiple(value) {\n        this._allowMultiple = value;\n    }\n    get allowMultiple() {\n        return this._allowMultiple;\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     *\n     * @internal\n     */\n    get ariaSelected() {\n        // NOTE: Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.isSelectable && (this.chipCollectionMultiple || this.selected)\n            ? this.selected.toString() : null;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Whether or not the chip is selectable.\n     *\n     * By default a chip is selectable, and it becomes non-selectable if its parent chip collection is not selectable.\n     *\n     * @param value\n     */\n    set isSelectable(value) {\n        this._selectable = value;\n    }\n    get isSelectable() {\n        return this._selectable && this.chipCollectionSelectable;\n    }\n    /**\n     * Define if the chip is selected\n     *\n     * @param value\n     */\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n    get selected() {\n        return this._selected;\n    }\n    /**\n     * Define the value of the chip\n     *\n     * Falls back to the DOM content if not set.\n     *\n     * @param value\n     */\n    set value(value) {\n        this._value = value;\n    }\n    // NOTE: Despite the return type, this getter will only ever return a string\n    get value() {\n        if (isUndefined(this._value)) {\n            return (this.content.nativeElement.textContent || '').trim();\n        }\n        return this._value;\n    }\n    /**\n     * Define the theme for a chip\n     *\n     * @param value\n     */\n    set theme(value) {\n        this._theme = value || 'primary';\n    }\n    get theme() {\n        return this._theme;\n    }\n    /**\n     * Alert consumers about destruction\n     */\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n    }\n    /**\n     * Emit the 'clicked' event\n     *\n     * @internal\n     * @param event\n     */\n    click(event) {\n        this.clicked.emit(new TsChipClickEvent(this, event));\n    }\n    /**\n     * Select the chip\n     */\n    select() {\n        if (!this.selected) {\n            this.selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n    /**\n     * Deselect the chip\n     */\n    deselect() {\n        if (this.selected) {\n            this.selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     */\n    toggleSelected() {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange();\n        return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     */\n    focus() {\n        // istanbul ignore else\n        if (!this.hasFocus && this.isFocusable) {\n            this.hasFocus = true;\n            this.elementRef.nativeElement.focus();\n            this.onFocus.next(new TsChipEvent(this));\n        }\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the {@link TsChipCollectionComponent} when the DELETE or BACKSPACE keys are\n     * pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     *\n     * @param event\n     */\n    removeChip(event) {\n        // istanbul ignore else\n        if (this.isRemovable) {\n            this.remove.emit(new TsChipEvent(this));\n        }\n        // NOTE: We stop propagation here so clicking a chip does not bubble up to an autocomplete instance\n        // istanbul ignore else\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handles click events on the chip.\n     *\n     * @internal\n     * @param event - click event\n     */\n    handleClick(event) {\n        const shiftKey = event.shiftKey;\n        if (this.allowMultiple && this.isSelectable && shiftKey) {\n            // NOTE: This is needed to disable text highlight when shift clicking chips\n            this.documentService.document.onselectstart = () => false;\n            this.toggleSelected();\n        }\n        this.clicked.emit(new TsChipClickEvent(this, event));\n        if (this.isDisabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle custom key presses.\n     *\n     * @internal\n     * @param event - keyboard event\n     */\n    handleKeydown(event) {\n        const code = event.code;\n        if (this.isDisabled) {\n            return;\n        }\n        switch (code) {\n            case KEYS.DELETE.code:\n            case KEYS.BACKSPACE.code:\n                this.removeChip(event);\n                break;\n            case KEYS.SPACE.code:\n                // istanbul ignore else\n                if (this.isSelectable) {\n                    this.toggleSelected();\n                }\n                break;\n            // skip default - no default logic\n        }\n        // Always prevent so page navigation does not occur and to prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n    }\n    /**\n     * Defer marking the chip as not focused until the next time the zone stabilizes.\n     */\n    handleBlur() {\n        this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n            this.ngZone.run(() => {\n                this.hasFocus = false;\n                this.blurred.emit();\n            });\n        });\n    }\n    /**\n     * When selection change action dispatched, emit selectionChange eventEmitter.\n     */\n    dispatchSelectionChange() {\n        this.selectionChange.emit(new TsChipSelectionChange(this, this.selected));\n    }\n};\nTsChipComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: TsDocumentService }\n];\n__decorate([\n    ViewChild('content', { static: true }),\n    __metadata(\"design:type\", ElementRef)\n], TsChipComponent.prototype, \"content\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsChipComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsChipComponent.prototype, \"isDisabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsChipComponent.prototype, \"isFocusable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsChipComponent.prototype, \"isRemovable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsChipComponent.prototype, \"isSelectable\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsChipComponent.prototype, \"selected\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsChipComponent.prototype, \"value\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsChipComponent.prototype, \"theme\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsChipComponent.prototype, \"clicked\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsChipComponent.prototype, \"destroyed\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsChipComponent.prototype, \"blurred\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsChipComponent.prototype, \"remove\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsChipComponent.prototype, \"selectionChange\", void 0);\nTsChipComponent = __decorate([\n    Component({\n        selector: 'ts-chip',\n        template: \"<div\\n  class=\\\"c-chip\\\"\\n  [ngClass]=\\\"{\\n    'c-chip--disabled': isDisabled,\\n    'c-chip--removable': isRemovable && chipCollectionRemovable\\n  }\\\"\\n  [attr.id]=\\\"id\\\"\\n  (click)=\\\"click($event)\\\"\\n>\\n  <span #content>\\n     <ng-content></ng-content>\\n  </span>\\n\\n  <ts-icon class=\\\"c-chip__remove\\\" (click)=\\\"removeChip($event)\\\">\\n    cancel\\n  </ts-icon>\\n</div>\\n\",\n        host: {\n            'class': 'ts-chip',\n            '[class.ts-chip--primary]': 'theme === \"primary\"',\n            '[class.ts-chip--accent]': 'theme === \"accent\"',\n            '[class.ts-chip--warn]': 'theme === \"warn\"',\n            '[attr.tabindex]': 'isDisabled ? null : -1',\n            '[class.ts-chip--selected]': 'selected',\n            '[class.ts-chip--disabled]': 'isDisabled',\n            '[attr.disabled]': 'isDisabled || null',\n            '[attr.aria-disabled]': 'isDisabled',\n            '[attr.aria-selected]': 'ariaSelected',\n            'role': 'option',\n            '(blur)': 'handleBlur()',\n            '(click)': 'handleClick($event)',\n            '(focus)': 'focus()',\n            '(keydown)': 'handleKeydown($event)',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsChip',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-chip{--chip-backgroundColor-hover:#999;--chip-backgroundColor:#cecdd1;--chip-borderRadius:16px;--chip-color:#302d35;--chip-fontSize:12px;--chip-height:24px;--chip-margin:4px;--chip-padding:2px 4px 2px 6px;--chip-remove-size:24px;--badge-padding:2px 4px 2px 4px}.ts-chip:focus:not(.ts-chip--badge) .c-chip:not(.c-chip--disabled),.ts-chip:hover:not(.ts-chip--badge) .c-chip:not(.c-chip--disabled){--chip-backgroundColor:var(--chip-backgroundColor-hover);transition:opacity .2s cubic-bezier(.35,0,.25,1)}.ts-chip.ts-chip--badge,.ts-chip.ts-chip--selected{color:#fafafa}.ts-chip.ts-chip--badge.ts-chip--primary .c-chip,.ts-chip.ts-chip--selected.ts-chip--primary .c-chip{background-color:#00538a}.ts-chip.ts-chip--badge.ts-chip--accent .c-chip,.ts-chip.ts-chip--selected.ts-chip--accent .c-chip{background-color:#2f854d}.ts-chip.ts-chip--badge.ts-chip--warn .c-chip,.ts-chip.ts-chip--selected.ts-chip--warn .c-chip{background-color:#c8604d}.ts-chip.ts-chip--badge .c-chip__remove,.ts-chip.ts-chip--selected .c-chip__remove{color:#fafafa}.ts-chip.ts-chip--badge .c-chip{--chip-color:color(pure);padding:var(--badge-padding)}.ts-chip .c-chip{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:400;align-items:center;background-color:var(--chip-backgroundColor);border-radius:var(--chip-borderRadius);box-sizing:border-box;color:var(--chip-color);display:inline-flex;font-size:var(--chip-fontSize);height:var(--chip-height);margin:0 var(--chip-margin) var(--chip-margin) var(--chip-margin);overflow:hidden;padding:var(--chip-padding);position:relative;-webkit-tap-highlight-color:transparent;transform:translateZ(0);transition:background-color .2s ease-out}.ts-chip .c-chip:not(.c-button):not(.c-input):not(.c-select):not(.ts-checkbox){line-height:20px}.ts-chip .c-chip.c-chip--removable{padding-right:24px}.ts-chip .c-chip.c-chip--removable .c-chip__remove{display:block}.ts-chip .c-chip.c-chip--disabled{--chip-color:#757575;padding:var(--chip-padding);pointer-events:none}.ts-chip .c-chip.c-chip--disabled .c-chip__remove{display:none}.ts-chip .c-chip .c-chip__remove{-webkit-backface-visibility:hidden;backface-visibility:hidden;cursor:pointer;display:none;height:var(--chip-remove-size);opacity:.4;position:absolute;right:0;top:50%;transform:translateY(-50%) scale(.8);transition:opacity .2s ease-out;width:var(--chip-remove-size)}.ts-chip .c-chip .c-chip__remove:hover{opacity:.7}.ts-chip:first-of-type .c-chip{margin-left:0}\"]\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        NgZone,\n        TsDocumentService])\n], TsChipComponent);\n\nlet TsChipBadgeDirective = class TsChipBadgeDirective {\n    constructor(elementRef, parent) {\n        this.elementRef = elementRef;\n        this.parent = parent;\n    }\n    ngOnInit() {\n        this.parent.isFocusable = false;\n        this.parent.isRemovable = false;\n        this.parent.isSelectable = false;\n        this.elementRef.nativeElement.classList.add('ts-chip--badge');\n    }\n};\nTsChipBadgeDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: TsChipComponent, decorators: [{ type: Host }] }\n];\nTsChipBadgeDirective = __decorate([\n    Directive({ selector: '[tsChipBadge]' }),\n    __param(1, Host()),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        TsChipComponent])\n], TsChipBadgeDirective);\n\nvar TsChipCollectionComponent_1;\n// Increasing integer for generating unique ids for chip-collection components.\n// @internal\nlet nextUniqueId$1 = 0;\n/**\n * Change event object that is emitted when the chip collection value has changed.\n */\nclass TsChipCollectionChange {\n    constructor(\n    // Chip collection that emitted the event\n    source, \n    // Value of the chip collection when the event was emitted\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Component that is used to group {@link TsChipComponent} instances\n *\n * @example\n * <ts-chip-collection\n *              [allowMultipleSelections]=\"true\"\n *              aria-orientation=\"vertical\"\n *              [isDisabled]=\"false\"\n *              [isReadonly]=\"false\"\n *              [isRemovable]=\"true\"\n *              [isSelectable]=\"false\"\n *              [orientation]=\"horizontal\"\n *              [tabIndex]=\"1\"\n *              [value]=\"myValue\"\n *              (collectionChange)=\"collectionChange($event)\"\n *              (removed)=\"chipRemoved($event)\"\n *              (tabUpdateFocus)=\"tabFocusUpdated()\"\n * ></ts-chip-collection>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/chip</example-url>\n */\nlet TsChipCollectionComponent = TsChipCollectionComponent_1 = class TsChipCollectionComponent {\n    constructor(elementRef, changeDetectorRef, zone) {\n        this.elementRef = elementRef;\n        this.changeDetectorRef = changeDetectorRef;\n        this.zone = zone;\n        /**\n         * Uid of the chip collection\n         */\n        this.uid = `ts-chip-collection-${nextUniqueId$1++}`;\n        /**\n         * User defined tab index.\n         *\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         *\n         * @internal\n         */\n        this._userTabIndex = null;\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         *\n         * @internal\n         */\n        this.lastDestroyedChipIndex = null;\n        /**\n         * Function when touched\n         *\n         * @internal\n         */\n        this.onTouched = () => { };\n        /**\n         * Function when changed\n         *\n         * @internal\n         */\n        this.onChange = () => { };\n        this._role = null;\n        this._allowMultipleSelections = false;\n        /**\n         * Orientation of the chip collection.\n         */\n        this.ariaOrientation = 'horizontal';\n        this._id = this.uid;\n        this._disabled = false;\n        this._readonly = false;\n        this._selectable = true;\n        /**\n         * Orientation of the chip - either horizontal or vertical. Default to horizontal.\n         */\n        this.orientation = 'horizontal';\n        this._tabIndex = 0;\n        this._value = [''];\n        /**\n         * Event emitted when the chip collection value has been changed by the user.\n         */\n        this.collectionChange = new EventEmitter();\n        /**\n         * Emitted when a chip is to be removed.\n         */\n        this.removed = new EventEmitter();\n        /**\n         * Emitted when tab pressed with chip focused\n         */\n        this.tabUpdateFocus = new EventEmitter();\n        zone.runOutsideAngular(() => {\n            this._role = this.empty ? null : 'listbox';\n        });\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     *\n     * @internal\n     */\n    get chipSelectionChanges() {\n        // eslint-disable-next-line deprecation/deprecation\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     *\n     * @internal\n     */\n    get chipFocusChanges() {\n        // eslint-disable-next-line deprecation/deprecation\n        return merge(...this.chips.map(chip => chip.onFocus));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     *\n     * @internal\n     */\n    get chipBlurChanges() {\n        // eslint-disable-next-line deprecation/deprecation\n        return merge(...this.chips.map(chip => chip.blurred));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     *\n     * @internal\n     */\n    get chipDestroyChanges() {\n        // eslint-disable-next-line deprecation/deprecation\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    /**\n     * Determine whether there is at least one chip in collection.\n     */\n    get empty() {\n        return this.chips && this.chips.length === 0;\n    }\n    /**\n     * Whether any chips has focus\n     */\n    get focused() {\n        return this.chips.some(chip => chip.hasFocus);\n    }\n    /**\n     * The ARIA role applied to the chip list\n     */\n    get role() {\n        return this._role;\n    }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     *\n     * @param value\n     */\n    set allowMultipleSelections(value) {\n        this._allowMultipleSelections = value;\n        this.syncChipsState();\n    }\n    get allowMultipleSelections() {\n        return this._allowMultipleSelections;\n    }\n    /**\n     * Set and get chip collection id\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get and set disable state\n     *\n     * @param value\n     */\n    set isDisabled(value) {\n        this._disabled = value;\n        this.syncChipsState();\n    }\n    get isDisabled() {\n        return this._disabled;\n    }\n    /**\n     * Get and set readonly state\n     *\n     * @param value\n     */\n    set isReadonly(value) {\n        this._readonly = value;\n    }\n    get isReadonly() {\n        return this._readonly;\n    }\n    /**\n     * Whether or not this chip collection is selectable. When a chip collection is not selectable,\n     * all the chips are not selectable.\n     *\n     * @param value\n     */\n    set isSelectable(value) {\n        this._selectable = value;\n        this.syncChipsState();\n    }\n    get isSelectable() {\n        return this._selectable;\n    }\n    /**\n     * Set and get tabindex\n     *\n     * @param value\n     */\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    get tabIndex() {\n        return this._tabIndex;\n    }\n    /**\n     * Set and get chip collection value\n     *\n     * @param value\n     */\n    set value(value) {\n        this._value = value;\n    }\n    get value() {\n        return this._value;\n    }\n    /**\n     * Initialize the selection model\n     */\n    ngOnInit() {\n        this.selectionModel = new SelectionModel(this.allowMultipleSelections, undefined, false);\n    }\n    /**\n     * Initialize the key manager and listen for chip changes\n     */\n    ngAfterViewInit() {\n        this.keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation('ltr');\n        this.keyManager.tabOut.pipe(untilComponentDestroyed(this)).subscribe(() => {\n            this.tabUpdateFocus.emit();\n        });\n        // When the collection changes, re-subscribe\n        // eslint-disable-next-line deprecation/deprecation\n        this.chips.changes.pipe(startWith(null), untilComponentDestroyed(this)).subscribe(() => {\n            if (this.isDisabled || this.isReadonly) {\n                // Since this happens after the content has been checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this.syncChipsState();\n                });\n            }\n            this.resetChips();\n            // Check to see if we need to update our tab index\n            Promise.resolve().then(() => {\n                this.updateTabIndex();\n            });\n            // Check to see if we have a destroyed chip and need to refocus\n            this.updateFocusForDestroyedChips();\n            this.propagateChanges();\n        });\n    }\n    /**\n     * Trigger an initial sync after the content has loaded\n     */\n    ngAfterContentInit() {\n        Promise.resolve().then(() => {\n            this.syncChipsState();\n        });\n    }\n    /**\n     * Needed for untilComponentDestroyed\n     */\n    ngOnDestroy() { }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip collection.\n     */\n    blur() {\n        // istanbul ignore else\n        if (!this.focused) {\n            this.keyManager.setActiveItem(-1);\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip collection, or the associated input when there are no eligible chips.\n     */\n    focus() {\n        if (this.isDisabled) {\n            return;\n        }\n        // istanbul ignore else\n        if (this.chips.length > 0) {\n            this.keyManager.setFirstItemActive();\n        }\n    }\n    /**\n     * Pass events to the keyboard manager.\n     *\n     * @internal\n     *\n     * @param event - They KeyboardEvent\n     */\n    keydown(event) {\n        event.stopPropagation();\n        const target = event.target;\n        const keyCode = event.code;\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (keyCode === KEYS.BACKSPACE.code && TsChipCollectionComponent_1.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('ts-chip')) {\n            if (keyCode === KEYS.HOME.code) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (keyCode === KEYS.END.code) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            if (this.allowMultipleSelections && keyCode === KEYS.A.code && event.ctrlKey) {\n                // Select all with CTRL+A\n                const hasDeselectedChips = this.chips.some(chip => !chip.isDisabled && !chip.selected);\n                this.chips.forEach(chip => {\n                    // istanbul ignore else\n                    if (!chip.isDisabled) {\n                        hasDeselectedChips ? chip.select() : chip.deselect();\n                    }\n                });\n                event.preventDefault();\n            }\n            else {\n                this.keyManager.onKeydown(event);\n            }\n        }\n    }\n    /**\n     * Utility to for whether input field is empty\n     *\n     * @param element - An HTMLElement\n     * @returns boolean\n     */\n    static isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element;\n            return !input.value;\n        }\n        return false;\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     *\n     * @internal\n     */\n    updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this.tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the key manager state and focus the next closest chip.\n     */\n    updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-collection itself.\n        if (this.lastDestroyedChipIndex !== null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this.lastDestroyedChipIndex, this.chips.length - 1);\n                this.keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this.lastDestroyedChipIndex = null;\n    }\n    /**\n     * Emits change event to set the model value.\n     */\n    propagateChanges() {\n        const valueToEmit = this.chips.map(chip => chip.value || '');\n        this._value = valueToEmit;\n        this.collectionChange.emit(new TsChipCollectionChange(this, valueToEmit));\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index - The index to be checked.\n     * @returns True if the index is valid for our collection of chips.\n     */\n    isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * Reset all the chips subscription\n     */\n    resetChips() {\n        this.listenToChipsFocus();\n        this.listenToChipsSelection();\n        this.listenToChipsRemoved();\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     */\n    listenToChipsSelection() {\n        this.chipSelectionChanges.pipe(untilComponentDestroyed(this)).subscribe(event => {\n            event.source.selected\n                ? this.selectionModel.select(event.source)\n                : this.selectionModel.deselect(event.source);\n            // For single selection chip collection, make sure the deselected value is unselected.\n            if (!this.allowMultipleSelections) {\n                this.chips.forEach(chip => {\n                    if (!this.selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     */\n    listenToChipsFocus() {\n        this.chipFocusChanges.pipe(untilComponentDestroyed(this)).subscribe(event => {\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // istanbul ignore else\n            if (this.isValidIndex(chipIndex)) {\n                this.keyManager.updateActiveItem(chipIndex);\n            }\n        });\n        this.chipBlurChanges.pipe(untilComponentDestroyed(this)).subscribe(() => {\n            this.blur();\n        });\n    }\n    /**\n     * Listens to remove events on each chip.\n     */\n    listenToChipsRemoved() {\n        this.chipDestroyChanges.pipe(untilComponentDestroyed(this)).subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store the index in order to be able to determine an\n            // appropriate sibling chip that will receive focus.\n            // istanbul ignore else\n            if (this.isValidIndex(chipIndex) && chip.hasFocus) {\n                this.lastDestroyedChipIndex = chipIndex;\n            }\n            this.removed.emit(new TsChipEvent(chip));\n        });\n    }\n    /**\n     * Syncs the collection's state with the individual chips.\n     */\n    syncChipsState() {\n        // istanbul ignore else\n        if (this.chips && this.chips.length) {\n            this.chips.forEach(chip => {\n                chip.allowMultiple = this.allowMultipleSelections;\n                chip.chipCollectionMultiple = this.allowMultipleSelections;\n                chip.isDisabled = this.isDisabled;\n                chip.chipCollectionRemovable = !this.isReadonly && !this.isDisabled;\n                chip.isSelectable = this.isSelectable;\n            });\n        }\n    }\n};\nTsChipCollectionComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone }\n];\n__decorate([\n    ContentChildren(TsChipComponent),\n    __metadata(\"design:type\", QueryList)\n], TsChipCollectionComponent.prototype, \"chips\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsChipCollectionComponent.prototype, \"allowMultipleSelections\", null);\n__decorate([\n    Input('aria-orientation'),\n    __metadata(\"design:type\", String)\n], TsChipCollectionComponent.prototype, \"ariaOrientation\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsChipCollectionComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsChipCollectionComponent.prototype, \"isDisabled\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsChipCollectionComponent.prototype, \"isReadonly\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsChipCollectionComponent.prototype, \"isSelectable\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsChipCollectionComponent.prototype, \"orientation\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsChipCollectionComponent.prototype, \"tabIndex\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array),\n    __metadata(\"design:paramtypes\", [Array])\n], TsChipCollectionComponent.prototype, \"value\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsChipCollectionComponent.prototype, \"collectionChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsChipCollectionComponent.prototype, \"removed\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsChipCollectionComponent.prototype, \"tabUpdateFocus\", void 0);\nTsChipCollectionComponent = TsChipCollectionComponent_1 = __decorate([\n    Component({\n        selector: 'ts-chip-collection',\n        template: \"<div class=\\\"ts-chip-collection-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n\",\n        host: {\n            'class': 'ts-chip-collection',\n            '[class.ts-chip-collection--disabled]': 'isDisabled',\n            '[class.ts-chip-collection--vertical]': 'orientation === \"vertical\"',\n            '[class.ts-chip-collection--selectable]': 'isSelectable',\n            '[attr.tabindex]': 'isDisabled ? null : tabIndex',\n            '[attr.aria-describedby]': 'ariaDescribedby || null',\n            '[attr.aria-disabled]': 'isDisabled',\n            '[attr.aria-multiselectable]': 'allowMultipleSelections',\n            '[attr.aria-orientation]': 'ariaOrientation',\n            '[attr.aria-readonly]': 'isReadonly',\n            '[attr.aria-required]': 'false',\n            '[attr.aria-selectable]': 'isSelectable',\n            '[attr.role]': 'role',\n            '(focus)': 'focus()',\n            '(blur)': 'blur()',\n            '(keydown)': 'keydown($event)',\n            '[id]': 'id',\n        },\n        encapsulation: ViewEncapsulation.None,\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        exportAs: 'tsChipCollection',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-chip-collection{display:block}.ts-chip-collection--vertical{display:inline-block}.ts-chip-collection--vertical .ts-chip-collection-wrapper{align-items:flex-start;flex-direction:column}.ts-chip-collection--vertical .ts-chip .c-chip{margin-left:0;margin-right:0}.ts-chip-collection-wrapper{align-items:center;display:flex;flex-wrap:wrap}\"]\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        ChangeDetectorRef,\n        NgZone])\n], TsChipCollectionComponent);\n\nconst EXPORTED_DECLARATIONS = [\n    TsChipBadgeDirective,\n    TsChipComponent,\n    TsChipCollectionComponent,\n];\nlet TsChipModule = class TsChipModule {\n};\nTsChipModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            MatRippleModule,\n            TsIconModule,\n        ],\n        declarations: EXPORTED_DECLARATIONS,\n        exports: EXPORTED_DECLARATIONS,\n    })\n], TsChipModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsChipBadgeDirective, TsChipClickEvent, TsChipCollectionChange, TsChipCollectionComponent, TsChipComponent, TsChipEvent, TsChipModule, TsChipSelectionChange };\n//# sourceMappingURL=terminus-ui-chip.js.map\n","<div\n  class=\"c-chip\"\n  [ngClass]=\"{\n    'c-chip--disabled': isDisabled,\n    'c-chip--removable': isRemovable && chipCollectionRemovable\n  }\"\n  [attr.id]=\"id\"\n  (click)=\"click($event)\"\n>\n  <span #content>\n     <ng-content></ng-content>\n  </span>\n\n  <ts-icon class=\"c-chip__remove\" (click)=\"removeChip($event)\">\n    cancel\n  </ts-icon>\n</div>\n","<div class=\"ts-chip-collection-wrapper\">\n  <ng-content></ng-content>\n</div>\n","import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { Directive, ElementRef, ChangeDetectorRef, NgZone, ViewChild, ContentChildren, QueryList, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { TsValidationMessagesModule } from '@terminus/ui-validation-messages';\nimport { EMPTY, scheduled, asapScheduler, fromEvent } from 'rxjs';\nimport { startWith, take } from 'rxjs/operators';\nimport { TsDocumentService } from '@terminus/ngx-tools/browser';\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\nimport { TS_SPACING } from '@terminus/ui-spacing';\n\n/**\n * A directive used to pass a custom validation messages component through to {@link TsFormFieldComponent}\n */\nlet TsCustomValidationDirective = class TsCustomValidationDirective {\n};\nTsCustomValidationDirective = __decorate([\n    Directive({ selector: '[tsCustomValidationMessage]' })\n], TsCustomValidationDirective);\n\n/**\n * Prefix to be placed the front of the {@link TsFormFieldComponent}\n */\nlet TsPrefixDirective = class TsPrefixDirective {\n};\nTsPrefixDirective = __decorate([\n    Directive({ selector: '[tsPrefix]' })\n], TsPrefixDirective);\n\n/**\n * Suffix to be placed at the end of the {@link TsFormFieldComponent}\n */\nlet TsSuffixDirective = class TsSuffixDirective {\n};\nTsSuffixDirective = __decorate([\n    Directive({ selector: '[tsSuffix]' })\n], TsSuffixDirective);\n\n/**\n * An interface to enforce the needs of a control when working inside of a {@link TsFormFieldComponent}\n */\nclass TsFormFieldControl {\n}\n\n/**\n * Unique ID for each instance\n */\nlet nextUniqueId = 0;\nconst FLOATING_LABEL_SCALE = .75;\nconst OUTLINE_GAP_PADDING = 5;\n/**\n * The form-field UI Component.\n *\n * Used to wrap input components with form field functionality (hints, errors, labels etc)\n *\n * @example\n * <ts-form-field\n *              [control]=\"myControlInstance\"\n *              floatLabel=\"always\"\n *              [hideRequiredMarker]=\"true\"\n *              hint=\"My hint\"\n *              id=\"my-id\"\n *              theme=\"primary\"\n *              [validateOnChange]=\"true\"\n * ></ts-form-field>\n *\n * <example-url>https://goo.gl/ieUPaG</example-url>\n */\nlet TsFormFieldComponent = class TsFormFieldComponent {\n    constructor(elementRef, changeDetectorRef, documentService, ngZone) {\n        this.elementRef = elementRef;\n        this.changeDetectorRef = changeDetectorRef;\n        this.documentService = documentService;\n        this.ngZone = ngZone;\n        /**\n         * Whether there is custom validation message defined\n         */\n        this.customValidationMessage = false;\n        /**\n         * Define the flex layout gap. Needed because hints/errors can appear at the same time\n         */\n        this.flexGap = TS_SPACING.small[0];\n        /*\n         * Unique id for the hint label\n         */\n        this.hintLabelId = `ts-hint-${nextUniqueId++}`;\n        /**\n         * Unique id for the internal form field label\n         */\n        this.labelId = `ts-form-field-label-${nextUniqueId++}`;\n        /**\n         * A flag to track when the outline gap should be recalculated\n         */\n        this.outlineGapCalculationNeeded = false;\n        /**\n         * Override for the logic that disables the label animation in certain cases\n         */\n        this.showAlwaysAnimate = false;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-form-field-${nextUniqueId++}`;\n        this._floatLabel = 'auto';\n        /**\n         * Define if a required marker should be hidden\n         */\n        this.hideRequiredMarker = false;\n        this._id = this.uid;\n        /**\n         * Define whether form field needs a validation or a hint\n         */\n        this.noValidationOrHint = false;\n        /**\n         * Define the component theme\n         */\n        this.theme = 'primary';\n        /**\n         * Define if validation messages should be shown immediately or on blur\n         */\n        this.validateOnChange = false;\n        this.document = this.documentService.document;\n    }\n    /**\n     * Return if the ngControl is currently in an errored state and has been touched\n     */\n    get controlIsInErrorState() {\n        const ctrl = this.control.ngControl && this.control.ngControl.control;\n        if (!ctrl) {\n            return false;\n        }\n        if ((this.validateOnChange && ctrl.dirty) || (!this.validateOnChange && ctrl.touched)) {\n            return ctrl.invalid;\n        }\n        return false;\n    }\n    /**\n     * Whether the label should always float or float as the user types\n     *\n     * @param value\n     */\n    set floatLabel(value) {\n        // istanbul ignore else\n        if (value !== this._floatLabel) {\n            this._floatLabel = value || 'auto';\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n    get floatLabel() {\n        return this._floatLabel;\n    }\n    /**\n     * Define a hint for the input\n     *\n     * @param value\n     */\n    set hint(value) {\n        this._hint = value;\n    }\n    get hint() {\n        return this._hint;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Verify control existence and set up subscriptions\n     */\n    ngAfterContentInit() {\n        this.confirmControlExists();\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        // TODO: Refactor deprecation\n        // eslint-disable-next-line deprecation/deprecation\n        this.control.stateChanges.pipe(startWith(null)).subscribe(() => {\n            this.changeDetectorRef.markForCheck();\n        });\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        // istanbul ignore else\n        if (this.control.labelChanges) {\n            // TODO: Refactor deprecation\n            // eslint-disable-next-line deprecation/deprecation\n            this.control.labelChanges.pipe(startWith(null)).subscribe(() => {\n                this.updateOutlineGap();\n            });\n        }\n        // Run change detection if the value, prefix, or suffix changes.\n        const valueChanges = (this.control.ngControl && this.control.ngControl.valueChanges) || EMPTY;\n        scheduled([valueChanges, this.prefixChildren.changes, this.suffixChildren.changes], asapScheduler)\n            .pipe(untilComponentDestroyed(this))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n        this.ngZone.onStable.pipe(take(1)).subscribe(() => {\n            this.ngZone.runOutsideAngular(() => this.updateOutlineGap());\n        });\n    }\n    /**\n     * Verify control existence and trigger outline gap update if needed\n     */\n    ngAfterContentChecked() {\n        this.confirmControlExists();\n        this.customValidationMessage = this.wrapperElement\n            && this.wrapperElement.nativeElement\n            && this.wrapperElement.nativeElement.textContent;\n        this.changeDetectorRef.detectChanges();\n        if (this.outlineGapCalculationNeeded) {\n            this.updateOutlineGap();\n        }\n    }\n    /**\n     * Enable animations\n     */\n    ngAfterViewInit() {\n        this.changeDetectorRef.detectChanges();\n    }\n    /**\n     * Needed for `untilComponentDestroyed`\n     */\n    ngOnDestroy() { }\n    /**\n     * Throw an error if the form field's control is missing\n     */\n    confirmControlExists() {\n        // istanbul ignore else\n        if (!this.control) {\n            throw Error(`TsFormFieldComponent: <ts-form-field> must contain a TsFormFieldControl.`);\n        }\n    }\n    /**\n     * Whether the floating label should always float or not\n     */\n    get shouldAlwaysFloat() {\n        return this.floatLabel === 'always' && !this.showAlwaysAnimate;\n    }\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     *\n     * NOTE: Used by the autocomplete functionality.\n     */\n    getConnectedOverlayOrigin() {\n        return this.containerElement || this.elementRef;\n    }\n    /**\n     * Determines whether a class from the NgControl should be forwarded to the host element\n     *\n     * @param prop\n     */\n    shouldForward(prop) {\n        const ngControl = this.control ? this.control.ngControl /* istanbul ignore next - Unreachable */ : null;\n        return ngControl && ngControl[prop];\n    }\n    /**\n     * Determine if the label should float from the control's setting\n     */\n    shouldLabelFloat() {\n        return this.control.shouldLabelFloat;\n    }\n    /**\n     * Animate the placeholder up and lock it in position\n     *\n     * NOTE: Used by autocomplete functionality\n     */\n    animateAndLockLabel() {\n        this.showAlwaysAnimate = true;\n        // eslint-disable-next-line deprecation/deprecation\n        fromEvent(this.labelElement.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n            this.showAlwaysAnimate = false;\n        });\n        this.floatLabel = 'always';\n        this.changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the width and position of the gap in the outline\n     */\n    updateOutlineGap() {\n        const labelEl = this.labelElement ? this.labelElement.nativeElement : null;\n        if (!labelEl) {\n            return;\n        }\n        if (this.document.documentElement && !this.document.documentElement.contains(this.elementRef.nativeElement)) {\n            this.outlineGapCalculationNeeded = true;\n            return;\n        }\n        let startWidth = 0;\n        let gapWidth = 0;\n        const startEls = this.containerElement.nativeElement.querySelectorAll('.js-outline-start');\n        const gapEls = this.containerElement.nativeElement.querySelectorAll('.js-outline-gap');\n        // istanbul ignore else\n        if (labelEl.children.length) {\n            const containerStart = this.containerElement.nativeElement.getBoundingClientRect().left;\n            const labelStart = labelEl.children[0].getBoundingClientRect().left;\n            let labelWidth = 0;\n            for (const child of labelEl.children) {\n                labelWidth += child.offsetWidth;\n            }\n            startWidth = labelStart - containerStart - OUTLINE_GAP_PADDING;\n            const TWO = 2;\n            gapWidth = (labelWidth > 0) ? (labelWidth * FLOATING_LABEL_SCALE) + (OUTLINE_GAP_PADDING * TWO) : 0;\n        }\n        for (let i = 0; i < startEls.length; i++) {\n            startEls.item(i).style.width = `${startWidth}px`;\n        }\n        for (let i = 0; i < gapEls.length; i++) {\n            gapEls.item(i).style.width = `${gapWidth}px`;\n        }\n        this.outlineGapCalculationNeeded = false;\n    }\n};\nTsFormFieldComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: TsDocumentService },\n    { type: NgZone }\n];\n__decorate([\n    ViewChild('containerElement', { static: true }),\n    __metadata(\"design:type\", ElementRef)\n], TsFormFieldComponent.prototype, \"containerElement\", void 0);\n__decorate([\n    ViewChild('labelElement', { static: true }),\n    __metadata(\"design:type\", ElementRef)\n], TsFormFieldComponent.prototype, \"labelElement\", void 0);\n__decorate([\n    ViewChild('validationWrapper'),\n    __metadata(\"design:type\", ElementRef)\n], TsFormFieldComponent.prototype, \"wrapperElement\", void 0);\n__decorate([\n    ContentChildren(TsPrefixDirective),\n    __metadata(\"design:type\", QueryList)\n], TsFormFieldComponent.prototype, \"prefixChildren\", void 0);\n__decorate([\n    ContentChildren(TsSuffixDirective),\n    __metadata(\"design:type\", QueryList)\n], TsFormFieldComponent.prototype, \"suffixChildren\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", TsFormFieldControl)\n], TsFormFieldComponent.prototype, \"control\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsFormFieldComponent.prototype, \"floatLabel\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsFormFieldComponent.prototype, \"hideRequiredMarker\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsFormFieldComponent.prototype, \"hint\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsFormFieldComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsFormFieldComponent.prototype, \"noValidationOrHint\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsFormFieldComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsFormFieldComponent.prototype, \"validateOnChange\", void 0);\nTsFormFieldComponent = __decorate([\n    Component({\n        selector: 'ts-form-field',\n        template: \"<div\\n  class=\\\"ts-form-field__wrapper qa-form-field\\\"\\n  [ngClass]=\\\"{'ts-form-field--with-validation': !noValidationOrHint}\\\"\\n>\\n  <div\\n    class=\\\"ts-form-field__container qa-form-field-container\\\"\\n    #containerElement\\n    (click)=\\\"control.onContainerClick && control.onContainerClick($event)\\\"\\n  >\\n\\n    <div class=\\\"ts-form-field__outline qa-form-field-outline\\\">\\n      <div class=\\\"ts-form-field__outline-start js-outline-start\\\"></div>\\n      <div class=\\\"ts-form-field__outline-gap js-outline-gap\\\"></div>\\n      <div class=\\\"ts-form-field__outline-end\\\"></div>\\n    </div>\\n    <div class=\\\"ts-form-field__outline ts-form-field__outline--thick qa-form-field-outline\\\">\\n      <div class=\\\"ts-form-field__outline-start js-outline-start\\\"></div>\\n      <div class=\\\"ts-form-field__outline-gap  js-outline-gap\\\"></div>\\n      <div class=\\\"ts-form-field__outline-end\\\"></div>\\n    </div>\\n\\n    <div class=\\\"ts-form-field__prefix qa-form-field-prefix\\\" *ngIf=\\\"prefixChildren.length\\\">\\n      <ng-content select=\\\"[tsPrefix]\\\"></ng-content>\\n    </div>\\n\\n\\n    <div class=\\\"ts-form-field__infix qa-form-field-control-container\\\">\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"ts-form-field__label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label\\n          class=\\\"ts-form-field__label qa-form-field-label\\\"\\n          [attr.for]=\\\"id\\\"\\n          [attr.aria-owns]=\\\"id\\\"\\n          [class.ts-form-field__label--empty]=\\\"control.empty && !shouldAlwaysFloat\\\"\\n          [class.ts-accent]=\\\"theme == 'accent'\\\"\\n          [class.ts-warn]=\\\"theme == 'warn'\\\"\\n          #labelElement\\n        >\\n          <ng-content select=\\\"ts-label\\\"></ng-content>\\n\\n          <span\\n            class=\\\"ts-form-field-required-marker qa-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && control.isRequired && !control.isDisabled\\\"\\n          >*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"ts-form-field__suffix qa-form-field-suffix\\\" *ngIf=\\\"suffixChildren.length\\\">\\n      <ng-content select=\\\"[tsSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <div\\n    class=\\\"ts-form-field__subscript-wrapper\\\"\\n    fxLayout=\\\"row\\\"\\n    fxLayoutAlign=\\\"space-between center\\\"\\n    [fxLayoutGap]=\\\"flexGap\\\"\\n    *ngIf=\\\"!noValidationOrHint\\\"\\n  >\\n    <div *ngIf=\\\"control && (control.ngControl || control.formControl)\\\">\\n      <div #validationWrapper>\\n        <ng-content select=\\\".customMessageSelector\\\"></ng-content>\\n      </div>\\n\\n      <ng-container *ngIf=\\\"!customValidationMessage\\\">\\n        <ts-validation-messages\\n          class=\\\"qa-form-field-validation-messages\\\"\\n          [control]=\\\"control.ngControl || control.formControl\\\"\\n          [validateOnChange]=\\\"validateOnChange\\\"\\n        ></ts-validation-messages>\\n      </ng-container>\\n    </div>\\n\\n    <div *ngIf=\\\"hint\\\" class=\\\"ts-form-field__hint-wrapper\\\">\\n      <div class=\\\"c-input__hint qa-form-field-hint\\\">\\n        {{ hint }}\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n        host: {\n            'class': 'ts-form-field',\n            '[class.ts-form-field--invalid]': 'controlIsInErrorState',\n            '[class.ts-form-field--float]': 'shouldLabelFloat()',\n            '[class.ts-form-field--disabled]': 'control.isDisabled',\n            '[class.ts-form-field--focused]': 'control.focused',\n            '[class.ts-form-field--accent]': 'theme == \"accent\"',\n            '[class.ts-form-field--warn]': 'theme == \"warn\"',\n            '[class.ng-untouched]': 'shouldForward(\"untouched\")',\n            '[class.ng-touched]': 'shouldForward(\"touched\")',\n            '[class.ng-pristine]': 'shouldForward(\"pristine\")',\n            '[class.ng-dirty]': 'shouldForward(\"dirty\")',\n            '[class.ng-valid]': 'shouldForward(\"valid\")',\n            '[class.ng-invalid]': 'shouldForward(\"invalid\")',\n            '[class.ng-pending]': 'shouldForward(\"pending\")',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsFormField',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-form-field{--formField-outlineColor-default:var(--ts-color-utility-500);--formField-outlineColor-default-hover:var(--ts-color-base-black);--formField-outlineColor-theme:var(--ts-color-primary-500);--formField-outlineColor-disabled:var(--ts-color-utility-300);--formField-color-disabled:var(--ts-color-utility-500);--formField-outline-borderRadius:5px;--formField-outline-width:1px;--formField-outline-width-thick:2px;--formField-outline-labelOverlap:.25em;--formField-outline-sidePadding:.45em;--formField-outline-fontScale-subscript:.75;--formField-outline-subscript-padding:var(--formField-outline-sidePadding)/var(--formField-outline-fontScale-subscript);--formfield-lineHeight:1.125;--formField-fontScale-subscript:.75;--formField-infix-padding:.4em;--formField-infix-marginTop:calc(1em * var(--formfield-lineHeight) * var(--formField-fontScale-subscript));--formField-infix-marginTop-negative:calc(-1 * var(--formField-infix-marginTop));--formField-marginTop-subscript:calc(.5em / var(--formField-fontScale-subscript));--formField-wrapper-paddingBottom:1.43em;--formField-outline-labelOffset:-.35em;display:block}.ts-form-field :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-form-field h1,.ts-form-field h2,.ts-form-field h3,.ts-form-field h4,.ts-form-field h5,.ts-form-field p{margin:unset}.ts-form-field.ts-form-field--focused .ts-form-field__outline,.ts-form-field.ts-form-field--invalid .ts-form-field__outline{opacity:0;transition:opacity .1s var(--swift-ease-out-timing-function)}.ts-form-field.ts-form-field--focused .ts-form-field__outline--thick,.ts-form-field.ts-form-field--invalid .ts-form-field__outline--thick{opacity:1}.ts-form-field:not(.ts-form-field--disabled) .ts-form-field__container:hover .ts-form-field__outline{opacity:0;transition:opacity .6s var(--swift-ease-out-timing-function)}.ts-form-field:not(.ts-form-field--disabled) .ts-form-field__container:hover .ts-form-field__outline--thick{opacity:1}.ts-form-field.ts-form-field--float .ts-form-field__label{--translate:calc(var(--formField-infix-marginTop-negative) - (var(--formField-infix-padding) + var(--formField-outline-labelOffset)));transform:translateY(var(--translate)) scale(var(--formField-fontScale-subscript));width:100%/var(--formField-fontScale-subscript)}.ts-form-field.ts-form-field--float .ts-form-field__outline-gap{border-top-color:transparent}.ts-form-field.ts-form-field--focused .ts-form-field__outline--thick{color:var(--formField-outlineColor-theme)}.ts-form-field.ts-form-field--focused.ts-form-field--accent .ts-form-field__outline--thick{--formField-outlineColor-theme:var(--ts-color-accent-500)}.ts-form-field.ts-form-field--focused.ts-form-field--warn .ts-form-field__outline--thick,.ts-form-field.ts-form-field--invalid.ts-form-field--invalid .ts-form-field__outline--thick{--formField-outlineColor-theme:var(--ts-color-warn-500)}.ts-form-field.ts-form-field--disabled .ts-form-field__label{color:var(--formField-outlineColor-disabled)}.ts-form-field.ts-form-field--disabled .c-input__text,.ts-form-field.ts-form-field--disabled .ts-selection-list__input{color:var(--formField-color-disabled)}.ts-form-field.ts-form-field--disabled .ts-form-field__outline{color:var(--formField-outlineColor-disabled)}.ts-form-field.ts-form-field--disabled .ts-form-field__container{cursor:not-allowed}.ts-form-field .ts-form-field__outline{bottom:0;color:var(--formField-outlineColor-default);display:flex;left:0;pointer-events:none;position:absolute;right:0;top:var(--formField-outline-labelOverlap)}.ts-form-field .ts-form-field__outline-end,.ts-form-field .ts-form-field__outline-start{border:var(--formField-outline-width) solid currentColor;min-width:var(--formField-outline-borderRadius)}.ts-form-field .ts-form-field__outline-start{border-radius:var(--formField-outline-borderRadius) 0 0 var(--formField-outline-borderRadius);border-right-style:none}.ts-form-field .ts-form-field__outline-end{border-left-style:none;border-radius:0 var(--formField-outline-borderRadius) var(--formField-outline-borderRadius) 0;flex-grow:1}.ts-form-field .ts-form-field__outline-gap{border:var(--formField-outline-width) solid currentColor;border-left-style:none;border-radius:.000001px;border-right-style:none}.ts-form-field .ts-form-field__outline--thick{color:var(--formField-outlineColor-default-hover);opacity:0}.ts-form-field .ts-form-field__outline--thick .ts-form-field__outline-end,.ts-form-field .ts-form-field__outline--thick .ts-form-field__outline-gap,.ts-form-field .ts-form-field__outline--thick .ts-form-field__outline-start{--formField-outline-width:var(--formField-outline-width-thick);transition:border-color .3s var(--swift-ease-out-timing-function)}.ts-form-field .ts-form-field__container{align-items:baseline;box-sizing:border-box;display:inline-flex;margin-top:calc(var(--formField-outline-labelOverlap) * -1);padding:0 var(--formField-outline-sidePadding);position:relative;width:100%}.ts-input .ts-form-field .ts-form-field__container,.ts-select--autocomplete .ts-form-field .ts-form-field__container{cursor:text}.ts-form-field .ts-form-field__infix{border-top:var(--formField-infix-marginTop) solid transparent;display:block;flex:auto;line-height:19px;min-width:0;padding:calc(var(--formField-infix-padding)/ 2) 0 var(--formField-infix-padding);position:relative}@media screen and (-ms-high-contrast:active){.ts-form-field .ts-form-field__infix{-o-border-image:linear-gradient(transparent,transparent);border-image:linear-gradient(transparent,transparent)}}.ts-form-field .ts-form-field__prefix,.ts-form-field .ts-form-field__suffix{flex:none;position:relative;top:var(--formField-outline-labelOverlap);white-space:nowrap}.ts-form-field .ts-form-field__prefix{margin-right:.2em}.ts-form-field .ts-form-field__label-wrapper .ts-icon,.ts-form-field .ts-form-field__subscript-wrapper .ts-icon{font-size:inherit;height:1em;vertical-align:baseline;width:1em}.ts-form-field .ts-form-field__label-wrapper{box-sizing:content-box;height:100%;left:0;padding-top:var(--formField-infix-marginTop);pointer-events:none;position:absolute;top:var(--formField-infix-marginTop-negative);width:100%}.ts-form-field .ts-form-field__subscript-wrapper{box-sizing:border-box;overflow:hidden;padding:0 var(--formField-outline-subscript-padding);position:absolute;width:100%}.ts-form-field .ts-form-field__hint-wrapper{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;color:#999;font-size:75%;font-weight:400;letter-spacing:.01em;line-height:1.5;display:flex}.ts-form-field .ts-form-field__label{font:inherit;left:0;margin-top:var(--formField-outline-labelOffset);overflow:hidden;pointer-events:none;position:absolute;text-overflow:ellipsis;top:calc(var(--formField-infix-marginTop) + var(--formField-infix-padding));transform-origin:0 0;transition:color var(--swift-ease-out-duration) var(--swift-ease-out-timing-function),transform var(--swift-ease-out-duration) var(--swift-ease-out-timing-function),width var(--swift-ease-out-duration) var(--swift-ease-out-timing-function);white-space:nowrap;width:100%}.ts-form-field .ts-form-field__label:not(.ts-form-field__label--empty){transition:none}.ts-form-field .ts-form-field--float .ts-form-field__label,.ts-form-field .ts-form-field__label.ts-form-field__label--empty{display:block}.ts-form-field .ts-form-field__wrapper{margin:var(--formField-outline-labelOverlap) 0;position:relative;text-align:left}.ts-form-field .ts-form-field__wrapper.ts-form-field--with-validation{padding-bottom:var(--formField-wrapper-paddingBottom)}.ts-input--datepicker{--date-picker-width:200px;width:var(--date-picker-width)}\"]\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        ChangeDetectorRef,\n        TsDocumentService,\n        NgZone])\n], TsFormFieldComponent);\n\n/**\n * The floating label for a {@link TsFormFieldComponent}\n */\n// eslint-disable-next-line @angular-eslint/directive-selector\nlet TsLabelDirective = class TsLabelDirective {\n};\nTsLabelDirective = __decorate([\n    Directive({ selector: 'ts-label' })\n], TsLabelDirective);\n\nlet TsFormFieldModule = class TsFormFieldModule {\n};\nTsFormFieldModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            TsValidationMessagesModule,\n        ],\n        declarations: [\n            TsCustomValidationDirective,\n            TsFormFieldComponent,\n            TsLabelDirective,\n            TsPrefixDirective,\n            TsSuffixDirective,\n        ],\n        exports: [\n            TsCustomValidationDirective,\n            TsFormFieldComponent,\n            TsLabelDirective,\n            TsPrefixDirective,\n            TsSuffixDirective,\n        ],\n    })\n], TsFormFieldModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsCustomValidationDirective, TsFormFieldComponent, TsFormFieldControl, TsFormFieldModule, TsLabelDirective, TsPrefixDirective, TsSuffixDirective };\n//# sourceMappingURL=terminus-ui-form-field.js.map\n","<div\n  class=\"ts-form-field__wrapper qa-form-field\"\n  [ngClass]=\"{'ts-form-field--with-validation': !noValidationOrHint}\"\n>\n  <div\n    class=\"ts-form-field__container qa-form-field-container\"\n    #containerElement\n    (click)=\"control.onContainerClick && control.onContainerClick($event)\"\n  >\n\n    <div class=\"ts-form-field__outline qa-form-field-outline\">\n      <div class=\"ts-form-field__outline-start js-outline-start\"></div>\n      <div class=\"ts-form-field__outline-gap js-outline-gap\"></div>\n      <div class=\"ts-form-field__outline-end\"></div>\n    </div>\n    <div class=\"ts-form-field__outline ts-form-field__outline--thick qa-form-field-outline\">\n      <div class=\"ts-form-field__outline-start js-outline-start\"></div>\n      <div class=\"ts-form-field__outline-gap  js-outline-gap\"></div>\n      <div class=\"ts-form-field__outline-end\"></div>\n    </div>\n\n    <div class=\"ts-form-field__prefix qa-form-field-prefix\" *ngIf=\"prefixChildren.length\">\n      <ng-content select=\"[tsPrefix]\"></ng-content>\n    </div>\n\n\n    <div class=\"ts-form-field__infix qa-form-field-control-container\">\n      <ng-content></ng-content>\n\n      <span class=\"ts-form-field__label-wrapper\">\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\n             read if it comes before the control in the DOM. -->\n        <label\n          class=\"ts-form-field__label qa-form-field-label\"\n          [attr.for]=\"id\"\n          [attr.aria-owns]=\"id\"\n          [class.ts-form-field__label--empty]=\"control.empty && !shouldAlwaysFloat\"\n          [class.ts-accent]=\"theme == 'accent'\"\n          [class.ts-warn]=\"theme == 'warn'\"\n          #labelElement\n        >\n          <ng-content select=\"ts-label\"></ng-content>\n\n          <span\n            class=\"ts-form-field-required-marker qa-form-field-required-marker\"\n            aria-hidden=\"true\"\n            *ngIf=\"!hideRequiredMarker && control.isRequired && !control.isDisabled\"\n          >*</span>\n        </label>\n      </span>\n    </div>\n\n    <div class=\"ts-form-field__suffix qa-form-field-suffix\" *ngIf=\"suffixChildren.length\">\n      <ng-content select=\"[tsSuffix]\"></ng-content>\n    </div>\n  </div>\n\n  <div\n    class=\"ts-form-field__subscript-wrapper\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"space-between center\"\n    [fxLayoutGap]=\"flexGap\"\n    *ngIf=\"!noValidationOrHint\"\n  >\n    <div *ngIf=\"control && (control.ngControl || control.formControl)\">\n      <div #validationWrapper>\n        <ng-content select=\".customMessageSelector\"></ng-content>\n      </div>\n\n      <ng-container *ngIf=\"!customValidationMessage\">\n        <ts-validation-messages\n          class=\"qa-form-field-validation-messages\"\n          [control]=\"control.ngControl || control.formControl\"\n          [validateOnChange]=\"validateOnChange\"\n        ></ts-validation-messages>\n      </ng-container>\n    </div>\n\n    <div *ngIf=\"hint\" class=\"ts-form-field__hint-wrapper\">\n      <div class=\"c-input__hint qa-form-field-hint\">\n        {{ hint }}\n      </div>\n    </div>\n  </div>\n</div>\n","import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { isDevMode, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MatIconRegistry, MatIconModule } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nconst CSV_ICON = `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <g transform=\"translate(4 2)\">\n        <path d=\"M10,0 L2,0 C0.9,0 0.01,0.9 0.01,2 L0,18 C0,19.1 0.89,20 1.99,20 L14,20 C15.1,20 16,19.1 16,18 L16,6 L10,0 Z M2,18 L2,2 L9,2\n        L9,7 L14,7 L14,18 L2,18 Z\"/>\n        <path d=\"M2.77543454,13.9332157 C2.77543454,13.3050802 2.94385695,12.8209674 3.28070682,12.480863 C3.57361975,12.1846955\n        3.9462645,12.0366139 4.39865225,12.0366139 C5.00400564,12.0366139 5.44662299,12.2351408 5.72651757,12.6322006 C5.8811105,12.8551399\n        5.96410125,13.0788894 5.97549231,13.303456 L5.22368621,13.303456 C5.17486739,13.1309629 5.11221751,13.0007813 5.03573469,12.9129074\n        C4.89904199,12.7566872 4.69644692,12.6785782 4.4279434,12.6785782 C4.154558,12.6785782 3.93894477,12.7888257 3.78109724,13.0093241\n        C3.62324972,13.2298224 3.54432714,13.5418514 3.54432714,13.9454203 C3.54432714,14.3489892 3.62772471,14.6512546\n        3.79452235,14.8522254 C3.96131999,15.0531962 4.17327187,15.1536801 4.43038433,15.1536801 C4.69400596,15.1536801\n        4.89497377,15.0674348 5.03329376,14.8949417 C5.10977658,14.8021859 5.1732401,14.6630543 5.22368621,14.4775428 L5.96816952,14.4775428\n        C5.90307776,14.8697207 5.73668944,15.1886655 5.46899957,15.4343869 C5.20130969,15.6801083 4.85836262,15.8029672\n        4.44014804,15.8029672 C3.92266853,15.8029672 3.51585112,15.6369857 3.2196836,15.3050177 C2.92351608,14.9714224 2.77543454,14.5141597\n        2.77543454,13.9332157 Z M7.31068041,14.5922665 C7.33346253,14.7566232 7.37821244,14.879482 7.4449315,14.9608467\n        C7.56697856,15.1089305 7.77608271,15.1829713 8.07225022,15.1829713 C8.24962528,15.1829713 8.39363864,15.163444 8.50429464,15.124389\n        C8.71421557,15.0495334 8.81917446,14.9104019 8.81917446,14.7069901 C8.81917446,14.5881977 8.76710183,14.4962569\n        8.66295501,14.4311652 C8.55880819,14.3677007 8.39526759,14.3115599 8.17232831,14.2627411 L7.7915434,14.1773086\n        C7.41726577,14.0926893 7.15852989,14.0007485 7.01532802,13.9014836 C6.7728612,13.7354996 6.65162961,13.4759501 6.65162961,13.1228273\n        C6.65162961,12.8006231 6.76879303,12.5329372 7.00312337,12.3197617 C7.23745372,12.1065862 7.58162125,12 8.03563629,12 C8.41479581,12\n        8.73821565,12.1004839 9.00590552,12.3014547 C9.2735954,12.5024255 9.4139474,12.7941136 9.42696576,13.1765277 L8.70445081,13.1765277\n        C8.69143245,12.9600976 8.59705081,12.8063206 8.42130305,12.7151922 C8.30413788,12.6549823 8.15849725,12.6248778\n        7.98437678,12.6248778 C7.79072879,12.6248778 7.63613817,12.6639323 7.5206003,12.7420424 C7.40506242,12.8201525 7.34729435,12.9291796\n        7.34729435,13.0691269 C7.34729435,13.1976831 7.40424878,13.293692 7.51815937,13.3571565 C7.5913876,13.3994661 7.74760549,13.4490978\n        7.98681771,13.5060531 L8.60681365,13.6549498 C8.87857176,13.7200415 9.08360773,13.8071005 9.22192773,13.9161292\n        C9.43673055,14.0853678 9.54413034,14.3302718 9.54413034,14.6508488 C9.54413034,14.9795622 9.41842376,15.2525367\n        9.16700683,15.4697804 C8.9155899,15.6870242 8.5604383,15.7956444 8.10154137,15.7956444 C7.63288068,15.7956444 7.26430411,15.6886514\n        6.99580059,15.4746623 C6.72729707,15.2606731 6.59304732,14.9665441 6.59304732,14.5922665 L7.31068041,14.5922665 Z\n        M12.2071838,12.1049599 L12.988281,12.1049599 L11.7604938,15.7028891 L11.0501835,15.7028891 L9.83460088,12.1049599\n        L10.6376665,12.1049599 L11.4187637,14.8363594 L12.2071838,12.1049599 Z\"/>\n      </g>\n  </svg>\n`;\n\nconst ENGAGE_ICON = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path fill-rule=\"evenodd\" d=\"M13.584689 4.2754491C13.5344498 4.17365269 13.4641148 4.10239521 13.3736842\n      4.04131737L7.01339713.0814371257C6.74210526-.0814371257 6.40047847.0203592814 6.24976077.315568862 6.19952153.407185629\n      6.17942584.508982036 6.17942584.620958084L6.17942584 1.91377246.733492823 1.91377246C.331578947 1.91377246 0 2.27005988 0 2.71796407L0\n      6.44371257C0 6.89161677.331578947 7.24790419.733492823 7.24790419L6.17942584 7.24790419 6.17942584 8.54071856C6.17942584 8.87664671\n      6.43062201 9.15149701 6.74210526 9.15149701 6.84258373 9.15149701 6.93301435 9.12095808 7.01339713 9.07005988L13.3736842\n      5.11017964C13.6449761 4.94730539 13.7354067 4.57065868 13.584689 4.2754491zM19.2464115 9.98502994L13.8205742 9.98502994 13.8205742\n      8.50898204C13.8205742 8.23413174 13.6196172 8 13.3583732 8 13.2779904 8 13.1976077 8.02035928 13.1272727 8.07125749L6.47559809\n      12.2245509C6.24449761 12.3263473 6.1138756 12.591018 6.21435407 12.8556886 6.2645933 12.9778443 6.35502392 13.0796407 6.47559809\n      13.1L13.1272727 17.2532934C13.3483254 17.3958084 13.6296651 17.3041916 13.7602871 17.0598802 13.8004785 16.9886228 13.8205742\n      16.897006 13.8205742 16.8053892L13.8205742 15.3191617 19.2464115 15.3191617C19.6583732 15.3191617 20 14.9526946 20 14.4946108L20\n      10.8095808C20 10.351497 19.6583732 9.98502994 19.2464115 9.98502994z\" transform=\"translate(2 3)\"/>\n    </svg>\n`;\n\nconst LIGHTBULB_ICON = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <g>\n            <path d=\"M9,21 C9,21.55 9.44999995,22 10,22 L14,22 C14.5500001,22 15,21.55 15,21 L15,20 L9,20 L9,21 Z M12,2 C8.13999999,2 5,5.14\n            5,9 C5,11.38 6.19,13.47 7.99999999,14.74 L7.99999999,17 C7.99999999,17.55 8.45000003,18 9.00000001,18 L15,18 C15.55,18 16,17.55\n            16,17 L16,14.74 C17.81,13.47 19,11.38 19,9 C19,5.14 15.86,2 12,2 Z M14.85,13.1 L13.9999999,13.7 L13.9999999,16 L10.0000001,16\n            L10.0000001,13.7 L9.15000005,13.1 C7.80000003,12.16 7,10.63 7,9 C7,6.24 9.23999998,4 12,4 C14.76,4 17,6.24 17,9 C17,10.63\n            16.2,12.16 14.85,13.1 Z\"/>\n        </g>\n    </svg>\n`;\n\nconst LOGO_ICON = `\n  <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M12.5094828,12.1879106 L15.8689156,11.0607065 C16.0108355,11.0099402 16.1612661,11.112335 16.1612661,11.2597834\n    L16.1612661,20.787989 C16.1612661,20.9050424 16.0638896,21 15.9438546,21 L12.5844218,21 C12.4643868,21 12.3670104,20.9050424\n    12.3670104,20.787989 L12.3670104,12.3868797 C12.3670104,12.297958 12.4238225,12.2185213 12.5094828,12.1879106 Z M5.00011053,14.848341\n    L5.00011053,20.7878813 C5.00011053,20.9049346 5.09748699,20.9998922 5.217522,20.9998922 L8.5444591,20.9998922 C8.66449411,20.9998922\n    8.76187057,20.9049346 8.76187057,20.7878813 L8.76187057,13.7516396 C8.76187057,13.6079637 8.61829279,13.5058923 8.47803089,13.5497604\n    L5.15109379,14.6465695 C5.0611228,14.6745933 5.00011053,14.7561857 5.00011053,14.848341 Z M16.0412311,3.25876793 L16.3248497,4.59658186\n    L5.13871449,8.37031222 C5.05504368,8.40200069 5,8.48046737 5,8.56798791 L5,11.4070162 C5,11.5532789 5.14833055,11.6556737\n    5.28980828,11.6069553 L17.1097195,7.63199241 L17.36659,8.72524464 C17.4056069,8.89112408 17.6189287,8.94684837 17.7377479,8.82225016\n    L21.9416259,4.41281028 C22.0573502,4.2914456 21.9919168,4.09333877 21.8253489,4.06057246 L16.2962226,3.00429011 C16.1418129,2.97400283\n    16.0066353,3.1088405 16.0412311,3.25876793 Z\"/>\n  </svg>\n`;\n\nconst LOGO_COLOR_ICON = `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n    <defs>\n      <radialGradient id=\"terminus-mark-icon-gradient-a\" cx=\"44.984%\" cy=\"44.749%\" r=\"79.61%\" fx=\"44.984%\" fy=\"44.749%\"\n      gradientTransform=\"matrix(.77654 .59506 -.63007 .7334 .382 -.149)\">\n        <stop offset=\"0%\" stop-color=\"#0098CE\"/>\n        <stop offset=\"28.89%\" stop-color=\"#0072C6\"/>\n        <stop offset=\"57.81%\" stop-color=\"#0065AC\"/>\n        <stop offset=\"100%\" stop-color=\"#00538A\"/>\n      </radialGradient>\n    </defs>\n    <g fill=\"none\" fill-rule=\"evenodd\">\n      <polygon points=\"0 0 24 0 24 24 0 24\"/>\n      <path fill=\"url(#terminus-mark-icon-gradient-a)\" fill-rule=\"nonzero\" d=\"M12.5094828,12.1879106 L15.8689156,11.0607065\n      C16.0108355,11.0099402 16.1612661,11.112335 16.1612661,11.2597834 L16.1612661,20.787989 C16.1612661,20.9050424 16.0638896,21\n      15.9438546,21 L12.5844218,21 C12.4643868,21 12.3670104,20.9050424 12.3670104,20.787989 L12.3670104,12.3868797 C12.3670104,12.297958\n      12.4238225,12.2185213 12.5094828,12.1879106 Z M5.00011053,14.848341 L5.00011053,20.7878813 C5.00011053,20.9049346\n      5.09748699,20.9998922 5.217522,20.9998922 L8.5444591,20.9998922 C8.66449411,20.9998922 8.76187057,20.9049346 8.76187057,20.7878813\n      L8.76187057,13.7516396 C8.76187057,13.6079637 8.61829279,13.5058923 8.47803089,13.5497604 L5.15109379,14.6465695 C5.0611228,14.6745933\n      5.00011053,14.7561857 5.00011053,14.848341 Z M16.0412311,3.25876793 L16.3248497,4.59658186 L5.13871449,8.37031222\n      C5.05504368,8.40200069 5,8.48046737 5,8.56798791 L5,11.4070162 C5,11.5532789 5.14833055,11.6556737 5.28980828,11.6069553\n      L17.1097195,7.63199241 L17.36659,8.72524464 C17.4056069,8.89112408 17.6189287,8.94684837 17.7377479,8.82225016 L21.9416259,4.41281028\n      C22.0573502,4.2914456 21.9919168,4.09333877 21.8253489,4.06057246 L16.2962226,3.00429011 C16.1418129,2.97400283 16.0066353,3.1088405\n      16.0412311,3.25876793 Z\"/>\n    </g>\n  </svg>\n`;\n\nconst TABLE_LARGE_PLUS = `\n  <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"m12.35 20h-2.35v-3h2.09c.12-.72.37-1.39.72-2h-2.81v-3h4v1.54c.58-.54 1.25-.93 2-1.19v-.35h4v.35c.75.26 1.42.65 2\n    1.19v-8.54c0-1.1-.9-2-2-2h-16c-1.1 0-2 .9-2 2v15c0 1.1.9 2 2 2h9.54c-.54-.58-.93-1.25-1.19-2m3.65-13h4v3h-4zm-6 0h4v3h-4zm-2\n    13h-4v-3h4zm0-5h-4v-3h4zm0-5h-4v-3h4zm9 4h2v3h3v2h-3v3h-2v-3h-3v-2h3z\"/>\n  </svg>\n`;\n\n/**\n * An array of supported custom icons.\n */\nconst TS_CUSTOM_ICONS = [\n    'csv',\n    'engage',\n    'lightbulb',\n    'logo',\n    'logo_color',\n    'table_large_plus',\n];\n/**\n * This is the icon UI Component\n *\n * #### QA CSS CLASSES\n * - `qa-icon`: Placed on the primary container\n *\n * @example\n * <ts-icon>home</ts-icon>\n * <ts-icon theme=\"warn\">help</ts-icon>\n * <ts-icon svgIcon=\"left-arrow\"></ts-icon>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/icon</example-url>\n */\nlet TsIconComponent = class TsIconComponent {\n    constructor(matIconRegistry, domSanitizer) {\n        this.matIconRegistry = matIconRegistry;\n        this.domSanitizer = domSanitizer;\n        /**\n         * Define if the icon should have a colored background.\n         *\n         * NOTE: This will affect layout and style.\n         */\n        this.background = false;\n        /**\n         * Define if the icon should be aligned inline with text\n         */\n        this.inline = false;\n        this.matIconRegistry.addSvgIconLiteral('csv', this.domSanitizer.bypassSecurityTrustHtml(CSV_ICON));\n        this.matIconRegistry.addSvgIconLiteral('engage', this.domSanitizer.bypassSecurityTrustHtml(ENGAGE_ICON));\n        this.matIconRegistry.addSvgIconLiteral('lightbulb', this.domSanitizer.bypassSecurityTrustHtml(LIGHTBULB_ICON));\n        this.matIconRegistry.addSvgIconLiteral('logo', this.domSanitizer.bypassSecurityTrustHtml(LOGO_ICON));\n        this.matIconRegistry.addSvgIconLiteral('logo_color', this.domSanitizer.bypassSecurityTrustHtml(LOGO_COLOR_ICON));\n        this.matIconRegistry.addSvgIconLiteral('table_large_plus', this.domSanitizer.bypassSecurityTrustHtml(TABLE_LARGE_PLUS));\n    }\n    /**\n     * Name of the custom icon\n     *\n     * @param value\n     */\n    set svgIcon(value) {\n        // If an unsupported value is passed in\n        if (value && TS_CUSTOM_ICONS.indexOf(value) < 0 && isDevMode()) {\n            // eslint-disable-next-line no-console\n            console.warn(`TsIconComponent: \"${value}\" is not a supported custom icon. `\n                + `See TS_CUSTOM_ICON for available options.`);\n            return;\n        }\n        this._svgIcon = value;\n    }\n    get svgIcon() {\n        return this._svgIcon;\n    }\n};\nTsIconComponent.ctorParameters = () => [\n    { type: MatIconRegistry },\n    { type: DomSanitizer }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsIconComponent.prototype, \"background\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsIconComponent.prototype, \"inline\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsIconComponent.prototype, \"svgIcon\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsIconComponent.prototype, \"theme\", void 0);\nTsIconComponent = __decorate([\n    Component({\n        selector: 'ts-icon',\n        template: \"<mat-icon\\n  class=\\\"c-icon qa-icon\\\"\\n  [ngClass]=\\\"{'c-icon--inline': inline}\\\"\\n  *ngIf=\\\"!svgIcon\\\"\\n>\\n  <ng-template *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-template>\\n</mat-icon>\\n\\n\\n<mat-icon\\n  class=\\\"c-icon qa-icon\\\"\\n  [ngClass]=\\\"{'c-icon--inline': inline}\\\"\\n  *ngIf=\\\"svgIcon\\\"\\n  [svgIcon]=\\\"svgIcon\\\"\\n>\\n  <ng-template *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-template>\\n</mat-icon>\\n\\n\\n<ng-template #contentTemplate>\\n  <ng-content></ng-content>\\n</ng-template>\\n\",\n        host: {\n            'class': 'ts-icon',\n            '[class.ts-icon--inline]': 'inline',\n            '[class.ts-icon--primary]': 'theme === \"primary\"',\n            '[class.ts-icon--accent]': 'theme === \"accent\"',\n            '[class.ts-icon--warn]': 'theme === \"warn\"',\n            '[class.ts-icon--background]': 'background',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsIcon',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-icon{display:inline-block}.ts-icon :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-icon h1,.ts-icon h2,.ts-icon h3,.ts-icon h4,.ts-icon h5,.ts-icon p{margin:unset}.ts-icon.ts-icon--inline{margin-left:calc(-4px - 2px);margin-right:calc(-4px - 2px);transform:scale(.666)}.ts-icon.ts-icon--primary{color:#00538a}.ts-icon.ts-icon--primary.ts-icon--background{background-color:#00538a;color:#fafafa}.ts-icon.ts-icon--accent{color:#2f854d}.ts-icon.ts-icon--accent.ts-icon--background{background-color:#2f854d;color:#fafafa}.ts-icon.ts-icon--warn{color:#c8604d}.ts-icon.ts-icon--warn.ts-icon--background{background-color:#c8604d;color:#fafafa}.ts-icon.ts-icon--background{border-radius:50%;height:48px;position:relative;width:48px}.ts-icon.ts-icon--background .c-icon{left:50%;position:absolute;top:50%;transform:translate3d(-50%,-50%,0)}.c-icon.c-icon--inline{margin-bottom:-1px;vertical-align:bottom}.mat-chip .c-icon.mat-icon{font-size:18px;height:1em;vertical-align:bottom;width:1em}.mat-form-field-prefix .c-icon,.mat-form-field-suffix .c-icon{margin-right:.2em;position:relative;top:-.06em}.mat-form-field-disabled .c-icon{opacity:.4}.c-file-upload .c-icon{vertical-align:bottom}\"]\n    }),\n    __metadata(\"design:paramtypes\", [MatIconRegistry,\n        DomSanitizer])\n], TsIconComponent);\n\nlet TsIconModule = class TsIconModule {\n};\nTsIconModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            MatIconModule,\n        ],\n        declarations: [TsIconComponent],\n        exports: [TsIconComponent],\n    })\n], TsIconModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TS_CUSTOM_ICONS, TsIconComponent, TsIconModule };\n//# sourceMappingURL=terminus-ui-icon.js.map\n","<mat-icon\n  class=\"c-icon qa-icon\"\n  [ngClass]=\"{'c-icon--inline': inline}\"\n  *ngIf=\"!svgIcon\"\n>\n  <ng-template *ngTemplateOutlet=\"contentTemplate\"></ng-template>\n</mat-icon>\n\n\n<mat-icon\n  class=\"c-icon qa-icon\"\n  [ngClass]=\"{'c-icon--inline': inline}\"\n  *ngIf=\"svgIcon\"\n  [svgIcon]=\"svgIcon\"\n>\n  <ng-template *ngTemplateOutlet=\"contentTemplate\"></ng-template>\n</mat-icon>\n\n\n<ng-template #contentTemplate>\n  <ng-content></ng-content>\n</ng-template>\n","import { __decorate, __metadata, __param } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { Injectable, InjectionToken, EventEmitter, isDevMode, ElementRef, Renderer2, ChangeDetectorRef, NgZone, Optional, Self, Inject, ViewChild, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormControl, NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NativeDateAdapter, DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE, NativeDateModule } from '@angular/material/core';\nimport { MatDatepicker, MatDatepickerModule } from '@angular/material/datepicker';\nimport { TsFormFieldControl, TsFormFieldModule } from '@terminus/ui-form-field';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { TsDatePipe } from '@terminus/ui-pipes';\nimport { TsValidationMessagesModule } from '@terminus/ui-validation-messages';\nimport { TsValidatorsService } from '@terminus/ui-validators';\nimport { isDateValue, coerceNumberProperty } from '@terminus/ngx-tools/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { AutofillMonitor } from '@angular/cdk/text-field';\nimport { Subject } from 'rxjs';\nimport createAutoCorrectedDatePipe from 'text-mask-addons/dist/createAutoCorrectedDatePipe';\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask';\nimport { createTextMaskInputElement } from 'text-mask-core/dist/textMaskCore';\nimport { TsDocumentService } from '@terminus/ngx-tools/browser';\nimport { isNumber, isFunction, isValidDate } from '@terminus/ngx-tools/type-guards';\nimport { noop, hasRequiredControl, inputHasChanged } from '@terminus/ngx-tools/utilities';\nimport { TS_SPACING } from '@terminus/ui-spacing';\n\n/**\n * Define date formats to be used with the custom date adapter\n */\nconst TS_DATE_FORMATS = {\n    parse: {\n        dateInput: {\n            month: 'short',\n            year: 'numeric',\n            day: 'numeric',\n        },\n    },\n    display: {\n        dateInput: 'input',\n        monthYearLabel: {\n            year: 'numeric',\n            month: 'short',\n        },\n        dateA11yLabel: {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n        },\n        monthYearA11yLabel: {\n            year: 'numeric',\n            month: 'long',\n        },\n    },\n};\n/**\n * Custom date adapter for the underlying Material Datepicker\n */\nlet TsDateAdapter = class TsDateAdapter extends NativeDateAdapter {\n    /**\n     * Format the date when setting the UI\n     *\n     * @param date - The date chosen\n     * @param displayFormat - The desired format (not currently using, but must match API)\n     * @returns The date string\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    format(date, displayFormat) {\n        const day = this.forceTwoDigits(date.getDate());\n        const month = this.forceTwoDigits(date.getMonth() + 1);\n        const year = date.getFullYear();\n        return `${month}-${day}-${year}`;\n    }\n    /**\n     * Check if a date is valid\n     *\n     * @param date - The date in question\n     * @returns Whether it is valid\n     */\n    isValid(date) {\n        return isDateValue(date);\n    }\n    /**\n     * Force a two digit string with a preceding `0` if needed\n     *\n     * @param n - The number\n     * @returns The two digit number\n     */\n    forceTwoDigits(n) {\n        const digitsToRemove = -2;\n        return (`00${n.toString()}`).slice(digitsToRemove);\n    }\n};\nTsDateAdapter = __decorate([\n    Injectable()\n], TsDateAdapter);\n\n/**\n * This token is used to inject the object whose value should be set into {@link TsInputComponent}. If none is\n * provided, the native `HTMLInputElement` is used. Directives like {@link TsAutocompleteTriggerDirective} can provide\n * themselves for this token, in order to make `TsInputComponent` delegate the getting and setting of the\n * value to them.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst TS_INPUT_VALUE_ACCESSOR = new InjectionToken('TS_INPUT_VALUE_ACCESSOR');\n\nvar TsInputComponent_1;\n/**\n * Create an array used to verify the passed in shortcut is valid. Used by {@link TsInputComponent}\n */\nconst allowedMaskShortcuts = [\n    'currency',\n    'date',\n    'number',\n    'percentage',\n    'phone',\n    'postal',\n    'default',\n];\n// Unique ID for each instance\nlet nextUniqueId = 0;\nconst AUTOCOMPLETE_DEFAULT = 'on';\nconst NUMBER_ONLY_REGEX = /[^0-9]/g;\nconst NUMBER_WITH_DECIMAL_REGEX = /[^0-9.]/g;\nconst DEFAULT_TEXTAREA_ROWS = 4;\nconst DEFAULT_DATE_LOCALE = 'en-US';\nconst ɵ0 = TS_DATE_FORMATS;\n/**\n * A presentational component to render a text input\n *\n * @example\n * <ts-input\n *              [autocapitalize]=\"false\"\n *              autocomplete=\"email\"\n *              [dateFilter]=\"myFilterFunction\"\n *              dateLocale=\"en-US\"\n *              [datepicker]=\"true\"\n *              [formControl]=\"myForm.get('myControl')\"\n *              [hasExternalFormField]=\"true\"\n *              [hideRequiredMarker]=\"false\"\n *              hint=\"My hint!\"\n *              id=\"my-id\"\n *              [isClearable]=\"true\"\n *              [isDisabled]=\"false\"\n *              [isFocused]=\"false\"\n *              [isRequired]=\"false\"\n *              label=\"My Label Text\"\n *              mask=\"phone\"\n *              [maskAllowDecimal]=\"true\"\n *              [maskSanitizeValue]=\"true\"\n *              maxDate=\"{{ new Date(1990, 1, 1) }}\"\n *              minDate=\"{{ new Date(1990, 1, 1) }}\"\n *              name=\"password\"\n *              [(ngModel]=\"myModel\"\n *              openTo=\"{{ new Date(1990, 1, 1) }}\"\n *              prefixIcon=\"icon_name\"\n *              [readOnly]=\"false\"\n *              [spellcheck]=\"false\"\n *              startingView=\"year\"\n *              tabIndex=\"2\"\n *              theme=\"primary\"\n *              type=\"text\"\n *              [validateOnChange]=\"false\"\n *              (cleared)=\"userClearedInput($event)\"\n *              (inputBlur)=\"userLeftInput($event)\"\n *              (inputFocus)=\"userFocusedInput($event)\"\n *              (selected)=\"userSelectedFromCalendar($event)\"\n * ></ts-input>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/input</example-url>\n */\nlet TsInputComponent = TsInputComponent_1 = \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass TsInputComponent {\n    constructor(elementRef, renderer, changeDetectorRef, autofillMonitor, platform, ngZone, documentService, datePipe, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    inputValueAccessor, dateAdapter, ngControl) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.changeDetectorRef = changeDetectorRef;\n        this.autofillMonitor = autofillMonitor;\n        this.platform = platform;\n        this.ngZone = ngZone;\n        this.documentService = documentService;\n        this.datePipe = datePipe;\n        this.dateAdapter = dateAdapter;\n        this.ngControl = ngControl;\n        /**\n         * Emits when the value changes (either due to user input or programmatic change). Need for Material Datepicker.\n         *\n         * NOTE: Underscore naming convention needed since that is what the Material datepicker will subscribe to.\n         */\n        this._valueChange = new EventEmitter();\n        /**\n         * Define if the input has been autofilled\n         */\n        this.autofilled = false;\n        /**\n         * Define the default format for the date mask\n         */\n        this.defaultDateFormat = 'mm-dd-yyyy';\n        /**\n         * Define the flex layout gap\n         */\n        this.flexGap = TS_SPACING.small[0];\n        /**\n         * Define whether the input has focus\n         *\n         * Implemented as part of {@link TsFormFieldControl}\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of TsFormFieldControl.\n         */\n        this.labelChanges = new Subject();\n        /**\n         * Define placeholder for callback (provided later by the control value accessor)\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.onChangeCallback = noop;\n        /**\n         * Define placeholder for callback (provided later by the control value accessor)\n         */\n        this.onTouchedCallback = noop;\n        /**\n         * Reference to itself. Passed to {@link TsFormFieldComponent}.\n         */\n        this.selfReference = this;\n        /**\n         * Implemented as part of TsFormFieldControl.\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Base settings for the mask\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.textMaskConfig = {\n            mask: null,\n            guide: false,\n            keepCharPositions: false,\n        };\n        /*\n         * The textual value of the date entered into the input.\n         */\n        this.textualDateValue = '';\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-input-${nextUniqueId++}`;\n        /**\n         * Define if the input should autocapitalize\n         * (standard HTML5 property)\n         */\n        this.autocapitalize = false;\n        this._autocomplete = 'on';\n        this._dateLocale = DEFAULT_DATE_LOCALE;\n        this._datepicker = false;\n        this._formControl = new FormControl();\n        /**\n         * Define if the use-case provides it's own {@link TsFormFieldComponent} or if this component should provide it's own.\n         */\n        this.hasExternalFormField = false;\n        /**\n         * Define if a required marker should be included\n         */\n        this.hideRequiredMarker = false;\n        this._id = this.uid;\n        /**\n         * Define if the input should surface the ability to clear it's value\n         */\n        this.isClearable = false;\n        /**\n         * Define if the input should be disabled\n         *\n         * Implemented as part of {@link TsFormFieldControl}\n         */\n        this.isDisabled = false;\n        this._isFocused = false;\n        this._isRequired = false;\n        /**\n         * Define if the input should be a textarea\n         *\n         * NOTE: This is not meant to be used with the datepicker or mask enabled.\n         */\n        this.isTextarea = false;\n        this._maskAllowDecimal = true;\n        /**\n         * Define if the value should be sanitized before it is saved to the model\n         */\n        this.maskSanitizeValue = true;\n        /**\n         * Define whether formControl needs a validation or a hint\n         */\n        this.noValidationOrHint = false;\n        /**\n         * Define if the input is readOnly\n         */\n        this.readOnly = false;\n        /**\n         * Define if the input should spellcheck\n         * (standard HTML5 property)\n         */\n        this.spellcheck = true;\n        this._startingView = 'month';\n        this._tabIndex = 0;\n        this._textareaRows = DEFAULT_TEXTAREA_ROWS;\n        /**\n         * Define the component theme\n         */\n        this.theme = 'primary';\n        this._type = 'text';\n        /**\n         * Define if validation messages should be shown immediately or on blur\n         */\n        this.validateOnChange = false;\n        /**\n         * The event to emit when the input value is cleared\n         */\n        this.cleared = new EventEmitter();\n        /**\n         * Define an event when the input receives a blur event\n         */\n        this.inputBlur = new EventEmitter();\n        /**\n         * The event to emit when the input element receives a focus event\n         */\n        this.inputFocus = new EventEmitter();\n        /**\n         * The event to emit when the input element receives a paste event\n         */\n        this.inputPaste = new EventEmitter();\n        /**\n         * Define an event emitter to alert consumers that a date was selected\n         */\n        this.selected = new EventEmitter();\n        /**\n         * Update the inner value when the formControl value is updated\n         *\n         * @param value - The value to set\n         */\n        this.updateInnerValue = (value) => {\n            this.value = value;\n            // eslint-disable-next-line dot-notation\n            if (!this.changeDetectorRef['destroyed']) {\n                this.changeDetectorRef.detectChanges();\n            }\n        };\n        this.document = this.documentService.document;\n        // If no inputValueAccessor was passed in, default to a basic object with a value.\n        this.inputValueAccessor = inputValueAccessor || { value: undefined };\n        // If no value accessor was passed in, use this component for the ngControl ValueAccessor\n        // istanbul ignore else\n        if (!inputValueAccessor) {\n            // Setting the value accessor directly (instead of using the providers) to avoid running into a circular import.\n            // istanbul ignore else\n            if (this.ngControl != null) {\n                this.ngControl.valueAccessor = this;\n            }\n        }\n        // Store any existing value\n        this.previousNativeValue = this.value;\n    }\n    /**\n     * Determine if the input is empty\n     *\n     *   1. Input exists\n     *   2. Input has no value\n     *   3. Native input validation is valid\n     *   4. Input is not filled by browser\n     *\n     * Implemented as part of {@link TsFormFieldControl}.\n     */\n    get empty() {\n        // Since we are using ViewChild, we need to verify the existence of the element\n        const input = this.inputElement && this.inputElement.nativeElement;\n        if (!input) {\n            return true;\n        }\n        return !!input && !input.value && !this.isBadInput() && !this.autofilled;\n    }\n    /**\n     * Getter returning a boolean based on both the component `isDisabled` flag and the FormControl's disabled status\n     */\n    get shouldBeDisabled() {\n        return this.formControl.disabled || this.isDisabled;\n    }\n    /**\n     * Determine if the label should float\n     */\n    get shouldLabelFloat() {\n        return this.focused || !this.empty;\n    }\n    /**\n     * Set the accessor and call the onchange callback\n     *\n     * @param v\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    set value(v) {\n        const oldDate = this.value;\n        // istanbul ignore else\n        if (v !== this.value) {\n            const sanitizedValue = this.maskSanitizeValue && this.currentMask ? this.cleanValue(v, this.currentMask.unmaskRegex) : v;\n            this.inputValueAccessor.value = v;\n            this.onChangeCallback(sanitizedValue);\n            this.stateChanges.next();\n        }\n        // istanbul ignore else\n        if (this.datepicker) {\n            // istanbul ignore else\n            if (!this.dateAdapter.sameDate(oldDate, v)) {\n                this._valueChange.emit(v);\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get value() {\n        return this.inputValueAccessor.value;\n    }\n    /**\n     * Define if the input should autocomplete. See {@link TsInputAutocompleteTypes}.\n     *\n     * @param value\n     */\n    set autocomplete(value) {\n        if (value) {\n            this._autocomplete = value;\n        }\n        else {\n            this._autocomplete = 'on';\n        }\n    }\n    get autocomplete() {\n        return this._autocomplete;\n    }\n    /**\n     * Define a date filter to disallow certain dates for the datepicker\n     *\n     * @param value\n     */\n    set dateFilter(value) {\n        this._dateFilter = value;\n    }\n    get dateFilter() {\n        return this._dateFilter;\n    }\n    /**\n     * Allow the date locale to be changed\n     *\n     * @param value\n     */\n    set dateLocale(value) {\n        this._dateLocale = value ? value : DEFAULT_DATE_LOCALE;\n        this.setDateLocale(this.dateLocale);\n    }\n    get dateLocale() {\n        return this._dateLocale;\n    }\n    /**\n     * Define if the datepicker should be enabled\n     *\n     * @param value\n     */\n    set datepicker(value) {\n        this._datepicker = value;\n        // When using a datepicker, we need to validate on change so that selecting a date from the calendar\n        // istanbul ignore else\n        if (this.datepicker) {\n            this.validateOnChange = true;\n        }\n    }\n    get datepicker() {\n        return this._datepicker;\n    }\n    /**\n     * Define the form control to get access to validators\n     *\n     * @param value\n     */\n    set formControl(value) {\n        // istanbul ignore else\n        if (value) {\n            this._formControl = value;\n            // Register the onChange for the new control\n            this.registerOnChangeFn(this.updateInnerValue);\n            // Seed any existing value from the FormControl into the component\n            // HACK: This is to get around ExpressionChangedAfterChecked error.\n            Promise.resolve(null).then(() => {\n                this.inputValueAccessor.value = this._formControl.value;\n            });\n            // HACK: This is to get disabled field set properly on both datepicker and input level\n            // eslint-disable-next-line dot-notation\n            if (!this.changeDetectorRef['destroyed']) {\n                this.changeDetectorRef.detectChanges();\n            }\n        }\n    }\n    get formControl() {\n        return this._formControl;\n    }\n    /**\n     * Define a hint for the input\n     *\n     * @param value\n     */\n    set hint(value) {\n        this._hint = value;\n    }\n    get hint() {\n        return this._hint;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Define if the input should be focused\n     *\n     * @param value\n     */\n    set isFocused(value) {\n        this._isFocused = value;\n        if (this._isFocused) {\n            this.focus();\n        }\n    }\n    get isFocused() {\n        return this._isFocused;\n    }\n    /**\n     * Define if the input is required\n     *\n     * Implemented as part of {@link TsFormFieldControl}\n     *\n     * @param value\n     */\n    set isRequired(value) {\n        this._isRequired = value;\n    }\n    get isRequired() {\n        const requiredFormControl = (this.formControl && hasRequiredControl(this.formControl));\n        return this._isRequired || requiredFormControl;\n    }\n    /**\n     * Define the label\n     *\n     * @param value\n     */\n    set label(value) {\n        this._label = value;\n    }\n    get label() {\n        return this._label;\n    }\n    /**\n     * Define a mask\n     *\n     * param value - A {@link TsMaskShortcutOptions}\n     *\n     * @param value\n     */\n    set mask(value) {\n        // Verify value is allowed\n        // istanbul ignore else\n        if (value && isDevMode() && (allowedMaskShortcuts.indexOf(value) < 0)) {\n            // eslint-disable-next-line no-console\n            console.warn(`TsInputComponent: \"${value}\" is not an allowed mask. `\n                + 'Allowed masks are defined by \"TsMaskShortcutOptions\".');\n            // Fallback to the default mask (which will allow all characters)\n            value = 'default';\n        }\n        this._mask = value;\n        // Update the current mask definition\n        this.setMaskDefinition(value);\n    }\n    get mask() {\n        return this._mask;\n    }\n    /**\n     * Define if decimals are allowed in numbers/currency/percentage masks\n     *\n     * @param value\n     */\n    set maskAllowDecimal(value) {\n        const oldValue = this.maskAllowDecimal;\n        this._maskAllowDecimal = value;\n        // Re-set the definition if the value was changed\n        if (this.mask && this.maskAllowDecimal !== oldValue) {\n            this.setMaskDefinition(this.mask);\n        }\n    }\n    get maskAllowDecimal() {\n        return this._maskAllowDecimal;\n    }\n    /**\n     * Define the maximum date for the datepicker\n     *\n     * @param value\n     */\n    set maxDate(value) {\n        this._maxDate = (value) ? this.verifyIsDateObject(value) : undefined;\n    }\n    get maxDate() {\n        return this._maxDate;\n    }\n    /**\n     * Define the minimum date for the datepicker\n     *\n     * @param value\n     */\n    set minDate(value) {\n        this._minDate = (value) ? this.verifyIsDateObject(value) : undefined;\n    }\n    get minDate() {\n        return this._minDate;\n    }\n    /**\n     * Define a date that the calendar should open to for the datepicker\n     *\n     * @param value\n     */\n    set openTo(value) {\n        // istanbul ignore else\n        if ((value instanceof Date) || value === undefined) {\n            this._openTo = value;\n        }\n    }\n    get openTo() {\n        return this._openTo;\n    }\n    /**\n     * Define the starting calendar view for the datepicker\n     *\n     * @param value\n     */\n    set startingView(value) {\n        if (value === 'month' || value === 'year') {\n            this._startingView = value;\n        }\n        else {\n            this._startingView = 'month';\n        }\n    }\n    get startingView() {\n        return this._startingView;\n    }\n    /**\n     * Define the tabindex for the input\n     *\n     * @param value\n     */\n    set tabIndex(value) {\n        this._tabIndex = coerceNumberProperty(value);\n    }\n    get tabIndex() {\n        return this._tabIndex;\n    }\n    /**\n     * Define the number of rows for a textarea\n     *\n     * NOTE: Since the 'rows' attribute of a textarea is stored as a string, we should accept both string and number.\n     *\n     * @param value\n     */\n    set textareaRows(value) {\n        this._textareaRows = isNumber(value) ? Number(value) : DEFAULT_TEXTAREA_ROWS;\n    }\n    get textareaRows() {\n        return this._textareaRows;\n    }\n    /**\n     * Define the input type (text, password etc.) See {@link TsInputTypes}\n     *\n     * @param value\n     */\n    set type(value) {\n        if (!value) {\n            value = 'text';\n        }\n        // istanbul ignore else\n        if (this.mask && (value === 'email' || value === 'number')) {\n            // eslint-disable-next-line no-console\n            console.warn(`TsInputComponent: \"${value}\" is not an allowed type when used with a mask. `\n                + 'When using a mask, the input type must be \"text\", \"tel\", \"url\", \"password\" or \"search\".');\n            value = 'text';\n        }\n        this._type = value;\n        // Update the autocomplete setting if needed\n        if (value === 'email') {\n            this.autocomplete = 'email';\n        }\n        else if (this.autocomplete === 'email') {\n            this.autocomplete = AUTOCOMPLETE_DEFAULT;\n        }\n    }\n    get type() {\n        return this._type;\n    }\n    /**\n     * After the view is initialized, trigger any needed animations\n     */\n    ngAfterViewInit() {\n        this.setDateLocale(this.dateLocale);\n        // Begin monitoring for the input autofill\n        this.autofillMonitor.monitor(this.inputElement.nativeElement).subscribe(event => {\n            this.autofilled = event.isAutofilled;\n            this.stateChanges.next();\n        });\n        // istanbul ignore else\n        if (this.mask) {\n            this.setUpMask();\n        }\n        // Register this component as the associated input for the Material datepicker\n        // istanbul ignore else\n        // NOTE: Dangle naming controlled by Material\n        /* eslint-disable no-underscore-dangle */\n        if (this.picker && !this.picker._datepickerInput) {\n            // NOTE: Dangle naming controlled by Material\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.picker._registerInput(this);\n        }\n        /* eslint-enable no-underscore-dangle */\n    }\n    /**\n     * HACK: Without this hack, seeded values are not initially seen so the label overlaps the content.\n     *\n     * The issue seems to be that the elementRef.nativeElement isn't updated with the new value immediately. When manually inspecting the\n     * nativeElement, the value does exist. But when the `empty` getter defines it's elementRef instance, the value is not yet set.\n     *\n     * Material doesn't seem to have this issue. The only real difference is that they are implementing the ControlValueAccessor in the input\n     * where we are extending another class.\n     *\n     * So currently, we just check to see if the value has changed, then trigger a fake input event since the CVA for ngModel listens for the\n     * input event.\n     */\n    ngAfterContentInit() {\n        // HACK: See above.\n        // istanbul ignore else\n        if (this.value !== this.lastValue) {\n            const event = this.document.createEvent('Event');\n            event.initEvent('input', true, true);\n            setTimeout(() => {\n                this.inputElement.nativeElement.dispatchEvent(event);\n            });\n        }\n        // istanbul ignore else\n        if (this.platform.IOS) {\n            this.fixIOSCaretBug();\n        }\n    }\n    ngDoCheck() {\n        // We need to dirty-check the native element's value, because there are some cases where we won't be notified when it changes (e.g. the\n        // consumer isn't using forms or they're updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n    /**\n     * Trigger needed changes when specific inputs change\n     *\n     * @param changes - The changes\n     */\n    ngOnChanges(changes) {\n        const validMaskChange = !!(inputHasChanged(changes, 'mask') && this.mask);\n        const validSanitizeChange = !!(inputHasChanged(changes, 'maskSanitizeValue'));\n        const validDecimalChange = !!(inputHasChanged(changes, 'maskAllowDecimal'));\n        const validLabelChange = !!(inputHasChanged(changes, 'label'));\n        // istanbul ignore else\n        if (validMaskChange || validSanitizeChange || validDecimalChange) {\n            this.setUpMask();\n            this.updateMaskModelHack();\n        }\n        // Only re-set the value if this isn't the first change. This avoids thrashing as the component is initialized.\n        if (validMaskChange && !changes.mask.firstChange) {\n            this.setValue(this.value);\n        }\n        // HACK: If changing to the date mask dynamically, text-mask breaks. It seems to be related to checking the length of a null property in\n        // `conformToMask` which is called inside the file `createTextMaskInputElement.js`. To get around this bug, we clear the existing value.\n        // FIXME: Ideally, when switching to the date filter, any existing value would remain and be masked immediately.\n        if (validMaskChange && !changes.mask.firstChange && this.value) {\n            this.value = '';\n            this.formControl.setValue('');\n            // istanbul ignore else\n            if (this.textMaskInputElement) {\n                this.textMaskInputElement.update(this.value);\n            }\n            this.changeDetectorRef.detectChanges();\n        }\n        // Let the parent FormField know that it should update the ouline gap for the new label\n        if ((validLabelChange && !changes.label.firstChange)) {\n            // Trigger change detection first so that the FormField will be working with the latest version\n            this.changeDetectorRef.detectChanges();\n            this.labelChanges.next();\n        }\n        // istanbul ignore else\n        if (this.textMaskInputElement !== undefined) {\n            this.textMaskInputElement.update(this.inputElement.nativeElement.value);\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * Stop monitoring autofill\n     */\n    ngOnDestroy() {\n        this.autofillMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.changeDetectorRef.detach();\n        // istanbul ignore else\n        if (this._valueChange) {\n            this._valueChange.complete();\n        }\n        this.stateChanges.complete();\n        this.labelChanges.complete();\n    }\n    /**\n     * Fix for the iOS caret bug\n     *\n     * On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n     * key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n     * exists on iOS, we only bother to install the listener on iOS.\n     * https://github.com/angular/material2/blob/master/src/lib/input/input.ts\n     */\n    fixIOSCaretBug() {\n        this.ngZone.runOutsideAngular(() => {\n            this.inputElement.nativeElement.addEventListener('keyup', (event) => {\n                const el = event.target;\n                // istanbul ignore else\n                if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                    // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                    // `1, 1` fixes it for the first time that you type text and\n                    // then hold delete. Toggling to `1, 1` and then back to\n                    // `0, 0` seems to completely fix it.\n                    el.setSelectionRange(1, 1);\n                    el.setSelectionRange(0, 0);\n                }\n            });\n        });\n    }\n    /**\n     * Set touched on blur\n     */\n    onBlur() {\n        this.onTouchedCallback();\n        this.inputBlur.emit(this.value);\n    }\n    /**\n     * Register onChange callback (from ControlValueAccessor interface)\n     *\n     * @param fn\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    registerOnChange(fn) {\n        this.onChangeCallback = fn;\n    }\n    /**\n     * Register onTouched callback (from ControlValueAccessor interface)\n     *\n     * @param fn\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    registerOnTouched(fn) {\n        this.onTouchedCallback = fn;\n    }\n    /**\n     * Clear the input's value\n     */\n    reset() {\n        this.value = '';\n        this.cleared.emit(true);\n        this.formControl.markAsUntouched();\n        this.changeDetectorRef.markForCheck();\n    }\n    /**\n     * Callback for when the focused state of the input changes\n     *\n     * @param nowFocused - Boolean determining if the input is gaining or losing focus\n     */\n    focusChanged(nowFocused) {\n        // istanbul ignore else\n        if (nowFocused !== this.focused && !this.readOnly) {\n            this.focused = nowFocused;\n            this.stateChanges.next();\n        }\n        if (nowFocused) {\n            this.inputFocus.emit(this.value);\n        }\n        else {\n            // Trigger the onTouchedCallback for blur events\n            this.onTouchedCallback();\n            this.onDateChanged(this.value);\n            this.inputBlur.emit(this.value);\n        }\n    }\n    /**\n     * Write the value\n     *\n     * @param value - The value to write to the model\n     */\n    writeValue(value) {\n        if (this.mask) {\n            this.setUpMask();\n        }\n        // Set the initial value for cases where the mask is disabled\n        let normalizedValue = value ? value : '';\n        this.value = normalizedValue;\n        // Convert to a string if dealing with a date object\n        if (normalizedValue instanceof Date) {\n            normalizedValue = normalizedValue.toISOString();\n        }\n        // istanbul ignore else\n        if (this.inputElement) {\n            this.renderer.setProperty(this.inputElement, 'value', normalizedValue);\n        }\n        // istanbul ignore else\n        if (this.textMaskInputElement !== undefined) {\n            this.textMaskInputElement.update(normalizedValue);\n        }\n    }\n    /**\n     * Update values on input\n     *\n     * NOTE: KNOWN BUG that allows model and UI to get out of sync when extra characters are added after a fully satisfied mask.\n     *\n     * @param target - The event target for the input event.\n     */\n    onInput(target) {\n        if (!target) {\n            return;\n        }\n        let value = target.value;\n        // We need to trim the last character due to a bug in the text-mask library\n        const trimmedValue = this.trimLastCharacter(value);\n        this.inputElement.nativeElement.value = trimmedValue;\n        this.stateChanges.next();\n        // istanbul ignore else\n        if (this.textMaskInputElement !== undefined) {\n            // Update the mask.\n            this.textMaskInputElement.update(trimmedValue);\n            // Reset the value after the mask has had a chance to update it.\n            value = target.value;\n            // Verify the value has changed\n            // istanbul ignore else\n            if (this.lastValue !== value) {\n                this.lastValue = value;\n                // Trigger the change (and remove mask if needed)\n                this.setValue(value);\n            }\n        }\n        // istanbul ignore else\n        if (this.datepicker) {\n            // set the new date string the user input\n            this.textualDateValue = value;\n            this._valueChange.emit(new Date(value));\n        }\n    }\n    /**\n     * Notify consumer of date changed from the picker being used.\n     *\n     * @param date - The date that has been set.\n     */\n    onDateChanged(date) {\n        // if the user input changed since the last selection, we want to use that date.\n        // we also need to reset the textual date value once we use it because we don't\n        // want to keep it fresh in case another date is selected but no user input was given.\n        if (!date && this.textualDateValue) {\n            date = new Date(this.textualDateValue);\n            this.textualDateValue = '';\n        }\n        this.selected.emit(date);\n    }\n    /**\n     * Remove the mask if needed\n     *\n     * @param value - The value to clean\n     * @param regex - The RegExp to use to clean the value\n     * @returns The clean value\n     */\n    cleanValue(value, regex) {\n        // If there is no unmask regex, just return the value\n        if (!regex) {\n            return value;\n        }\n        // If the unmask regex is a function, invoke it to get the plain regex\n        // Note: There is a potential the value won't be a string during runtime. It is possible\n        // a form control could contain a primitive value like a number instead. Make sure it's a string.\n        const finalRegex = isFunction(regex) ? regex() : regex;\n        return finalRegex && value ? value.toString().replace(new RegExp(finalRegex), '') : value;\n    }\n    /**\n     * Create the collection of possible masks\n     *\n     * @param allowDecimal - If the number based masks should allow a decimal character\n     * @returns The collection of masks\n     */\n    createMaskCollection(allowDecimal) {\n        return {\n            phone: {\n                mask: ['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/],\n                unmaskRegex: NUMBER_ONLY_REGEX,\n            },\n            currency: {\n                mask: createNumberMask({ allowDecimal }),\n                unmaskRegex: allowDecimal ? NUMBER_WITH_DECIMAL_REGEX : NUMBER_ONLY_REGEX,\n            },\n            number: {\n                mask: createNumberMask({\n                    prefix: '',\n                    suffix: '',\n                    allowDecimal,\n                    allowLeadingZeroes: true,\n                }),\n                unmaskRegex: allowDecimal ? NUMBER_WITH_DECIMAL_REGEX : NUMBER_ONLY_REGEX,\n            },\n            percentage: {\n                mask: createNumberMask({\n                    prefix: '',\n                    suffix: '%',\n                    allowDecimal,\n                }),\n                unmaskRegex: allowDecimal ? NUMBER_WITH_DECIMAL_REGEX : NUMBER_ONLY_REGEX,\n            },\n            postal: { mask: this.determinePostalMask },\n            date: {\n                mask: [/\\d/, /\\d/, '-', /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/],\n                pipe: createAutoCorrectedDatePipe(this.defaultDateFormat),\n                keepCharPositions: false,\n            },\n            default: { mask: false },\n        };\n    }\n    /**\n     * Helper to determine the correct postal code match (5 characters vs 9)\n     *\n     * @param value - The current postal code value\n     * @returns The correct mask\n     */\n    determinePostalMask(value) {\n        const MIN_POSTAL_CODE_LENGTH = 5;\n        if (!value || value.length <= MIN_POSTAL_CODE_LENGTH) {\n            return [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/];\n        }\n        return [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\n    }\n    /**\n     * Checks whether the input is invalid based on the native validation\n     *\n     * @returns Whether the native validation passes\n     */\n    isBadInput() {\n        const validity = (this.inputElement.nativeElement).validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Set the model value\n     *\n     * @param value - The value to set\n     */\n    setValue(value) {\n        if (value && this.mask === 'date') {\n            this.onChangeCallback(new Date(value));\n        }\n        else {\n            const finalValue = this.maskSanitizeValue ? this.cleanValue(value, this.currentMask.unmaskRegex) : value;\n            this.onChangeCallback(finalValue);\n        }\n    }\n    /**\n     * Register our custom onChange function\n     *\n     * @param fn - The onChange function\n     */\n    registerOnChangeFn(fn) {\n        // istanbul ignore else\n        if (this.formControl) {\n            this.formControl.registerOnChange(fn);\n        }\n    }\n    /**\n     * Set the current mask definition\n     *\n     * @param value - The name of the desired mask\n     */\n    setMaskDefinition(value) {\n        const collection = this.createMaskCollection(this.maskAllowDecimal);\n        // NOTE: If the mask doesn't match a predefined mask, default to a mask that matches all\n        // characters. The underlying text-mask library will error out without this fallback.\n        const mask = (value && collection[value]) ? collection[value] : collection.default;\n        // Set the current mask\n        this.currentMask = mask;\n        // Update the config with the chosen mask\n        this.textMaskConfig = Object.assign(Object.assign({}, this.textMaskConfig), mask);\n    }\n    /**\n     * Create the mask\n     */\n    setUpMask() {\n        // istanbul ignore else\n        if (this.inputElement) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const maskOptions = Object.assign({ inputElement: this.inputElement.nativeElement }, this.textMaskConfig);\n            // Initialize the mask\n            this.textMaskInputElement = createTextMaskInputElement(maskOptions);\n        }\n    }\n    /**\n     * Update mask model\n     *\n     * HACK: Firing an event inside a timeout is the only way I can get the model to update after the mask dynamically changes. The UI\n     * updates perfectly, but the unsanitized model value retains the previous masked value.\n     */\n    updateMaskModelHack() {\n        const event = this.document.createEvent('Event');\n        event.initEvent('input', true, true);\n        setTimeout(() => {\n            this.inputElement.nativeElement.dispatchEvent(event);\n        });\n    }\n    /**\n     * HACK: Trim the last character of the model when the string is longer than the model\n     *\n     * KNOWN BUG: This hack does not work correcty for unsanitized percentage masks.\n     *\n     * The underlying text-mask library has a bug that allows the user to type 1 more character than the mask allows. To get around this\n     * issue, we are checking to see if the input value is longer than the mask. If it is, trim the last character off and set the value.\n     * See: https://github.com/text-mask/text-mask/issues/294#issuecomment-342299450\n     *\n     * @param value - The value to check\n     * @returns The trimmed value (if needed)\n     */\n    trimLastCharacter(value) {\n        // This only effects masked inputs\n        if (this.mask) {\n            const mask = this.currentMask.mask;\n            const staticMask = isFunction(mask) ? mask(this.value) : mask;\n            const maskLength = staticMask ? staticMask.length /* istanbul ignore next - Unreachable */ : 0;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const isNumberMask = mask.instanceOf === 'createNumberMask';\n            // istanbul ignore else\n            if (isFunction(mask) && isNumberMask) {\n                const decimals = 2;\n                const cleanValue = this.maskSanitizeValue ? this.cleanValue(value, this.currentMask.unmaskRegex) : value;\n                const split = cleanValue.split('.');\n                const twoItems = 2;\n                if (split.length === twoItems && split[1].length > decimals) {\n                    // Trim the final character off\n                    const trimmedValue = cleanValue.slice(0, -1);\n                    value = trimmedValue;\n                }\n            }\n            else {\n                let stringifiedDate;\n                if (this.mask === 'date') {\n                    stringifiedDate = this.isValidDateString(value) ? this.datePipe.transform(value, 'short') : value;\n                }\n                value = stringifiedDate || value;\n                if (value && (maskLength > 0 && value.length > maskLength)) {\n                    // Determine the max length to trim the extra character\n                    // Get the cleaned value if needed\n                    const finalValue = this.maskSanitizeValue ? this.cleanValue(stringifiedDate || value, this.currentMask.unmaskRegex) : value;\n                    const trimmedValue = finalValue.slice(0, -1);\n                    // Trim the final character off\n                    value = trimmedValue;\n                }\n            }\n        }\n        return value;\n    }\n    /**\n     * Convert an valid date string to a Date if needed\n     *\n     * NOTE: When using 1 time bindings we are required to pass in ISO stringified dates. Adding this\n     * method to our setters adds support for either version\n     *\n     * @param date - The date\n     * @returns The Date object\n     */\n    verifyIsDateObject(date) {\n        return (date instanceof Date) ? date : new Date(date);\n    }\n    /**\n     * Determine if a date string is valid.\n     *\n     * We cannot simply see if the string creates a valid date. The string '0' will technically create a valid Date. For our purposes, we can\n     * check to verify the length is correct AND it is a valid date. This works because the mask is enforcing a consistent 'length' for valid\n     * dates.\n     *\n     * @param value - The string\n     * @returns If the string is a valid date\n     */\n    isValidDateString(value) {\n        const numbersInFormattedDate = 8;\n        const cleanValue = this.cleanValue(value, /[^0-9]/g);\n        const hasCorrectLength = cleanValue.length === numbersInFormattedDate;\n        const isValid = isValidDate(value);\n        return hasCorrectLength && isValid;\n    }\n    /**\n     * Implemented as part of {@link TsFormFieldControl}.\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n        // istanbul ignore else\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /**\n     * Focus the input element\n     */\n    focus() {\n        // istanbul ignore else\n        if (this.inputElement) {\n            this.inputElement.nativeElement.focus();\n        }\n    }\n    /**\n     * Set a new date locale\n     *\n     * @param newLocale - The locale to set\n     */\n    setDateLocale(newLocale) {\n        this.dateAdapter.setLocale(newLocale);\n        this.changeDetectorRef.detectChanges();\n    }\n    /**\n     * Manually dirty check the native input `value` property\n     */\n    dirtyCheckNativeValue() {\n        if (!this.inputElement) {\n            return;\n        }\n        const newValue = this.inputElement.nativeElement.value;\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n};\nTsInputComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: ChangeDetectorRef },\n    { type: AutofillMonitor },\n    { type: Platform },\n    { type: NgZone },\n    { type: TsDocumentService },\n    { type: TsDatePipe },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [TS_INPUT_VALUE_ACCESSOR,] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\n__decorate([\n    ViewChild('picker'),\n    __metadata(\"design:type\", MatDatepicker)\n], TsInputComponent.prototype, \"picker\", void 0);\n__decorate([\n    ViewChild('inputElement'),\n    __metadata(\"design:type\", ElementRef)\n], TsInputComponent.prototype, \"inputElement\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsInputComponent.prototype, \"autocapitalize\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsInputComponent.prototype, \"autocomplete\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Function])\n], TsInputComponent.prototype, \"dateFilter\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsInputComponent.prototype, \"dateLocale\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsInputComponent.prototype, \"datepicker\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", FormControl),\n    __metadata(\"design:paramtypes\", [FormControl])\n], TsInputComponent.prototype, \"formControl\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsInputComponent.prototype, \"hasExternalFormField\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsInputComponent.prototype, \"hideRequiredMarker\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsInputComponent.prototype, \"hint\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsInputComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsInputComponent.prototype, \"isClearable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsInputComponent.prototype, \"isDisabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsInputComponent.prototype, \"isFocused\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsInputComponent.prototype, \"isRequired\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsInputComponent.prototype, \"isTextarea\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsInputComponent.prototype, \"label\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsInputComponent.prototype, \"mask\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsInputComponent.prototype, \"maskAllowDecimal\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsInputComponent.prototype, \"maskSanitizeValue\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], TsInputComponent.prototype, \"maxDate\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], TsInputComponent.prototype, \"minDate\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsInputComponent.prototype, \"name\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsInputComponent.prototype, \"noValidationOrHint\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Date),\n    __metadata(\"design:paramtypes\", [Date])\n], TsInputComponent.prototype, \"openTo\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsInputComponent.prototype, \"prefixIcon\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsInputComponent.prototype, \"readOnly\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsInputComponent.prototype, \"spellcheck\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsInputComponent.prototype, \"startingView\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsInputComponent.prototype, \"tabIndex\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsInputComponent.prototype, \"textareaRows\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsInputComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsInputComponent.prototype, \"type\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsInputComponent.prototype, \"validateOnChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsInputComponent.prototype, \"cleared\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsInputComponent.prototype, \"inputBlur\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsInputComponent.prototype, \"inputFocus\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsInputComponent.prototype, \"inputPaste\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], TsInputComponent.prototype, \"selected\", void 0);\nTsInputComponent = TsInputComponent_1 = __decorate([\n    Component({\n        selector: 'ts-input',\n        template: \"<!--\\n   -NOTE: The query lists built within TsFormFieldComponent cannot find directives nested within ng-template. So, for now, we are simply\\n   -defining all internal components twice. :(\\n   -->\\n\\n\\n<!--\\n   -With included TsFormFieldComponent wrapper\\n   -->\\n<ts-form-field\\n  [validateOnChange]=\\\"validateOnChange\\\"\\n  [control]=\\\"selfReference\\\"\\n  [hideRequiredMarker]=\\\"hideRequiredMarker\\\"\\n  [hint]=\\\"hint\\\"\\n  [noValidationOrHint]=\\\"noValidationOrHint\\\"\\n  [theme]=\\\"theme\\\"\\n  *ngIf=\\\"!hasExternalFormField\\\"\\n>\\n  <ts-label>\\n    <span class=\\\"c-input__label-text qa-input-label-text\\\">\\n      {{ label }}\\n    </span>\\n  </ts-label>\\n\\n  <ts-icon\\n    tsPrefix\\n    *ngIf=\\\"prefixIcon\\\"\\n    class=\\\"qa-input-prefix-icon\\\"\\n  >{{ prefixIcon }}</ts-icon>\\n\\n  <ng-template *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-template>\\n\\n  <ts-icon\\n    tsSuffix\\n    *ngIf=\\\"isClearable && !shouldBeDisabled && !datepicker\\\"\\n    class=\\\"c-input__clear qa-input-suffix-icon\\\"\\n    [class.c-input__clear--visible]=\\\"value?.length > 0\\\"\\n    (click)=\\\"reset()\\\"\\n  >clear</ts-icon>\\n\\n  <mat-datepicker-toggle\\n    tsSuffix\\n    *ngIf=\\\"datepicker\\\"\\n    class=\\\"qa-datepicker-toggle qa-input-suffix-icon\\\"\\n    [for]=\\\"picker\\\"\\n  ></mat-datepicker-toggle>\\n\\n  <ng-container ngProjectAs=\\\".customMessageSelector\\\">\\n    <div class=\\\"input-div\\\">\\n      <ng-content select=\\\"[tsCustomValidationMessage]\\\"></ng-content>\\n    </div>\\n  </ng-container>\\n</ts-form-field>\\n\\n\\n<!--\\n   -Without included TsFormFieldComponent wrapper\\n   -->\\n<ng-container *ngIf=\\\"hasExternalFormField\\\">\\n  <ts-label>\\n    <span class=\\\"c-input__label-text qa-input-label-text\\\">\\n      {{ label }}\\n    </span>\\n  </ts-label>\\n\\n  <ts-icon\\n    tsPrefix\\n    *ngIf=\\\"prefixIcon\\\"\\n    class=\\\"qa-input-prefix-icon\\\"\\n  >{{ prefixIcon }}</ts-icon>\\n\\n  <ng-template *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-template>\\n\\n  <ts-icon\\n    tsSuffix\\n    *ngIf=\\\"isClearable && !shouldBeDisabled && !datepicker\\\"\\n    class=\\\"c-input__clear qa-input-suffix-icon\\\"\\n    [class.c-input__clear--visible]=\\\"value?.length > 0\\\"\\n    (click)=\\\"reset()\\\"\\n  >clear</ts-icon>\\n\\n  <mat-datepicker-toggle\\n    tsSuffix\\n    *ngIf=\\\"datepicker\\\"\\n    class=\\\"qa-datepicker-toggle qa-input-suffix-icon\\\"\\n    [for]=\\\"picker\\\"\\n  ></mat-datepicker-toggle>\\n</ng-container>\\n\\n\\n<!--\\n   -Inner Input\\n   -->\\n<ng-template #contentTemplate>\\n  <ng-container *ngIf=\\\"!isTextarea && !datepicker\\\">\\n    <input\\n      class=\\\"c-input__text qa-input-text ts-form-field-autofill-control\\\"\\n      type=\\\"{{ type }}\\\"\\n      [attr.aria-required]=\\\"isRequired\\\"\\n      [attr.aria-describedby]=\\\"ariaDescribedby || null\\\"\\n      [attr.autocapitalize]=\\\"autocapitalize ? 'on' : 'off'\\\"\\n      [attr.autocomplete]=\\\"autocomplete\\\"\\n      [attr.autofocus]=\\\"isFocused ? '' : null\\\"\\n      [disabled]=\\\"shouldBeDisabled\\\"\\n      [attr.name]=\\\"name\\\"\\n      [attr.id]=\\\"id\\\"\\n      [readonly]=\\\"readOnly\\\"\\n      [required]=\\\"isRequired ? 'required' : null\\\"\\n      [attr.spellcheck]=\\\"spellcheck\\\"\\n      tabIndex=\\\"{{ tabIndex }}\\\"\\n      [(ngModel)]=\\\"value\\\"\\n      (blur)=\\\"focusChanged(false)\\\"\\n      (focus)=\\\"focusChanged(true)\\\"\\n      (input)=\\\"onInput($event.target)\\\"\\n      (paste)=\\\"inputPaste.emit($event)\\\"\\n      #inputElement\\n    >\\n  </ng-container>\\n\\n  <ng-container *ngIf=\\\"!isTextarea && datepicker\\\">\\n    <input\\n      class=\\\"c-input__text c-input__text--datepicker qa-input-text ts-form-field-autofill-control\\\"\\n      type=\\\"{{ type }}\\\"\\n      [attr.aria-required]=\\\"isRequired\\\"\\n      [attr.aria-describedby]=\\\"ariaDescribedby || null\\\"\\n      [attr.autocapitalize]=\\\"autocapitalize ? 'on' : 'off'\\\"\\n      [attr.autocomplete]=\\\"autocomplete\\\"\\n      [attr.autofocus]=\\\"isFocused ? '' : null\\\"\\n      [disabled]=\\\"shouldBeDisabled\\\"\\n      [attr.name]=\\\"name\\\"\\n      [attr.id]=\\\"id\\\"\\n      [readonly]=\\\"readOnly\\\"\\n      [required]=\\\"isRequired ? 'required' : null\\\"\\n      [attr.spellcheck]=\\\"spellcheck\\\"\\n      tabIndex=\\\"{{ tabIndex }}\\\"\\n      [(ngModel)]=\\\"value\\\"\\n      (blur)=\\\"focusChanged(false)\\\"\\n      (focus)=\\\"focusChanged(true)\\\"\\n      (input)=\\\"onInput($event.target)\\\"\\n      [matDatepickerFilter]=\\\"dateFilter\\\"\\n      [matDatepicker]=\\\"picker\\\"\\n      [min]=\\\"minDate\\\"\\n      [max]=\\\"maxDate\\\"\\n      (dateChange)=\\\"onDateChanged($event.value)\\\"\\n      (paste)=\\\"inputPaste.emit($event)\\\"\\n      #inputElement\\n    >\\n  </ng-container>\\n\\n  <ng-container *ngIf=\\\"isTextarea\\\">\\n    <textarea\\n      class=\\\"c-input__text c-input__text--textarea qa-input-text ts-form-field-autofill-control\\\"\\n      [attr.aria-required]=\\\"isRequired\\\"\\n      [attr.aria-describedby]=\\\"ariaDescribedby || null\\\"\\n      [attr.autocapitalize]=\\\"autocapitalize ? 'on' : 'off'\\\"\\n      [attr.autocomplete]=\\\"autocomplete\\\"\\n      [attr.autofocus]=\\\"isFocused ? '' : null\\\"\\n      [disabled]=\\\"shouldBeDisabled\\\"\\n      [attr.name]=\\\"name\\\"\\n      [attr.id]=\\\"id\\\"\\n      [attr.rows]=\\\"textareaRows\\\"\\n      [readonly]=\\\"readOnly\\\"\\n      [required]=\\\"isRequired ? 'required' : null\\\"\\n      [attr.spellcheck]=\\\"spellcheck\\\"\\n      tabIndex=\\\"{{ tabIndex }}\\\"\\n      [(ngModel)]=\\\"value\\\"\\n      (blur)=\\\"focusChanged(false)\\\"\\n      (focus)=\\\"focusChanged(true)\\\"\\n      (input)=\\\"onInput($event.target)\\\"\\n      (paste)=\\\"inputPaste.emit($event)\\\"\\n      #inputElement\\n    ></textarea>\\n  </ng-container>\\n</ng-template>\\n\\n\\n<mat-datepicker\\n  class=\\\"c-datepicker__calendar qa-datepicker-calendar\\\"\\n  [disabled]=\\\"shouldBeDisabled\\\"\\n  [startView]=\\\"startingView\\\"\\n  [startAt]=\\\"openTo\\\"\\n  #picker\\n></mat-datepicker>\\n\",\n        host: {\n            'class': 'ts-input',\n            '[class.ts-input--datepicker]': 'datepicker',\n        },\n        providers: [\n            {\n                provide: TsFormFieldControl,\n                useExisting: TsInputComponent_1,\n            },\n            {\n                provide: DateAdapter,\n                useClass: TsDateAdapter,\n            },\n            {\n                provide: MAT_DATE_FORMATS,\n                useValue: ɵ0,\n            },\n            {\n                provide: MAT_DATE_LOCALE,\n                useValue: DEFAULT_DATE_LOCALE,\n            },\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsInput',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-input{display:block}.ts-input :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-input h1,.ts-input h2,.ts-input h3,.ts-input h4,.ts-input h5,.ts-input p{margin:unset}.ts-input .c-input__text{background:0 0;border:none;color:currentColor;font:inherit;margin:-.0625em 0 0;max-width:100%;outline:0;padding:0;text-align:inherit;vertical-align:bottom;width:100%}.ts-input .c-input__text::-ms-input-placeholder{-ms-transition:color var(--swift-ease-out-duration) var(--swift-ease-out-duration)/3 var(--swift-ease-out-timing-function);transition:color var(--swift-ease-out-duration) var(--swift-ease-out-duration)/3 var(--swift-ease-out-timing-function)}.ts-input .c-input__text::placeholder{transition:color var(--swift-ease-out-duration) var(--swift-ease-out-duration)/3 var(--swift-ease-out-timing-function)}.ts-input .c-input__text::-moz-placeholder{-moz-transition:color var(--swift-ease-out-duration) var(--swift-ease-out-duration)/3 var(--swift-ease-out-timing-function);transition:color var(--swift-ease-out-duration) var(--swift-ease-out-duration)/3 var(--swift-ease-out-timing-function)}.ts-input .c-input__text::-webkit-input-placeholder{-webkit-transition:color var(--swift-ease-out-duration) var(--swift-ease-out-duration)/3 var(--swift-ease-out-timing-function);transition:color var(--swift-ease-out-duration) var(--swift-ease-out-duration)/3 var(--swift-ease-out-timing-function)}.ts-input .c-input__text:-ms-input-placeholder{-ms-transition:color var(--swift-ease-out-duration) var(--swift-ease-out-duration)/3 var(--swift-ease-out-timing-function);transition:color var(--swift-ease-out-duration) var(--swift-ease-out-duration)/3 var(--swift-ease-out-timing-function)}.ts-input .c-input__text:-moz-ui-invalid{box-shadow:none}.ts-input .c-input__text::-ms-clear,.ts-input .c-input__text::-ms-reveal{display:none}.ts-input .c-input__text,.ts-input .c-input__text::-webkit-search-cancel-button,.ts-input .c-input__text::-webkit-search-decoration,.ts-input .c-input__text::-webkit-search-results-button,.ts-input .c-input__text::-webkit-search-results-decoration{-webkit-appearance:none}.ts-input .c-input__text::-webkit-caps-lock-indicator,.ts-input .c-input__text::-webkit-contacts-auto-fill-button,.ts-input .c-input__text::-webkit-credentials-auto-fill-button{visibility:hidden}.ts-input .c-input__text[type=date]::after,.ts-input .c-input__text[type=datetime-local]::after,.ts-input .c-input__text[type=datetime]::after,.ts-input .c-input__text[type=month]::after,.ts-input .c-input__text[type=time]::after,.ts-input .c-input__text[type=week]::after{content:' ';white-space:pre;width:1px}.ts-input .c-input__texttextarea{margin:-2px 0;overflow:auto;padding:2px 0;resize:vertical}.ts-input .c-input__texttextarea.cdk-textarea-autosize{resize:none}.ts-input .c-input__clear{cursor:pointer;opacity:0;transition:opacity .2s,color .2s}.ts-input .c-input__clear--visible{opacity:1}.ts-input .c-input__clear:focus,.ts-input .c-input__clear:hover{color:#c8604d}.ts-input .mat-datepicker-toggle{display:inline-block}.ts-input .mat-datepicker-toggle .mat-datepicker-toggle-default-icon{vertical-align:baseline}.ts-input .mat-datepicker-toggle .mat-button-wrapper{align-items:center;display:flex;justify-content:center}.cdk-overlay-container .mat-datepicker-popup{z-index:502}\"]\n    })\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ,\n    __param(8, Optional()), __param(8, Self()), __param(8, Inject(TS_INPUT_VALUE_ACCESSOR)),\n    __param(9, Optional()),\n    __param(10, Optional()), __param(10, Self()),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ChangeDetectorRef,\n        AutofillMonitor,\n        Platform,\n        NgZone,\n        TsDocumentService,\n        TsDatePipe, Object, DateAdapter,\n        NgControl])\n], TsInputComponent);\n\nconst ɵ0$1 = TS_DATE_FORMATS;\nlet TsInputModule = class TsInputModule {\n};\nTsInputModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            FormsModule,\n            MatDatepickerModule,\n            NativeDateModule,\n            ReactiveFormsModule,\n            TsFormFieldModule,\n            TsIconModule,\n            TsValidationMessagesModule,\n        ],\n        providers: [\n            TsValidatorsService,\n            TsDatePipe,\n            {\n                provide: MAT_DATE_FORMATS,\n                useValue: ɵ0$1,\n            },\n        ],\n        exports: [TsInputComponent],\n        declarations: [TsInputComponent],\n    })\n], TsInputModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TS_DATE_FORMATS, TS_INPUT_VALUE_ACCESSOR, TsDateAdapter, TsInputComponent, TsInputModule, ɵ0$1 as ɵ0 };\n//# sourceMappingURL=terminus-ui-input.js.map\n","import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { Input, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { isString } from '@terminus/ngx-tools/type-guards';\n\n/**\n * This is the link UI Component\n *\n * @example\n * <ts-link\n *              [destination]=\"['your/', 'path/']\"\n *              theme=\"accent\"\n * >My link</ts-link>\n *\n * <ts-link\n *              destination=\"http://google.com\"\n *              fragment=\"myElementId\"\n *              [isExternal]=\"true\"\n *              tabIndex=\"2\"\n *              theme=\"warn\"\n * >My link</ts-link>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/link</example-url>\n */\nlet TsLinkComponent = class TsLinkComponent {\n    constructor() {\n        /**\n         * Define the route needed when only using a fragment\n         */\n        this.localRoute = ['.'];\n        /**\n         * Decide whether an external icon should be shown\n         */\n        this.showExternalIcon = true;\n        /**\n         * Define if the link is to an external page\n         */\n        this.isExternal = false;\n        /**\n         * Define the tabindex\n         */\n        this.tabIndex = 0;\n        /**\n         * Define the component theme\n         */\n        this.theme = 'primary';\n    }\n    /**\n     * Define the link's destination\n     *\n     * @param value\n     */\n    set destination(value) {\n        if (isString(value) && (value.includes('mailto') || value.includes('tel'))) {\n            this.showExternalIcon = false;\n        }\n        this._destination = value;\n    }\n    get destination() {\n        return this._destination;\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], TsLinkComponent.prototype, \"destination\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsLinkComponent.prototype, \"fragment\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsLinkComponent.prototype, \"isExternal\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsLinkComponent.prototype, \"tabIndex\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsLinkComponent.prototype, \"theme\", void 0);\nTsLinkComponent = __decorate([\n    Component({\n        selector: 'ts-link',\n        template: \"<a\\n  *ngIf=\\\"!isExternal\\\"\\n  class=\\\"c-link qa-link qa-link-internal\\\"\\n  [routerLink]=\\\"destination || localRoute\\\"\\n  fragment=\\\"{{ fragment }}\\\"\\n  tabindex=\\\"{{ tabIndex }}\\\"\\n>\\n  <ng-template *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-template>\\n</a>\\n\\n\\n<a\\n  *ngIf=\\\"isExternal\\\"\\n  class=\\\"c-link qa-link qa-link-external\\\"\\n  [href]=\\\"destination\\\"\\n  target=\\\"_blank\\\"\\n  tabindex=\\\"{{ tabIndex }}\\\"\\n>\\n  <ng-template *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-template>\\n\\n  <ts-icon *ngIf=\\\"showExternalIcon\\\"\\n  >open_in_new</ts-icon>\\n</a>\\n\\n\\n<ng-template #contentTemplate>\\n  <ng-content></ng-content>\\n</ng-template>\\n\",\n        host: {\n            'class': 'ts-link',\n            '[class.ts-link--primary]': 'theme === \"primary\"',\n            '[class.ts-link--accent]': 'theme === \"accent\"',\n            '[class.ts-link--warn]': 'theme === \"warn\"',\n        },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsLink',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-link{--link-color:inherit;display:inline-block}.ts-link :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-link h1,.ts-link h2,.ts-link h3,.ts-link h4,.ts-link h5,.ts-link p{margin:unset}.ts-link .c-link{color:var(--link-color);display:inline-block;text-decoration:underline;transition:color var(--ts-animation-time-duration-200) var(--ts-animation-easing-ease)}.ts-link .c-link:focus{outline:0}.ts-link--primary{--link-color:var(--ts-color-primary-500)}.ts-link--primary .c-link:focus,.ts-link--primary .c-link:hover{--link-color:var(--ts-color-primary-300)}.ts-link--primary .c-link:visited{--link-color:var(--ts-color-primary-700)}.ts-link--accent{--link-color:var(--ts-color-accent-500)}.ts-link--accent .c-link:focus,.ts-link--accent .c-link:hover{--link-color:var(--ts-color-accent-300)}.ts-link--accent .c-link:visited{--link-color:var(--ts-color-accent-700)}.ts-link--warn{--link-color:var(--ts-color-warn-500)}.ts-link--warn .c-link:focus,.ts-link--warn .c-link:hover{--link-color:var(--ts-color-warn-300)}.ts-link--warn .c-link:visited{--link-color:var(--ts-color-warn-700)}.c-link .mat-icon.material-icons{--material-icon-fontSize-override:1.2em;font-size:var(--material-icon-fontSize-override);height:auto;line-height:1em;vertical-align:middle;width:auto}.c-menu .c-link{--menu-margin-adjustment-for-menu:var(--ts-space-stack-300) 0;margin:var(--menu-margin-adjustment-for-menu)}.mat-menu-content .c-link{--menu-item-color:var(--ts-color-base-black);--menu-item-backgroundColor:transparent;background-color:var(--menu-item-backgroundColor);color:var(--menu-item-color);display:block;font-weight:400;padding:var(--ts-space-inset-300) var(--ts-space-inset-500);text-decoration:none;transition-duration:var(--ts-animation-time-duration-400);transition-property:background-color,color;transition-timing-function:var(--ts-animation-easing-ease)}.mat-menu-content .c-link:focus,.mat-menu-content .c-link:hover{--menu-item-backgroundColor:var(--ts-color-utility-100);--menu-item-color:var(--ts-color-primary-500)}\"]\n    })\n], TsLinkComponent);\n\nlet TsLinkModule = class TsLinkModule {\n};\nTsLinkModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            RouterModule,\n            TsIconModule,\n        ],\n        exports: [TsLinkComponent],\n        declarations: [TsLinkComponent],\n    })\n], TsLinkModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsLinkComponent, TsLinkModule };\n//# sourceMappingURL=terminus-ui-link.js.map\n","import { __decorate, __metadata, __param } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { ElementRef, Directive, InjectionToken, EventEmitter, isDevMode, ChangeDetectorRef, NgZone, Optional, Inject, ContentChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, ContentChildren, QueryList, NgModule } from '@angular/core';\nimport { MatRippleModule } from '@angular/material/core';\nimport { TsCheckboxComponent, TsCheckboxModule } from '@terminus/ui-checkbox';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { KEYS } from '@terminus/ngx-tools/keycodes';\n\n/**\n * Determine if all options are selected\n *\n * @param options - The list of options\n * @returns If all are selected\n */\nfunction allOptionsAreSelected(options) {\n    if (!options || options.toArray().length < 1) {\n        return false;\n    }\n    // Return false if at least one options is not selected\n    return !options.toArray().some(option => !option.selected);\n}\n/**\n * Counts the amount of option group labels that precede the specified option\n *\n * @param optionIndex - Index of the option at which to start counting\n * @param options - Flat list of all of the options\n * @param optionGroups - Flat list of all of the option groups\n * @returns The number of labels\n */\nfunction countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n        let groupCounter = 0;\n        for (let i = 0; i < optionIndex + 1; i++) {\n            // istanbul ignore else\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n        return groupCounter;\n    }\n    return 0;\n}\n/**\n * Determine the position to scroll a panel in order for an option to be in view\n *\n * @param optionIndex - Index of the option to be scrolled into view\n * @param optionHeight - Height of the options\n * @param currentScrollPosition - Current scroll position of the panel\n * @param panelHeight - Height of the panel\n * @returns The scroll position\n */\nfunction getOptionScrollPosition(optionIndex, optionHeight, currentScrollPosition, panelHeight) {\n    const optionOffset = optionIndex * optionHeight;\n    if (optionOffset < currentScrollPosition) {\n        return optionOffset;\n    }\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n    return currentScrollPosition;\n}\n/**\n * Determine if one or more options are selected but not all\n *\n * @param options - The list of options\n * @returns If some are selected\n */\nfunction someOptionsAreSelected(options) {\n    if (!options || options.toArray().length < 1) {\n        return false;\n    }\n    const someSelected = options.toArray().some(option => option.selected);\n    const allSelected = allOptionsAreSelected(options);\n    // Return true if at least one option is selected but not all\n    return someSelected && !allSelected;\n}\n/**\n * Toggle the selected state of all options\n *\n * If at least one option is selected this will deselect all selected options.\n * If no options are selected this will select all options.\n *\n * @param options - The list of options\n */\nfunction toggleAllOptions(options) {\n    if (!options || options.toArray().length < 1) {\n        return;\n    }\n    const optionsArray = options.toArray();\n    // If at least one option is selected, we should deselect all\n    const shouldDeselectAll = options.some(option => option.selected);\n    for (const option of optionsArray) {\n        // If it is selected and should be deselected\n        if (shouldDeselectAll && option.selected && !option.isDisabled) {\n            option.deselect();\n        }\n        if (!shouldDeselectAll && !option.selected && !option.isDisabled) {\n            option.select();\n        }\n    }\n}\n\n/**\n * Directive used to allow the consumer to define the view text for a {@link TsOptionComponent}\n */\nlet TsOptionDisplayDirective = class TsOptionDisplayDirective {\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n};\nTsOptionDisplayDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\nTsOptionDisplayDirective = __decorate([\n    Directive({ selector: '[tsOptionDisplay]' }),\n    __metadata(\"design:paramtypes\", [ElementRef])\n], TsOptionDisplayDirective);\n\n/**\n * Event object emitted by {@link TsOptionComponent} when selected or deselected\n */\nclass TsOptionSelectionChange {\n    constructor(\n    // Reference to the option that emitted the event\n    source, \n    // Whether the change in the option's value was a result of a user action\n    isUserInput = false) {\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token used to provide the parent component to options. Used by {@link TsOptionComponent}\n *\n * Since TsSelectionListComponent imports TsOptionComponent, importing TsSelectionListComponent here will cause a circular dependency.\n * Injecting via an InjectionToken helps us circumvent that limitation.\n */\nconst TS_OPTION_PARENT_COMPONENT = new InjectionToken('TS_OPTION_PARENT_COMPONENT');\n/**\n * Injection token used to provide the parent optgroup to options. Used by {@link TsOptgroupComponent}\n */\nconst TS_OPTGROUP_PARENT_COMPONENT = new InjectionToken('TS_OPTGROUP_PARENT_COMPONENT');\n// Unique ID for each instance\nlet nextUniqueId = 0;\n/**\n * Single option inside of a {@link TsSelectionListComponent}\n *\n * @example\n * <ts-option\n *              id=\"my-id\"\n *              [isDisabled]=\"true\"\n *              [option]=\"myOptionObject\"\n *              value=\"My value!\"\n *              (selectionChange)=\"selectedStateChanged($event)\"\n * ></ts-option>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/selection-list</example-url>\n */\nlet TsOptionComponent = class TsOptionComponent {\n    constructor(elementRef, changeDetectorRef, ngZone, \n    // Injecting via a provider helps us get around the circular dependency created by importing TsSelectComponent here.\n    parent, group) {\n        this.elementRef = elementRef;\n        this.changeDetectorRef = changeDetectorRef;\n        this.ngZone = ngZone;\n        this.parent = parent;\n        this.group = group;\n        /**\n         * Store the most recent view value\n         */\n        this.mostRecentViewValue = '';\n        /**\n         * Emits when the state of the option changes and any parents have to be notified\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Store the text for the title attribute\n         */\n        this.title = '';\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-option-${nextUniqueId++}`;\n        /**\n         * Define the active state\n         */\n        this.active = false;\n        /**\n         * Whether or not the option is currently selected\n         */\n        this.selected = false;\n        /**\n         * Whether parent component is an autocomplete component\n         */\n        this.autocompleteComponent = false;\n        /**\n         * Whether parent component is an autocomplete component\n         */\n        this.selectComponent = false;\n        this._id = this.uid;\n        this._isDisabled = false;\n        /**\n         * Event emitted when the option is selected or deselected\n         */\n        this.selectionChange = new EventEmitter();\n        if (parent.componentName === 'TsAutocompleteComponent') {\n            this.autocompleteComponent = true;\n        }\n        else if (parent.componentName === 'TsSelectComponent') {\n            this.selectComponent = true;\n        }\n    }\n    /**\n     * Whether the wrapping component is in multiple selection mode\n     */\n    get allowMultiple() {\n        return !!(this.parent && this.parent.allowMultiple);\n    }\n    /**\n     * Returns the correct tabindex for the option depending on the disabled state\n     */\n    get tabIndex() {\n        return this.isDisabled ? '-1' : '0';\n    }\n    /**\n     * Gets the host DOM element\n     */\n    get hostElement() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     * The displayed value of the option.\n     *\n     * It is necessary to show the selected option in the {@link TsSelectComponent} trigger.\n     */\n    get viewValue() {\n        // Use the user defined content if the {@link TsOptionDisplayDirective} was used\n        const content = this.displayElementRef ? this.displayElementRef.elementRef.nativeElement.textContent : this.hostElement.textContent;\n        return (content || '').trim();\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Whether the option is disabled\n     *\n     * @param value\n     */\n    set isDisabled(value) {\n        this._isDisabled = value;\n    }\n    get isDisabled() {\n        return (this.group && this.group.isDisabled) || this._isDisabled;\n    }\n    /**\n     * Define the option data object (needed for template support)\n     *\n     * @param value\n     */\n    set option(value) {\n        this._option = value;\n    }\n    get option() {\n        return this._option;\n    }\n    /**\n     * If the user is trying to use a template without passing in data, alert the dev\n     */\n    ngAfterContentInit() {\n        // If a template is passed in but no option object, alert the consumer\n        if (this.optionTemplate && !this.option && isDevMode()) {\n            throw Error(`TsOptionComponent: The full 'option' object must be passed in when using a custom template.`);\n        }\n        // Set the title once the zone is stable. This is needed to avoid an ExpressionChangedAfterChecked error\n        this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n            this.title = this.viewValue;\n        });\n    }\n    /**\n     * Trigger state changes if the view value has changed\n     */\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `ts-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        // istanbul ignore else\n        if (this.selected) {\n            const viewValue = this.viewValue;\n            // istanbul ignore else\n            if (viewValue !== this.mostRecentViewValue) {\n                this.mostRecentViewValue = viewValue;\n                this.stateChanges.next();\n            }\n        }\n    }\n    /**\n     * Complete observables\n     */\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n    /**\n     * Return the view value\n     *\n     * Used by `ListKeyManagerOption`\n     */\n    getLabel() {\n        return this.viewValue;\n    }\n    /**\n     * Deselect the option\n     */\n    deselect() {\n        if (this.selected) {\n            this.selected = false;\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n        // Trigger update for the optgroup if a child changes\n        // istanbul ignore else\n        if (this.group && this.allowMultiple) {\n            this.group.triggerChangeDetection(this.id);\n        }\n    }\n    /**\n     * Ensure the option is selected when activated from the keyboard\n     *\n     * @param event\n     */\n    handleKeydown(event) {\n        // istanbul ignore else\n        if (event.code === KEYS.ENTER.code || event.code === KEYS.SPACE.code) {\n            this.selectViaInteraction();\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n    /**\n     * Select the option\n     */\n    select() {\n        if (!this.selected) {\n            this.selected = true;\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n        // Trigger update for the optgroup if a child changes\n        // istanbul ignore else\n        if (this.group && this.allowMultiple) {\n            this.group.triggerChangeDetection(this.id);\n        }\n    }\n    /**\n     * Selects the option while indicating the selection came from the user.\n     *\n     * Used to determine if the select's view -> model callback should be invoked.\n     */\n    selectViaInteraction() {\n        // istanbul ignore else\n        if (!this.isDisabled) {\n            this.selected = this.allowMultiple ? !this.selected : true;\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n        }\n    }\n    /**\n     * This method sets display styles on the option to make it appear active. This is used by the ActiveDescendantKeyManager so key events\n     * will display the proper options as active on arrow key events.\n     */\n    setActiveStyles() {\n        // istanbul ignore else\n        if (!this.active) {\n            this.active = true;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method removes display styles on the option that made it appear active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles() {\n        if (this.active) {\n            // HACK: For some reason, triggering change detection works in `setActiveStyles` above, but not here.\n            // Same issue seems preset in TsSelectComponent `autocompleteDeselectItem`.\n            setTimeout(() => {\n                this.active = false;\n                this.changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /**\n     * Emit the selection change event\n     *\n     * @param isUserInput\n     */\n    emitSelectionChangeEvent(isUserInput = false) {\n        this.selectionChange.emit(new TsOptionSelectionChange(this, isUserInput));\n    }\n};\nTsOptionComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TS_OPTION_PARENT_COMPONENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TS_OPTGROUP_PARENT_COMPONENT,] }] }\n];\n__decorate([\n    ContentChild(TemplateRef),\n    __metadata(\"design:type\", TemplateRef)\n], TsOptionComponent.prototype, \"optionTemplate\", void 0);\n__decorate([\n    ContentChild(TsOptionDisplayDirective),\n    __metadata(\"design:type\", TsOptionDisplayDirective)\n], TsOptionComponent.prototype, \"displayElementRef\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsOptionComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsOptionComponent.prototype, \"isDisabled\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], TsOptionComponent.prototype, \"option\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsOptionComponent.prototype, \"value\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsOptionComponent.prototype, \"selectionChange\", void 0);\nTsOptionComponent = __decorate([\n    Component({\n        selector: 'ts-option',\n        template: \"<ts-checkbox\\n  class=\\\"qa-select-option-checkbox\\\"\\n  *ngIf=\\\"allowMultiple && selectComponent\\\"\\n  tabIndex=\\\"-1\\\"\\n  [isDisabled]=\\\"isDisabled\\\"\\n  [isChecked]=\\\"selected\\\"\\n>\\n  <ng-template *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-template>\\n</ts-checkbox>\\n\\n<ng-container *ngIf=\\\"!allowMultiple || !selectComponent\\\">\\n  <ng-template *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-template>\\n</ng-container>\\n\\n\\n<div\\n  class=\\\"mat-option-ripple\\\"\\n  mat-ripple\\n  [matRippleTrigger]=\\\"hostElement\\\"\\n  [matRippleDisabled]=\\\"isDisabled\\\"\\n></div>\\n\\n\\n<ng-template #contentTemplate>\\n  <span class=\\\"ts-option-text qa-option-text\\\">\\n    <ng-content *ngIf=\\\"!optionTemplate\\\">\\n    </ng-content>\\n\\n    <ng-container\\n      *ngIf=\\\"optionTemplate\\\"\\n      [ngTemplateOutlet]=\\\"optionTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{$implicit: option}\\\"\\n    ></ng-container>\\n  </span>\\n</ng-template>\\n\",\n        host: {\n            'class': 'ts-option',\n            'role': 'option',\n            '[class.ts-selected]': 'selected',\n            '[class.ts-option--multiple]': 'allowMultiple',\n            '[class.ts-option--active]': 'active',\n            '[class.ts-option--disabled]': 'isDisabled',\n            '[class.ts-option--template]': 'optionTemplate',\n            '[attr.tabindex]': 'tabIndex',\n            '[attr.aria-selected]': 'selected.toString()',\n            '[attr.aria-disabled]': '!!isDisabled',\n            '[attr.title]': 'title',\n            '[id]': 'id',\n            '(click)': 'selectViaInteraction()',\n            '(keydown)': 'handleKeydown($event)',\n        },\n        encapsulation: ViewEncapsulation.None,\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        exportAs: 'tsOption',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-option{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;display:block;max-width:100%;padding:0 16px;position:relative;text-align:left;text-decoration:none;cursor:pointer;transition:background-color .2s ease-out}.ts-option :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-option h1,.ts-option h2,.ts-option h3,.ts-option h4,.ts-option h5,.ts-option p{margin:unset}.ts-option:not(.ts-option--disabled):focus,.ts-option:not(.ts-option--disabled):hover{background-color:#f2f0f7}.ts-option.ts-option--active{background-color:#cee1ef}.ts-option.ts-option--disabled{color:#999;cursor:auto}.ts-option .ts-checkbox{line-height:3em;pointer-events:none}.ts-select-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);background:#fafafa;z-index:502}.ts-select-panel .ts-optgroup-label:not(.ts-option--template),.ts-select-panel .ts-option:not(.ts-option--template){font-size:inherit;height:3em;line-height:3em}.ts-select-panel .ts-option.ts-selected:not(.ts-option--multiple){background-color:#cee1ef}.ts-select-panel .ts-optgroup .ts-option{padding-left:24px}.ts-select-panel.ts-select-panel--multiple .ts-optgroup-label{padding-left:0}.ts-select-panel.ts-select-panel--multiple .ts-option{padding-left:4px}\"]\n    }),\n    __param(3, Optional()), __param(3, Inject(TS_OPTION_PARENT_COMPONENT)),\n    __param(4, Optional()), __param(4, Inject(TS_OPTGROUP_PARENT_COMPONENT)),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        ChangeDetectorRef,\n        NgZone, Object, Object])\n], TsOptionComponent);\n\nvar TsOptgroupComponent_1;\n// Unique ID for each instance\nlet nextUniqueId$1 = 0;\n/**\n * Component that is used to group instances of {@link TsOptionComponent}s\n *\n * @example\n * <ts-select-optgroup\n *              id=\"my-id\"\n *              [isDisabled]=\"true\"\n *              label=\"My optgroup\"\n * ></ts-select-optgroup>\n *\n * <example-url>https://goo.gl/ieUPaG</example-url>\n */\nlet TsOptgroupComponent = TsOptgroupComponent_1 = class TsOptgroupComponent {\n    constructor(changeDetectorRef, \n    // NOTE: Useful for testing but not used in this file\n    elementRef, parent) {\n        this.changeDetectorRef = changeDetectorRef;\n        this.elementRef = elementRef;\n        this.parent = parent;\n        /**\n         * A flag signifying all child options are selected\n         */\n        this.allSelected = false;\n        /**\n         * Unique id for the underlying label\n         */\n        this.labelId = `ts-select-optgroup-label-${nextUniqueId$1++}`;\n        /**\n         * A flag signifying some of the child options are selected\n         */\n        this.someSelected = false;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-select-optgroup-${nextUniqueId$1++}`;\n        this._id = this.uid;\n        /**\n         * Define if the group is disabled\n         */\n        this.isDisabled = false;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Toggle all options\n     */\n    toggle() {\n        // istanbul ignore else\n        if (!this.isDisabled && this.parent.allowMultiple) {\n            toggleAllOptions(this.optgroupOptions);\n        }\n    }\n    /**\n     * Allow others to trigger count updates and CDR detection\n     */\n    triggerChangeDetection() {\n        this.allSelected = allOptionsAreSelected(this.optgroupOptions);\n        this.someSelected = someOptionsAreSelected(this.optgroupOptions);\n        this.changeDetectorRef.detectChanges();\n    }\n};\nTsOptgroupComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TS_OPTION_PARENT_COMPONENT,] }] }\n];\n__decorate([\n    ViewChild(TsCheckboxComponent),\n    __metadata(\"design:type\", TsCheckboxComponent)\n], TsOptgroupComponent.prototype, \"checkbox\", void 0);\n__decorate([\n    ContentChildren(TsOptionComponent),\n    __metadata(\"design:type\", QueryList)\n], TsOptgroupComponent.prototype, \"optgroupOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsOptgroupComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsOptgroupComponent.prototype, \"isDisabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsOptgroupComponent.prototype, \"label\", void 0);\nTsOptgroupComponent = TsOptgroupComponent_1 = __decorate([\n    Component({\n        selector: 'ts-select-optgroup',\n        template: \"<label\\n  class=\\\"ts-optgroup-label qa-optgroup-label\\\"\\n  [attr.id]=\\\"labelId\\\"\\n  [attr.title]=\\\"label\\\"\\n  (click)=\\\"toggle()\\\"\\n>\\n  <ts-checkbox\\n    class=\\\"qa-optgroup-checkbox\\\"\\n    [isDisabled]=\\\"isDisabled\\\"\\n    [isChecked]=\\\"allSelected\\\"\\n    [isIndeterminate]=\\\"someSelected\\\"\\n    *ngIf=\\\"parent.allowMultiple\\\"\\n  >\\n    {{ label }}\\n  </ts-checkbox>\\n\\n  <ng-container *ngIf=\\\"!parent.allowMultiple\\\">\\n    {{ label }}\\n  </ng-container>\\n</label>\\n\\n\\n<ng-content select=\\\"ts-option, ng-container\\\">\\n</ng-content>\\n\",\n        host: {\n            'class': 'ts-optgroup',\n            'role': 'group',\n            '[class.ts-optgroup--disabled]': 'isDisabled',\n            '[attr.id]': 'id',\n            '[attr.aria-disabled]': '!!isDisabled',\n            '[attr.aria-labelledby]': 'labelId',\n        },\n        providers: [\n            {\n                provide: TS_OPTGROUP_PARENT_COMPONENT,\n                useExisting: TsOptgroupComponent_1,\n            },\n        ],\n        encapsulation: ViewEncapsulation.None,\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        exportAs: 'tsOptgroup',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-optgroup{display:block}.ts-optgroup.ts-optgroup--disabled{color:#757575}.ts-optgroup .ts-optgroup-label{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:500;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;color:#999;display:block;padding-left:12px}\"]\n    }),\n    __param(2, Optional()), __param(2, Inject(TS_OPTION_PARENT_COMPONENT)),\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef,\n        ElementRef, Object])\n], TsOptgroupComponent);\n\nlet TsOptionModule = class TsOptionModule {\n};\nTsOptionModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            MatRippleModule,\n            TsCheckboxModule,\n        ],\n        declarations: [\n            TsOptionComponent,\n            TsOptgroupComponent,\n            TsOptionDisplayDirective,\n        ],\n        exports: [\n            TsOptionComponent,\n            TsOptgroupComponent,\n            TsOptionDisplayDirective,\n        ],\n    })\n], TsOptionModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TS_OPTGROUP_PARENT_COMPONENT, TS_OPTION_PARENT_COMPONENT, TsOptgroupComponent, TsOptionComponent, TsOptionDisplayDirective, TsOptionModule, TsOptionSelectionChange, allOptionsAreSelected, countGroupLabelsBeforeOption, getOptionScrollPosition, someOptionsAreSelected, toggleAllOptions };\n//# sourceMappingURL=terminus-ui-option.js.map\n","<ts-checkbox\n  class=\"qa-select-option-checkbox\"\n  *ngIf=\"allowMultiple && selectComponent\"\n  tabIndex=\"-1\"\n  [isDisabled]=\"isDisabled\"\n  [isChecked]=\"selected\"\n>\n  <ng-template *ngTemplateOutlet=\"contentTemplate\"></ng-template>\n</ts-checkbox>\n\n<ng-container *ngIf=\"!allowMultiple || !selectComponent\">\n  <ng-template *ngTemplateOutlet=\"contentTemplate\"></ng-template>\n</ng-container>\n\n\n<div\n  class=\"mat-option-ripple\"\n  mat-ripple\n  [matRippleTrigger]=\"hostElement\"\n  [matRippleDisabled]=\"isDisabled\"\n></div>\n\n\n<ng-template #contentTemplate>\n  <span class=\"ts-option-text qa-option-text\">\n    <ng-content *ngIf=\"!optionTemplate\">\n    </ng-content>\n\n    <ng-container\n      *ngIf=\"optionTemplate\"\n      [ngTemplateOutlet]=\"optionTemplate\"\n      [ngTemplateOutletContext]=\"{$implicit: option}\"\n    ></ng-container>\n  </span>\n</ng-template>\n","<label\n  class=\"ts-optgroup-label qa-optgroup-label\"\n  [attr.id]=\"labelId\"\n  [attr.title]=\"label\"\n  (click)=\"toggle()\"\n>\n  <ts-checkbox\n    class=\"qa-optgroup-checkbox\"\n    [isDisabled]=\"isDisabled\"\n    [isChecked]=\"allSelected\"\n    [isIndeterminate]=\"someSelected\"\n    *ngIf=\"parent.allowMultiple\"\n  >\n    {{ label }}\n  </ts-checkbox>\n\n  <ng-container *ngIf=\"!parent.allowMultiple\">\n    {{ label }}\n  </ng-container>\n</label>\n\n\n<ng-content select=\"ts-option, ng-container\">\n</ng-content>\n","import { __decorate } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { Pipe, isDevMode, NgModule } from '@angular/core';\nimport { abbreviateNumber, roundNumber } from '@terminus/ngx-tools/utilities';\nimport { format, formatDistance } from 'date-fns';\nimport { isValidDate, isNumber } from '@terminus/ngx-tools/type-guards';\n\n/**\n * The abbreviate number pipe\n *\n * @example\n * {{ 1234 | tsAbbreviateNumber }}\n * {{ 1200 | tsAbbreviateNumber:2 }}\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/pipes</example-url>\n */\nlet TsAbbreviateNumberPipe = class TsAbbreviateNumberPipe {\n    transform(value, decimalPlace = 1) {\n        // Check for null values to avoid issues during data-binding\n        if (!value) {\n            return '';\n        }\n        return abbreviateNumber(value, decimalPlace);\n    }\n};\nTsAbbreviateNumberPipe = __decorate([\n    Pipe({ name: 'tsAbbreviateNumber' })\n], TsAbbreviateNumberPipe);\n\n/**\n * The date pipe\n *\n * @example\n * {{ date | tsDate }}\n * {{ date | tsDate:'timestamp' }}\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/pipes</example-url>\n */\nlet TsDatePipe = class TsDatePipe {\n    transform(value, format$1 = 'short') {\n        const validFormats = [\n            'short',\n            'medium',\n            'extended',\n            'timestamp',\n        ];\n        // Check for null values to avoid issues during data-binding\n        if (!value) {\n            return undefined;\n        }\n        // Check for date validity\n        if (!isValidDate(value) && isDevMode()) {\n            throw Error(`'${value}' is not a valid date object.`);\n        }\n        // Check for format validity\n        if ((validFormats.indexOf(format$1) < 0) && isDevMode()) {\n            throw Error(`'${format$1}' is not a valid format. Please see TsDateTypes for valid formats.`);\n        }\n        // If dealing with a date object, convert to string\n        const date = (typeof value === 'string') ? new Date(value) : value;\n        // Set the formatted date or an empty string if no format is matched\n        return (format$1 === 'short') ? format(date, 'MM-dd-yyyy')\n            : (format$1 === 'medium') ? format(date, 'MMM do, yyyy')\n                : (format$1 === 'extended') ? format(date, 'EEEE, MMMM do, yyyy, h:mm:ssa')\n                    : (format$1 === 'timestamp') ? new Date(date).toISOString()\n                        // NOTE: Final case is untestable since it would be caught by the `if` above\n                        // istanbul ignore next\n                        : '';\n    }\n};\nTsDatePipe = __decorate([\n    Pipe({ name: 'tsDate' })\n], TsDatePipe);\n\n/**\n * The round number pipe\n *\n * @example\n * {{ 3456.3456 | tsRoundNumber }}\n * {{ 3456.3456 | tsRoundNumber:2 }}\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/pipes</example-url>\n */\nlet TsRoundNumberPipe = class TsRoundNumberPipe {\n    transform(value, precision = 0) {\n        // Check for null values to avoid issues during data-binding\n        if (!value) {\n            return undefined;\n        }\n        return roundNumber(value, precision);\n    }\n};\nTsRoundNumberPipe = __decorate([\n    Pipe({ name: 'tsRoundNumber' })\n], TsRoundNumberPipe);\n\n/**\n * The sentence case pipe\n *\n * @example\n * {{ 'HERE IS MY STRING' | tsSentenceCase }}\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/pipes</example-url>\n */\nlet TsSentenceCasePipe = class TsSentenceCasePipe {\n    transform(value) {\n        // Check for null values to avoid issues during data-binding\n        if (!value) {\n            return undefined;\n        }\n        return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();\n    }\n};\nTsSentenceCasePipe = __decorate([\n    Pipe({ name: 'tsSentenceCase' })\n], TsSentenceCasePipe);\n\n/**\n * A pipe that displays the time since a date\n *\n * @example\n * {{ date | tsTimeAgo:oldDate }}\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/pipes</example-url>\n */\nlet TsTimeAgoPipe = class TsTimeAgoPipe {\n    transform(value, comparedDate = new Date()) {\n        // Check for null values to avoid issues during data-binding\n        if (value == null || value === '') {\n            return undefined;\n        }\n        // Check for date validity\n        if (!isValidDate(value) && isDevMode()) {\n            throw Error(`'${value}' is not a valid date.`);\n        }\n        if (!isValidDate(comparedDate) && isDevMode()) {\n            throw Error(`'${comparedDate}' is not a valid date.`);\n        }\n        // If dealing with a date objects, convert to strings\n        const date1 = (typeof value === 'string') ? new Date(value) : value;\n        const date2 = (typeof comparedDate === 'string') ? new Date(comparedDate) : comparedDate;\n        return formatDistance(date1, date2);\n    }\n};\nTsTimeAgoPipe = __decorate([\n    Pipe({ name: 'tsTimeAgo' })\n], TsTimeAgoPipe);\n\n/**\n * A pipe that converts a string to title case\n *\n * @example\n * {{ 'MY TEXT' | tsTitleCase }}\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/pipes</example-url>\n */\nlet TsTitleCasePipe = class TsTitleCasePipe {\n    transform(value) {\n        // Check for null values to avoid issues during data-binding\n        if (value == null || value === '') {\n            return undefined;\n        }\n        return value.toLowerCase().split(' ').map(word => (word.charAt(0).toUpperCase() + word.slice(1))).join(' ');\n    }\n};\nTsTitleCasePipe = __decorate([\n    Pipe({ name: 'tsTitleCase' })\n], TsTitleCasePipe);\n\n/**\n * Define the allowed truncation position types Used by {@link TsTruncateAtPipe} position\n */\nconst allowedTruncationTypes = [\n    'start',\n    'middle',\n    'end',\n];\n/**\n * The truncate at pipe\n *\n * @example\n * {{ 'Here is my string' | tsTruncateAt:7 }} // Outputs: `Here i…`\n * {{ 'Here is my string' | tsTruncateAt:8:'middle' }} // Outputs: `Here…ing`\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/pipes</example-url>\n */\nlet TsTruncateAtPipe = class TsTruncateAtPipe {\n    transform(value, charCount = 0, position = 'end') {\n        // Check for null values to avoid issues during data-binding\n        if (!value) {\n            return void 0;\n        }\n        // Insure the correct type\n        if (!isNumber(charCount)) {\n            // eslint-disable-next-line no-console\n            console.warn(`${charCount} is not a number.`);\n        }\n        if ((value.length < charCount) || (charCount < 1)) {\n            return value;\n        }\n        let newString = value;\n        const ellipses = '\\u2026';\n        switch (position) {\n            case ('start'):\n                newString = ellipses + value.slice(-(charCount - 1));\n                break;\n            case ('middle'):\n                let charCountStart;\n                let charCountEnd;\n                const TWO = 2;\n                // Determine how many characters are on each side of the split\n                // If there are an odd number of characters, the beginning of the string is longer\n                if ((charCount - 1) % TWO === 1) {\n                    charCountEnd = (charCount - 1) / TWO;\n                    charCountStart = charCountEnd + 1;\n                }\n                else {\n                    charCountEnd = (charCount - 1) / TWO;\n                    charCountStart = charCountEnd;\n                }\n                newString = value.slice(0, charCountStart) + ellipses + value.slice(-(charCountEnd));\n                break;\n            case ('end'):\n                newString = value.slice(0, charCount - 1) + ellipses;\n                break;\n            default:\n                newString = value.slice(0, charCount - 1) + ellipses;\n                break;\n        }\n        return newString;\n    }\n};\nTsTruncateAtPipe = __decorate([\n    Pipe({ name: 'tsTruncateAt' })\n], TsTruncateAtPipe);\n\nlet TsPipesModule = class TsPipesModule {\n};\nTsPipesModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        exports: [\n            TsAbbreviateNumberPipe,\n            TsDatePipe,\n            TsRoundNumberPipe,\n            TsSentenceCasePipe,\n            TsTimeAgoPipe,\n            TsTitleCasePipe,\n            TsTruncateAtPipe,\n        ],\n        providers: [\n            TsAbbreviateNumberPipe,\n            TsDatePipe,\n            TsRoundNumberPipe,\n            TsSentenceCasePipe,\n            TsTimeAgoPipe,\n            TsTitleCasePipe,\n            TsTruncateAtPipe,\n        ],\n        declarations: [\n            TsAbbreviateNumberPipe,\n            TsDatePipe,\n            TsRoundNumberPipe,\n            TsSentenceCasePipe,\n            TsTimeAgoPipe,\n            TsTitleCasePipe,\n            TsTruncateAtPipe,\n        ],\n    })\n], TsPipesModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsAbbreviateNumberPipe, TsDatePipe, TsPipesModule, TsRoundNumberPipe, TsSentenceCasePipe, TsTimeAgoPipe, TsTitleCasePipe, TsTruncateAtPipe, allowedTruncationTypes };\n//# sourceMappingURL=terminus-ui-pipes.js.map\n","import { __decorate, __metadata, __param } from 'tslib';\nimport { Overlay, OverlayConfig, ViewportRuler, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, ChangeDetectorRef, ElementRef, ViewChild, TemplateRef, Input, QueryList, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, InjectionToken, isDevMode, ViewContainerRef, NgZone, Inject, Optional, Host, Directive, Self, ContentChildren, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormControl, NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { TsCheckboxModule } from '@terminus/ui-checkbox';\nimport { TsChipCollectionComponent, TsChipModule } from '@terminus/ui-chip';\nimport { TsFormFieldComponent, TsFormFieldControl, TsFormFieldModule } from '@terminus/ui-form-field';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { TsInputModule } from '@terminus/ui-input';\nimport { TS_OPTION_PARENT_COMPONENT, TsOptionSelectionChange, countGroupLabelsBeforeOption, getOptionScrollPosition, TsOptionComponent, TsOptgroupComponent, TsOptionModule } from '@terminus/ui-option';\nimport { TsValidationMessagesModule } from '@terminus/ui-validation-messages';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Subject, defer, merge, Subscription, of, BehaviorSubject } from 'rxjs';\nimport { take, switchMap, filter, map, tap, delay, debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { TsDocumentService } from '@terminus/ngx-tools/browser';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@terminus/ngx-tools/coercion';\nimport { isArray } from '@terminus/ngx-tools/type-guards';\nimport { untilComponentDestroyed, hasRequiredControl } from '@terminus/ngx-tools/utilities';\nimport { TsUILibraryError, ControlValueAccessorProviderFactory } from '@terminus/ui-utilities';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { KEYS } from '@terminus/ngx-tools/keycodes';\n\nvar TsSelectionListPanelComponent_1;\n/**\n * Event object that is emitted when a {@link TsOptionComponent} is selected\n */\nclass TsSelectionListPanelSelectedEvent {\n    constructor(\n    // Reference to the panel that emitted the event\n    source, \n    // The option that was selected\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Unique ID for each instance\nlet nextUniqueId = 0;\n/**\n * The panel used to display selection list  {@link TsOptionComponent}s\n *\n * @example\n * <ts-selection-list-panel\n *              [options]=\"myOptionsQueryList\"\n *              [optionGroups]=\"myOptionGroupsQueryList\"\n *              (optionsSelected)=\"doSomething($event)\"\n * ></ts-selection-list-panel>\n */\nlet TsSelectionListPanelComponent = TsSelectionListPanelComponent_1 = class TsSelectionListPanelComponent {\n    constructor(changeDetectorRef, elementRef) {\n        this.changeDetectorRef = changeDetectorRef;\n        this.elementRef = elementRef;\n        /**\n         * Whether the panel should be visible\n         */\n        this.showPanel = false;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-selection-list-panel-${nextUniqueId++}`;\n        /**\n         * Whether the panel is open\n         */\n        this.isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger\n         */\n        this.displayWith = null;\n        this._id = this.uid;\n        /**\n         * Event that is emitted when the panel is closed\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event that is emitted when the panel is opened\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted whenever an option from the list is selected\n         */\n        this.optionSelected = new EventEmitter();\n    }\n    /**\n     * Return the panel's scrollTop\n     *\n     * @returns The scrollTop number\n     */\n    get scrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Set the panel scrollTop\n     *\n     * This allows us to manually scroll to display options above or below the fold, as they are not actually being focused when active.\n     *\n     * @param scrollTop - The number of pixels to move\n     */\n    set scrollTop(scrollTop) {\n        // istanbul ignore else\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        // Note: this ID is being set internally by `TsSelectComponent` so no fallback is needed.\n        this._id = value;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Set up\n     */\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        // Set the initial visibility state.\n        this.setVisibility();\n    }\n    /**\n     * Emit the `select` event\n     *\n     * @param option\n     */\n    emitSelectEvent(option) {\n        const event = new TsSelectionListPanelSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Set the visibility of the panel based on whether options exist\n     */\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this.changeDetectorRef.markForCheck();\n    }\n};\nTsSelectionListPanelComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef }\n];\n__decorate([\n    ViewChild(TemplateRef),\n    __metadata(\"design:type\", TemplateRef)\n], TsSelectionListPanelComponent.prototype, \"template\", void 0);\n__decorate([\n    ViewChild('panel'),\n    __metadata(\"design:type\", ElementRef)\n], TsSelectionListPanelComponent.prototype, \"panel\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function)\n], TsSelectionListPanelComponent.prototype, \"displayWith\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsSelectionListPanelComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", QueryList)\n], TsSelectionListPanelComponent.prototype, \"optionGroups\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", QueryList)\n], TsSelectionListPanelComponent.prototype, \"options\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListPanelComponent.prototype, \"closed\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListPanelComponent.prototype, \"opened\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListPanelComponent.prototype, \"optionSelected\", void 0);\nTsSelectionListPanelComponent = TsSelectionListPanelComponent_1 = __decorate([\n    Component({\n        selector: 'ts-selection-list-panel',\n        template: \"<ng-template>\\n  <div\\n    class=\\\"ts-selection-list-panel__inner\\\"\\n    [class.ts-selection-list--visible]=\\\"showPanel\\\"\\n    role=\\\"listbox\\\"\\n    [attr.id]=\\\"id\\\"\\n    #panel\\n  >\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n        host: { class: 'ts-selection-list-panel qa-selection-list-panel' },\n        providers: [\n            {\n                provide: TS_OPTION_PARENT_COMPONENT,\n                useExisting: TsSelectionListPanelComponent_1,\n            },\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsSelectionListPanel',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-selection-list-panel__inner{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);background:#fafafa;border-bottom-left-radius:4px;border-bottom-right-radius:4px;color:#302d35;max-height:256px;max-width:none;min-width:112px;overflow:auto;-webkit-overflow-scrolling:touch;position:relative;visibility:hidden;width:100%}@media screen and (-ms-high-contrast:active){.ts-selection-list-panel__inner{outline:solid 1px}}.ts-selection-list-panel__inner .ts-option.ts-option--selected:not(.ts-active):not(:hover){background:#1777b6}.ts-selection-list-panel__inner .ts-option:not(.ts-option--template){font-size:inherit;height:3em;line-height:3em}.ts-selection-list-panel__inner.ts-selection-list--visible{visibility:visible}.ts-selection-list-panel-above .ts-selection-list-panel__inner{border-radius:4px 4px 0 0}.ts-selection-list-panel__inner .ts-divider-horizontal{margin-top:-1px}\"]\n    }),\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef,\n        ElementRef])\n], TsSelectionListPanelComponent);\n\nvar TsSelectionListTriggerDirective_1;\n// Injection token that determines the scroll handling while the panel is open\nconst TS_SELECTION_LIST_SCROLL_STRATEGY = new InjectionToken('ts-selection-list-scroll-strategy');\n/**\n * @param overlay\n */\nconst TS_SELECTION_LIST_SCROLL_STRATEGY_FACTORY = (overlay) => () => overlay.scrollStrategies.reposition();\nconst TS_SELECTION_LIST_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: TS_SELECTION_LIST_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: TS_SELECTION_LIST_SCROLL_STRATEGY_FACTORY,\n};\n// The max height of the select's overlay panel\nconst SELECTION_LIST_PANEL_MAX_HEIGHT = 256;\n// Unique ID for each instance\nlet nextUniqueId$1 = 0;\n/**\n * A directive that adds selection-list trigger functionality to an input\n *\n * @example\n * <input\n *              [tsSelectionListTrigger]=\"myReferenceToSelectionListPanel\"\n *              [tsSelectionListDisabled]=\"false\"\n *              autocomplete=\"off\"\n *              [reopenAfterSelection]=\"false\"\n * />\n */\nlet TsSelectionListTriggerDirective = TsSelectionListTriggerDirective_1 = class TsSelectionListTriggerDirective {\n    constructor(elementRef, overlay, viewContainerRef, ngZone, changeDetectorRef, documentService, viewportRuler, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    scrollStrategy, formField) {\n        this.elementRef = elementRef;\n        this.overlay = overlay;\n        this.viewContainerRef = viewContainerRef;\n        this.ngZone = ngZone;\n        this.changeDetectorRef = changeDetectorRef;\n        this.documentService = documentService;\n        this.viewportRuler = viewportRuler;\n        this.formField = formField;\n        /**\n         * Whether the panel can open the next time it is focused. Used to prevent a focused, closed panel from being reopened if\n         * the user switches to another browser tab and then comes back.\n         */\n        this.canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel\n         */\n        this.closeKeyEventStream = new Subject();\n        /*\n         * Note: In some cases `openPanel` can end up being called after the component is destroyed. This flag is to ensure that we don't try to\n         * run change detection on a destroyed view.\n         */\n        this.componentDestroyed = false;\n        /**\n         * Whether or not the label state is being overridden\n         */\n        this.manuallyFloatingLabel = false;\n        /**\n         * Stream of option selections\n         */\n        this.optionSelections = defer(() => {\n            if (this.selectionListPanel && this.selectionListPanel.options) {\n                // TODO: Refactor deprecation\n                // eslint-disable-next-line deprecation/deprecation\n                return merge(...this.selectionListPanel.options.map(option => option.selectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the selection list will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this.ngZone.onStable\n                .asObservable()\n                // TODO: Refactor deprecation\n                // eslint-disable-next-line deprecation/deprecation\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        /**\n         * Store whether the overlay is currently attached\n         */\n        this.overlayAttached = false;\n        /**\n         * Subscription to viewport size changes\n         */\n        this.viewportSubscription = Subscription.EMPTY;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-selection-list-trigger-${nextUniqueId$1++}`;\n        /**\n         * Reflect the settings from the parent\n         */\n        this.allowMultiple = false;\n        /**\n         * The `autocomplete` attribute to be set on the input element.\n         */\n        // NOTE: Input has specific naming since it is accepting a standard HTML data attribute.\n        // eslint-disable-next-line @angular-eslint/no-input-rename\n        this.autocompleteAttribute = 'off';\n        this._selectionListDisabled = false;\n        this._reopenAfterSelection = false;\n        /**\n         * Emit when the backdrop is clicked\n         */\n        this.backdropClicked = new EventEmitter();\n        /**\n         * View -> model callback called when value changes\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.onChange = () => { };\n        /**\n         * View -> model callback called when the DOM has been touched\n         */\n        this.onTouched = () => { };\n        /**\n         * Event handler for when the window is blurred.\n         *\n         * Needs to be an arrow function in order to preserve the context.\n         */\n        this.windowBlurHandler = () => {\n            // If the user blurred the window while the selection list is focused, it means that it'll be refocused when they come back. In this\n            // case we want to skip the first focus event, if the pane was closed, in order to avoid reopening it unintentionally.\n            this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n        };\n        // istanbul ignore else\n        if (typeof window !== 'undefined') {\n            ngZone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n        this.scrollStrategy = scrollStrategy;\n        this.document = this.documentService.document;\n    }\n    /**\n     * The currently active option, coerced to TsOptionComponent type\n     */\n    get activeOption() {\n        if (this.selectionListPanel && this.selectionListPanel.keyManager) {\n            return this.selectionListPanel.keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Calculates the height of the options\n     *\n     * Only called if at least one option exists\n     */\n    get itemHeight() {\n        // Try to use the 2nd option in case the first option is blank or a filter etc. Fall back to the first item if needed.\n        const options = this.selectionListPanel.options.toArray();\n        const option = options[1] || options[0];\n        return option && option.elementRef.nativeElement.offsetHeight;\n    }\n    /**\n     * A stream of actions that should close the panel, including when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        var _a;\n        // eslint-disable-next-line deprecation/deprecation\n        return merge(this.optionSelections, this.selectionListPanel.keyManager.tabOut.pipe(filter(() => this.overlayAttached)), this.closeKeyEventStream, \n        // eslint-disable-next-line deprecation/deprecation\n        ((_a = this.overlayRef) === null || _a === void 0 ? void 0 : _a.backdropClick()) || of(''))\n            .pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof TsOptionSelectionChange ? event : null)));\n    }\n    /**\n     * Whether or not the panel is open\n     */\n    get panelOpen() {\n        return this.overlayAttached && this.selectionListPanel.showPanel;\n    }\n    /**\n     * Whether the trigger is disabled. When disabled, the element will act as a regular input and the user won't be able to open the panel.\n     *\n     * @param value\n     */\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    set selectionListDisabled(value) {\n        this._selectionListDisabled = coerceBooleanProperty(value);\n    }\n    get selectionListDisabled() {\n        return this._selectionListDisabled;\n    }\n    /**\n     * Define if the panel should reopen after a selection is made\n     *\n     * @param value\n     */\n    set reopenAfterSelection(value) {\n        this._reopenAfterSelection = value;\n    }\n    get reopenAfterSelection() {\n        return this._reopenAfterSelection;\n    }\n    /**\n     * Clean up subscriptions and destroy the panel\n     */\n    ngOnDestroy() {\n        // istanbul ignore else\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n    /**\n     * Close the panel\n     *\n     * @param overrideReopenFlag - Whether the panel should reopen\n     */\n    closePanel(overrideReopenFlag = false) {\n        this.resetLabel();\n        if (!this.overlayAttached) {\n            return;\n        }\n        // istanbul ignore else\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.selectionListPanel.closed.emit();\n        }\n        this.selectionListPanel.isOpen = this.overlayAttached = false;\n        // istanbul ignore else\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n        const options = this.selectionListPanel.options.toArray();\n        // Only allow reopening when in multiple mode and when there are options, which could be selected\n        if (this.allowMultiple && this.reopenAfterSelection && !overrideReopenFlag && options.length) {\n            this.openPanel();\n        }\n    }\n    /**\n     * Handle the focus event\n     */\n    handleFocus() {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        }\n        else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n            this.floatLabel(true);\n        }\n    }\n    /**\n     * Handle input into the trigger\n     *\n     * @param event - The keyboard event\n     */\n    handleInput(event) {\n        const target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load, focus and blur, in addition to when the user actually\n        // changed the value. To filter out all of the extra events, we save the value on focus and between `input` events, and we check\n        // whether it changed. See: https://connect.microsoft.com/IE/feedback/details/885747/\n        // istanbul ignore else\n        if (this.previousValue !== value && this.document.activeElement === event.target) {\n            this.previousValue = value;\n            this.onChange(value);\n            // istanbul ignore else\n            if (this.canOpen()) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * Handle keydown events\n     *\n     * @param event - The keyboard event\n     */\n    handleKeydown(event) {\n        const keyCode = event.code;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE in line with other browsers. By default,\n        // pressing escape on IE will cause it to revert the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === KEYS.ESCAPE.code) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === KEYS.ENTER.code && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.selectionListPanel) {\n            const prevActiveItem = this.selectionListPanel.keyManager.activeItem;\n            const isArrowKey = keyCode === KEYS.UP_ARROW.code || keyCode === KEYS.DOWN_ARROW.code;\n            if (this.panelOpen || keyCode === KEYS.TAB.code) {\n                this.selectionListPanel.keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this.canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.selectionListPanel.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n    /**\n     * Open the panel\n     */\n    openPanel() {\n        this.attachOverlay();\n        this.floatLabel();\n    }\n    /**\n     * Register the onChange function\n     *\n     * NOTE: Implemented as part of ControlValueAccessor\n     *\n     * @param fn - The new onChange function\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Register the onTouched function\n     *\n     * NOTE: Implemented as part of ControlValueAccessor\n     *\n     * @param fn - The new onTouched function\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Set the disabled state\n     *\n     * NOTE: Implemented as part of ControlValueAccessor\n     *\n     * @param isDisabled - Whether the element should be set to disabled\n     */\n    setDisabledState(isDisabled) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * Function used to write the value by the model\n     *\n     * NOTE: Implemented as part of ControlValueAccessor\n     * NOTE: This method is called by the forms API to write to the view when programmatic changes from model to view are requested.\n     *\n     * @param value - The value to write\n     */\n    writeValue(value) { }\n    /**\n     * Attach the overlay\n     */\n    attachOverlay() {\n        if (!this.selectionListPanel && isDevMode()) {\n            throw new TsUILibraryError(`TsSelectionListTriggerDirective: Attempting to open an undefined instance of 'ts-selection-list-panel'.`);\n        }\n        if (this.overlayRef) {\n            // Update the panel width in case anything has changed\n            this.overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n        else {\n            this.portal = new TemplatePortal(this.selectionListPanel.template, this.viewContainerRef);\n            this.overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef.keydownEvents().pipe(untilComponentDestroyed(this)).subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.code === KEYS.ESCAPE.code || (event.code === KEYS.UP_ARROW.code && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n            this.viewportSubscription = this.viewportRuler.change().pipe(untilComponentDestroyed(this)).subscribe(() => {\n                if (this.panelOpen && this.overlayRef) {\n                    this.overlayRef.updateSize({ width: this.getPanelWidth() });\n                }\n            });\n        }\n        // istanbul ignore else\n        if (this.overlayRef && !this.overlayRef.hasAttached()) {\n            this.overlayRef.attach(this.portal);\n            this.subscribeToClosingActions();\n            this.overlayRef.backdropClick().pipe(untilComponentDestroyed(this)).subscribe(() => {\n                this.backdropClicked.emit();\n            });\n        }\n        const wasOpen = this.panelOpen;\n        this.selectionListPanel.setVisibility();\n        this.selectionListPanel.isOpen = this.overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the panel won't be shown if there are no options.\n        // istanbul ignore else\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.selectionListPanel.opened.emit();\n        }\n    }\n    /**\n     * Determine whether the panel can be opened\n     */\n    canOpen() {\n        const element = this.elementRef.nativeElement;\n        const isDisabled = coerceBooleanProperty(element.disabled)\n            || coerceBooleanProperty(element.getAttribute('data-disabled'))\n            || coerceBooleanProperty(this.selectionListDisabled);\n        const isReadOnly = coerceBooleanProperty(element.readOnly);\n        const allowsUserInput = coerceBooleanProperty(element.getAttribute('data-user-input'));\n        if (allowsUserInput) {\n            return !isReadOnly && !isDisabled;\n        }\n        return !isDisabled;\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     *\n     * @param skip\n     */\n    clearPreviousSelectedOption(skip) {\n        this.selectionListPanel.options.forEach(option => {\n            // NOTE: Loose check (`!=`) needed for comparing classes\n            // istanbul ignore else\n            // eslint-disable-next-line eqeqeq\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    /**\n     * Destroy the panel\n     */\n    destroyPanel() {\n        // istanbul ignore else\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n    /**\n     * In 'auto' mode, the label will animate down as soon as focus is lost.  This causes the value to jump when selecting an option with the\n     * mouse. This method manually floats the label until the panel can be closed.\n     *\n     * @param shouldAnimate - Whether the label should be animated when it is floated\n     */\n    floatLabel(shouldAnimate = false) {\n        // istanbul ignore else\n        if (this.formField && this.formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this.formField.animateAndLockLabel();\n            }\n            else {\n                this.formField.floatLabel = 'always';\n            }\n            this.manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * Return the connected element\n     *\n     * @returns The ElementRef\n     */\n    getConnectedElement() {\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it\n     */\n    getHostWidth() {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Create a config for an overlay\n     *\n     * @returns The overlay config\n     */\n    getOverlayConfig() {\n        return new OverlayConfig({\n            backdropClass: 'ts-selection-list__backdrop',\n            direction: 'ltr',\n            hasBackdrop: true,\n            positionStrategy: this.getOverlayPositionStrategy(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n        });\n    }\n    /**\n     * Get the overlay position strategy\n     *\n     * @returns The position strategy\n     */\n    getOverlayPositionStrategy() {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ]);\n        return this.positionStrategy;\n    }\n    /**\n     * Return the panel width\n     *\n     * @returns The width\n     */\n    getPanelWidth() {\n        return this.getHostWidth();\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the correct options, or to 0 if the consumer opted into it\n     */\n    resetActiveItem() {\n        this.selectionListPanel.keyManager.setActiveItem(-1);\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state\n     */\n    resetLabel() {\n        // istanbul ignore else\n        if (this.manuallyFloatingLabel) {\n            this.formField.floatLabel = 'auto';\n            this.manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated control to that value.\n     * It will also mark the control as dirty if this interaction stemmed from the user.\n     *\n     * @param event - The event containing the option\n     */\n    setValueAndClose(event) {\n        // istanbul ignore else\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.elementRef.nativeElement.focus();\n            this.selectionListPanel.emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the stream every time the option list changes\n     *\n     * @returns The subscription\n     */\n    subscribeToClosingActions() {\n        const firstStable = this.ngZone.onStable.asObservable().pipe(take(1));\n        const optionChanges = this.selectionListPanel.options.changes.pipe(\n        // TODO: Refactor deprecation\n        // eslint-disable-next-line deprecation/deprecation\n        tap(() => this.positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        // eslint-disable-next-line deprecation/deprecation\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // Create a new stream of panelClosingActions, replacing any previous streams that were created, and flatten it so our stream only\n        // emits closing events...\n        // TODO: Refactor deprecation\n        // eslint-disable-next-line deprecation/deprecation\n        switchMap(() => {\n            // Focus the first option when options change\n            this.selectionListPanel.keyManager.setActiveItem(0);\n            this.selectionListPanel.setVisibility();\n            return this.panelClosingActions;\n        }), \n        // When the first closing event occurs...\n        take(1))\n            // Set the value, close the panel, and complete.\n            .subscribe((event) => {\n            // istanbul ignore else\n            if (event && event.source && event.source.value !== undefined) {\n                this.setValueAndClose(event);\n            }\n            else {\n                this.closePanel();\n            }\n        });\n    }\n    /**\n     * Scroll to an option\n     *\n     * Given that we are not actually focusing active options, we must manually adjust scroll to reveal options below the fold. First, we find\n     * the offset of the option from the top of the panel. If that offset is below the fold, the new scrollTop will be the offset - the panel\n     * height + the option height, so the active option will be just visible at the bottom of the panel. If that offset is above the top of\n     * the visible panel, the new scrollTop will become the offset. If that offset is visible within the panel already, the scrollTop is not\n     * adjusted.\n     */\n    scrollToOption() {\n        const index = this.selectionListPanel.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index, this.selectionListPanel.options, this.selectionListPanel.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.selectionListPanel.scrollTop = 0;\n        }\n        else {\n            this.selectionListPanel.scrollTop = getOptionScrollPosition(index + labelCount, this.itemHeight, this.selectionListPanel.scrollTop, SELECTION_LIST_PANEL_MAX_HEIGHT);\n        }\n    }\n};\nTsSelectionListTriggerDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: TsDocumentService },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [TS_SELECTION_LIST_SCROLL_STRATEGY,] }] },\n    { type: TsFormFieldComponent, decorators: [{ type: Optional }, { type: Host }] }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListTriggerDirective.prototype, \"allowMultiple\", void 0);\n__decorate([\n    Input('autocomplete'),\n    __metadata(\"design:type\", Object)\n], TsSelectionListTriggerDirective.prototype, \"autocompleteAttribute\", void 0);\n__decorate([\n    Input('tsSelectionListTriggerDisabled'),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsSelectionListTriggerDirective.prototype, \"selectionListDisabled\", null);\n__decorate([\n    Input('tsSelectionListTrigger'),\n    __metadata(\"design:type\", TsSelectionListPanelComponent)\n], TsSelectionListTriggerDirective.prototype, \"selectionListPanel\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsSelectionListTriggerDirective.prototype, \"reopenAfterSelection\", null);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListTriggerDirective.prototype, \"backdropClicked\", void 0);\nTsSelectionListTriggerDirective = TsSelectionListTriggerDirective_1 = __decorate([\n    Directive({\n        selector: '[tsSelectionListTrigger]',\n        host: {\n            'class': 'ts-selection-list-trigger',\n            '[attr.autocomplete]': 'autocompleteAttribute',\n            '[attr.role]': 'selectionListDisabled ? null : \"combobox\"',\n            '[attr.aria-autocomplete]': 'selectionListDisabled ? null : \"list\"',\n            '[attr.aria-activedescendant]': 'activeOption?.id',\n            '[attr.aria-expanded]': 'selectionListDisabled ? null : panelOpen.toString()',\n            '[attr.aria-owns]': '(selectionListDisabled || !panelOpen) ? null : selectionListPanel?.id',\n            // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n            // a little earlier. This avoids issues where IE delays the focusing of the input.\n            '(blur)': 'onTouched()',\n            '(focusin)': 'handleFocus()',\n            '(click)': 'handleFocus()',\n            '(input)': 'handleInput($event)',\n            '(keydown)': 'handleKeydown($event)',\n        },\n        providers: [\n            ControlValueAccessorProviderFactory(TsSelectionListTriggerDirective_1),\n        ],\n        exportAs: 'tsSelectionListTrigger',\n    }),\n    __param(7, Inject(TS_SELECTION_LIST_SCROLL_STRATEGY)),\n    __param(8, Optional()), __param(8, Host()),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        Overlay,\n        ViewContainerRef,\n        NgZone,\n        ChangeDetectorRef,\n        TsDocumentService,\n        ViewportRuler, Object, TsFormFieldComponent])\n], TsSelectionListTriggerDirective);\n\nvar TsSelectionListComponent_1;\n// Unique ID for each instance\nlet nextUniqueId$2 = 0;\nconst DEFAULT_MINIMUM_CHARACTER_COUNT = 2;\nconst DEFAULT_DEBOUNCE_DELAY = 200;\n/**\n * The event object that is emitted when the select value has changed\n */\nclass TsSelectionListChange {\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * The selection list UI Component\n *\n * @example\n * <ts-selection-list\n *              [allowMultiple]=\"allowMultiple\"\n *              [displayFormatter]=\"formatterFunc\"\n *              [valueComparator]=\"comparatorFunc\"\n *              debounceDelay=\"300\"\n *              [formControl]=\"myFormControl\"\n *              hint=\"Begin typing to search..\"\n *              [isDisabled]=\"isDisabled\"\n *              label=\"Select options:\"\n *              name=\"product selections\"\n *              options=\"[{}, {}, ...]\"\n *              [showProgress]=\"true\"\n *              theme=\"primary\"\n *              (closed)=\"panelWasClosed($event)\"\n *              (duplicateSelection)=\"duplicateWasSelected($event)\"\n *              (opened)=\"panelWasOpened($event)\"\n *              (optionSelected)=\"mySelected($event)\"\n *              (optionDeselected)=\"myDeselected($event)\"\n *              (queryChange)=\"myQueryChange($event)\"\n *              (selectionChange)=\"mySelection($event)\"\n * ></ts-selection-list>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/selection-list</example-url>\n */\nlet TsSelectionListComponent = TsSelectionListComponent_1 = class TsSelectionListComponent {\n    constructor(changeDetectorRef, documentService, elementRef, ngControl) {\n        this.changeDetectorRef = changeDetectorRef;\n        this.documentService = documentService;\n        this.elementRef = elementRef;\n        this.ngControl = ngControl;\n        /**\n         * Give the component an explicit name\n         * TODO: remove once select & autocomplete have been removed https://github.com/GetTerminus/terminus-ui/issues/1678\n         */\n        this.componentName = 'TsSelectionListComponent';\n        /**\n         * Define the internal FormControl\n         */\n        this.selectionListFormControl = new FormControl([]);\n        /**\n         * Subject used to alert the parent {@link TsFormFieldComponent} when the label gap should be recalculated\n         *\n         * Implemented as part of TsFormFieldControl.\n         */\n        this.labelChanges = new Subject();\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        this.optionIds = '';\n        /**\n         * Whether or not the overlay panel is open\n         */\n        this.panelOpen = false;\n        /**\n         * Since the FormFieldComponent is inside this template, we cannot use a provider to pass this component instance to the form field.\n         * Instead, we pass it manually through the template with this reference.\n         */\n        this.selfReference = this;\n        /*\n         * Implemented as part of TsFormFieldControl.\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-selection-list-${nextUniqueId$2++}`;\n        /**\n         * Management of the query string\n         */\n        this.querySubject = new BehaviorSubject('');\n        /**\n         * Store the search query\n         */\n        this.searchQuery = '';\n        /**\n         * Define if multiple selections are allowed\n         */\n        this.allowMultiple = false;\n        /**\n         * Define if should allow duplicate selections\n         */\n        this.allowDuplicateSelections = false;\n        /**\n         * Define if the user is allowed to type to search/filter\n         */\n        this.allowUserInput = true;\n        this._debounceDelay = DEFAULT_DEBOUNCE_DELAY;\n        /**\n         * Define if the required marker should be hidden\n         */\n        this.hideRequiredMarker = false;\n        this._id = this.uid;\n        /**\n         * Define if the control should be disabled\n         */\n        this.isDisabled = false;\n        this._isRequired = false;\n        this._minimumCharacters = DEFAULT_MINIMUM_CHARACTER_COUNT;\n        /**\n         * Define whether a validation or a hint needed.\n         */\n        this.noValidationOrHint = false;\n        /**\n         * Define if the panel should reopen after a selection is made\n         *\n         * NOTE: Though it is technically 're-opening', it happens fast enough so that it doesn't appear to close at all.\n         */\n        this.reopenAfterSelection = false;\n        /**\n         * Define if the input should currently be showing a progress spinner\n         */\n        this.showProgress = false;\n        /**\n         * Define the component theme\n         */\n        this.theme = 'primary';\n        /**\n         * Define if validation messages should be shown immediately or on blur\n         */\n        this.validateOnChange = false;\n        this._displayFormatter = v => v;\n        /**\n         * Define the comparator for the values of the options\n         *\n         * @param a\n         * @param b\n         */\n        this.valueComparator = (a, b) => a === b;\n        /**\n         * Emit when the backdrop is clicked\n         */\n        this.backdropClicked = new EventEmitter();\n        /**\n         * Emit when the panel is closed\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Emit the option when a duplicate selection is made\n         */\n        this.duplicateSelection = new EventEmitter();\n        /**\n         * Emit when the panel is opened\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Emit the selected option\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Emit the deselected option\n         */\n        this.optionDeselected = new EventEmitter();\n        /**\n         * Emit the new query\n         */\n        this.queryChange = new EventEmitter();\n        /**\n         * Emit the current selections when any selection changes\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily to facilitate the two-way binding for the `value`\n         * input.\n         *\n         * Needed for {@link TsFormFieldComponent}.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Stub in onChange\n         *\n         * Needed for ControlValueAccessor (View -> model callback called when value changes)\n         */\n        // istanbul ignore next\n        this.onChange = () => { };\n        /**\n         * Stub in onTouched\n         *\n         * Needed for ControlValueAccessor (View -> model callback called when select has been touched)\n         */\n        // istanbul ignore next\n        this.onTouched = () => { };\n        this.document = this.documentService.document;\n        // This is the assigned FormControl or NgModel\n        // istanbul ignore else\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * Determines whether the select or the input has a value\n     */\n    get empty() {\n        // Since we are using ViewChild, we need to verify the existence of the element\n        const input = this.inputElement && this.inputElement.nativeElement;\n        return input\n            ? !this.selectionListFormControl.value.length && !this.inputElement.nativeElement.value.length\n            : !this.selectionListFormControl.value.length;\n    }\n    /**\n     * Determines whether the input has focus\n     */\n    get focused() {\n        if (this.isDisabled) {\n            return false;\n        }\n        const el = this.inputElement && this.inputElement.nativeElement;\n        return (this.document.activeElement === el) || this.panelOpen;\n    }\n    /**\n     * Determine if the label should float\n     */\n    get shouldLabelFloat() {\n        return this.focused || !this.empty;\n    }\n    /**\n     * Determine if the dropdown arrow icon should be visible\n     */\n    get shouldShowDropdownIcon() {\n        return !!this.options.length;\n    }\n    /**\n     * Determine the trigger display when no user input is allowed\n     */\n    get staticTriggerDisplay() {\n        const selection = this.ngControl.value[0];\n        const display = selection ? this.displayFormatter(selection) : '';\n        if (this.allowMultiple || !display) {\n            return '';\n        }\n        return display;\n    }\n    /**\n     * Define a debounce delay for the query stream\n     *\n     * @param value\n     */\n    set debounceDelay(value) {\n        this._debounceDelay = coerceNumberProperty(value, DEFAULT_DEBOUNCE_DELAY);\n    }\n    get debounceDelay() {\n        return this._debounceDelay;\n    }\n    /**\n     * Define a hint for the input\n     *\n     * @param value\n     */\n    set hint(value) {\n        this._hint = value;\n    }\n    get hint() {\n        return this._hint;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Define if the control is required\n     *\n     * @param value\n     */\n    set isRequired(value) {\n        this._isRequired = value;\n    }\n    get isRequired() {\n        const ctrl = this.ngControl && this.ngControl.control;\n        const requiredFormControl = !!ctrl && hasRequiredControl(ctrl);\n        return this._isRequired || requiredFormControl;\n    }\n    /**\n     * Define a minimum character count for queries\n     *\n     * @param value\n     */\n    set minimumCharacters(value) {\n        this._minimumCharacters = coerceNumberProperty(value, DEFAULT_MINIMUM_CHARACTER_COUNT);\n    }\n    get minimumCharacters() {\n        return this._minimumCharacters;\n    }\n    /**\n     * Value of the select control\n     *\n     * @param newValue\n     */\n    set value(newValue) {\n        // istanbul ignore else\n        if (newValue !== this._value) {\n            this._value = newValue;\n        }\n    }\n    get value() {\n        return this._value;\n    }\n    /**\n     * Define the formatter for the selected items.\n     *\n     * @param value\n     */\n    set displayFormatter(value) {\n        this._displayFormatter = value ? value : v => v;\n    }\n    get displayFormatter() {\n        return this._displayFormatter;\n    }\n    /**\n     * Seed initial values and set up watchers\n     */\n    ngOnInit() {\n        // Seed the control value\n        // NOTE: When the consumer is using an ngModel, the value is not set on the first cycle.\n        // We need to push it to the next event loop. When using a FormControl, the value is there on the first run.\n        // eslint-disable-next-line dot-notation\n        if (this.ngControl && this.ngControl['form']) {\n            // istanbul ignore else\n            if (this.ngControl.value && !isArray(this.ngControl.value)) {\n                throw new TsUILibraryError(`TsSelectionListComponent: Form control values must be an array of values`);\n            }\n            else if (this.ngControl.value && this.ngControl.value.length) {\n                this.selectionListFormControl.setValue(this.ngControl.value);\n                if (!this.allowMultiple) {\n                    this.searchQuery = this.displayFormatter(this.ngControl.value[0]);\n                }\n            }\n            // Support dynamic form control updates\n            // istanbul ignore else\n            if (this.ngControl.valueChanges) {\n                this.ngControl.valueChanges\n                    .pipe(untilComponentDestroyed(this))\n                    .subscribe(newValue => {\n                    // istanbul ignore else\n                    if (newValue) {\n                        if (newValue[0]) {\n                            this.searchQuery = this.displayFormatter(newValue[0]);\n                        }\n                        if (this.allowMultiple) {\n                            this.selectionListFormControl.setValue(newValue, { emitEvent: false });\n                        }\n                        else {\n                            this.selectionListFormControl.setValue([newValue[0]], { emitEvent: false });\n                        }\n                        this.changeDetectorRef.detectChanges();\n                    }\n                });\n            }\n        }\n        else {\n            // HACK: Wait until the next detection cycle to set the value from an ngModel.\n            // NOTE: Using CDR.detectChanges causes errors in children that expect TsOptionComponent to exist.\n            Promise.resolve().then(() => {\n                // istanbul ignore else\n                if (this.ngControl && this.ngControl.value) {\n                    if (!isArray(this.ngControl.value)) {\n                        throw new TsUILibraryError(`TsSelectionListComponent: ngModel must be an array of values`);\n                    }\n                    this.selectionListFormControl.setValue(this.ngControl.value);\n                    // istanbul ignore else\n                    if (!this.allowMultiple) {\n                        this.searchQuery = this.displayFormatter(this.ngControl.value[0]);\n                    }\n                }\n            });\n        }\n        // Propagate changes from form control\n        this.selectionListFormControl.valueChanges.pipe(untilComponentDestroyed(this)).subscribe(() => {\n            this.propagateChanges();\n        });\n    }\n    /**\n     * Subscribe to panel events and query subject changes\n     */\n    ngAfterViewInit() {\n        // Seed any initial value into the query subject\n        this.querySubject.next(this.inputElement.nativeElement.value);\n        // Wire up listeners for panel events\n        this.trigger.selectionListPanel.opened.pipe(untilComponentDestroyed(this)).subscribe(() => {\n            this.opened.emit();\n        });\n        // Wire up listeners for panel opened event\n        this.opened.pipe(untilComponentDestroyed(this)).subscribe(() => {\n            // NOTE: setTimeout is added to resolve a timing issue. Promise.resolve().then does not work in this case.\n            // Without setTimeout when opened event emitted, panel is still undefined.\n            setTimeout(() => {\n                this.scrollActiveOptionIntoView();\n            });\n        });\n        this.trigger.selectionListPanel.closed.pipe(untilComponentDestroyed(this)).subscribe(() => {\n            this.closed.emit();\n        });\n        this.trigger.backdropClicked.pipe(untilComponentDestroyed(this)).subscribe(() => {\n            this.backdropClicked.emit();\n        });\n        // Take a stream of query changes\n        this.querySubject.pipe(untilComponentDestroyed(this), debounceTime(this.debounceDelay), \n        // If the query is shorter than allowed, convert to an empty string\n        // eslint-disable-next-line deprecation/deprecation\n        switchMap(query => ((query.length >= this.minimumCharacters) ? of(query) : of(''))), distinctUntilChanged()).subscribe((query) => {\n            const inputValue = this.inputElement.nativeElement.value;\n            // NOTE: If the input value is valid but the query is too short, an option was likely just selected and a new query has started\n            if (query.length < this.minimumCharacters && inputValue.length >= this.minimumCharacters) {\n                query = inputValue;\n            }\n            this.queryChange.emit(query);\n            // istanbul ignore else\n            if (!this.panelOpen) {\n                this.open();\n            }\n        });\n    }\n    /**\n     * Needed for untilComponentDestroyed\n     */\n    ngOnDestroy() { }\n    /**\n     * Close the overlay panel\n     */\n    close() {\n        if (this.trigger.panelOpen) {\n            this.panelOpen = false;\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n            if (!this.allowMultiple) {\n                const inputValue = this.inputElement.nativeElement.value;\n                const controlValue = this.ngControl.value;\n                // If the input value doesn't match the selection, then the user must have edited the input value\n                // istanbul ignore else\n                if (controlValue && inputValue !== ((controlValue && controlValue.length > 0) ? this.displayFormatter(controlValue[0]) : '')) {\n                    this.ngControl.value.length = 0;\n                }\n            }\n            this.updateValueAndValidity();\n        }\n    }\n    /**\n     * Focus the native input element\n     */\n    focusInput() {\n        this.inputElement.nativeElement.focus();\n    }\n    /**\n     * Open the overlay panel\n     */\n    open() {\n        if (this.isDisabled || !this.options.length || this.panelOpen) {\n            return;\n        }\n        this.opened.emit();\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface required to integrate with Angular's core forms API.\n     *\n     * NOTE: Currently we are not using this, but it still must be present since this component is acting as a CVA.\n     *\n     * @param value - New value to be written to the model\n     */\n    writeValue(value) { }\n    /**\n     * Save a callback function to be invoked when the select's value changes from user input.\n     * Part of the ControlValueAccessor interface required to integrate with Angular's core forms API.\n     *\n     * @param fn - Callback to be triggered when the value changes\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Save a callback function to be invoked when the select is blurred by the user.\n     * Part of the ControlValueAccessor interface required to integrate with Angular's core forms API.\n     *\n     * @param fn - Callback to be triggered when the component has been touched\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Disables the select.\n     * Part of the ControlValueAccessor interface required to integrate with Angular's core forms API.\n     *\n     * @param isDisabled - If the component is disabled\n     */\n    setDisabledState(isDisabled) {\n        this.isDisabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Ensure the correct element gets focus when the primary container is clicked.\n     *\n     * Implemented as part of TsFormFieldControl.\n     */\n    onContainerClick() {\n        this.focusInput();\n    }\n    /**\n     * Close the dropdown and reset the query when the user leaves the input\n     *\n     * @param event - The keyboard or mouse event\n     */\n    handleInputBlur(event) {\n        // NOTE(B$): cannot use dot syntax here since 'relatedTarget' doesn't exist on a KeyboardEvent\n        // eslint-disable-next-line dot-notation\n        const hasRelatedTarget = !!(event && event['relatedTarget']);\n        // eslint-disable-next-line dot-notation\n        const hasNodeName = !!(hasRelatedTarget && event['relatedTarget'].nodeName);\n        if (hasRelatedTarget && hasNodeName) {\n            // If the blur event comes from the user clicking an option, `event.relatedTarget.nodeName`\n            // will be `TS-OPTION`.\n            // istanbul ignore else\n            // NOTE: TypeScript warns `Property 'nodeName' does not exist on type 'EventTarget'.`\n            // eslint-disable-next-line dot-notation\n            if (event['relatedTarget'].nodeName !== 'TS-OPTION') {\n                if (this.allowMultiple) {\n                    this.resetAutocompleteQuery();\n                }\n                this.close();\n                this.trigger.closePanel(true);\n            }\n        }\n        else {\n            // NOTE: The lonely if is the only way to correctly ignore 'else' coverage\n            // istanbul ignore else\n            // eslint-disable-next-line no-lonely-if\n            if (this.trigger.panelOpen) {\n                this.close();\n                this.trigger.closePanel(true);\n            }\n        }\n        // Mark this control as 'touched' to trigger any validations needed on blur\n        this.onTouched();\n        this.updateValueAndValidity();\n    }\n    /**\n     * Select an item\n     *\n     * @param selection - The item to select\n     */\n    selectItem(selection) {\n        const ctrlValue = this.selectionListFormControl.value || [];\n        const isDuplicate = ctrlValue.findIndex(o => this.valueComparator(o, selection.option.value)) >= 0;\n        // istanbul ignore else\n        if (isDuplicate) {\n            this.duplicateSelection.emit(new TsSelectionListChange(this, selection.option.value));\n        }\n        // Stop the flow if the selection already exists in the array and duplicates aren't allowed\n        if (!this.allowDuplicateSelections && isDuplicate) {\n            return;\n        }\n        if (this.allowMultiple) {\n            // If supporting multiple selections, reset the input text value as long as the panel should NOT reopen\n            // istanbul ignore else\n            if (!this.reopenAfterSelection) {\n                this.close();\n                this.resetAutocompleteQuery();\n            }\n            // Update the form control\n            const options = ctrlValue.concat(selection.option.value);\n            this.selectionListFormControl.setValue(options);\n        }\n        else {\n            // Update the form control\n            this.selectionListFormControl.setValue([selection.option.value]);\n            // In single selection mode, set the query input to the selection so the user can see what was selected\n            this.inputElement.nativeElement.value = selection.option.viewValue;\n        }\n        // Update the panel position in case the addition of a chip causes the select height to change\n        // istanbul ignore else\n        if (this.trigger.overlayRef) {\n            this.trigger.overlayRef.updatePosition();\n            this.changeDetectorRef.detectChanges();\n        }\n        // Notify consumers about changes\n        this.optionSelected.emit(new TsSelectionListChange(this, selection.option.value));\n    }\n    /**\n     * Deselect an item\n     *\n     * @param option - The option to select\n     */\n    deselectItem(option) {\n        // Find the key of the selection in the selectedOptions array\n        const options = (this.selectionListFormControl.value || [])\n            .filter(opt => !this.valueComparator(opt, option.chip.value));\n        // Update the form control\n        this.selectionListFormControl.setValue(options);\n        // If the only chip was removed, re-focus the input\n        // istanbul ignore else\n        if (options.length === 0) {\n            this.focusInput();\n        }\n        // HACK: For some reason, triggering change detection works in the selection method above, but not here. Same issue seems present in\n        // TsOptionComponent where `setActiveStyles` works by calling the CDR but `setInactiveStyles` required a timeout.\n        Promise.resolve().then(() => {\n            // Update the panel position in case the removal of a chip causes the select height to change\n            if (this.trigger.overlayRef) {\n                this.trigger.overlayRef.updatePosition();\n            }\n        });\n        // Notify consumers about changes\n        this.optionDeselected.emit(new TsSelectionListChange(this, option));\n    }\n    /**\n     * Function for tracking for-loops changes\n     *\n     * @param index - The item index\n     * @returns The unique ID\n     */\n    trackByFn(index) {\n        return index;\n    }\n    /**\n     * Set up a key manager to listen to keyboard events on the overlay panel\n     */\n    initKeyManager() {\n        // We need to initialize with wrapping turned on\n        this.keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation('ltr')\n            .withWrap();\n    }\n    /**\n     * Emit a change event to set the model value\n     */\n    propagateChanges() {\n        const valueToEmit = this.selectionListFormControl.value;\n        this.value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new TsSelectionListChange(this, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n    /**\n     * Call FormControl updateValueAndValidity function to ensure value and valid status get updated.\n     */\n    updateValueAndValidity() {\n        // istanbul ignore else\n        if (this.ngControl && this.ngControl.control) {\n            this.ngControl.control.updateValueAndValidity();\n        }\n    }\n    /**\n     * Reset input\n     */\n    resetAutocompleteQuery() {\n        // istanbul ignore else\n        if (!this.keyManager) {\n            this.initKeyManager();\n        }\n        // Deselect the option from the key manager\n        this.keyManager.updateActiveItem(-1);\n        this.inputElement.nativeElement.value = '';\n    }\n    /**\n     * Scroll the active option into view\n     */\n    scrollActiveOptionIntoView() {\n        const ctrlValue = this.selectionListFormControl.value;\n        if (ctrlValue.length === 0) {\n            return;\n        }\n        const allOptions = this.trigger.selectionListPanel.options.toArray().map(o => o.value);\n        const index = allOptions.findIndex(o => this.valueComparator(o, ctrlValue[ctrlValue.length - 1]));\n        this.trigger.selectionListPanel.scrollTop = getOptionScrollPosition(index, this.trigger.itemHeight, this.trigger.selectionListPanel.scrollTop, SELECTION_LIST_PANEL_MAX_HEIGHT);\n        this.trigger.selectionListPanel.keyManager.setActiveItem(index);\n    }\n};\nTsSelectionListComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: TsDocumentService },\n    { type: ElementRef },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }\n];\n__decorate([\n    ViewChild('auto', { static: true }),\n    __metadata(\"design:type\", TsSelectionListPanelComponent)\n], TsSelectionListComponent.prototype, \"panel\", void 0);\n__decorate([\n    ViewChild(TsSelectionListTriggerDirective),\n    __metadata(\"design:type\", TsSelectionListTriggerDirective)\n], TsSelectionListComponent.prototype, \"trigger\", void 0);\n__decorate([\n    ViewChild('chipList'),\n    __metadata(\"design:type\", TsChipCollectionComponent)\n], TsSelectionListComponent.prototype, \"chipList\", void 0);\n__decorate([\n    ViewChild('input'),\n    __metadata(\"design:type\", ElementRef)\n], TsSelectionListComponent.prototype, \"inputElement\", void 0);\n__decorate([\n    ContentChildren(TsOptionComponent, { descendants: true }),\n    __metadata(\"design:type\", QueryList)\n], TsSelectionListComponent.prototype, \"options\", void 0);\n__decorate([\n    ContentChildren(TsOptgroupComponent),\n    __metadata(\"design:type\", QueryList)\n], TsSelectionListComponent.prototype, \"optionGroups\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"allowMultiple\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"allowDuplicateSelections\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"allowUserInput\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsSelectionListComponent.prototype, \"debounceDelay\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"hideRequiredMarker\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsSelectionListComponent.prototype, \"hint\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsSelectionListComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"isDisabled\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean),\n    __metadata(\"design:paramtypes\", [Boolean])\n], TsSelectionListComponent.prototype, \"isRequired\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsSelectionListComponent.prototype, \"minimumCharacters\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"noValidationOrHint\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"reopenAfterSelection\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"showProgress\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsSelectionListComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"validateOnChange\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsSelectionListComponent.prototype, \"value\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsSelectionListComponent.prototype, \"label\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsSelectionListComponent.prototype, \"name\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Function])\n], TsSelectionListComponent.prototype, \"displayFormatter\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function)\n], TsSelectionListComponent.prototype, \"valueComparator\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"backdropClicked\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"closed\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"duplicateSelection\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"opened\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"optionSelected\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"optionDeselected\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"queryChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"selectionChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsSelectionListComponent.prototype, \"valueChange\", void 0);\nTsSelectionListComponent = TsSelectionListComponent_1 = __decorate([\n    Component({\n        selector: 'ts-selection-list',\n        template: \"<ts-form-field\\n  [validateOnChange]=\\\"validateOnChange\\\"\\n  [control]=\\\"selfReference\\\"\\n  [hideRequiredMarker]=\\\"hideRequiredMarker\\\"\\n  [hint]=\\\"hint\\\"\\n  [id]=\\\"id\\\"\\n  [noValidationOrHint]=\\\"noValidationOrHint\\\"\\n  [theme]=\\\"theme\\\"\\n  cdk-overlay-origin\\n  #origin=\\\"cdkOverlayOrigin\\\"\\n>\\n  <ts-label *ngIf=\\\"label\\\">\\n    {{ label }}\\n  </ts-label>\\n\\n  <div class=\\\"ts-selection-list__input-wrap\\\">\\n    <ng-container *ngIf=\\\"allowMultiple\\\">\\n      <ts-chip-collection\\n        (tabUpdateFocus)=\\\"focusInput()\\\"\\n      >\\n        <ts-chip\\n          *ngFor=\\\"let chip of ngControl.value; trackBy: trackByFn\\\"\\n          [value]=\\\"chip\\\"\\n          [isDisabled]=\\\"isDisabled\\\"\\n          (remove)=\\\"deselectItem($event)\\\"\\n        >\\n          {{ displayFormatter(chip) }}\\n        </ts-chip>\\n\\n        <input\\n          class=\\\"ts-selection-list__input\\\"\\n          *ngIf=\\\"allowUserInput\\\"\\n          [tsSelectionListTrigger]=\\\"auto\\\"\\n          [attr.data-allow-input]=\\\"allowUserInput\\\"\\n          [attr.id]=\\\"id\\\"\\n          [disabled]=\\\"isDisabled\\\"\\n          [allowMultiple]=\\\"allowMultiple\\\"\\n          [reopenAfterSelection]=\\\"reopenAfterSelection\\\"\\n          [(ngModel)]=\\\"searchQuery\\\"\\n          [readonly]=\\\"isDisabled || !allowUserInput ? 'true' : null\\\"\\n          (ngModelChange)=\\\"querySubject.next($event)\\\"\\n          (blur)=\\\"handleInputBlur($event)\\\"\\n          onfocus=\\\"this.select()\\\"\\n          #input\\n        />\\n        <ng-template *ngTemplateOutlet=\\\"triggerTemplate\\\"></ng-template>\\n      </ts-chip-collection>\\n\\n      <ng-template *ngTemplateOutlet=\\\"spinnerTemplate\\\"></ng-template>\\n    </ng-container>\\n\\n    <ng-container *ngIf=\\\"!allowMultiple\\\">\\n      <input\\n        class=\\\"ts-selection-list__input\\\"\\n        *ngIf=\\\"allowUserInput\\\"\\n        [tsSelectionListTrigger]=\\\"auto\\\"\\n        [attr.data-allow-input]=\\\"allowUserInput\\\"\\n        [attr.id]=\\\"id\\\"\\n        [disabled]=\\\"isDisabled\\\"\\n        [allowMultiple]=\\\"allowMultiple\\\"\\n        [readonly]=\\\"isDisabled || !allowUserInput ? 'true' : null\\\"\\n        [(ngModel)]=\\\"searchQuery\\\"\\n        [value]=\\\"searchQuery\\\"\\n        (ngModelChange)=\\\"querySubject.next($event)\\\"\\n        (blur)=\\\"handleInputBlur($event)\\\"\\n        onfocus=\\\"this.select()\\\"\\n        #input\\n      />\\n\\n      <ng-template *ngTemplateOutlet=\\\"triggerTemplate\\\"></ng-template>\\n      <ng-template *ngTemplateOutlet=\\\"spinnerTemplate\\\"></ng-template>\\n    </ng-container>\\n\\n    <ts-icon *ngIf=\\\"shouldShowDropdownIcon\\\">arrow_drop_down</ts-icon>\\n  </div>\\n\\n  <!-- NOTE: This template must remain inside the form field component or disabled states aren't reflected correctly. -->\\n  <ng-template #triggerTemplate>\\n    <input\\n      type=\\\"text\\\"\\n      fxFlex\\n      *ngIf=\\\"!allowUserInput\\\"\\n      [tsSelectionListTrigger]=\\\"auto\\\"\\n      class=\\\"ts-selection-list__input ts-selection-list__custom-trigger\\\"\\n      [attr.data-disabled]=\\\"isDisabled\\\"\\n      readonly\\n      value=\\\"{{ staticTriggerDisplay }}\\\"\\n      title=\\\"{{ staticTriggerDisplay }}\\\"\\n      #input\\n    >\\n  </ng-template>\\n</ts-form-field>\\n\\n\\n<ts-selection-list-panel\\n  class=\\\"ts-selection-list\\\"\\n  #auto=\\\"tsSelectionListPanel\\\"\\n  [id]=\\\"id + '-panel'\\\"\\n  [options]=\\\"options\\\"\\n  [optionGroups]=\\\"optionGroups\\\"\\n  [displayWith]=\\\"displayFormatter\\\"\\n  (optionSelected)=\\\"selectItem($event)\\\"\\n>\\n  <!-- Outlet for options passed in by consumer -->\\n  <ng-template *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-template>\\n</ts-selection-list-panel>\\n\\n\\n\\n<ng-template #contentTemplate>\\n  <ng-content></ng-content>\\n</ng-template>\\n\\n<ng-template #spinnerTemplate>\\n  <mat-progress-spinner\\n    *ngIf=\\\"showProgress\\\"\\n    class=\\\"c-selection-list__spinner c-selection-list__spinner--{{theme}}\\\"\\n    [ngClass]=\\\"{'c-selection-list__spinner--active': showProgress}\\\"\\n    diameter=\\\"21\\\"\\n    mode=\\\"indeterminate\\\"\\n  ></mat-progress-spinner>\\n</ng-template>\\n\",\n        host: {\n            'class': 'ts-selection-list',\n            '[class.ts-selection-list--required]': 'isRequired',\n            '[class.ts-selection-list--disabled]': 'isDisabled',\n            '[class.ts-selection-list--single]': '!allowMultiple',\n            '[class.ts-selection-list--multiple]': 'allowMultiple',\n            '[attr.aria-owns]': 'panelOpen ? optionIds : null',\n            '[attr.aria-required]': 'isRequired.toString()',\n            '[attr.aria-multiselectable]': 'allowMultiple',\n        },\n        providers: [\n            {\n                provide: TsFormFieldControl,\n                useExisting: TsSelectionListComponent_1,\n            },\n            {\n                provide: TS_OPTION_PARENT_COMPONENT,\n                useExisting: TsSelectionListComponent_1,\n            },\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsSelectionList',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-selection-list{--chip-zIndex:2;cursor:pointer;display:block}.ts-selection-list.ts-selection-list--single .ts-selection-list__input{width:calc(100% - 24px)}.ts-selection-list.ts-selection-list--multiple{--margin-adustment:-3px}.ts-selection-list.ts-selection-list--multiple .ts-chip-collection{margin-bottom:calc(var(--margin-adustment) * 2);margin-top:var(--margin-adustment)}.ts-selection-list.ts-selection-list--disabled .ts-selection-list__input{cursor:not-allowed}.ts-selection-list .ts-selection-list__custom-trigger{cursor:pointer;min-height:19px;min-width:1px}.ts-selection-list .ts-chip-collection-wrapper{z-index:1}.ts-selection-list .ts-chip{z-index:var(--chip-zIndex)}.ts-selection-list__input-wrap{position:relative}.ts-selection-list__input-wrap>.ts-icon{position:absolute;right:0;top:50%;transform:translateY(-50%)}.ts-selection-list__input{--fake-margin:3px;background:0 0;border:none;color:currentColor;display:inline-block;font:inherit;margin-bottom:var(--fake-margin);max-width:100%;min-height:25px;outline:0;padding:0;text-align:inherit;vertical-align:bottom}.ts-selection-list__input:-moz-ui-invalid{box-shadow:none}.ts-selection-list--single .ts-selection-list__input{margin-bottom:0;min-height:auto;padding-top:0}.cdk-overlay-container .ts-autocomplete__backdrop{background:0 0}\"]\n    }),\n    __param(3, Self()), __param(3, Optional()),\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef,\n        TsDocumentService,\n        ElementRef,\n        NgControl])\n], TsSelectionListComponent);\n\nlet TsSelectionListModule = class TsSelectionListModule {\n};\nTsSelectionListModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FlexLayoutModule,\n            FormsModule,\n            MatProgressSpinnerModule,\n            MatRippleModule,\n            OverlayModule,\n            ReactiveFormsModule,\n            TsCheckboxModule,\n            TsChipModule,\n            TsFormFieldModule,\n            TsIconModule,\n            TsInputModule,\n            TsOptionModule,\n            TsValidationMessagesModule,\n        ],\n        providers: [TS_SELECTION_LIST_SCROLL_STRATEGY_FACTORY_PROVIDER],\n        declarations: [\n            TsSelectionListComponent,\n            TsSelectionListPanelComponent,\n            TsSelectionListTriggerDirective,\n        ],\n        exports: [\n            TsSelectionListComponent,\n            TsSelectionListPanelComponent,\n            TsSelectionListTriggerDirective,\n        ],\n    })\n], TsSelectionListModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SELECTION_LIST_PANEL_MAX_HEIGHT, TS_SELECTION_LIST_SCROLL_STRATEGY, TS_SELECTION_LIST_SCROLL_STRATEGY_FACTORY, TS_SELECTION_LIST_SCROLL_STRATEGY_FACTORY_PROVIDER, TsSelectionListChange, TsSelectionListComponent, TsSelectionListModule, TsSelectionListPanelComponent, TsSelectionListPanelSelectedEvent, TsSelectionListTriggerDirective };\n//# sourceMappingURL=terminus-ui-selection-list.js.map\n","<ts-form-field\n  [validateOnChange]=\"validateOnChange\"\n  [control]=\"selfReference\"\n  [hideRequiredMarker]=\"hideRequiredMarker\"\n  [hint]=\"hint\"\n  [id]=\"id\"\n  [noValidationOrHint]=\"noValidationOrHint\"\n  [theme]=\"theme\"\n  cdk-overlay-origin\n  #origin=\"cdkOverlayOrigin\"\n>\n  <ts-label *ngIf=\"label\">\n    {{ label }}\n  </ts-label>\n\n  <div class=\"ts-selection-list__input-wrap\">\n    <ng-container *ngIf=\"allowMultiple\">\n      <ts-chip-collection\n        (tabUpdateFocus)=\"focusInput()\"\n      >\n        <ts-chip\n          *ngFor=\"let chip of ngControl.value; trackBy: trackByFn\"\n          [value]=\"chip\"\n          [isDisabled]=\"isDisabled\"\n          (remove)=\"deselectItem($event)\"\n        >\n          {{ displayFormatter(chip) }}\n        </ts-chip>\n\n        <input\n          class=\"ts-selection-list__input\"\n          *ngIf=\"allowUserInput\"\n          [tsSelectionListTrigger]=\"auto\"\n          [attr.data-allow-input]=\"allowUserInput\"\n          [attr.id]=\"id\"\n          [disabled]=\"isDisabled\"\n          [allowMultiple]=\"allowMultiple\"\n          [reopenAfterSelection]=\"reopenAfterSelection\"\n          [(ngModel)]=\"searchQuery\"\n          [readonly]=\"isDisabled || !allowUserInput ? 'true' : null\"\n          (ngModelChange)=\"querySubject.next($event)\"\n          (blur)=\"handleInputBlur($event)\"\n          onfocus=\"this.select()\"\n          #input\n        />\n        <ng-template *ngTemplateOutlet=\"triggerTemplate\"></ng-template>\n      </ts-chip-collection>\n\n      <ng-template *ngTemplateOutlet=\"spinnerTemplate\"></ng-template>\n    </ng-container>\n\n    <ng-container *ngIf=\"!allowMultiple\">\n      <input\n        class=\"ts-selection-list__input\"\n        *ngIf=\"allowUserInput\"\n        [tsSelectionListTrigger]=\"auto\"\n        [attr.data-allow-input]=\"allowUserInput\"\n        [attr.id]=\"id\"\n        [disabled]=\"isDisabled\"\n        [allowMultiple]=\"allowMultiple\"\n        [readonly]=\"isDisabled || !allowUserInput ? 'true' : null\"\n        [(ngModel)]=\"searchQuery\"\n        [value]=\"searchQuery\"\n        (ngModelChange)=\"querySubject.next($event)\"\n        (blur)=\"handleInputBlur($event)\"\n        onfocus=\"this.select()\"\n        #input\n      />\n\n      <ng-template *ngTemplateOutlet=\"triggerTemplate\"></ng-template>\n      <ng-template *ngTemplateOutlet=\"spinnerTemplate\"></ng-template>\n    </ng-container>\n\n    <ts-icon *ngIf=\"shouldShowDropdownIcon\">arrow_drop_down</ts-icon>\n  </div>\n\n  <!-- NOTE: This template must remain inside the form field component or disabled states aren't reflected correctly. -->\n  <ng-template #triggerTemplate>\n    <input\n      type=\"text\"\n      fxFlex\n      *ngIf=\"!allowUserInput\"\n      [tsSelectionListTrigger]=\"auto\"\n      class=\"ts-selection-list__input ts-selection-list__custom-trigger\"\n      [attr.data-disabled]=\"isDisabled\"\n      readonly\n      value=\"{{ staticTriggerDisplay }}\"\n      title=\"{{ staticTriggerDisplay }}\"\n      #input\n    >\n  </ng-template>\n</ts-form-field>\n\n\n<ts-selection-list-panel\n  class=\"ts-selection-list\"\n  #auto=\"tsSelectionListPanel\"\n  [id]=\"id + '-panel'\"\n  [options]=\"options\"\n  [optionGroups]=\"optionGroups\"\n  [displayWith]=\"displayFormatter\"\n  (optionSelected)=\"selectItem($event)\"\n>\n  <!-- Outlet for options passed in by consumer -->\n  <ng-template *ngTemplateOutlet=\"contentTemplate\"></ng-template>\n</ts-selection-list-panel>\n\n\n\n<ng-template #contentTemplate>\n  <ng-content></ng-content>\n</ng-template>\n\n<ng-template #spinnerTemplate>\n  <mat-progress-spinner\n    *ngIf=\"showProgress\"\n    class=\"c-selection-list__spinner c-selection-list__spinner--{{theme}}\"\n    [ngClass]=\"{'c-selection-list__spinner--active': showProgress}\"\n    diameter=\"21\"\n    mode=\"indeterminate\"\n  ></mat-progress-spinner>\n</ng-template>\n","<ng-template>\n  <div\n    class=\"ts-selection-list-panel__inner\"\n    [class.ts-selection-list--visible]=\"showPanel\"\n    role=\"listbox\"\n    [attr.id]=\"id\"\n    #panel\n  >\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n","import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { isDevMode, ElementRef, Input, Directive, NgModule } from '@angular/core';\n\n/* eslint-disable @typescript-eslint/no-magic-numbers */\n/**\n * NOTE: The base value and the mathematics behind these spacings must exactly reflect the spacings\n * defined in lib/src/scss/helpers/_spacing.scss\n */\nconst base = 16;\n/**\n * JavaScript representation of the values in _spacing.scss\n */\nconst TS_SPACING = {\n    none: [\n        '0',\n    ],\n    small: [\n        `${Math.floor(base - 4)}px`,\n        `${Math.floor(base / 2)}px`,\n        `${Math.floor(base / 4)}px`,\n    ],\n    default: [\n        `${base}px`,\n    ],\n    large: [\n        `${Math.floor(base / 2 * 3)}px`,\n        `${Math.floor(base / 2 * 4)}px`,\n        `${Math.floor(base / 2 * 5)}px`,\n        `${Math.floor(base / 2 * 6)}px`,\n        `${Math.floor(base / 2 * 7)}px`,\n        `${Math.floor(base / 2 * 9)}px`,\n        `${Math.floor(base / 2 * 12)}px`,\n    ],\n};\n\n/**\n * This is the vertical spacing UI directive. Accepts {@link TsVerticalSpacingTypes}\n *\n * @example\n * <div tsVerticalSpacing>\n *   My content!\n * </div>\n *\n * <div tsVerticalSpacing=\"large--1\">\n *   My content!\n * </div>\n *\n * <div tsVerticalSpacing=\"none\">\n *   My content!\n * </div>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/spacing</example-url>\n */\nlet TsVerticalSpacingDirective = class TsVerticalSpacingDirective {\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n    /**\n     * Set a spacing class based on the passed in value\n     *\n     * @param value - The spacing value passed in.\n     */\n    set tsVerticalSpacing(value) {\n        // Set a default value if nothing was passed in\n        if (!value) {\n            value = 'default--0';\n        }\n        // Split the string to get the type and size\n        const type = value.split('--')[0];\n        const size = parseInt(value.split('--')[1], 10);\n        const valueIsNone = value === 'none';\n        // Verify type and size are valid options\n        const typeIsInvalid = !!(!TS_SPACING[type] || TS_SPACING[type].length < 0);\n        const sizeIsInvalid = !!(typeIsInvalid || !TS_SPACING[type][size]);\n        // Only throw an error if type or size is invalid and the value is not 'none'\n        if ((typeIsInvalid || sizeIsInvalid) && !valueIsNone && isDevMode()) {\n            const errorMessage = `${value} is not a valid spacing definition for TsVerticalSpacingDirective.`;\n            const errorHelp = `See all valid TsVerticalSpacingTypes: http://bnj.bz/3e1E2l0k0C11`;\n            throw Error(`${errorMessage} ${errorHelp}`);\n        }\n        // Set the margin on the element\n        this.elementRef.nativeElement.style.marginBottom = valueIsNone ? '0' : TS_SPACING[type][size];\n    }\n};\nTsVerticalSpacingDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsVerticalSpacingDirective.prototype, \"tsVerticalSpacing\", null);\nTsVerticalSpacingDirective = __decorate([\n    Directive({ selector: '[tsVerticalSpacing]' }),\n    __metadata(\"design:paramtypes\", [ElementRef])\n], TsVerticalSpacingDirective);\n\nlet TsSpacingModule = class TsSpacingModule {\n};\nTsSpacingModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        declarations: [TsVerticalSpacingDirective],\n        exports: [TsVerticalSpacingDirective],\n    })\n], TsSpacingModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TS_SPACING, TsSpacingModule, TsVerticalSpacingDirective };\n//# sourceMappingURL=terminus-ui-spacing.js.map\n","import { __decorate, __metadata } from 'tslib';\nimport { Input, Component, forwardRef, NgModule } from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { noop } from '@terminus/ngx-tools/utilities';\n\n/**\n * This is the base class for all custom reactive form elements.\n *\n * @example\n * export class TsInputComponent extends TsReactiveFormBaseComponent {}\n */\n// NOTE: OnPush will be enabled in all classes that extend this class.\n// eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection, @angular-eslint/use-component-selector\nlet TsReactiveFormBaseComponent = class TsReactiveFormBaseComponent {\n    constructor() {\n        /**\n         * Define the internal data model\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.innerValue = '';\n        /**\n         * Define placeholder for callback (provided later by the control value accessor)\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.onChangeCallback = noop;\n        /**\n         * Define placeholder for callback (provided later by the control value accessor)\n         */\n        this.onTouchedCallback = noop;\n        /**\n         * Define the form control to get access to validators\n         */\n        this.formControl = new FormControl();\n    }\n    /**\n     * Set the accessor and call the onchange callback\n     *\n     * @param v\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    set value(v) {\n        if (v !== this.innerValue) {\n            this.innerValue = v;\n            this.onChangeCallback(v);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get value() {\n        return this.innerValue;\n    }\n    /**\n     * Set touched on blur\n     */\n    onBlur() {\n        this.onTouchedCallback();\n    }\n    /**\n     * Register onChange callback (from ControlValueAccessor interface)\n     *\n     * @param fn\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    registerOnChange(fn) {\n        this.onChangeCallback = fn;\n    }\n    /**\n     * Register onTouched callback (from ControlValueAccessor interface)\n     *\n     * @param fn\n     */\n    registerOnTouched(fn) {\n        this.onTouchedCallback = fn;\n    }\n    /**\n     * Write value to inner value (from ControlValueAccessor interface)\n     *\n     * @param value\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    writeValue(value) {\n        // istanbul ignore else\n        if (value !== this.innerValue) {\n            this.innerValue = value;\n        }\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", FormControl)\n], TsReactiveFormBaseComponent.prototype, \"formControl\", void 0);\nTsReactiveFormBaseComponent = __decorate([\n    Component({ template: `` })\n], TsReactiveFormBaseComponent);\n\n/**\n * Generate our custom CVA factory\n *\n * @param type\n * @returns ExistingProvider\n */\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\nfunction ControlValueAccessorProviderFactory(type) {\n    return {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => type),\n        multi: true,\n    };\n}\n\n/**\n * A Terminus UI specific Error\n */\nclass TsUILibraryError extends Error {\n    constructor(message) {\n        super(message);\n        // HACK: Set the prototype explicitly. See:\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, TsUILibraryError.prototype);\n        this.message = message;\n        this.name = 'TsUILibraryError';\n        this.stack = (new Error(message)).stack;\n    }\n}\n\n/**\n * Merge two objects.\n *\n * @example\n * const merged = merge(objA, objB);\n *\n * @param obj1 - The first object to merge\n * @param obj2 - The second object to merge\n * @returns A new object\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction merge(obj1, obj2) {\n    const freshObject = Object.assign({}, obj1);\n    for (const n in obj2) {\n        if (typeof freshObject[n] !== 'object') {\n            freshObject[n] = obj2[n];\n        }\n        else if (typeof obj2[n] === 'object') {\n            freshObject[n] = merge(freshObject[n], obj2[n]);\n        }\n    }\n    return freshObject;\n}\n\n/**\n * Strip any control characters from a string (eg backspace or carriage return)\n *\n * @param str - The string to strip\n * @returns The string without control characters\n */\nconst stripControlCharacters = (str) => str.split('').filter(x => {\n    const controlLowerLimit = 31;\n    const controlUpperLimit = 127;\n    const n = x.charCodeAt(0);\n    return n > controlLowerLimit && n < controlUpperLimit;\n}).join('');\n\n/**\n * An array of the allowed {@link TsStyleThemeTypes} for checking values\n */\nconst tsStyleThemeTypesArray = ['primary', 'accent', 'warn'];\n\n/**\n * NOTE: The Angular compiler requires all exported components to be part of a module. That is the purpose of this module.\n */\nlet TsUtilitiesModule = class TsUtilitiesModule {\n};\nTsUtilitiesModule = __decorate([\n    NgModule({\n        declarations: [TsReactiveFormBaseComponent],\n        exports: [TsReactiveFormBaseComponent],\n    })\n], TsUtilitiesModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ControlValueAccessorProviderFactory, TsReactiveFormBaseComponent, TsUILibraryError, TsUtilitiesModule, merge, stripControlCharacters, tsStyleThemeTypesArray };\n//# sourceMappingURL=terminus-ui-utilities.js.map\n","import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { Injectable, ChangeDetectorRef, Input, Component, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormControl, FormsModule } from '@angular/forms';\nimport { TsDatePipe, TsPipesModule } from '@terminus/ui-pipes';\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\n\n/**\n * Define the error message for an invalid email\n */\nconst emailMessage = `Invalid email address.`;\n/**\n * Define the error message for an invalid credit card\n */\nconst creditCardMessage = `Invalid credit card number.`;\n/**\n * Define the error message for an invalid password\n */\nconst passwordMessage = `Password must be between 6 and 100 characters, and contain a number.`;\n/**\n * Define a service that offers custom validators\n */\nlet TsValidationMessagesService = class TsValidationMessagesService {\n    constructor(datePipe) {\n        this.datePipe = datePipe;\n    }\n    /**\n     * Return the correct error message for a validator\n     *\n     * @param validatorName - The name of the validator\n     * @param validatorValue - The value of the validator\n     * @returns The error message\n     */\n    getValidatorErrorMessage(validatorName, validatorValue) {\n        const config = {\n            // Standard responses:\n            required: `Required`,\n            requiredTrue: `${validatorName} must be checked.`,\n            minLength: `Must be at least ${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.requiredLength} characters.`,\n            maxLength: `Must be less than ${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.requiredLength} characters.`,\n            // Custom responses:\n            creditCard: creditCardMessage,\n            email: emailMessage,\n            isInRange: `Must be between ${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.minimum} and ${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.maximum}`,\n            password: passwordMessage,\n            // TODO: Figure out how to abstract pattern messages out so they can be customized per\n            // pattern. (showing a regex pattern to an end user isn't helpful) and we need the ability to\n            // support multiple patterns\n            pattern: `Must contain only letters, numbers or spaces`,\n            maxDate: '',\n            minDate: '',\n            min: `${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual} must be greater than ${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.min}.`,\n            greaterThan: `${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual} must be greater than ${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.greaterThan}`,\n            numbers: `Must contain at least ${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.numbers} numbers`,\n            max: `${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual} must be less than ${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.max}.`,\n            lessThan: `${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual} must be less than ${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.lessThan}.`,\n            notUnique: `${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual} has already been selected.`,\n            noResults: `No results found.`,\n            url: `'${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual}' must be a valid URL.`,\n            domain: `'${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual}' must be a valid domain`,\n            equalToControl: `'${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual}' must be equal to '${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.compareValue}'`,\n            lowercase: `Must contain at least ${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.lowercase} lowercase letters`,\n            uppercase: `Must contain at least ${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.uppercase} uppercase letters`,\n            fileSize: `Must be smaller than ${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.max}kb`,\n            fileType: `${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual} is not an accepted MIME type.`,\n            imageDimensions: ``,\n            imageRatio: ``,\n            nullValidator: 'Unknown error.',\n            compose: 'Unknown error.',\n            composeAsync: 'Unknown error.',\n            inCollection: `${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual} is not an accepted item.`,\n        };\n        if (validatorName === 'maxDate') {\n            config.maxDate = `Date must be before ${this.datePipe.transform(validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.maxDate, 'short')}`;\n        }\n        if (validatorName === 'minDate') {\n            config.minDate = `Date must be after ${this.datePipe.transform(validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.minDate, 'short')}`;\n        }\n        if (validatorName === 'imageDimensions') {\n            config.imageDimensions = `${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual.width}x${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual.height} is not an allowed image dimension.`;\n        }\n        if (validatorName === 'imageRatio') {\n            config.imageRatio = `${validatorValue === null || validatorValue === void 0 ? void 0 : validatorValue.actual} is not an allowed image ratio.`;\n        }\n        return config[validatorName];\n    }\n};\nTsValidationMessagesService.ctorParameters = () => [\n    { type: TsDatePipe }\n];\nTsValidationMessagesService = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [TsDatePipe])\n], TsValidationMessagesService);\n\n// Unique ID for each instance\nlet nextUniqueId = 0;\n/**\n * A presentational component to render validation messages\n * NOTE: ChangeDetectionStrategy.OnPush is disabled here because it affects control getting to this service on the first change cycle.\n *\n * @example\n * <ts-validation-messages\n *              [control]=\"myForm.get('controlName')\"\n *              id=\"my-id\"\n *              [validateOnChange]=\"true\"\n *              [validateImmediately]=\"false\"\n * ></ts-validation-messages>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/validation</example-url>\n */\n// eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection\nlet TsValidationMessagesComponent = class TsValidationMessagesComponent {\n    constructor(validationMessageService, changeDetectorRef) {\n        this.validationMessageService = validationMessageService;\n        this.changeDetectorRef = changeDetectorRef;\n        /**\n         * Define the default component ID\n         */\n        this.uid = `ts-validation-messages-${nextUniqueId++}`;\n        this._id = this.uid;\n        /**\n         * Define if validation should occur on blur or immediately\n         */\n        this.validateOnChange = false;\n        /**\n         * Define if the validation should be immediate\n         */\n        this.validateImmediately = false;\n    }\n    /**\n     * Define the error message\n     *\n     * @returns The error message or null if no error\n     */\n    get validationMessage() {\n        if (this.control && this.control.errors) {\n            for (const propertyName in this.control.errors) {\n                // istanbul ignore else\n                if (propertyName) {\n                    // Only show after 'touched' if we are NOT validating on every change\n                    const immediatelyOrOnChange = this.validateImmediately || this.validateOnChange;\n                    // istanbul ignore else\n                    if (immediatelyOrOnChange || (!this.validateOnChange && this.control.touched)) {\n                        const errors = this.control.errors[propertyName];\n                        if (this.messagesFactory) {\n                            return this.messagesFactory(propertyName, errors);\n                        }\n                        return this.validationMessageService.getValidatorErrorMessage(propertyName, errors);\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Define the associated form control\n     *\n     * @param value\n     */\n    set control(value) {\n        this._control = value;\n        // Trigger change detection if the underlying control's status changes\n        // istanbul ignore else\n        if (this.control && this.control.statusChanges) {\n            this.control.statusChanges.pipe(untilComponentDestroyed(this)).subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n            });\n        }\n    }\n    get control() {\n        return this._control;\n    }\n    /**\n     * Define an ID for the component\n     *\n     * @param value\n     */\n    set id(value) {\n        this._id = value || this.uid;\n    }\n    get id() {\n        return this._id;\n    }\n    /**\n     * Needed for untilComponentDestroyed\n     */\n    ngOnDestroy() { }\n};\nTsValidationMessagesComponent.ctorParameters = () => [\n    { type: TsValidationMessagesService },\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", FormControl),\n    __metadata(\"design:paramtypes\", [FormControl])\n], TsValidationMessagesComponent.prototype, \"control\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], TsValidationMessagesComponent.prototype, \"id\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function)\n], TsValidationMessagesComponent.prototype, \"messagesFactory\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsValidationMessagesComponent.prototype, \"validateOnChange\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsValidationMessagesComponent.prototype, \"validateImmediately\", void 0);\nTsValidationMessagesComponent = __decorate([\n    Component({\n        selector: 'ts-validation-messages',\n        template: \"<div\\n  class=\\\"c-validation-message qa-validation-message\\\"\\n  role=\\\"alert\\\"\\n  [attr.id]=\\\"id\\\"\\n>{{ validationMessage }}</div>\\n\",\n        host: { class: 'ts-validation-messages' },\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsValidationMessages',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-validation-messages :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-validation-messages h1,.ts-validation-messages h2,.ts-validation-messages h3,.ts-validation-messages h4,.ts-validation-messages h5,.ts-validation-messages p{margin:unset}.ts-validation-messages .c-validation-message{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;color:#c8604d;z-index:503}.c-radio .ts-validation-messages{display:inline-block}.ts-file-upload .ts-validation-messages .c-validation-message{padding:.3em .4em .2em}.c-select .ts-validation-messages .c-validation-message{margin-top:.6em;padding:.3em .4em .2em 0;position:absolute;top:90%}\"]\n    }),\n    __metadata(\"design:paramtypes\", [TsValidationMessagesService,\n        ChangeDetectorRef])\n], TsValidationMessagesComponent);\n\nlet TsValidationMessagesModule = class TsValidationMessagesModule {\n};\nTsValidationMessagesModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FormsModule,\n            TsPipesModule,\n        ],\n        providers: [TsValidationMessagesService],\n        exports: [TsValidationMessagesComponent],\n        declarations: [TsValidationMessagesComponent],\n    })\n], TsValidationMessagesModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsValidationMessagesComponent, TsValidationMessagesModule, TsValidationMessagesService };\n//# sourceMappingURL=terminus-ui-validation-messages.js.map\n","<div\n  class=\"c-validation-message qa-validation-message\"\n  role=\"alert\"\n  [attr.id]=\"id\"\n>{{ validationMessage }}</div>\n","import { __decorate } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, NgModule } from '@angular/core';\nimport { creditCardRegex, urlOptionalProtocolRegex, emailRegex, createContainsLowercaseRegex, createContainsNumbersRegex, passwordRegex, createContainsUppercaseRegex, urlRegex } from '@terminus/ngx-tools/regex';\nimport { coerceNumberProperty } from '@terminus/ngx-tools/coercion';\nimport { isNumber, isAbstractControl, isString, isValidDate } from '@terminus/ngx-tools/type-guards';\n\n/**\n * Return a validator function to verify that a credit card number is valid\n *\n * @returns The validator function\n */\nconst creditCardValidator = () => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || !control.value) {\n        return null;\n    }\n    const invalidResponse = {\n        creditCard: {\n            valid: false,\n            actual: control.value,\n        },\n    };\n    return creditCardRegex.test(control.value) ? null : invalidResponse;\n};\n\n/**\n * Return a validator function to verify that a domain is valid\n *\n * @returns The validator function\n */\nconst domainValidator = () => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || !control.value) {\n        return null;\n    }\n    const invalidResponse = {\n        domain: {\n            valid: false,\n            actual: control.value,\n        },\n    };\n    return urlOptionalProtocolRegex.test(control.value) ? null : invalidResponse;\n};\n\n/**\n * Return a validator function to verify that an email address is valid\n *\n * @returns The validator function\n */\nconst emailValidator = () => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || !control.value) {\n        return null;\n    }\n    const invalidResponse = {\n        email: {\n            valid: false,\n            actual: control.value,\n        },\n    };\n    return emailRegex.test(control.value) ? null : invalidResponse;\n};\n\n/**\n * Return a validator function to verify the selected date is after a minimum date\n *\n * @param compareControl - The control to compare the value with\n * @returns The validator function\n */\nconst equalToControlValidator = (compareControl) => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || !control.value || !compareControl.value) {\n        return null;\n    }\n    const invalidResponse = {\n        equalToControl: {\n            valid: false,\n            compareValue: compareControl.value,\n            actual: control.value,\n        },\n    };\n    return (control.value === compareControl.value) ? null : invalidResponse;\n};\n\n/**\n * Return a validator function to verify the value is above a minimum value\n *\n * @param minimum\n * @returns The validator function\n */\nconst greaterThanValidator = (minimum = 0) => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || isNaN(control.value)) {\n        return null;\n    }\n    if (!isNumber(minimum) && isAbstractControl(minimum)) {\n        return getValidationResult(minimum.value, control);\n    }\n    return getValidationResult(minimum, control);\n};\n/**\n * Return the validation result\n *\n * @param minimum - The minimum value\n * @param control - The control containing the current value\n * @returns The difference in time\n */\nfunction getValidationResult(minimum, control) {\n    minimum = coerceNumberProperty(minimum);\n    const invalidResponse = {\n        greaterThan: {\n            valid: false,\n            greaterThan: minimum,\n            actual: control.value,\n        },\n    };\n    return (control.value > minimum) ? null : invalidResponse;\n}\n\n/**\n * Return a validator function to verify the value is present in the collection\n *\n * @param collection - The collection to check for the value\n * @param valueFn - A function that pulls the value to compare from the collection objects\n * @returns The validator function\n */\nconst inCollectionValidator = (collection, valueFn) => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || !control.value || !collection || collection.length < 1) {\n        return null;\n    }\n    const invalidResponse = {\n        inCollection: {\n            valid: false,\n            actual: control.value,\n            collection,\n        },\n    };\n    let convertedControlValue;\n    try {\n        convertedControlValue = typeof (control.value) === 'string' ? JSON.parse(control.value) : control.value;\n    }\n    catch (_a) {\n        convertedControlValue = control.value;\n    }\n    const found = collection.some(v => {\n        // Determine the correct value to compare\n        const collectionValue = valueFn ? valueFn(v) : v;\n        const controlValue = valueFn ? valueFn(convertedControlValue) : convertedControlValue;\n        return collectionValue === controlValue;\n    });\n    return found ? null : invalidResponse;\n};\n\n/**\n * Return a validator function to verify the value is within range\n *\n * @param minimum - The minimum value\n * @param maximum - The minimum value\n * @returns The validator function\n */\nconst isInRangeValidator = (minimum = 0, maximum = 0) => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control) {\n        return null;\n    }\n    const value = isNumber(control.value) ? Number(control.value) : null;\n    // Verify the value\n    if (value === null) {\n        return null;\n    }\n    if (!isNumber(minimum) && !isNumber(maximum) && isAbstractControl(minimum) && isAbstractControl(maximum)) {\n        return getValidationResult$1(minimum.value, maximum.value, control);\n    }\n    return getValidationResult$1(coerceNumberProperty(minimum), coerceNumberProperty(maximum), control);\n};\n/**\n * Return the validation result\n *\n * @param minimum - The minimum value\n * @param maximum - The maximum value\n * @param control - The control containing the current value\n * @returns The difference in time\n */\nfunction getValidationResult$1(minimum, maximum, control) {\n    minimum = coerceNumberProperty(minimum);\n    maximum = coerceNumberProperty(maximum);\n    const invalidResponse = {\n        isInRange: {\n            valid: false,\n            minimum,\n            maximum,\n            actual: control.value,\n        },\n    };\n    return (control.value >= minimum && control.value <= maximum) ? null : invalidResponse;\n}\n\n/**\n * Return a validator function to verify the number is below a specific number\n *\n * @param max - The maximum value\n * @returns The validator function\n */\nconst lessThanValidator = (max = 0) => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || isNaN(control.value)) {\n        return null;\n    }\n    if (!isNumber(max) && isAbstractControl(max)) {\n        return getValidationResult$2(max.value, control);\n    }\n    return getValidationResult$2(max, control);\n};\n/**\n * Return the validation result\n *\n * @param max - The minimum value\n * @param control - The control containing the current value\n * @returns The difference in time\n */\nfunction getValidationResult$2(max, control) {\n    max = coerceNumberProperty(max);\n    const invalidResponse = {\n        lessThan: {\n            valid: false,\n            lessThan: max,\n            actual: control.value,\n        },\n    };\n    return (control.value < max) ? null : invalidResponse;\n}\n\n/**\n * Return a validator function to verify that number of lowercase letters is satisfied\n *\n * @returns The validator function\n * @param lowercaseMin\n */\nconst lowercaseValidator = (lowercaseMin) => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || !control.value) {\n        return null;\n    }\n    lowercaseMin = lowercaseMin ? lowercaseMin : 1;\n    const invalidResponse = {\n        lowercase: {\n            valid: false,\n            actual: control.value,\n            lowercase: lowercaseMin,\n        },\n    };\n    const regex = createContainsLowercaseRegex(lowercaseMin);\n    return regex.test(control.value) ? null : invalidResponse;\n};\n\n/**\n * Return a validator function to verify the selected date is before a maximum date\n *\n * @param maxDate - The maximum date\n * @returns The validator function\n */\nconst maxDateValidator = (maxDate) => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || !control.value) {\n        return null;\n    }\n    if (!isString(maxDate) && isAbstractControl(maxDate)) {\n        return getValidationResult$3(maxDate.value, control);\n    }\n    return getValidationResult$3(maxDate, control);\n};\n/**\n * Return the validation result\n *\n * @param maxDate - The latest valid date\n * @param control - The control containing the current value\n * @returns The difference in time\n */\nfunction getValidationResult$3(maxDate, control) {\n    const invalidResponse = {\n        maxDate: {\n            valid: false,\n            maxDate,\n            actual: control.value,\n        },\n    };\n    // Verify the dates are valid\n    if (!isValidDate(control.value) || !maxDate || !isValidDate(maxDate)) {\n        return invalidResponse;\n    }\n    const controlDateTime = new Date(control.value).getTime();\n    const maxDateTime = new Date(maxDate).getTime();\n    return (maxDateTime >= controlDateTime) ? null : invalidResponse;\n}\n\n/**\n * Return a validator function to verify the selected date is after a minimum date\n *\n * @param minDate - The minimum date\n * @returns The validator function\n */\nconst minDateValidator = (minDate) => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || !control.value) {\n        return null;\n    }\n    if (!isString(minDate) && isAbstractControl(minDate)) {\n        return getValidationResult$4(minDate.value, control);\n    }\n    return getValidationResult$4(minDate, control);\n};\n/**\n * Return the validation result\n *\n * @param minDate - The minimum allowed date\n * @param control - The control containing the current value\n * @returns The difference in time\n */\nfunction getValidationResult$4(minDate, control) {\n    const invalidResponse = {\n        minDate: {\n            valid: false,\n            minDate,\n            actual: control.value,\n        },\n    };\n    // Verify the dates are valid\n    if (!isValidDate(control.value) || !minDate || !isValidDate(minDate)) {\n        return invalidResponse;\n    }\n    const controlDateTime = new Date(control.value).getTime();\n    const minDateTime = new Date(minDate).getTime();\n    const dateIsAfterMin = minDateTime <= controlDateTime;\n    return dateIsAfterMin ? null : invalidResponse;\n}\n\n/**\n * Return a validator function to verify that number of digital numbers is satisfied\n *\n * @param numbersMin - The minimum amount of numbers\n * @returns The validator function\n */\nconst numbersValidator = (numbersMin) => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || !control.value) {\n        return null;\n    }\n    numbersMin = numbersMin ? numbersMin : 1;\n    const invalidResponse = {\n        numbers: {\n            valid: false,\n            actual: control.value,\n            numbers: numbersMin,\n        },\n    };\n    const regex = createContainsNumbersRegex(numbersMin);\n    return regex.test(control.value) ? null : invalidResponse;\n};\n\n/**\n * Return a validator function to verify a password is valid\n *\n * @returns The validator function\n */\nconst passwordValidator = () => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || !control.value) {\n        return null;\n    }\n    const invalidResponse = {\n        password: {\n            valid: false,\n            actual: control.value,\n        },\n    };\n    return passwordRegex.test(control.value) ? null : invalidResponse;\n};\n\n/**\n * Return a validator function to verify that number of uppercase letters is satisfied\n *\n * @param uppercaseMin - the minimum uppercase letters\n * @returns The validator function\n */\nconst uppercaseValidator = (uppercaseMin) => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || !control.value) {\n        return null;\n    }\n    uppercaseMin = uppercaseMin ? uppercaseMin : 1;\n    const invalidResponse = {\n        uppercase: {\n            valid: false,\n            actual: control.value,\n            uppercase: uppercaseMin,\n        },\n    };\n    const regex = createContainsUppercaseRegex(uppercaseMin);\n    return regex.test(control.value) ? null : invalidResponse;\n};\n\n/**\n * Return a validator function to verify that a url is valid\n *\n * @returns The validator function\n */\nconst urlValidator = () => (control) => {\n    // Allow optional controls by not validating empty values\n    if (!control || !control.value) {\n        return null;\n    }\n    const invalidResponse = {\n        url: {\n            valid: false,\n            actual: control.value,\n        },\n    };\n    return urlRegex.test(control.value) ? null : invalidResponse;\n};\n\n/**\n * Define a service that exposes custom form validators for use with reactive forms.\n */\nlet TsValidatorsService = class TsValidatorsService {\n    constructor() {\n        this.creditCard = creditCardValidator;\n        this.domain = domainValidator;\n        this.email = emailValidator;\n        this.equalToControl = equalToControlValidator;\n        this.greaterThan = greaterThanValidator;\n        this.inCollection = inCollectionValidator;\n        this.isInRange = isInRangeValidator;\n        this.lessThan = lessThanValidator;\n        this.lowercase = lowercaseValidator;\n        this.maxDate = maxDateValidator;\n        this.minDate = minDateValidator;\n        this.numbers = numbersValidator;\n        this.password = passwordValidator;\n        this.uppercase = uppercaseValidator;\n        this.url = urlValidator;\n    }\n};\nTsValidatorsService.ɵprov = ɵɵdefineInjectable({ factory: function TsValidatorsService_Factory() { return new TsValidatorsService(); }, token: TsValidatorsService, providedIn: \"root\" });\nTsValidatorsService = __decorate([\n    Injectable({ providedIn: 'root' })\n], TsValidatorsService);\n\nlet TsValidatorsModule = class TsValidatorsModule {\n};\nTsValidatorsModule = __decorate([\n    NgModule({ providers: [TsValidatorsService] })\n], TsValidatorsModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsValidatorsModule, TsValidatorsService };\n//# sourceMappingURL=terminus-ui-validators.js.map\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport {\n  ExtraOptions,\n  RouterModule,\n  Routes,\n} from '@angular/router';\n\nimport { ComponentsComponent } from './components/components.component';\nimport { componentsList } from './components/components.constant';\n\n\nconst routerOptions: ExtraOptions = { anchorScrolling: 'enabled' };\n\nconst routes: Routes = [\n  {\n    path: 'components',\n    component: ComponentsComponent,\n    children: componentsList,\n  },\n  {\n    path: '**',\n    redirectTo: '/components',\n  },\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, routerOptions)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule { }\n","<router-outlet></router-outlet>\n","import {\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport {\n  ActivatedRoute,\n  NavigationEnd,\n  Router,\n} from '@angular/router';\nimport {\n  filter,\n  map,\n} from 'rxjs/operators';\n\nimport { untilComponentDestroyed } from '@terminus/ngx-tools/utilities';\n\n\n@Component({\n  selector: 'demo-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private titleService: Title,\n  ) { }\n\n  public ngOnInit(): void {\n    this.router.events.pipe(\n      untilComponentDestroyed(this),\n      filter(event => event instanceof NavigationEnd),\n      map(() => {\n        let child = this.activatedRoute.firstChild;\n        while (child?.firstChild) {\n          child = child.firstChild;\n        }\n        if (child?.snapshot.data.name) {\n          return child.snapshot.data.name;\n        }\n        return 'Components';\n      }),\n    ).subscribe((title: string) => {\n      this.titleService.setTitle(title);\n    });\n  }\n\n  ngOnDestroy() {}\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  TsDocumentService,\n  TsWindowService,\n} from '@terminus/ngx-tools/browser';\nimport { TsAutofocusModule } from '@terminus/ui-autofocus';\nimport { TsButtonModule } from '@terminus/ui-button';\nimport { TsCheckboxModule } from '@terminus/ui-checkbox';\nimport { TsIconModule } from '@terminus/ui-icon';\nimport { TsInputModule } from '@terminus/ui-input';\nimport { TsLinkModule } from '@terminus/ui-link';\nimport { TsOptionModule } from '@terminus/ui-option';\nimport { TsSelectionListModule } from '@terminus/ui-selection-list';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ComponentsComponent } from './components/components.component';\n\n\n@NgModule({\n  imports: [\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    BrowserModule,\n    FlexLayoutModule.withConfig({ useColumnBasisZero: false }),\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    RouterModule,\n    TsAutofocusModule,\n    TsButtonModule,\n    TsCheckboxModule,\n    TsIconModule,\n    TsInputModule,\n    TsLinkModule,\n    TsOptionModule,\n    TsSelectionListModule,\n  ],\n  providers: [\n    TsDocumentService,\n    TsWindowService,\n  ],\n  declarations: [\n    AppComponent,\n    ComponentsComponent,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","<header fxLayout=\"row\">\n  <div fxFlex fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\n    Demos\n    <sup>\n      ({{ components.length }})\n    </sup>\n  </div>\n\n  <span fxFlex></span>\n\n  <div class=\"versions\" fxLayout=\"row\" fxLayoutGap=\"1em\">\n    <div fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\n      <div>\n        @terminus/ngx-tools:\n        <strong>{{ ngxVersion.full }}</strong>\n      </div>\n    </div>\n\n    <div fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\n      <div>\n        @angular/*:\n        <strong>{{ ngVersion.full }}</strong>\n      </div>\n      <div>\n        @angular/material:\n        <strong>{{ matVersion.full }}</strong>\n      </div>\n    </div>\n  </div>\n\n  <span fxFlex></span>\n\n  <div>\n    <ts-selection-list\n      label=\"Select a demo\"\n      [formControl]=\"currentPage\"\n      [displayFormatter]=\"formatter\"\n      (queryChange)=\"queryHasChanged($event)\"\n      (selectionChange)=\"pageSelected($event)\"\n    >\n      <ts-option\n        *ngFor=\"let component of simpleResults$ | async\"\n        [option]=\"component\"\n        [value]=\"component\"\n      >\n        {{ component.data.name }}\n      </ts-option>\n    </ts-selection-list>\n  </div>\n</header>\n\n\n<div class=\"content\">\n  <router-outlet></router-outlet>\n</div>\n","import {\n  Component,\n  OnDestroy,\n  OnInit,\n  VERSION as NG_VERSION,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { VERSION as MAT_VERSION } from '@angular/material/core';\nimport {\n  NavigationEnd,\n  Route,\n  Router,\n  Routes,\n} from '@angular/router';\nimport {\n  BehaviorSubject,\n  Observable,\n} from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  untilComponentDestroyed,\n  VERSION as NGX_VERSION,\n} from '@terminus/ngx-tools/utilities';\nimport { TsSelectionListChange } from '@terminus/ui-selection-list';\n\nimport { orderArrayByProperty } from '../utilities/orderArrayByProperty';\nimport { componentsList } from './components.constant';\n\n\n@Component({\n  selector: 'demo-components',\n  templateUrl: './components.component.html',\n  styleUrls: ['./components.component.scss'],\n})\nexport class ComponentsComponent implements OnInit, OnDestroy {\n  public components = orderArrayByProperty(componentsList, 'path');\n  public path = '';\n  public ngxVersion = NGX_VERSION;\n  public ngVersion = NG_VERSION;\n  public matVersion = MAT_VERSION;\n  public currentPage = new FormControl();\n  public formatter = v => v.data.name;\n  public query$ = new BehaviorSubject('');\n  public simpleResults$: Observable<Route[]> | undefined;\n\n  constructor(\n    private router: Router,\n  ) {}\n\n  public ngOnInit(): void {\n    this.setCurrentPage();\n\n    // Update the navigation menu\n    this.router.events\n      .subscribe(event => {\n        if (event instanceof NavigationEnd) {\n          this.setCurrentPage();\n        }\n      });\n\n    // Wire up selection list search\n    this.simpleResults$ = this.query$\n      .pipe(\n        untilComponentDestroyed(this),\n        map(query => this.queryComponents(query)),\n      );\n\n  }\n\n  public ngOnDestroy(): void {}\n\n  /**\n   * Pass the query change to our search\n   *\n   * @param query\n   */\n  public queryHasChanged(query: string): void {\n    this.query$.next(query);\n  }\n\n  /**\n   * Set the menu to the current page\n   */\n  public setCurrentPage(): void {\n    const routeParts = this.router.routerState.snapshot.url.split('/');\n    if (routeParts.length > 2) {\n      this.path = routeParts[routeParts.length - 1];\n    }\n\n    const page = this.components.filter((v: any) => v.path === this.path)[0];\n\n    if (page) {\n      this.currentPage.setValue([page]);\n    }\n  }\n\n  /**\n   * Navigate to the selected page\n   *\n   * @param page\n   */\n  public pageSelected(page: TsSelectionListChange): void {\n    this.router.navigate(['/', 'components', (page.value as Routes)[0].path]);\n  }\n\n  /**\n   * Query for components from the primary list\n   *\n   * @param query\n   */\n  private queryComponents(query: string): Route[] {\n    if (query) {\n      query = query.toLowerCase();\n      const letters = query.split('').map(l => `${l}.*`).join('');\n      const regex = new RegExp(letters, 'ig');\n      return this.components.filter(s => !!s.data.name.match(regex));\n    }\n    return this.components.slice();\n  }\n\n}\n","import { Routes } from '@angular/router';\n\n\nexport const componentsList: Routes = [\n  {\n    path: 'autocomplete',\n    loadChildren: () => import('./autocomplete/autocomplete.module').then(m => m.AutocompleteModule),\n    data: { name: 'Autocomplete' },\n  },\n  {\n    path: 'autofocus',\n    loadChildren: () => import('./autofocus/autofocus.module').then(m => m.AutofocusModule),\n    data: { name: 'Autofocus' },\n  },\n  {\n    path: 'breakpoints',\n    loadChildren: () => import('./breakpoints/breakpoints.module').then(m => m.BreakpointsModule),\n    data: { name: 'Breakpoints' },\n  },\n  {\n    path: 'button',\n    loadChildren: () => import('./button/button.module').then(m => m.ButtonModule),\n    data: { name: 'Button' },\n  },\n  {\n    path: 'card',\n    loadChildren: () => import('./card/card.module').then(m => m.CardModule),\n    data: { name: 'Card' },\n  },\n  {\n    path: 'chart',\n    loadChildren: () => import('./chart/chart.module').then(m => m.ChartModule),\n    data: { name: 'Chart' },\n  },\n  {\n    path: 'checkbox',\n    loadChildren: () => import('./checkbox/checkbox.module').then(m => m.CheckboxModule),\n    data: { name: 'Checkbox' },\n  },\n  {\n    path: 'chip',\n    loadChildren: () => import('./chip/chip.module').then(m => m.ChipModule),\n    data: { name: 'Chip' },\n  },\n  {\n    path: 'cohort-date-range',\n    loadChildren: () => import('./cohort-date-range/cohort-date-range.module').then(m => m.CohortDateRangeModule),\n    data: { name: 'Cohort Date Range' },\n  },\n  {\n    path: 'confirmation',\n    loadChildren: () => import('./confirmation/confirmation.module').then(m => m.ConfirmationModule),\n    data: { name: 'Confirmation' },\n  },\n  {\n    path: 'copy',\n    loadChildren: () => import('./copy/copy.module').then(m => m.CopyModule),\n    data: { name: 'Copy' },\n  },\n  {\n    path: 'csv-entry',\n    loadChildren: () => import('./csv-entry/csv-entry.module').then(m => m.CSVEntryModule),\n    data: { name: 'CSV Entry' },\n  },\n  {\n    path: 'date-range',\n    loadChildren: () => import('./date-range/date-range.module').then(m => m.DateRangeModule),\n    data: { name: 'Date Range' },\n  },\n  {\n    path: 'drawer',\n    loadChildren: () => import('./drawer/drawer.module').then(m => m.DrawerModule),\n    data: { name: 'Drawer' },\n  },\n  {\n    path: 'expansion-panel',\n    loadChildren: () => import('./expansion-panel/expansion-panel.module').then(m => m.ExpansionPanelModule),\n    data: { name: 'Expansion Panel' },\n  },\n  {\n    path: 'file-upload',\n    loadChildren: () => import('./file-upload/file-upload.module').then(m => m.FileUploadModule),\n    data: { name: 'File Upload' },\n  },\n  {\n    path: 'form-controls',\n    loadChildren: () => import('./form-controls/form-controls.module').then(m => m.FormControlsModule),\n    data: { name: 'Form Controls' },\n  },\n  {\n    path: 'icon',\n    loadChildren: () => import('./icon/icon.module').then(m => m.IconModule),\n    data: { name: 'Icon' },\n  },\n  {\n    path: 'icon-button',\n    loadChildren: () => import('./icon-button/icon-button.module').then(m => m.IconButtonModule),\n    data: { name: 'Icon Button' },\n  },\n  {\n    path: 'input',\n    loadChildren: () => import('./input/input.module').then(m => m.InputModule),\n    data: { name: 'Input' },\n  },\n  {\n    path: 'link',\n    loadChildren: () => import('./link/link.module').then(m => m.LinkModule),\n    data: { name: 'Link' },\n  },\n  {\n    path: 'loading-overlay',\n    loadChildren: () => import('./loading-overlay/loading-overlay.module').then(m => m.LoadingOverlayModule),\n    data: { name: 'Loading Overlay' },\n  },\n  {\n    path: 'login-form',\n    loadChildren: () => import('./login-form/login-form.module').then(m => m.LoginFormModule),\n    data: { name: 'Login Form' },\n  },\n  {\n    path: 'logo',\n    loadChildren: () => import('./logo/logo.module').then(m => m.LogoModule),\n    data: { name: 'Logo' },\n  },\n  {\n    path: 'menu',\n    loadChildren: () => import('./menu/menu.module').then(m => m.MenuModule),\n    data: { name: 'Menu' },\n  },\n  {\n    path: 'navigation',\n    loadChildren: () => import('./navigation/navigation.module').then(m => m.NavigationModule),\n    data: { name: 'Navigation' },\n  },\n  {\n    path: 'paginator',\n    loadChildren: () => import('./paginator/paginator.module').then(m => m.PaginatorModule),\n    data: { name: 'Paginator' },\n  },\n  {\n    path: 'pipes',\n    loadChildren: () => import('./pipes/pipes.module').then(m => m.PipesModule),\n    data: { name: 'Pipes' },\n  },\n  {\n    path: 'popover',\n    loadChildren: () => import('./popover/popover.module').then(m => m.PopoverModule),\n    data: { name: 'Popover' },\n  },\n  {\n    path: 'radio',\n    loadChildren: () => import('./radio/radio.module').then(m => m.RadioModule),\n    data: { name: 'Radio' },\n  },\n  {\n    path: 'scrollbars',\n    loadChildren: () => import('./scrollbars/scrollbars.module').then(m => m.ScrollbarsModule),\n    data: { name: 'Scrollbars' },\n  },\n  {\n    path: 'search',\n    loadChildren: () => import('./search/search.module').then(m => m.SearchModule),\n    data: { name: 'Search' },\n  },\n  {\n    path: 'select',\n    loadChildren: () => import('./select/select.module').then(m => m.SelectModule),\n    data: { name: 'Select' },\n  },\n  {\n    path: 'selection-list',\n    loadChildren: () => import('./selection-list/selection-list.module').then(m => m.SelectionListModule),\n    data: { name: 'Selection List' },\n  },\n  {\n    path: 'spacing',\n    loadChildren: () => import('./spacing/spacing.module').then(m => m.SpacingModule),\n    data: { name: 'Spacing' },\n  },\n  {\n    path: 'spacing-styles',\n    loadChildren: () => import('./spacing/spacing-styles.module').then(m => m.SpacingStylesModule),\n    data: { name: 'Spacing SCSS' },\n  },\n  {\n    path: 'table',\n    loadChildren: () => import('./table/table.module').then(m => m.TableModule),\n    data: { name: 'Table' },\n  },\n  {\n    path: 'tabs',\n    loadChildren: () => import('./tabs/tabs.module').then(m => m.TabsModule),\n    data: { name: 'Tabs' },\n  },\n  {\n    path: 'toggle',\n    loadChildren: () => import('./toggle/toggle.module').then(m => m.ToggleModule),\n    data: { name: 'Toggle' },\n  },\n  {\n    path: 'tooltip',\n    loadChildren: () => import('./tooltip/tooltip.module').then(m => m.TooltipModule),\n    data: { name: 'Tooltip' },\n  },\n  {\n    path: 'typography',\n    loadChildren: () => import('./typography/typography.module').then(m => m.TypographyModule),\n    data: { name: 'Typography' },\n  },\n  {\n    path: 'validation',\n    loadChildren: () => import('./validation/validation.module').then(m => m.ValidationModule),\n    data: { name: 'Validation' },\n  },\n];\n","/**\n * Order an array alphabetically by property\n *\n * @param items - The array of objects to sort\n * @param property - The property to sort by\n * @param isDescending - A flag determining if the array should be sorted ascending or\n * descending\n * @returns sortedArray The sorted array\n */\nexport const orderArrayByProperty = (items: any[], property: string, isDescending = true): any[] => items.sort((a: any, b: any) => {\n  const nonAlphaRegex = /\\W+/g;\n\n  // Check for existence and lowercase\n  const aProp: string | null = a[property] ? a[property].toLowerCase().replace(nonAlphaRegex, '') : null;\n  const bProp: string | null = b[property] ? b[property].toLowerCase().replace(nonAlphaRegex, '') : null;\n\n  // Sort ascending or descending\n  const aIsFirstReturn = isDescending ? -1 : 1;\n  const bIsFirstReturn = isDescending ? 1 : -1;\n\n  if (!aProp || !bProp) {\n    return 0;\n  } else if (aProp < bProp) {\n    // Sort ascending\n    return aIsFirstReturn;\n  } else if (aProp > bProp) {\n    // Sort descending\n    return bIsFirstReturn;\n  }\n  // Do not sort\n  return 0;\n\n});\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = { production: false };\n","// NOTE: Import needed since v9\n// See: https://stackoverflow.com/a/60183174/722367\n// eslint-disable-next-line import/no-unassigned-import\nimport '@angular/compiler';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}