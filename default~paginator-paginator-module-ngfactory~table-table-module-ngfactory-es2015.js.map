{"version":3,"sources":["/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/paginator/fesm2015/terminus-ui-paginator.js","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/paginator/terminus-ui-paginator.d.ts.TsPaginatorComponent.html","/home/runner/work/terminus-oss/terminus-oss/dist/libs/ui/tooltip/terminus-ui-tooltip.d.ts.TsTooltipComponent.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACA;AAC8G;AACrG;AACuB;AAC1B;AACJ;AACI;AACe;AACb;AACa;AACJ;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,+BAA+B,0DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA,wCAAwC,0DAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0FAAoB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0FAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sFAAe;AAC3B;AACA;AACA;AACA,YAAY,sFAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0FAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0FAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0FAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe,MAAM,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU,KAAK,IAAI;AACzC;AACA;AACA,kBAAkB,UAAU,KAAK,IAAI,MAAM,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,WAAW,KAAK,SAAS;AAClD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2BAA2B,KAAK,0CAA0C;AACpG;AACA;AACA;AACA,0BAA0B,WAAW,KAAK,iBAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B,0FAAoB;AAC9C,2BAA2B,0FAAoB;AAC/C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,+DAAiB;AAC7B;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU,gBAAgB,yDAAW;AACzC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA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","file":"default~paginator-paginator-module-ngfactory~table-table-module-ngfactory-es2015.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, ChangeDetectorRef, Input, TemplateRef, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TsButtonModule } from '@terminus/ui-button';\nimport { TsMenuModule } from '@terminus/ui-menu';\nimport { TsOptionModule } from '@terminus/ui-option';\nimport { TsSelectionListModule } from '@terminus/ui-selection-list';\nimport { TsTooltipModule } from '@terminus/ui-tooltip';\nimport { coerceNumberProperty } from '@terminus/ngx-tools/coercion';\nimport { inputHasChanged } from '@terminus/ngx-tools/utilities';\n\n/**\n * Define the default count of records per page\n */\nconst DEFAULT_RECORDS_PER_PAGE = 10;\n/**\n * Default max records before message is shown\n */\nconst DEFAULT_MAX_PREFERRED_RECORDS = 100;\n/**\n * Define the default options for the records per page select menu\n */\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst DEFAULT_RECORDS_PER_PAGE_OPTIONS = [10, 20, 50];\n/**\n * A paginator component\n *\n * @example\n * <ts-paginator\n *              currentPageIndex=\"1\"\n *              firstPageTooltip=\"View first results\"\n *              [isSimpleMode]=\"true\"\n *              [isZeroBased]=\"true\"\n *              lastPageTooltip=\"View last results\"\n *              maxPreferredRecords=\"100\"\n *              menuLocation=\"below\"\n *              nextPageTooltip=\"View next results\"\n *              [paginatorMessageTemplate]=\"myTemplate\"\n *              previousPageTooltip=\"View previous results\"\n *              recordCountTooHighMessage=\"Please refine your filters.\"\n *              recordsPerPageChoices=\"[10, 20, 50]\"\n *              [showRecordsPerPageSelector]=\"true\"\n *              totalRecords=\"1450\"\n *              (pageSelect)=\"myMethod($event)\"\n *              (recordsPerPageChange)=\"myMethod($event)\"\n * ></ts-paginator>\n *\n * <ng-template #myTemplate let-message>\n *   <strong>{{ message }}</strong>\n *   <a href=\"/faq\">Learn more</a>\n * </ng-template>\n *\n * <example-url>https://getterminus.github.io/ui-demos-release/components/paginator</example-url>\n */\nlet TsPaginatorComponent = class TsPaginatorComponent {\n    constructor(changeDetectorRef) {\n        this.changeDetectorRef = changeDetectorRef;\n        /**\n         * Define the default message to show when too many records are returned\n         */\n        this.DEFAULT_HIGH_RECORD_MESSAGE = `That's a lot of results! Try refining your filters for better results.`;\n        /**\n         * This does not allow user input in selection list\n         */\n        this.allowUserInput = false;\n        /**\n         * Define the icon for the 'first page' button\n         */\n        this.firstPageIcon = 'first_page';\n        /**\n         * Set up a form control to pass to {@link TsSelectionListComponent}\n         */\n        this.pageControl = new FormControl();\n        /**\n         * Define the icon for the 'previous page' button\n         */\n        this.previousPageIcon = 'keyboard_arrow_left';\n        /**\n         * Define the icon for the 'next page' button\n         */\n        this.nextPageIcon = 'keyboard_arrow_right';\n        /**\n         * Define the icon for the 'last page' button\n         */\n        this.lastPageIcon = 'last_page';\n        this._recordsPerPage = DEFAULT_RECORDS_PER_PAGE;\n        /**\n         * Define the template context for the record count message\n         */\n        this.templateContext = { $implicit: this.DEFAULT_HIGH_RECORD_MESSAGE };\n        /**\n         * Define if the paging is 0-based or 1-based\n         */\n        this.isZeroBased = true;\n        /**\n         * Define the tooltip message for the first page tooltip\n         */\n        this.firstPageTooltip = 'View the first results';\n        /**\n         * Define the tooltip message for the previous page tooltip\n         */\n        this.previousPageTooltip = 'View the previous results';\n        /**\n         * Define the tooltip message for the next page tooltip\n         */\n        this.nextPageTooltip = 'View the next results';\n        /**\n         * Define the tooltip message for the last page tooltip\n         */\n        this.lastPageTooltip = 'View the last results';\n        this._currentPageIndex = 0;\n        /**\n         * Define how many pages exist to show a prompt about better filtering\n         */\n        this.maxPreferredRecords = DEFAULT_MAX_PREFERRED_RECORDS;\n        /**\n         * Define the menu location (open up or open down)\n         */\n        this.menuLocation = 'above';\n        /**\n         * Define the color theme\n         */\n        this.theme = 'accent';\n        this._totalRecords = 0;\n        /**\n         * Define the message to show when too many pages exist\n         */\n        this.recordCountTooHighMessage = this.DEFAULT_HIGH_RECORD_MESSAGE;\n        /**\n         * Define how many records are shown per page\n         */\n        this.recordsPerPageChoices = DEFAULT_RECORDS_PER_PAGE_OPTIONS;\n        /**\n         * Define the label for the records per page select\n         */\n        this.recordsSelectLabel = 'Per page';\n        /**\n         * Define if the records per page select menu should be visible\n         */\n        this.showRecordsPerPageSelector = true;\n        /**\n         * Determine if the paginator should be in 'simple' mode\n         *\n         * Simple mode: Page jump dropdown is converted to plain text, jump to last page button removed.\n         */\n        this.isSimpleMode = false;\n        /**\n         * Emit a page selected event\n         */\n        this.pageSelect = new EventEmitter();\n        /**\n         * Emit a change event when the records per page changes\n         */\n        this.recordsPerPageChange = new EventEmitter();\n        this.pageControl.setValue([this.recordsPerPage]);\n    }\n    /**\n     * Define the amount of records show per page\n     *\n     * @param value\n     */\n    // public recordsPerPage: number = DEFAULT_RECORDS_PER_PAGE;\n    set recordsPerPage(value) {\n        this._recordsPerPage = value;\n        this.pageControl.setValue([value]);\n    }\n    get recordsPerPage() {\n        return this._recordsPerPage;\n    }\n    /**\n     * Getter to return the index of the first page\n     */\n    get firstPageIndex() {\n        return this.isZeroBased ? 0 : 1;\n    }\n    /**\n     * Getter to return the index of the next page\n     */\n    get nextPageIndex() {\n        return this.currentPageIndex - this.firstPageIndex;\n    }\n    /**\n     * Getter to return the index of the last page\n     */\n    get lastPageIndex() {\n        return this.isZeroBased ? (this.pagesArray.length - 1) : this.pagesArray.length;\n    }\n    /**\n     * Define the current page\n     *\n     * @param page\n     */\n    set currentPageIndex(page) {\n        this._currentPageIndex = coerceNumberProperty(page);\n    }\n    get currentPageIndex() {\n        return this._currentPageIndex;\n    }\n    /**\n     * Define the total number of records\n     *\n     * @param records\n     */\n    set totalRecords(records) {\n        this._totalRecords = coerceNumberProperty(records);\n    }\n    get totalRecords() {\n        return this._totalRecords;\n    }\n    /**\n     * Initialize after the view is initialized\n     */\n    ngAfterViewInit() {\n        this.initialize();\n    }\n    /**\n     * Initialize on any changes\n     *\n     * @param changes - The object containing all changes since last cycle\n     */\n    ngOnChanges(changes) {\n        // If the record count changed, assign the new value to the template context\n        // istanbul ignore else\n        if (inputHasChanged(changes, 'recordCountTooHighMessage')) {\n            this.templateContext.$implicit = this.recordCountTooHighMessage;\n        }\n        // If the zeroBased input changes, update the current page index\n        if (inputHasChanged(changes, 'isZeroBased')) {\n            this.currentPageIndex = changes.isZeroBased.currentValue ? 0 : 1;\n        }\n        this.initialize();\n    }\n    /**\n     * Set up initial resources\n     */\n    initialize() {\n        this.pagesArray = this.createPagesArray(this.totalRecords, this.recordsPerPage, this.isZeroBased);\n        this.currentPageLabel = this.createCurrentPageLabel(this.currentPageIndex, this.pagesArray, this.totalRecords);\n        // Change to the current page\n        // istanbul ignore else\n        if (this.totalRecords > 0) {\n            this.changePage(this.currentPageIndex, -1, this.pagesArray);\n        }\n    }\n    /**\n     * Perform tasks when the current page is changed\n     *\n     * @param page - The selected page\n     */\n    currentPageChanged(page) {\n        // Set the current page\n        this.currentPageIndex = coerceNumberProperty(page.value);\n        // Create a new label for the menu\n        this.currentPageLabel =\n            this.createCurrentPageLabel(this.currentPageIndex, this.pagesArray, this.totalRecords);\n        // Emit an event\n        this.pageSelect.emit(page);\n        this.changeDetectorRef.detectChanges();\n    }\n    /**\n     * Manually trigger a page change event from a number\n     *\n     * @param destinationPage - The selected page number\n     * @param currentPage - The current page number\n     * @param pages - The collection of pages\n     */\n    changePage(destinationPage, currentPage, pages) {\n        const destinationIsValid = destinationPage >= this.firstPageIndex && destinationPage <= pages.length;\n        const notAlreadyOnPage = destinationPage !== currentPage;\n        // istanbul ignore else\n        if (destinationIsValid && notAlreadyOnPage) {\n            const foundPage = pages.find((page) => page.value === destinationPage);\n            // istanbul ignore else\n            if (foundPage) {\n                this.currentPageChanged(foundPage);\n            }\n        }\n    }\n    /**\n     * Check if a page is the first page\n     *\n     * @param page - The number of the current page\n     * @returns A boolean representing if this is the first page\n     */\n    isFirstPage(page) {\n        return coerceNumberProperty(page) === this.firstPageIndex;\n    }\n    /**\n     * Check if a page is the last page\n     *\n     * @param page - The number of the current page\n     * @returns A boolean representing if this is the last page\n     */\n    isLastPage(page) {\n        if (this.pagesArray) {\n            return page === (this.pagesArray.length - (this.isZeroBased ? 1 : 0));\n        }\n        return false;\n    }\n    /**\n     * Check if the next button is disabled\n     *\n     * @param page - The number of the current page\n     * @returns A boolena representing if the button is disabled.\n     */\n    isNextButtonDisabled(page) {\n        if (this.isNextDisabled === undefined) {\n            return this.isLastPage(page) || !this.pagesArray || !this.pagesArray.length;\n        }\n        return this.isNextDisabled;\n    }\n    /**\n     * Determine if the string exists\n     *\n     * @param message - The help message when too many results are returned\n     * @param max - The max number of records before the message should be shown\n     * @param totalRecords - The number of records\n     * @returns A boolean representing if the message should be shown\n     */\n    shouldShowRecordsMessage(message, max, totalRecords) {\n        if (totalRecords > max) {\n            return !!((message && message.length > 0));\n        }\n        return false;\n    }\n    /**\n     * Re-initialize the paginator when records per page changes\n     *\n     * @param selection - The selected records-per-page count\n     */\n    recordsPerPageUpdated(selection) {\n        this.recordsPerPage = selection.value;\n        this.currentPageIndex = this.firstPageIndex;\n        this.recordsPerPageChange.emit(selection.value);\n        this.initialize();\n    }\n    /**\n     * Determine if the page select menu should be disabled\n     *\n     * @param pagesCount - The number of pages\n     * @returns A boolean representing if the menu should be disabled\n     */\n    menuIsDisabled(pagesCount) {\n        const moreThanOne = 2;\n        return coerceNumberProperty(pagesCount) < moreThanOne;\n    }\n    /**\n     * Determine if the records-per-page menu should be disabled\n     *\n     * @param totalRecords - The total number of records\n     * @param recordsPerPageChoices - The array of counts representing how many records may be show\n     * per page\n     * @returns A boolean representing if the records select should be disabled\n     */\n    disableRecordsPerPage(totalRecords, recordsPerPageChoices) {\n        const lowestPerPage = Math.min.apply(Math, recordsPerPageChoices);\n        return totalRecords < lowestPerPage;\n    }\n    /**\n     * Create a new label based on the current page\n     *\n     * @param currentPage - The current page\n     * @param pages - The array of all pages\n     * @param totalRecords - The number of total records\n     * @returns The string to use as the current page label\n     */\n    createCurrentPageLabel(currentPage, pages, totalRecords) {\n        const findPage = (allPages, index) => pages.find((page) => page.value === index);\n        let foundPage = findPage(pages, currentPage);\n        // If no found page, try the previous page\n        if (!foundPage) {\n            foundPage = findPage(pages, currentPage - 1);\n            // istanbul ignore else\n            if (foundPage) {\n                // If we found the previous page,\n                // save the current page change back to the primary variable\n                this.currentPageIndex -= 1;\n            }\n        }\n        // This may be the case if there are no records\n        if (!foundPage || !foundPage.name) {\n            return this.createDefaultPageLabel(currentPage, totalRecords);\n        }\n        // '1 - 10 of 243'\n        return `${foundPage.name} of ${totalRecords}`;\n    }\n    /**\n     * Create a default label based on the records per page and total records\n     *\n     * @param currentPage - The current page\n     * @param totalRecords - The number of total records\n     * @returns The string to use as the current page label\n     */\n    createDefaultPageLabel(currentPage, totalRecords) {\n        const start = this.isZeroBased\n            ? (currentPage * this.recordsPerPage)\n            : (currentPage - 1) * this.recordsPerPage;\n        const end = start + this.recordsPerPage;\n        // '1 - 10'\n        if (this.isSimpleMode && !totalRecords) {\n            return `${start + 1} - ${end}`;\n        }\n        // '1 - 10 of 243'\n        return `${start + 1} - ${end} of ${totalRecords}`;\n    }\n    /**\n     * Create an array containing objects that represent each available page of records\n     *\n     * @param total - The total records remaining\n     * @param perPage - How many records are shown per page\n     * @param zeroBased - If the pages are based on a `0` index rather than `1`\n     * @returns The array representing all possible pages of records\n     */\n    createPagesArray(total, perPage, zeroBased) {\n        const paginatorArray = [];\n        let recordsRemaining = total;\n        let page = zeroBased ? 0 : 1;\n        // If there are no records just return an empty array\n        if (!recordsRemaining || recordsRemaining < 1) {\n            return paginatorArray;\n        }\n        while (recordsRemaining >= perPage) {\n            // We are creating the text for the range here so we are dealing with records based on 1\n            // (while the pages themselves may be based on 0 or 1)\n            const pageNumber = (page < 1) ? 1 : page;\n            const rangeStart = (pageNumber * perPage) - (perPage - 1);\n            const rangeEnd = pageNumber * perPage;\n            const pageValue = paginatorArray.length + 1;\n            // Create a page object\n            paginatorArray.push({\n                name: `${rangeStart} - ${rangeEnd}`,\n                // The value is zero based\n                value: (pageValue - (zeroBased ? 1 : 0)),\n            });\n            // Update the remaining count\n            recordsRemaining -= perPage;\n            // Set up for next loop if enough records exist\n            if (recordsRemaining >= perPage) {\n                page = pageValue + 1;\n            }\n        }\n        // If any records remain, add the partial group as the last page in the array\n        if (recordsRemaining > 0) {\n            let name;\n            let value;\n            const pageNumber = (page < 1) ? 1 : page;\n            const pageValue = paginatorArray.length + 1;\n            if (paginatorArray.length > 0) {\n                name = `${(pageNumber * perPage) + 1} - ${(pageNumber * perPage) + recordsRemaining}`;\n                value = (pageValue - (zeroBased ? 1 : 0));\n            }\n            else {\n                name = `${pageNumber} - ${recordsRemaining}`;\n                value = (pageValue - (zeroBased ? 1 : 0));\n            }\n            paginatorArray.push({\n                name,\n                value,\n            });\n        }\n        return paginatorArray.sort((a, b) => {\n            const first = coerceNumberProperty(a.value);\n            const second = coerceNumberProperty(b.value);\n            return (first < second) ? -1 : 1;\n        });\n    }\n    /**\n     * Tracking method for the pagesArray ngFor\n     *\n     * @param index - The current index\n     * @param page - The page object\n     * @returns The value to be used\n     */\n    trackPagesArray(index, page) {\n        return page ? page.name : undefined;\n    }\n};\nTsPaginatorComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"isZeroBased\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"firstPageTooltip\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"previousPageTooltip\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"nextPageTooltip\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"lastPageTooltip\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsPaginatorComponent.prototype, \"currentPageIndex\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], TsPaginatorComponent.prototype, \"maxPreferredRecords\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsPaginatorComponent.prototype, \"menuLocation\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", TemplateRef)\n], TsPaginatorComponent.prototype, \"paginatorMessageTemplate\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsPaginatorComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [Number])\n], TsPaginatorComponent.prototype, \"totalRecords\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], TsPaginatorComponent.prototype, \"recordCountTooHighMessage\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array)\n], TsPaginatorComponent.prototype, \"recordsPerPageChoices\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"recordsSelectLabel\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"showRecordsPerPageSelector\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"isSimpleMode\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], TsPaginatorComponent.prototype, \"isNextDisabled\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"pageSelect\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], TsPaginatorComponent.prototype, \"recordsPerPageChange\", void 0);\nTsPaginatorComponent = __decorate([\n    Component({\n        selector: 'ts-paginator',\n        template: \"<div\\n  class=\\\"c-paginator qa-paginator\\\"\\n  [class.c-paginator--simple-mode]=\\\"isSimpleMode\\\"\\n>\\n\\n<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n    <ts-selection-list\\n      class=\\\"qa-paginator-per-page-select\\\"\\n      *ngIf=\\\"recordsPerPageChoices && showRecordsPerPageSelector\\\"\\n      [label]=\\\"recordsSelectLabel\\\"\\n      [isDisabled]=\\\"disableRecordsPerPage(totalRecords, recordsPerPageChoices)\\\"\\n      [noValidationOrHint]=\\\"true\\\"\\n      [formControl]=\\\"pageControl\\\"\\n      [allowUserInput]=\\\"allowUserInput\\\"\\n      (selectionChange)=\\\"recordsPerPageUpdated($event)\\\"\\n    >\\n      <ts-option\\n        [value]=\\\"count\\\"\\n        *ngFor=\\\"let count of recordsPerPageChoices\\\"\\n      >{{ count }}</ts-option>\\n    </ts-selection-list>\\n\\n\\n    <ts-tooltip [tooltipValue]=\\\"isFirstPage(currentPageIndex) ? '' : firstPageTooltip\\\">\\n      <ts-button\\n        class=\\\"qa-paginator-first-page-button\\\"\\n        [theme]=\\\"theme\\\"\\n        [iconName]=\\\"firstPageIcon\\\"\\n        [isDisabled]=\\\"isFirstPage(currentPageIndex)\\\"\\n        (clicked)=\\\"changePage(firstPageIndex, currentPageIndex, pagesArray)\\\"\\n      ></ts-button>\\n    </ts-tooltip>\\n\\n\\n    <ts-tooltip [tooltipValue]=\\\"isFirstPage(currentPageIndex) ? '' : previousPageTooltip\\\">\\n      <ts-button\\n        class=\\\"qa-paginator-previous-page-button\\\"\\n        [theme]=\\\"theme\\\"\\n        [iconName]=\\\"previousPageIcon\\\"\\n        [isDisabled]=\\\"isFirstPage(currentPageIndex)\\\"\\n        (clicked)=\\\"changePage(currentPageIndex - 1, currentPageIndex, pagesArray)\\\"\\n      ></ts-button>\\n    </ts-tooltip>\\n\\n\\n    <ts-menu\\n      *ngIf=\\\"!isSimpleMode\\\"\\n      class=\\\"qa-paginator-current-page-menu\\\"\\n      [theme]=\\\"theme\\\"\\n      [menuItemsTemplate]=\\\"menuItems\\\"\\n      [menuPositionY]=\\\"menuLocation\\\"\\n      [isDisabled]=\\\"menuIsDisabled(pagesArray?.length)\\\"\\n      [ngClass]=\\\"{'disabled': menuIsDisabled(pagesArray?.length)}\\\"\\n    >{{ currentPageLabel }}</ts-menu>\\n\\n    <div\\n      class=\\\"c-paginator__current-page\\\"\\n      *ngIf=\\\"isSimpleMode\\\"\\n    >{{ currentPageLabel }}</div>\\n\\n    <ts-tooltip [tooltipValue]=\\\"isNextButtonDisabled(currentPageIndex) ? '' : nextPageTooltip\\\">\\n      <ts-button\\n        class=\\\"qa-paginator-next-page-button\\\"\\n        [theme]=\\\"theme\\\"\\n        [iconName]=\\\"nextPageIcon\\\"\\n        [isDisabled]=\\\"isNextButtonDisabled(currentPageIndex)\\\"\\n        (clicked)=\\\"changePage(currentPageIndex + 1, currentPageIndex, pagesArray)\\\"\\n      ></ts-button>\\n    </ts-tooltip>\\n\\n\\n  <ts-tooltip\\n    [tooltipValue]=\\\"isNextButtonDisabled(currentPageIndex) ? '' : lastPageTooltip\\\"\\n    *ngIf=\\\"!isSimpleMode\\\"\\n  >\\n    <ts-button\\n        class=\\\"qa-paginator-last-page-button\\\"\\n        [theme]=\\\"theme\\\"\\n        [iconName]=\\\"lastPageIcon\\\"\\n        [isDisabled]=\\\"isNextButtonDisabled(currentPageIndex)\\\"\\n        (clicked)=\\\"changePage(lastPageIndex, currentPageIndex, pagesArray)\\\"\\n      ></ts-button>\\n    </ts-tooltip>\\n  </div>\\n\\n  <div\\n    class=\\\"c-paginator__message qa-paginator-message\\\"\\n    *ngIf=\\\"shouldShowRecordsMessage(recordCountTooHighMessage, maxPreferredRecords, totalRecords)\\\"\\n  >\\n    <ng-container\\n      [ngTemplateOutlet]=\\\"paginatorMessageTemplate || defaultPaginatorMessageTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"templateContext\\\"\\n    ></ng-container>\\n  </div>\\n\\n</div>\\n\\n\\n<ng-template #menuItems>\\n  <ts-button\\n    *ngFor=\\\"let page of pagesArray; trackBy: trackPagesArray\\\"\\n    (clicked)=\\\"currentPageChanged(page)\\\"\\n  >\\n    {{ page.name }}\\n  </ts-button>\\n</ng-template>\\n\\n<ng-template #defaultPaginatorMessageTemplate let-message>\\n  {{ message }}\\n</ng-template>\\n\",\n        host: { class: 'ts-paginator' },\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        encapsulation: ViewEncapsulation.None,\n        exportAs: 'tsPaginator',\n        styles: [\":root{--swift-ease-out-duration:var(--ts-animation-time-duration-400);--swift-ease-out-timing-function:cubic-bezier(.25, .8, .25, 1);--swift-ease-in-duration:var(--ts-animation-time-duration-300);--swift-ease-in-timing-function:cubic-bezier(.55, 0, .55, .2)}.cdk-drag{position:relative}.cdk-drag:not(.cdk-drag-placeholder){transition:transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag .cdk-drag-handle{color:#cecdd1;cursor:ns-resize;position:absolute;right:8px}.cdk-drag.cdk-drag-preview{--shadow:0 5px 5px -3px rgba(0, 0, 0, .2),0 8px 10px 1px rgba(0, 0, 0, .14),0 3px 14px 2px rgba(0, 0, 0, .12);background-color:#fafafa;box-shadow:var(--shadow);min-height:50px;padding:0!important}.cdk-drag.cdk-drag-preview .c-checkbox{margin-left:16px}.cdk-drag-placeholder{--drop-bg:#cce8d5;--drop-border:#7fd09c;background:var(--drop-bg);border:2px dotted var(--drop-border);cursor:ns-resize;transition:transform 250ms cubic-bezier(0,0,.2,1)}.u-visually-hidden{border:0;-webkit-clip-path:rect(0,0,0,0);clip-path:rect(0,0,0,0);display:block;height:1px;margin:-1px;overflow:hidden;padding:0;pointer-events:none;position:absolute;visibility:hidden;width:1px}.ts-paginator{display:inline-block}.ts-paginator :not(.mat-form-field-label-wrapper){box-sizing:border-box}.ts-paginator h1,.ts-paginator h2,.ts-paginator h3,.ts-paginator h4,.ts-paginator h5,.ts-paginator p{margin:unset}.ts-paginator .c-paginator{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;letter-spacing:.01em;font-weight:400;display:inline-block}.ts-paginator .c-paginator:not(.c-button):not(.c-input):not(.c-select):not(.ts-checkbox){line-height:20px}.c-paginator .c-paginator__message{font-family:Roboto,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;letter-spacing:.02em;color:#757575;margin:.4em 0;text-align:right}.c-paginator .c-paginator__current-page{display:inline-block;line-height:2.6em;margin-right:4px;margin-top:4px;text-align:center;width:8em}.c-paginator .ts-selection-list{width:var(--ts-space-base-large5)}.c-paginator .ts-button,.c-paginator .ts-selection-list{margin-right:4px}\"]\n    }),\n    __metadata(\"design:paramtypes\", [ChangeDetectorRef])\n], TsPaginatorComponent);\n\nlet TsPaginatorModule = class TsPaginatorModule {\n};\nTsPaginatorModule = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            FormsModule,\n            FlexLayoutModule,\n            ReactiveFormsModule,\n            TsButtonModule,\n            TsMenuModule,\n            TsOptionModule,\n            TsSelectionListModule,\n            TsTooltipModule,\n        ],\n        exports: [TsPaginatorComponent],\n        declarations: [TsPaginatorComponent],\n    })\n], TsPaginatorModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TsPaginatorComponent, TsPaginatorModule };\n//# sourceMappingURL=terminus-ui-paginator.js.map\n","<div\n  class=\"c-paginator qa-paginator\"\n  [class.c-paginator--simple-mode]=\"isSimpleMode\"\n>\n\n<div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n    <ts-selection-list\n      class=\"qa-paginator-per-page-select\"\n      *ngIf=\"recordsPerPageChoices && showRecordsPerPageSelector\"\n      [label]=\"recordsSelectLabel\"\n      [isDisabled]=\"disableRecordsPerPage(totalRecords, recordsPerPageChoices)\"\n      [noValidationOrHint]=\"true\"\n      [formControl]=\"pageControl\"\n      [allowUserInput]=\"allowUserInput\"\n      (selectionChange)=\"recordsPerPageUpdated($event)\"\n    >\n      <ts-option\n        [value]=\"count\"\n        *ngFor=\"let count of recordsPerPageChoices\"\n      >{{ count }}</ts-option>\n    </ts-selection-list>\n\n\n    <ts-tooltip [tooltipValue]=\"isFirstPage(currentPageIndex) ? '' : firstPageTooltip\">\n      <ts-button\n        class=\"qa-paginator-first-page-button\"\n        [theme]=\"theme\"\n        [iconName]=\"firstPageIcon\"\n        [isDisabled]=\"isFirstPage(currentPageIndex)\"\n        (clicked)=\"changePage(firstPageIndex, currentPageIndex, pagesArray)\"\n      ></ts-button>\n    </ts-tooltip>\n\n\n    <ts-tooltip [tooltipValue]=\"isFirstPage(currentPageIndex) ? '' : previousPageTooltip\">\n      <ts-button\n        class=\"qa-paginator-previous-page-button\"\n        [theme]=\"theme\"\n        [iconName]=\"previousPageIcon\"\n        [isDisabled]=\"isFirstPage(currentPageIndex)\"\n        (clicked)=\"changePage(currentPageIndex - 1, currentPageIndex, pagesArray)\"\n      ></ts-button>\n    </ts-tooltip>\n\n\n    <ts-menu\n      *ngIf=\"!isSimpleMode\"\n      class=\"qa-paginator-current-page-menu\"\n      [theme]=\"theme\"\n      [menuItemsTemplate]=\"menuItems\"\n      [menuPositionY]=\"menuLocation\"\n      [isDisabled]=\"menuIsDisabled(pagesArray?.length)\"\n      [ngClass]=\"{'disabled': menuIsDisabled(pagesArray?.length)}\"\n    >{{ currentPageLabel }}</ts-menu>\n\n    <div\n      class=\"c-paginator__current-page\"\n      *ngIf=\"isSimpleMode\"\n    >{{ currentPageLabel }}</div>\n\n    <ts-tooltip [tooltipValue]=\"isNextButtonDisabled(currentPageIndex) ? '' : nextPageTooltip\">\n      <ts-button\n        class=\"qa-paginator-next-page-button\"\n        [theme]=\"theme\"\n        [iconName]=\"nextPageIcon\"\n        [isDisabled]=\"isNextButtonDisabled(currentPageIndex)\"\n        (clicked)=\"changePage(currentPageIndex + 1, currentPageIndex, pagesArray)\"\n      ></ts-button>\n    </ts-tooltip>\n\n\n  <ts-tooltip\n    [tooltipValue]=\"isNextButtonDisabled(currentPageIndex) ? '' : lastPageTooltip\"\n    *ngIf=\"!isSimpleMode\"\n  >\n    <ts-button\n        class=\"qa-paginator-last-page-button\"\n        [theme]=\"theme\"\n        [iconName]=\"lastPageIcon\"\n        [isDisabled]=\"isNextButtonDisabled(currentPageIndex)\"\n        (clicked)=\"changePage(lastPageIndex, currentPageIndex, pagesArray)\"\n      ></ts-button>\n    </ts-tooltip>\n  </div>\n\n  <div\n    class=\"c-paginator__message qa-paginator-message\"\n    *ngIf=\"shouldShowRecordsMessage(recordCountTooHighMessage, maxPreferredRecords, totalRecords)\"\n  >\n    <ng-container\n      [ngTemplateOutlet]=\"paginatorMessageTemplate || defaultPaginatorMessageTemplate\"\n      [ngTemplateOutletContext]=\"templateContext\"\n    ></ng-container>\n  </div>\n\n</div>\n\n\n<ng-template #menuItems>\n  <ts-button\n    *ngFor=\"let page of pagesArray; trackBy: trackPagesArray\"\n    (clicked)=\"currentPageChanged(page)\"\n  >\n    {{ page.name }}\n  </ts-button>\n</ng-template>\n\n<ng-template #defaultPaginatorMessageTemplate let-message>\n  {{ message }}\n</ng-template>\n","<span #tooltip=\"matTooltip\"\n  class=\"c-tooltip qa-tooltip\"\n  [matTooltip]=\"tooltipValue\"\n  [matTooltipPosition]=\"tooltipPosition\"\n  [ngClass]=\"{'c-tooltip--underline': hasUnderline}\"\n>\n  <ng-content></ng-content>\n</span>\n"],"sourceRoot":"webpack:///"}